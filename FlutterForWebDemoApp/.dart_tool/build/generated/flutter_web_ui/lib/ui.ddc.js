define(['dart_sdk'], function(dart_sdk) {
  'use strict';
  const core = dart_sdk.core;
  const async = dart_sdk.async;
  const html = dart_sdk.html;
  const typed_data = dart_sdk.typed_data;
  const _native_typed_data = dart_sdk._native_typed_data;
  const convert = dart_sdk.convert;
  const _interceptors = dart_sdk._interceptors;
  const math = dart_sdk.math;
  const _js_helper = dart_sdk._js_helper;
  const _internal = dart_sdk._internal;
  const js_util = dart_sdk.js_util;
  const collection = dart_sdk.collection;
  const developer = dart_sdk.developer;
  const js = dart_sdk.js;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const src__engine = Object.create(dart.library);
  const ui = Object.create(dart.library);
  const $response = dartx.response;
  const $asByteData = dartx.asByteData;
  const $target = dartx.target;
  const $console = dartx.console;
  const $buffer = dartx.buffer;
  const $position = dartx.position;
  const $ceil = dartx.ceil;
  const $width = dartx.width;
  const $height = dartx.height;
  const $context2D = dartx.context2D;
  const $append = dartx.append;
  const $length = dartx.length;
  const $_get = dartx._get;
  const $remove = dartx.remove;
  const $clear = dartx.clear;
  const $transformOrigin = dartx.transformOrigin;
  const $transform = dartx.transform;
  const $floor = dartx.floor;
  const $toDouble = dartx.toDouble;
  const $abs = dartx.abs;
  const $isNotEmpty = dartx.isNotEmpty;
  const $clone = dartx.clone;
  const $drawImageScaledFromSource = dartx.drawImageScaledFromSource;
  const $fillText = dartx.fillText;
  const $whiteSpace = dartx.whiteSpace;
  const $overflow = dartx.overflow;
  const $textOverflow = dartx.textOverflow;
  const $overflowY = dartx.overflowY;
  const $add = dartx.add;
  const $isEmpty = dartx.isEmpty;
  const $removeLast = dartx.removeLast;
  const $_set = dartx._set;
  const $asUint8List = dartx.asUint8List;
  const $noSuchMethod = dartx.noSuchMethod;
  const $leftShift = dartx['<<'];
  const $isNaN = dartx.isNaN;
  const $isFinite = dartx.isFinite;
  const $top = dartx.top;
  const $right = dartx.right;
  const $bottom = dartx.bottom;
  const $left = dartx.left;
  const $backgroundColor = dartx.backgroundColor;
  const $setAttribute = dartx.setAttribute;
  const $filter = dartx.filter;
  const $border = dartx.border;
  const $last = dartx.last;
  const $addAll = dartx.addAll;
  const $classes = dartx.classes;
  const $parent = dartx.parent;
  const $createElement = dartx.createElement;
  const $appendText = dartx.appendText;
  const $setProperty = dartx.setProperty;
  const $text = dartx.text;
  const $children = dartx.children;
  const $title = dartx.title;
  const $head = dartx.head;
  const $querySelectorAll = dartx.querySelectorAll;
  const $hasAttribute = dartx.hasAttribute;
  const $onResize = dartx.onResize;
  const $singleWhere = dartx.singleWhere;
  const $outerHtml = dartx.outerHtml;
  const $trim = dartx.trim;
  const $state = dartx.state;
  const $backgroundImage = dartx.backgroundImage;
  const $borderTopLeftRadius = dartx.borderTopLeftRadius;
  const $borderTopRightRadius = dartx.borderTopRightRadius;
  const $borderBottomRightRadius = dartx.borderBottomRightRadius;
  const $borderBottomLeftRadius = dartx.borderBottomLeftRadius;
  const $toInt = dartx.toInt;
  const $backgroundRepeat = dartx.backgroundRepeat;
  const $backgroundSize = dartx.backgroundSize;
  const $onLoad = dartx.onLoad;
  const $onError = dartx.onError;
  const $addEventListener = dartx.addEventListener;
  const $removeEventListener = dartx.removeEventListener;
  const $codeUnits = dartx.codeUnits;
  const $first = dartx.first;
  const $forEach = dartx.forEach;
  const $client = dartx.client;
  const $runtimeType = dartx.runtimeType;
  const $times = dartx['*'];
  const $toString = dartx.toString;
  const $join = dartx.join;
  const $fontSize = dartx.fontSize;
  const $attributes = dartx.attributes;
  const $touchAction = dartx.touchAction;
  const $scrollTop = dartx.scrollTop;
  const $scrollLeft = dartx.scrollLeft;
  const $overflowX = dartx.overflowX;
  const $color = dartx.color;
  const $outline = dartx.outline;
  const $getAttribute = dartx.getAttribute;
  const $contains = dartx.contains;
  const $containsKey = dartx.containsKey;
  const $offset = dartx.offset;
  const $keys = dartx.keys;
  const $toList = dartx.toList;
  const $transition = dartx.transition;
  const $boxShadow = dartx.boxShadow;
  const $load = dartx.load;
  const $visibility = dartx.visibility;
  const $fontFamily = dartx.fontFamily;
  const $fontStyle = dartx.fontStyle;
  const $fontWeight = dartx.fontWeight;
  const $offsetWidth = dartx.offsetWidth;
  const $map = dartx.map;
  const $innerHtml = dartx.innerHtml;
  const $toLowerCase = dartx.toLowerCase;
  const $values = dartx.values;
  const $sort = dartx.sort;
  const $letterSpacing = dartx.letterSpacing;
  const $wordSpacing = dartx.wordSpacing;
  const $textDecoration = dartx.textDecoration;
  const $lineHeight = dartx.lineHeight;
  const $display = dartx.display;
  const $flexDirection = dartx.flexDirection;
  const $alignItems = dartx.alignItems;
  const $margin = dartx.margin;
  const $padding = dartx.padding;
  const $flex = dartx.flex;
  const $substring = dartx.substring;
  const $getClientRects = dartx.getClientRects;
  const $removeAt = dartx.removeAt;
  const $removeRange = dartx.removeRange;
  const $rightShift = dartx['>>'];
  const $codeUnitAt = dartx.codeUnitAt;
  const $onBlur = dartx.onBlur;
  const $onSelectionChange = dartx.onSelectionChange;
  const $onInput = dartx.onInput;
  const $clamp = dartx.clamp;
  const $isInfinite = dartx.isInfinite;
  const $requestAnimationFrame = dartx.requestAnimationFrame;
  const $borderRadius = dartx.borderRadius;
  const $sublist = dartx.sublist;
  const $zIndex = dartx.zIndex;
  const $modulo = dartx['%'];
  const $deltaX = dartx.deltaX;
  const $deltaY = dartx.deltaY;
  const $deltaMode = dartx.deltaMode;
  const $truncate = dartx.truncate;
  const $font = dartx.font;
  const $animationFrame = dartx.animationFrame;
  const $isNegative = dartx.isNegative;
  const $single = dartx.single;
  const $iterator = dartx.iterator;
  const $compareTo = dartx.compareTo;
  const $hashCode = dartx.hashCode;
  const $opacity = dartx.opacity;
  const $toStringAsFixed = dartx.toStringAsFixed;
  const $round = dartx.round;
  const $toRadixString = dartx.toRadixString;
  const $padLeft = dartx.padLeft;
  const $location = dartx.location;
  const $pushState = dartx.pushState;
  const $replaceState = dartx.replaceState;
  const $startsWith = dartx.startsWith;
  const $putIfAbsent = dartx.putIfAbsent;
  const $cast = dartx.cast;
  const $fold = dartx.fold;
  const $textDecorationColor = dartx.textDecorationColor;
  const $textAlign = dartx.textAlign;
  const $direction = dartx.direction;
  let JSArrayOfElement = () => (JSArrayOfElement = dart.constFn(_interceptors.JSArray$(html.Element)))();
  let VoidTobool = () => (VoidTobool = dart.constFn(dart.fnType(core.bool, [])))();
  let JSArrayOf_SaveStackEntry = () => (JSArrayOf_SaveStackEntry = dart.constFn(_interceptors.JSArray$(src__engine._SaveStackEntry)))();
  let ListOf_SaveClipEntry = () => (ListOf_SaveClipEntry = dart.constFn(core.List$(src__engine._SaveClipEntry)))();
  let JSArrayOf_SaveClipEntry = () => (JSArrayOf_SaveClipEntry = dart.constFn(_interceptors.JSArray$(src__engine._SaveClipEntry)))();
  let ByteDataToNull = () => (ByteDataToNull = dart.constFn(dart.fnType(core.Null, [typed_data.ByteData])))();
  let JSArrayOfLayer = () => (JSArrayOfLayer = dart.constFn(_interceptors.JSArray$(src__engine.Layer)))();
  let LinkedMapOfSymbol$dynamic = () => (LinkedMapOfSymbol$dynamic = dart.constFn(_js_helper.LinkedMap$(core.Symbol, dart.dynamic)))();
  let ListOfPersistedContainerSurface = () => (ListOfPersistedContainerSurface = dart.constFn(core.List$(ui.PersistedContainerSurface)))();
  let JSArrayOfOffset = () => (JSArrayOfOffset = dart.constFn(_interceptors.JSArray$(ui.Offset)))();
  let ListOfConic = () => (ListOfConic = dart.constFn(core.List$(src__engine.Conic)))();
  let JSArrayOf_SaveElementStackEntry = () => (JSArrayOf_SaveElementStackEntry = dart.constFn(_interceptors.JSArray$(src__engine._SaveElementStackEntry)))();
  let ListOfElement = () => (ListOfElement = dart.constFn(core.List$(html.Element)))();
  let VoidToNull = () => (VoidToNull = dart.constFn(dart.fnType(core.Null, [])))();
  let TimerToNull = () => (TimerToNull = dart.constFn(dart.fnType(core.Null, [async.Timer])))();
  let ElementTobool = () => (ElementTobool = dart.constFn(dart.fnType(core.bool, [html.Element])))();
  let JSArrayOfnum = () => (JSArrayOfnum = dart.constFn(_interceptors.JSArray$(core.num)))();
  let FutureOfvoid = () => (FutureOfvoid = dart.constFn(async.Future$(dart.void)))();
  let EventTodynamic = () => (EventTodynamic = dart.constFn(dart.fnType(dart.dynamic, [html.Event])))();
  let JSArrayOfList = () => (JSArrayOfList = dart.constFn(_interceptors.JSArray$(core.List)))();
  let CompleterOfFrameInfo = () => (CompleterOfFrameInfo = dart.constFn(async.Completer$(ui.FrameInfo)))();
  let EventToNull = () => (EventToNull = dart.constFn(dart.fnType(core.Null, [html.Event])))();
  let Uint8ListToNull = () => (Uint8ListToNull = dart.constFn(dart.fnType(core.Null, [typed_data.Uint8List])))();
  let ByteDataTovoid = () => (ByteDataTovoid = dart.constFn(dart.fnType(dart.void, [typed_data.ByteData])))();
  let FnToString = () => (FnToString = dart.constFn(dart.fnType(core.String, [ByteDataTovoid()])))();
  let IdentityMapOfint$bool = () => (IdentityMapOfint$bool = dart.constFn(_js_helper.IdentityMap$(core.int, core.bool)))();
  let StringAndFnToNull = () => (StringAndFnToNull = dart.constFn(dart.fnType(core.Null, [core.String, EventTodynamic()])))();
  let IdentityMapOfString$EventTodynamic = () => (IdentityMapOfString$EventTodynamic = dart.constFn(_js_helper.IdentityMap$(core.String, EventTodynamic())))();
  let WheelEventToNull = () => (WheelEventToNull = dart.constFn(dart.fnType(core.Null, [html.WheelEvent])))();
  let ListOfPointerData = () => (ListOfPointerData = dart.constFn(core.List$(ui.PointerData)))();
  let JSArrayOfPointerEvent = () => (JSArrayOfPointerEvent = dart.constFn(_interceptors.JSArray$(html.PointerEvent)))();
  let JSArrayOfPointerData = () => (JSArrayOfPointerData = dart.constFn(_interceptors.JSArray$(ui.PointerData)))();
  let JSArrayOfPaintCommand = () => (JSArrayOfPaintCommand = dart.constFn(_interceptors.JSArray$(src__engine.PaintCommand)))();
  let JSArrayOfint = () => (JSArrayOfint = dart.constFn(_interceptors.JSArray$(core.int)))();
  let JSArrayOfPathCommand = () => (JSArrayOfPathCommand = dart.constFn(_interceptors.JSArray$(src__engine.PathCommand)))();
  let JSArrayOfRect = () => (JSArrayOfRect = dart.constFn(_interceptors.JSArray$(ui.Rect)))();
  let JSArrayOfMatrix4 = () => (JSArrayOfMatrix4 = dart.constFn(_interceptors.JSArray$(src__engine.Matrix4)))();
  let GestureModeToNull = () => (GestureModeToNull = dart.constFn(dart.fnType(core.Null, [src__engine.GestureMode])))();
  let LinkedMapOfRole$RoleManager = () => (LinkedMapOfRole$RoleManager = dart.constFn(_js_helper.LinkedMap$(src__engine.Role, src__engine.RoleManager)))();
  let IdentityMapOfint$SemanticsObject = () => (IdentityMapOfint$SemanticsObject = dart.constFn(_js_helper.IdentityMap$(core.int, src__engine.SemanticsObject)))();
  let JSArrayOfSemanticsObject = () => (JSArrayOfSemanticsObject = dart.constFn(_interceptors.JSArray$(src__engine.SemanticsObject)))();
  let VoidTovoid = () => (VoidTovoid = dart.constFn(dart.fnType(dart.void, [])))();
  let JSArrayOfVoidTovoid = () => (JSArrayOfVoidTovoid = dart.constFn(_interceptors.JSArray$(VoidTovoid())))();
  let VoidToDateTime = () => (VoidToDateTime = dart.constFn(dart.fnType(core.DateTime, [])))();
  let GestureModeTovoid = () => (GestureModeTovoid = dart.constFn(dart.fnType(dart.void, [src__engine.GestureMode])))();
  let JSArrayOfGestureModeTovoid = () => (JSArrayOfGestureModeTovoid = dart.constFn(_interceptors.JSArray$(GestureModeTovoid())))();
  let intAndSemanticsObjectToNull = () => (intAndSemanticsObjectToNull = dart.constFn(dart.fnType(core.Null, [core.int, src__engine.SemanticsObject])))();
  let IdentityMapOfString$dynamic = () => (IdentityMapOfString$dynamic = dart.constFn(_js_helper.IdentityMap$(core.String, dart.dynamic)))();
  let JSArrayOfCanvasShadow = () => (JSArrayOfCanvasShadow = dart.constFn(_interceptors.JSArray$(src__engine.CanvasShadow)))();
  let IdentityMapOfString$String = () => (IdentityMapOfString$String = dart.constFn(_js_helper.IdentityMap$(core.String, core.String)))();
  let MapOfString$dynamic = () => (MapOfString$dynamic = dart.constFn(core.Map$(core.String, dart.dynamic)))();
  let JSArrayOfFutureOfvoid = () => (JSArrayOfFutureOfvoid = dart.constFn(_interceptors.JSArray$(FutureOfvoid())))();
  let FontFaceToFontFaceSet = () => (FontFaceToFontFaceSet = dart.constFn(dart.fnType(html.FontFaceSet, [html.FontFace])))();
  let dynamicToNull = () => (dynamicToNull = dart.constFn(dart.fnType(core.Null, [dart.dynamic])))();
  let CompleterOfvoid = () => (CompleterOfvoid = dart.constFn(async.Completer$(dart.void)))();
  let StringToString = () => (StringToString = dart.constFn(dart.fnType(core.String, [core.String])))();
  let LinkedMapOfParagraphGeometricStyle$ParagraphRuler = () => (LinkedMapOfParagraphGeometricStyle$ParagraphRuler = dart.constFn(_js_helper.LinkedMap$(src__engine.ParagraphGeometricStyle, src__engine.ParagraphRuler)))();
  let ParagraphRulerAndParagraphRulerToint = () => (ParagraphRulerAndParagraphRulerToint = dart.constFn(dart.fnType(core.int, [src__engine.ParagraphRuler, src__engine.ParagraphRuler])))();
  let ListOfRulerCacheEntry = () => (ListOfRulerCacheEntry = dart.constFn(core.List$(src__engine.RulerCacheEntry)))();
  let LinkedMapOfString$ListOfRulerCacheEntry = () => (LinkedMapOfString$ListOfRulerCacheEntry = dart.constFn(_js_helper.LinkedMap$(core.String, ListOfRulerCacheEntry())))();
  let JSArrayOfString = () => (JSArrayOfString = dart.constFn(_interceptors.JSArray$(core.String)))();
  let JSArrayOfTextBox = () => (JSArrayOfTextBox = dart.constFn(_interceptors.JSArray$(ui.TextBox)))();
  let JSArrayOfRulerCacheEntry = () => (JSArrayOfRulerCacheEntry = dart.constFn(_interceptors.JSArray$(src__engine.RulerCacheEntry)))();
  let dynamicAnddynamicToint = () => (dynamicAnddynamicToint = dart.constFn(dart.fnType(core.int, [dart.dynamic, dart.dynamic])))();
  let JSArrayOfStreamSubscription = () => (JSArrayOfStreamSubscription = dart.constFn(_interceptors.JSArray$(async.StreamSubscription)))();
  let JSArrayOfObject = () => (JSArrayOfObject = dart.constFn(_interceptors.JSArray$(core.Object)))();
  let dynamicTovoid = () => (dynamicTovoid = dart.constFn(dart.fnType(dart.void, [dart.dynamic])))();
  let FutureOfServiceExtensionResponse = () => (FutureOfServiceExtensionResponse = dart.constFn(async.Future$(developer.ServiceExtensionResponse)))();
  let MapOfString$String = () => (MapOfString$String = dart.constFn(core.Map$(core.String, core.String)))();
  let StringAndMapOfString$StringToFutureOfServiceExtensionResponse = () => (StringAndMapOfString$StringToFutureOfServiceExtensionResponse = dart.constFn(dart.fnType(FutureOfServiceExtensionResponse(), [core.String, MapOfString$String()])))();
  let numToNull = () => (numToNull = dart.constFn(dart.fnType(core.Null, [core.num])))();
  let ListOfint = () => (ListOfint = dart.constFn(core.List$(core.int)))();
  let IdentityMapOfString$bool = () => (IdentityMapOfString$bool = dart.constFn(_js_helper.IdentityMap$(core.String, core.bool)))();
  let JSArrayOf_LogMessage = () => (JSArrayOf_LogMessage = dart.constFn(_interceptors.JSArray$(src__engine._LogMessage)))();
  let SemanticsObjectToIncrementable = () => (SemanticsObjectToIncrementable = dart.constFn(dart.fnType(src__engine.Incrementable, [src__engine.SemanticsObject])))();
  let SemanticsObjectToScrollable = () => (SemanticsObjectToScrollable = dart.constFn(dart.fnType(src__engine.Scrollable, [src__engine.SemanticsObject])))();
  let SemanticsObjectToLabelAndValue = () => (SemanticsObjectToLabelAndValue = dart.constFn(dart.fnType(src__engine.LabelAndValue, [src__engine.SemanticsObject])))();
  let SemanticsObjectToTappable = () => (SemanticsObjectToTappable = dart.constFn(dart.fnType(src__engine.Tappable, [src__engine.SemanticsObject])))();
  let SemanticsObjectToTextField = () => (SemanticsObjectToTextField = dart.constFn(dart.fnType(src__engine.TextField, [src__engine.SemanticsObject])))();
  let SemanticsObjectToCheckable = () => (SemanticsObjectToCheckable = dart.constFn(dart.fnType(src__engine.Checkable, [src__engine.SemanticsObject])))();
  let SemanticsObjectToRoleManager = () => (SemanticsObjectToRoleManager = dart.constFn(dart.fnType(src__engine.RoleManager, [src__engine.SemanticsObject])))();
  let LinkedMapOfRole$SemanticsObjectToRoleManager = () => (LinkedMapOfRole$SemanticsObjectToRoleManager = dart.constFn(_js_helper.LinkedMap$(src__engine.Role, SemanticsObjectToRoleManager())))();
  let UnicodePropertyLookupOfCharProperty = () => (UnicodePropertyLookupOfCharProperty = dart.constFn(src__engine.UnicodePropertyLookup$(src__engine.CharProperty)))();
  let UnicodeRangeOfCharProperty = () => (UnicodeRangeOfCharProperty = dart.constFn(src__engine.UnicodeRange$(src__engine.CharProperty)))();
  let JSArrayOfSubpath = () => (JSArrayOfSubpath = dart.constFn(_interceptors.JSArray$(src__engine.Subpath)))();
  let ListOfSubpath = () => (ListOfSubpath = dart.constFn(core.List$(src__engine.Subpath)))();
  let JSArrayOfPersistedContainerSurface = () => (JSArrayOfPersistedContainerSurface = dart.constFn(_interceptors.JSArray$(ui.PersistedContainerSurface)))();
  let PersistedContainerSurfaceToType = () => (PersistedContainerSurfaceToType = dart.constFn(dart.fnType(core.Type, [ui.PersistedContainerSurface])))();
  let _PaintRequestAnd_PaintRequestToint = () => (_PaintRequestAnd_PaintRequestToint = dart.constFn(dart.fnType(core.int, [ui._PaintRequest, ui._PaintRequest])))();
  let JSArrayOf_PaintRequest = () => (JSArrayOf_PaintRequest = dart.constFn(_interceptors.JSArray$(ui._PaintRequest)))();
  let JSArrayOfPersistedSurface = () => (JSArrayOfPersistedSurface = dart.constFn(_interceptors.JSArray$(ui.PersistedSurface)))();
  let LinkedMapOfPersistedSurface$_DebugSurfaceStats = () => (LinkedMapOfPersistedSurface$_DebugSurfaceStats = dart.constFn(_js_helper.LinkedMap$(ui.PersistedSurface, ui._DebugSurfaceStats)))();
  let _HashSetOfObject = () => (_HashSetOfObject = dart.constFn(collection._HashSet$(core.Object)))();
  let PersistedSurfaceTovoid = () => (PersistedSurfaceTovoid = dart.constFn(dart.fnType(dart.void, [ui.PersistedSurface])))();
  let EventTovoid = () => (EventTovoid = dart.constFn(dart.fnType(dart.void, [html.Event])))();
  let JSArrayOfShadow = () => (JSArrayOfShadow = dart.constFn(_interceptors.JSArray$(ui.Shadow)))();
  let JSArrayOfSemanticsNodeUpdate = () => (JSArrayOfSemanticsNodeUpdate = dart.constFn(_interceptors.JSArray$(src__engine.SemanticsNodeUpdate)))();
  let StringTodouble = () => (StringTodouble = dart.constFn(dart.fnType(core.double, [core.String])))();
  let VoidTodynamic = () => (VoidTodynamic = dart.constFn(dart.fnType(dart.dynamic, [])))();
  let BitmapCanvasTovoid = () => (BitmapCanvasTovoid = dart.constFn(dart.fnType(dart.void, [src__engine.BitmapCanvas])))();
  let voidToNull = () => (voidToNull = dart.constFn(dart.fnType(core.Null, [dart.void])))();
  let VoidTo_DebugSurfaceStats = () => (VoidTo_DebugSurfaceStats = dart.constFn(dart.fnType(ui._DebugSurfaceStats, [])))();
  let _DebugSurfaceStatsToNull = () => (_DebugSurfaceStatsToNull = dart.constFn(dart.fnType(core.Null, [ui._DebugSurfaceStats])))();
  let CanvasElementToint = () => (CanvasElementToint = dart.constFn(dart.fnType(core.int, [html.CanvasElement])))();
  let intAndintToint = () => (intAndintToint = dart.constFn(dart.fnType(core.int, [core.int, core.int])))();
  let CodecTovoid = () => (CodecTovoid = dart.constFn(dart.fnType(dart.void, [ui.Codec])))();
  let FnToString$ = () => (FnToString$ = dart.constFn(dart.fnType(core.String, [CodecTovoid()])))();
  let FutureOfFrameInfo = () => (FutureOfFrameInfo = dart.constFn(async.Future$(ui.FrameInfo)))();
  let CodecToFutureOfFrameInfo = () => (CodecToFutureOfFrameInfo = dart.constFn(dart.fnType(FutureOfFrameInfo(), [ui.Codec])))();
  let FrameInfoTovoid = () => (FrameInfoTovoid = dart.constFn(dart.fnType(dart.void, [ui.FrameInfo])))();
  let MapOfPersistedSurface$_DebugSurfaceStats = () => (MapOfPersistedSurface$_DebugSurfaceStats = dart.constFn(core.Map$(ui.PersistedSurface, ui._DebugSurfaceStats)))();
  let JSArrayOfMapOfPersistedSurface$_DebugSurfaceStats = () => (JSArrayOfMapOfPersistedSurface$_DebugSurfaceStats = dart.constFn(_interceptors.JSArray$(MapOfPersistedSurface$_DebugSurfaceStats())))();
  let JSArrayOfBitmapCanvas = () => (JSArrayOfBitmapCanvas = dart.constFn(_interceptors.JSArray$(src__engine.BitmapCanvas)))();
  let ObjectAnddoubleAnddouble__ToPersistedStandardPicture = () => (ObjectAnddoubleAnddouble__ToPersistedStandardPicture = dart.constFn(dart.fnType(ui.PersistedStandardPicture, [core.Object, core.double, core.double, ui.Picture, core.int])))();
  const _timer = dart.privateName(src__engine, "_timer");
  const _datetime = dart.privateName(src__engine, "_datetime");
  const _timestampFunction = dart.privateName(src__engine, "_timestampFunction");
  const _cancelTimer = dart.privateName(src__engine, "_cancelTimer");
  const _timerDidFire = dart.privateName(src__engine, "_timerDidFire");
  src__engine.AlarmClock = class AlarmClock extends core.Object {
    get callback() {
      return this[callback];
    }
    set callback(value) {
      this[callback] = value;
    }
    get datetime() {
      return this[_datetime];
    }
    set datetime(value) {
      if (dart.equals(value, this[_datetime])) {
        return;
      }
      if (value == null) {
        this[_cancelTimer]();
        this[_datetime] = null;
        return;
      }
      let now = this[_timestampFunction]();
      let isInTheFuture = !dart.test(value.isBefore(now));
      if (!isInTheFuture) {
        this[_cancelTimer]();
        this[_datetime] = value;
        return;
      }
      if (this[_timer] == null) {
        this[_timer] = async.Timer.new(value.difference(now), dart.bind(this, _timerDidFire));
      } else {
        if (!(this[_datetime] != null)) dart.assertFailed("We can only have a timer if there is a non-null datetime");
        if (dart.test(this[_datetime].isAfter(value))) {
          this[_cancelTimer]();
          this[_timer] = async.Timer.new(value.difference(now), dart.bind(this, _timerDidFire));
        }
      }
      this[_datetime] = value;
    }
    [_cancelTimer]() {
      if (this[_timer] != null) {
        this[_timer].cancel();
        this[_timer] = null;
      }
    }
    [_timerDidFire]() {
      if (!(this[_datetime] != null)) dart.assertFailed("If _datetime is null, the timer would have been cancelled");
      let now = this[_timestampFunction]();
      if (!dart.test(now.isBefore(this[_datetime]))) {
        this[_timer] = null;
        this.callback();
      } else {
        this[_timer] = async.Timer.new(this[_datetime].difference(now), dart.bind(this, _timerDidFire));
      }
    }
  };
  (src__engine.AlarmClock.new = function(timestampFunction) {
    this[_timer] = null;
    this[_datetime] = null;
    this[callback] = null;
    this[_timestampFunction] = timestampFunction;
    ;
  }).prototype = src__engine.AlarmClock.prototype;
  dart.addTypeTests(src__engine.AlarmClock);
  const callback = Symbol("AlarmClock.callback");
  dart.setMethodSignature(src__engine.AlarmClock, () => ({
    __proto__: dart.getMethods(src__engine.AlarmClock.__proto__),
    [_cancelTimer]: dart.fnType(dart.void, []),
    [_timerDidFire]: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(src__engine.AlarmClock, () => ({
    __proto__: dart.getGetters(src__engine.AlarmClock.__proto__),
    datetime: core.DateTime
  }));
  dart.setSetterSignature(src__engine.AlarmClock, () => ({
    __proto__: dart.getSetters(src__engine.AlarmClock.__proto__),
    datetime: core.DateTime
  }));
  dart.setFieldSignature(src__engine.AlarmClock, () => ({
    __proto__: dart.getFields(src__engine.AlarmClock.__proto__),
    [_timestampFunction]: dart.finalFieldType(dart.fnType(core.DateTime, [])),
    [_timer]: dart.fieldType(async.Timer),
    [_datetime]: dart.fieldType(core.DateTime),
    callback: dart.fieldType(dart.fnType(dart.void, []))
  }));
  src__engine.AssetManager = class AssetManager extends core.Object {
    get assetsDir() {
      return this[assetsDir$];
    }
    set assetsDir(value) {
      super.assetsDir = value;
    }
    getAssetUrl(asset) {
      let assetUri = core.Uri.parse(asset);
      let url = null;
      if (dart.test(assetUri.hasScheme)) {
        url = asset;
      } else {
        url = dart.str(this.assetsDir) + "/" + dart.str(asset);
      }
      return url;
    }
    load(asset) {
      return async.async(typed_data.ByteData, (function* load() {
        let url = this.getAssetUrl(asset);
        try {
          let request = (yield html.HttpRequest.request(url, {responseType: "arraybuffer"}));
          return typed_data.ByteBuffer.as(request[$response])[$asByteData]();
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (html.ProgressEvent.is(e)) {
            let target = e[$target];
            if (html.HttpRequest.is(target)) {
              if (target.status === 404 && asset === "AssetManifest.json") {
                html.window[$console].warn("Asset manifest does not exist at `" + dart.str(url) + "` – ignoring.");
                return _native_typed_data.NativeUint8List.fromList(convert.utf8.encode("{}"))[$buffer][$asByteData]();
              }
              dart.throw(new src__engine.AssetManagerException.new(url, target.status));
            }
            dart.rethrow(e$);
          } else
            throw e$;
        }
      }).bind(this));
    }
  };
  (src__engine.AssetManager.new = function(opts) {
    let assetsDir = opts && 'assetsDir' in opts ? opts.assetsDir : src__engine.AssetManager._defaultAssetsDir;
    this[assetsDir$] = assetsDir;
    ;
  }).prototype = src__engine.AssetManager.prototype;
  dart.addTypeTests(src__engine.AssetManager);
  const assetsDir$ = Symbol("AssetManager.assetsDir");
  dart.setMethodSignature(src__engine.AssetManager, () => ({
    __proto__: dart.getMethods(src__engine.AssetManager.__proto__),
    getAssetUrl: dart.fnType(core.String, [core.String]),
    load: dart.fnType(async.Future$(typed_data.ByteData), [core.String])
  }));
  dart.setFieldSignature(src__engine.AssetManager, () => ({
    __proto__: dart.getFields(src__engine.AssetManager.__proto__),
    assetsDir: dart.finalFieldType(core.String)
  }));
  dart.defineLazy(src__engine.AssetManager, {
    /*src__engine.AssetManager._defaultAssetsDir*/get _defaultAssetsDir() {
      return "assets";
    }
  });
  src__engine.AssetManagerException = class AssetManagerException extends core.Object {
    get url() {
      return this[url$];
    }
    set url(value) {
      super.url = value;
    }
    get httpStatus() {
      return this[httpStatus$];
    }
    set httpStatus(value) {
      super.httpStatus = value;
    }
    toString() {
      return "Failed to load asset at \"" + dart.str(this.url) + "\" (" + dart.str(this.httpStatus) + ")";
    }
  };
  (src__engine.AssetManagerException.new = function(url, httpStatus) {
    this[url$] = url;
    this[httpStatus$] = httpStatus;
    ;
  }).prototype = src__engine.AssetManagerException.prototype;
  dart.addTypeTests(src__engine.AssetManagerException);
  const url$ = Symbol("AssetManagerException.url");
  const httpStatus$ = Symbol("AssetManagerException.httpStatus");
  src__engine.AssetManagerException[dart.implements] = () => [core.Exception];
  dart.setFieldSignature(src__engine.AssetManagerException, () => ({
    __proto__: dart.getFields(src__engine.AssetManagerException.__proto__),
    url: dart.finalFieldType(core.String),
    httpStatus: dart.finalFieldType(core.int)
  }));
  dart.defineExtensionMethods(src__engine.AssetManagerException, ['toString']);
  const _canvas = dart.privateName(src__engine, "_canvas");
  const _ctx = dart.privateName(src__engine, "_ctx");
  const _cachedLastStyle = dart.privateName(src__engine, "_cachedLastStyle");
  const _children = dart.privateName(src__engine, "_children");
  const _widthInBitmapPixels = dart.privateName(src__engine, "_widthInBitmapPixels");
  const _heightInBitmapPixels = dart.privateName(src__engine, "_heightInBitmapPixels");
  const _saveCount = dart.privateName(src__engine, "_saveCount");
  const _devicePixelRatio = dart.privateName(src__engine, "_devicePixelRatio");
  const _prevFilter = dart.privateName(src__engine, "_prevFilter");
  const _prevFillStyle = dart.privateName(src__engine, "_prevFillStyle");
  const _prevStrokeStyle = dart.privateName(src__engine, "_prevStrokeStyle");
  const _initializeViewport = dart.privateName(src__engine, "_initializeViewport");
  const _setFillAndStrokeStyle = dart.privateName(src__engine, "_setFillAndStrokeStyle");
  const _setFilter = dart.privateName(src__engine, "_setFilter");
  const _applyPaint = dart.privateName(src__engine, "_applyPaint");
  const _resetPaint = dart.privateName(src__engine, "_resetPaint");
  const _strokeOrFill = dart.privateName(src__engine, "_strokeOrFill");
  const _runPath = dart.privateName(src__engine, "_runPath");
  const _drawRRectPath = dart.privateName(src__engine, "_drawRRectPath");
  const _drawRRectPathReverse = dart.privateName(src__engine, "_drawRRectPathReverse");
  const _clipStack = dart.privateName(src__engine, "_clipStack");
  src__engine.EngineCanvas = class EngineCanvas extends core.Object {
    dispose() {
      this.clear();
    }
  };
  (src__engine.EngineCanvas.new = function() {
    ;
  }).prototype = src__engine.EngineCanvas.prototype;
  dart.addTypeTests(src__engine.EngineCanvas);
  dart.setMethodSignature(src__engine.EngineCanvas, () => ({
    __proto__: dart.getMethods(src__engine.EngineCanvas.__proto__),
    dispose: dart.fnType(dart.void, [])
  }));
  const _saveStack = dart.privateName(src__engine, "_saveStack");
  const _currentTransform = dart.privateName(src__engine, "_currentTransform");
  src__engine.SaveStackTracking = class SaveStackTracking extends src__engine.EngineCanvas {};
  src__engine.SaveStackTracking[dart.mixinOn] = EngineCanvas => class SaveStackTracking extends EngineCanvas {
    get isClipped() {
      return this[_clipStack] != null;
    }
    clear() {
      this[_saveStack][$clear]();
      this[_clipStack] = null;
      this[_currentTransform] = src__engine.Matrix4.identity();
    }
    get currentTransform() {
      return this[_currentTransform];
    }
    save() {
      this[_saveStack][$add](new src__engine._SaveStackEntry.new({transform: this[_currentTransform].clone(), clipStack: this[_clipStack] == null ? null : ListOf_SaveClipEntry().from(this[_clipStack])}));
    }
    restore() {
      if (dart.test(this[_saveStack][$isEmpty])) {
        return;
      }
      let entry = this[_saveStack][$removeLast]();
      this[_currentTransform] = entry.transform;
      this[_clipStack] = entry.clipStack;
    }
    translate(dx, dy) {
      this[_currentTransform].translate(dx, dy);
    }
    scale(sx, sy) {
      this[_currentTransform].scale(sx, sy);
    }
    rotate(radians) {
      this[_currentTransform].rotate(src__engine.SaveStackTracking._unitZ, radians);
    }
    skew(sx, sy) {
      let skewMatrix = src__engine.Matrix4.identity();
      let storage = skewMatrix.storage;
      storage[$_set](1, sy);
      storage[$_set](4, sx);
      this[_currentTransform].multiply(skewMatrix);
    }
    transform(matrix4) {
      this[_currentTransform].multiply(new src__engine.Matrix4.fromFloat64List(matrix4));
    }
    clipRect(rect) {
      this[_clipStack] == null ? this[_clipStack] = JSArrayOf_SaveClipEntry().of([]) : null;
      this[_clipStack][$add](new src__engine._SaveClipEntry.rect(rect, this[_currentTransform].clone()));
    }
    clipRRect(rrect) {
      this[_clipStack] == null ? this[_clipStack] = JSArrayOf_SaveClipEntry().of([]) : null;
      this[_clipStack][$add](new src__engine._SaveClipEntry.rrect(rrect, this[_currentTransform].clone()));
    }
    clipPath(path) {
      this[_clipStack] == null ? this[_clipStack] = JSArrayOf_SaveClipEntry().of([]) : null;
      this[_clipStack][$add](new src__engine._SaveClipEntry.path(path, this[_currentTransform].clone()));
    }
  };
  (src__engine.SaveStackTracking[dart.mixinNew] = function() {
    this[_saveStack] = JSArrayOf_SaveStackEntry().of([]);
    this[_clipStack] = null;
    this[_currentTransform] = src__engine.Matrix4.identity();
  }).prototype = src__engine.SaveStackTracking.prototype;
  dart.addTypeTests(src__engine.SaveStackTracking);
  src__engine.SaveStackTracking[dart.implements] = () => [src__engine.EngineCanvas];
  dart.setMethodSignature(src__engine.SaveStackTracking, () => ({
    __proto__: dart.getMethods(src__engine.SaveStackTracking.__proto__),
    clear: dart.fnType(dart.void, []),
    save: dart.fnType(dart.void, []),
    restore: dart.fnType(dart.void, []),
    translate: dart.fnType(dart.void, [core.double, core.double]),
    scale: dart.fnType(dart.void, [core.double, core.double]),
    rotate: dart.fnType(dart.void, [core.double]),
    skew: dart.fnType(dart.void, [core.double, core.double]),
    transform: dart.fnType(dart.void, [typed_data.Float64List]),
    clipRect: dart.fnType(dart.void, [ui.Rect]),
    clipRRect: dart.fnType(dart.void, [ui.RRect]),
    clipPath: dart.fnType(dart.void, [ui.Path])
  }));
  dart.setGetterSignature(src__engine.SaveStackTracking, () => ({
    __proto__: dart.getGetters(src__engine.SaveStackTracking.__proto__),
    isClipped: core.bool,
    currentTransform: src__engine.Matrix4
  }));
  dart.setFieldSignature(src__engine.SaveStackTracking, () => ({
    __proto__: dart.getFields(src__engine.SaveStackTracking.__proto__),
    [_saveStack]: dart.finalFieldType(core.List$(src__engine._SaveStackEntry)),
    [_clipStack]: dart.fieldType(core.List$(src__engine._SaveClipEntry)),
    [_currentTransform]: dart.fieldType(src__engine.Matrix4)
  }));
  dart.defineLazy(src__engine.SaveStackTracking, {
    /*src__engine.SaveStackTracking._unitZ*/get _unitZ() {
      return src__engine.Vector3.new(0.0, 0.0, 1.0);
    }
  });
  const EngineCanvas_SaveStackTracking$ = class EngineCanvas_SaveStackTracking extends src__engine.EngineCanvas {};
  (EngineCanvas_SaveStackTracking$.new = function() {
    src__engine.SaveStackTracking[dart.mixinNew].call(this);
  }).prototype = EngineCanvas_SaveStackTracking$.prototype;
  dart.applyMixin(EngineCanvas_SaveStackTracking$, src__engine.SaveStackTracking);
  src__engine.BitmapCanvas = class BitmapCanvas extends EngineCanvas_SaveStackTracking$ {
    get bounds() {
      return this[bounds$];
    }
    set bounds(value) {
      this[bounds$] = value;
    }
    get rootElement() {
      return this[rootElement];
    }
    set rootElement(value) {
      super.rootElement = value;
    }
    get size() {
      return this.bounds.size;
    }
    get widthInBitmapPixels() {
      return this[_widthInBitmapPixels];
    }
    get heightInBitmapPixels() {
      return this[_heightInBitmapPixels];
    }
    get bitmapPixelCount() {
      return dart.notNull(this.widthInBitmapPixels) * dart.notNull(this.heightInBitmapPixels);
    }
    dispose() {
      super.dispose();
      if (dart.equals(src__engine.browserEngine, src__engine.BrowserEngine.webkit)) {
        this[_canvas].width = this[_canvas].height = 0;
      }
    }
    clear() {
      super.clear();
      for (let i = 0, len = this[_children][$length]; i < dart.notNull(len); i = i + 1) {
        this[_children][$_get](i)[$remove]();
      }
      this[_children][$clear]();
      this[_cachedLastStyle] = null;
      if (this[_ctx] != null) {
        this[_ctx].restore();
        this[_ctx].clearRect(0, 0, this[_widthInBitmapPixels], this[_heightInBitmapPixels]);
        this[_ctx].font = "";
        this[_initializeViewport]();
      }
      if (this[_canvas] != null) {
        this[_canvas].style[$transformOrigin] = "";
        this[_canvas].style[$transform] = "";
      }
    }
    isReusable() {
      return this[_devicePixelRatio] == html.window.devicePixelRatio;
    }
    [_initializeViewport]() {
      this[_ctx].save();
      this[_ctx].setTransform(1, 0, 0, 1, 0, 0);
      this[_ctx].scale(html.window.devicePixelRatio, html.window.devicePixelRatio);
      let canvasPositionX = this.bounds.left[$floor]() - dart.notNull(src__engine.BitmapCanvas.paddingPixels);
      let canvasPositionY = this.bounds.top[$floor]() - dart.notNull(src__engine.BitmapCanvas.paddingPixels);
      let canvasPositionCorrectionX = dart.notNull(this.bounds.left) - dart.notNull(src__engine.BitmapCanvas.paddingPixels) - canvasPositionX[$toDouble]();
      let canvasPositionCorrectionY = dart.notNull(this.bounds.top) - dart.notNull(src__engine.BitmapCanvas.paddingPixels) - canvasPositionY[$toDouble]();
      this.rootElement.style[$transform] = "translate(" + dart.str(canvasPositionX) + "px, " + dart.str(canvasPositionY) + "px)";
      this.translate(-dart.notNull(this.bounds.left) + canvasPositionCorrectionX + dart.notNull(src__engine.BitmapCanvas.paddingPixels), -dart.notNull(this.bounds.top) + canvasPositionCorrectionY + dart.notNull(src__engine.BitmapCanvas.paddingPixels));
    }
    get canvas() {
      return this[_canvas];
    }
    get ctx() {
      return this[_ctx];
    }
    [_applyPaint](paint) {
      let t1, t1$;
      this.ctx.globalCompositeOperation = (t1 = src__engine._stringForBlendMode(paint.blendMode), t1 == null ? "source-over" : t1);
      this.ctx.lineWidth = (t1$ = paint.strokeWidth, t1$ == null ? 1.0 : t1$);
      let cap = paint.strokeCap;
      if (cap != null) {
        this.ctx.lineCap = src__engine._stringForStrokeCap(cap);
      } else {
        this.ctx.lineCap = "butt";
      }
      let join = paint.strokeJoin;
      if (join != null) {
        this.ctx.lineJoin = src__engine._stringForStrokeJoin(join);
      } else {
        this.ctx.lineJoin = "miter";
      }
      if (paint.shader != null) {
        let paintStyle = paint.shader.createPaintStyle(this.ctx);
        this[_setFillAndStrokeStyle](paintStyle, paintStyle);
      } else if (paint.color != null) {
        let colorString = paint.color.toCssString();
        this[_setFillAndStrokeStyle](colorString, colorString);
      }
      if (paint.maskFilter != null) {
        this[_setFilter]("blur(" + dart.str(paint.maskFilter.webOnlySigma) + "px)");
      }
    }
    [_strokeOrFill](paint, opts) {
      let resetPaint = opts && 'resetPaint' in opts ? opts.resetPaint : true;
      switch (paint.style) {
        case ui.PaintingStyle.stroke:
        {
          this.ctx.stroke();
          break;
        }
        case ui.PaintingStyle.fill:
        default:
        {
          this.ctx.fill();
          break;
        }
      }
      if (dart.test(resetPaint)) {
        this[_resetPaint]();
      }
    }
    [_resetPaint]() {
      this[_setFilter]("none");
      this[_setFillAndStrokeStyle](null, null);
    }
    [_setFilter](value) {
      if (this[_prevFilter] != value) {
        this[_prevFilter] = this.ctx.filter = value;
      }
    }
    [_setFillAndStrokeStyle](fillStyle, strokeStyle) {
      let _ctx = this.ctx;
      if (!core.identical(this[_prevFillStyle], fillStyle)) {
        this[_prevFillStyle] = _ctx.fillStyle = fillStyle;
      }
      if (!core.identical(this[_prevStrokeStyle], strokeStyle)) {
        this[_prevStrokeStyle] = _ctx.strokeStyle = strokeStyle;
      }
    }
    save() {
      let t1;
      super.save();
      this.ctx.save();
      t1 = this[_saveCount];
      this[_saveCount] = dart.notNull(t1) + 1;
      return t1;
    }
    saveLayer(bounds, _) {
      this.save();
    }
    restore() {
      super.restore();
      this.ctx.restore();
      this[_saveCount] = dart.notNull(this[_saveCount]) - 1;
      this[_cachedLastStyle] = null;
    }
    restoreToCount(count) {
      if (!(dart.notNull(this[_saveCount]) >= dart.notNull(count))) dart.assertFailed();
      let restores = dart.notNull(this[_saveCount]) - dart.notNull(count);
      for (let i = 0; i < restores; i = i + 1) {
        this.ctx.restore();
      }
      this[_saveCount] = count;
    }
    translate(dx, dy) {
      super.translate(dx, dy);
      this.ctx.translate(dx, dy);
    }
    scale(sx, sy) {
      super.scale(sx, sy);
      this.ctx.scale(sx, sy);
    }
    rotate(radians) {
      super.rotate(radians);
      this.ctx.rotate(radians);
    }
    skew(sx, sy) {
      super.skew(sx, sy);
      this.ctx.transform(1, sy, sx, 1, 0, 0);
    }
    transform(matrix4) {
      super.transform(matrix4);
      if (!dart.test(dart.fn(() => {
        if (matrix4[$_get](2) !== 0.0 || matrix4[$_get](3) !== 0.0 || matrix4[$_get](7) !== 0.0 || matrix4[$_get](8) !== 0.0 || matrix4[$_get](9) !== 0.0 || matrix4[$_get](10) !== 1.0 || matrix4[$_get](11) !== 0.0 || matrix4[$_get](14) !== 0.0 || matrix4[$_get](15) !== 1.0) {
          core.print("WARNING: 3D transformation matrix was passed to BitmapCanvas.");
        }
        return true;
      }, VoidTobool())())) dart.assertFailed();
      this[_ctx].transform(matrix4[$_get](0), matrix4[$_get](1), matrix4[$_get](4), matrix4[$_get](5), matrix4[$_get](12), matrix4[$_get](13));
    }
    clipRect(rect) {
      super.clipRect(rect);
      this.ctx.beginPath();
      this.ctx.rect(rect.left, rect.top, rect.width, rect.height);
      this.ctx.clip();
    }
    clipRRect(rrect) {
      let t1;
      super.clipRRect(rrect);
      let path = (t1 = new ui.Path.new(), t1.addRRect(rrect), t1);
      this[_runPath](path);
      this.ctx.clip();
    }
    clipPath(path) {
      super.clipPath(path);
      this[_runPath](path);
      this.ctx.clip();
    }
    drawColor(color, blendMode) {
      this.ctx.globalCompositeOperation = src__engine._stringForBlendMode(blendMode);
      this.ctx.fillRect(-10000, -10000, 20000, 20000);
    }
    drawLine(p1, p2, paint) {
      this[_applyPaint](paint);
      this.ctx.beginPath();
      this.ctx.moveTo(p1.dx, p1.dy);
      this.ctx.lineTo(p2.dx, p2.dy);
      this.ctx.stroke();
      this[_resetPaint]();
    }
    drawPaint(paint) {
      this[_applyPaint](paint);
      this.ctx.beginPath();
      this.ctx.fillRect(-10000, -10000, 20000, 20000);
      this[_resetPaint]();
    }
    drawRect(rect, paint) {
      this[_applyPaint](paint);
      this.ctx.beginPath();
      this.ctx.rect(rect.left, rect.top, rect.width, rect.height);
      this[_strokeOrFill](paint);
    }
    drawRRect(rrect, paint) {
      this[_applyPaint](paint);
      this[_drawRRectPath](rrect);
      this[_strokeOrFill](paint);
    }
    [_drawRRectPath](rrect, opts) {
      let startNewPath = opts && 'startNewPath' in opts ? opts.startNewPath : true;
      let left = rrect.left;
      let right = rrect.right;
      let top = rrect.top;
      let bottom = rrect.bottom;
      if (dart.notNull(left) > dart.notNull(right)) {
        left = right;
        right = rrect.left;
      }
      if (dart.notNull(top) > dart.notNull(bottom)) {
        top = bottom;
        bottom = rrect.top;
      }
      let trRadiusX = rrect.trRadiusX[$abs]();
      let tlRadiusX = rrect.tlRadiusX[$abs]();
      let trRadiusY = rrect.trRadiusY[$abs]();
      let tlRadiusY = rrect.tlRadiusY[$abs]();
      let blRadiusX = rrect.blRadiusX[$abs]();
      let brRadiusX = rrect.brRadiusX[$abs]();
      let blRadiusY = rrect.blRadiusY[$abs]();
      let brRadiusY = rrect.brRadiusY[$abs]();
      this.ctx.moveTo(dart.notNull(left) + trRadiusX, top);
      if (dart.test(startNewPath)) {
        this.ctx.beginPath();
      }
      this.ctx.lineTo(dart.notNull(right) - trRadiusX, top);
      this.ctx.ellipse(dart.notNull(right) - trRadiusX, dart.notNull(top) + trRadiusY, trRadiusX, trRadiusY, 0, 1.5 * dart.notNull(math.pi), 2.0 * dart.notNull(math.pi), false);
      this.ctx.lineTo(right, dart.notNull(bottom) - brRadiusY);
      this.ctx.ellipse(dart.notNull(right) - brRadiusX, dart.notNull(bottom) - brRadiusY, brRadiusX, brRadiusY, 0, 0, 0.5 * dart.notNull(math.pi), false);
      this.ctx.lineTo(dart.notNull(left) + blRadiusX, bottom);
      this.ctx.ellipse(dart.notNull(left) + blRadiusX, dart.notNull(bottom) - blRadiusY, blRadiusX, blRadiusY, 0, 0.5 * dart.notNull(math.pi), math.pi, false);
      this.ctx.lineTo(left, dart.notNull(top) + tlRadiusY);
      this.ctx.ellipse(dart.notNull(left) + tlRadiusX, dart.notNull(top) + tlRadiusY, tlRadiusX, tlRadiusY, 0, math.pi, 1.5 * dart.notNull(math.pi), false);
    }
    [_drawRRectPathReverse](rrect, opts) {
      let startNewPath = opts && 'startNewPath' in opts ? opts.startNewPath : true;
      let left = rrect.left;
      let right = rrect.right;
      let top = rrect.top;
      let bottom = rrect.bottom;
      let trRadiusX = rrect.trRadiusX[$abs]();
      let tlRadiusX = rrect.tlRadiusX[$abs]();
      let trRadiusY = rrect.trRadiusY[$abs]();
      let tlRadiusY = rrect.tlRadiusY[$abs]();
      let blRadiusX = rrect.blRadiusX[$abs]();
      let brRadiusX = rrect.brRadiusX[$abs]();
      let blRadiusY = rrect.blRadiusY[$abs]();
      let brRadiusY = rrect.brRadiusY[$abs]();
      if (dart.notNull(left) > dart.notNull(right)) {
        left = right;
        right = rrect.left;
      }
      if (dart.notNull(top) > dart.notNull(bottom)) {
        top = bottom;
        bottom = rrect.top;
      }
      this.ctx.moveTo(dart.notNull(right) - trRadiusX, top);
      if (dart.test(startNewPath)) {
        this.ctx.beginPath();
      }
      this.ctx.lineTo(dart.notNull(left) + tlRadiusX, top);
      this.ctx.ellipse(dart.notNull(left) + tlRadiusX, dart.notNull(top) + tlRadiusY, tlRadiusX, tlRadiusY, 0, 1.5 * dart.notNull(math.pi), 1 * dart.notNull(math.pi), true);
      this.ctx.lineTo(left, dart.notNull(bottom) - blRadiusY);
      this.ctx.ellipse(dart.notNull(left) + blRadiusX, dart.notNull(bottom) - blRadiusY, blRadiusX, blRadiusY, 0, 1 * dart.notNull(math.pi), 0.5 * dart.notNull(math.pi), true);
      this.ctx.lineTo(dart.notNull(right) - brRadiusX, bottom);
      this.ctx.ellipse(dart.notNull(right) - brRadiusX, dart.notNull(bottom) - brRadiusY, brRadiusX, brRadiusY, 0, 0.5 * dart.notNull(math.pi), 0 * dart.notNull(math.pi), true);
      this.ctx.lineTo(right, dart.notNull(top) + trRadiusY);
      this.ctx.ellipse(dart.notNull(right) - trRadiusX, dart.notNull(top) + trRadiusY, trRadiusX, trRadiusY, 0, 0 * dart.notNull(math.pi), 1.5 * dart.notNull(math.pi), true);
    }
    drawDRRect(outer, inner, paint) {
      this[_applyPaint](paint);
      this[_drawRRectPath](outer);
      this[_drawRRectPathReverse](inner, {startNewPath: false});
      this[_strokeOrFill](paint);
    }
    drawOval(rect, paint) {
      this[_applyPaint](paint);
      this.ctx.beginPath();
      this.ctx.ellipse(rect.center.dx, rect.center.dy, dart.notNull(rect.width) / 2, dart.notNull(rect.height) / 2, 0, 0, 2.0 * dart.notNull(math.pi), false);
      this[_strokeOrFill](paint);
    }
    drawCircle(c, radius, paint) {
      this[_applyPaint](paint);
      this.ctx.beginPath();
      this.ctx.ellipse(c.dx, c.dy, radius, radius, 0, 0, 2.0 * dart.notNull(math.pi), false);
      this[_strokeOrFill](paint);
    }
    drawPath(path, paint) {
      this[_applyPaint](paint);
      this[_runPath](path);
      this[_strokeOrFill](paint);
    }
    drawShadow(path, color, elevation, transparentOccluder) {
      let t1, t1$;
      let shadows = src__engine.ElevationShadow.computeCanvasShadows(elevation, color);
      if (dart.test(shadows[$isNotEmpty])) {
        for (let shadow of shadows) {
          if (dart.test(transparentOccluder) && !dart.equals(src__engine.browserEngine, src__engine.BrowserEngine.webkit)) {
            let paint = (t1 = new ui.Paint.new(), t1.color = shadow.color, t1.style = ui.PaintingStyle.fill, t1.strokeWidth = 0.0, t1.maskFilter = new ui.MaskFilter.blur(ui.BlurStyle.normal, shadow.blur), t1);
            this[_ctx].save();
            this[_ctx].translate(shadow.offsetX, shadow.offsetY);
            let paintData = paint.webOnlyPaintData;
            this[_applyPaint](paintData);
            this[_runPath](path);
            this[_strokeOrFill](paintData, {resetPaint: false});
            this[_ctx].restore();
          } else {
            let paint = (t1$ = new ui.Paint.new(), t1$.color = shadow.color, t1$.style = ui.PaintingStyle.fill, t1$.strokeWidth = 0.0, t1$);
            this[_ctx].save();
            let paintData = paint.webOnlyPaintData;
            this[_applyPaint](paintData);
            this[_ctx].shadowBlur = shadow.blur;
            this[_ctx].shadowColor = shadow.color.withAlpha(255).toCssString();
            this[_ctx].shadowOffsetX = shadow.offsetX;
            this[_ctx].shadowOffsetY = shadow.offsetY;
            this[_runPath](path);
            this[_strokeOrFill](paintData, {resetPaint: false});
            this[_ctx].restore();
          }
        }
        this[_resetPaint]();
      }
    }
    drawImage(image, p, paint) {
      let t1;
      this[_applyPaint](paint);
      let imgElement = html.Element._check(src__engine.HtmlImage.as(image).imgElement[$clone](true));
      t1 = imgElement.style;
      t1[$position] = "absolute";
      t1[$transform] = "translate(" + dart.str(p.dx) + "px, " + dart.str(p.dy) + "px)";
      t1;
      this.rootElement[$append](imgElement);
    }
    drawImageRect(image, src, dst, paint) {
      this.ctx[$drawImageScaledFromSource](src__engine.HtmlImage.as(image).imgElement, src.left, src.top, src.width, src.height, dst.left, dst.top, dst.width, dst.height);
    }
    drawParagraph(paragraph, offset) {
      let t1, t1$, t1$0;
      if (!dart.test(paragraph.webOnlyIsLaidOut)) dart.assertFailed();
      let style = paragraph.webOnlyGetParagraphGeometricStyle();
      if (dart.test(paragraph.webOnlyDrawOnCanvas)) {
        if (!dart.equals(style, this[_cachedLastStyle])) {
          this.ctx.font = style.cssFontString;
          this[_cachedLastStyle] = style;
        }
        this[_applyPaint](paragraph.webOnlyGetPaint().webOnlyPaintData);
        this.ctx[$fillText](paragraph.webOnlyGetPlainText(), dart.notNull(offset.dx) + dart.notNull(paragraph.webOnlyAlignOffset), dart.notNull(offset.dy) + dart.notNull(paragraph.alphabeticBaseline));
        this[_resetPaint]();
        return;
      }
      let paragraphElement = html.Element._check(paragraph.webOnlyGetParagraphElement()[$clone](true));
      let paragraphStyle = paragraphElement.style;
      t1 = paragraphStyle;
      t1[$position] = "absolute";
      t1[$whiteSpace] = "pre-wrap";
      t1[$width] = dart.str(paragraph.width) + "px";
      t1;
      if (style.ellipsis != null && (style.maxLines == null || style.maxLines === 1)) {
        t1$ = paragraphStyle;
        t1$[$height] = dart.str(paragraph.webOnlyMaxLinesHeight) + "px";
        t1$[$whiteSpace] = "pre";
        t1$[$overflow] = "hidden";
        t1$[$textOverflow] = "ellipsis";
        t1$;
      } else if (dart.test(paragraph.didExceedMaxLines)) {
        t1$0 = paragraphStyle;
        t1$0[$height] = dart.str(paragraph.webOnlyMaxLinesHeight) + "px";
        t1$0[$overflowY] = "hidden";
        t1$0;
      } else {
        paragraphStyle[$height] = dart.str(paragraph.height) + "px";
      }
      if (dart.test(this.isClipped)) {
        let clipElements = src__engine._clipContent(this[_clipStack], html.HtmlElement._check(paragraphElement), offset, this.currentTransform);
        for (let clipElement of clipElements) {
          this.rootElement[$append](clipElement);
          this[_children][$add](clipElement);
        }
      } else {
        let cssTransform = src__engine.matrix4ToCssTransform(src__engine.transformWithOffset(this.currentTransform, offset));
        paragraphStyle[$transform] = cssTransform;
        this.rootElement[$append](paragraphElement);
      }
      this[_children][$add](paragraphElement);
    }
    drawPicture(picture) {
      picture.recordingCanvas.apply(this);
    }
    [_runPath](path) {
      this.ctx.beginPath();
      for (let subpath of path.subpaths) {
        for (let command of subpath.commands) {
          switch (command.type) {
            case src__engine.PathCommandTypes.bezierCurveTo:
            {
              let curve = src__engine.BezierCurveTo._check(command);
              this.ctx.bezierCurveTo(curve.x1, curve.y1, curve.x2, curve.y2, curve.x3, curve.y3);
              break;
            }
            case src__engine.PathCommandTypes.close:
            {
              this.ctx.closePath();
              break;
            }
            case src__engine.PathCommandTypes.ellipse:
            {
              let ellipse = src__engine.Ellipse._check(command);
              this.ctx.ellipse(ellipse.x, ellipse.y, ellipse.radiusX, ellipse.radiusY, ellipse.rotation, ellipse.startAngle, ellipse.endAngle, ellipse.anticlockwise);
              break;
            }
            case src__engine.PathCommandTypes.lineTo:
            {
              let lineTo = src__engine.LineTo._check(command);
              this.ctx.lineTo(lineTo.x, lineTo.y);
              break;
            }
            case src__engine.PathCommandTypes.moveTo:
            {
              let moveTo = src__engine.MoveTo._check(command);
              this.ctx.moveTo(moveTo.x, moveTo.y);
              break;
            }
            case src__engine.PathCommandTypes.rRect:
            {
              let rrectCommand = src__engine.RRectCommand._check(command);
              this[_drawRRectPath](rrectCommand.rrect, {startNewPath: false});
              break;
            }
            case src__engine.PathCommandTypes.rect:
            {
              let rectCommand = src__engine.RectCommand._check(command);
              this.ctx.rect(rectCommand.x, rectCommand.y, rectCommand.width, rectCommand.height);
              break;
            }
            case src__engine.PathCommandTypes.quadraticCurveTo:
            {
              let quadraticCurveTo = src__engine.QuadraticCurveTo._check(command);
              this.ctx.quadraticCurveTo(quadraticCurveTo.x1, quadraticCurveTo.y1, quadraticCurveTo.x2, quadraticCurveTo.y2);
              break;
            }
            default:
            {
              dart.throw(new core.UnimplementedError.new("Unknown path command " + dart.str(command)));
            }
          }
        }
      }
    }
  };
  (src__engine.BitmapCanvas.new = function(bounds) {
    let t1;
    this[rootElement] = html.Element.tag("flt-canvas");
    this[_canvas] = null;
    this[_ctx] = null;
    this[_cachedLastStyle] = null;
    this[_children] = JSArrayOfElement().of([]);
    this[_widthInBitmapPixels] = null;
    this[_heightInBitmapPixels] = null;
    this[_saveCount] = 0;
    this[_devicePixelRatio] = html.window.devicePixelRatio;
    this[_prevFilter] = "none";
    this[_prevFillStyle] = null;
    this[_prevStrokeStyle] = null;
    this[bounds$] = bounds;
    src__engine.BitmapCanvas.__proto__.new.call(this);
    this.rootElement.style[$position] = "absolute";
    let boundsWidth = dart.notNull(this.size.width) + 1 + 2 * dart.notNull(src__engine.BitmapCanvas.paddingPixels);
    let boundsHeight = dart.notNull(this.size.height) + 1 + 2 * dart.notNull(src__engine.BitmapCanvas.paddingPixels);
    this[_widthInBitmapPixels] = (boundsWidth * dart.notNull(html.window.devicePixelRatio))[$ceil]();
    this[_heightInBitmapPixels] = (boundsHeight * dart.notNull(html.window.devicePixelRatio))[$ceil]();
    let cssWidth = dart.notNull(this[_widthInBitmapPixels]) / dart.notNull(html.window.devicePixelRatio);
    let cssHeight = dart.notNull(this[_heightInBitmapPixels]) / dart.notNull(html.window.devicePixelRatio);
    this[_canvas] = html.CanvasElement.new({width: this[_widthInBitmapPixels], height: this[_heightInBitmapPixels]});
    t1 = this[_canvas].style;
    t1[$position] = "absolute";
    t1[$width] = dart.str(cssWidth) + "px";
    t1[$height] = dart.str(cssHeight) + "px";
    t1;
    this[_ctx] = this[_canvas][$context2D];
    this.rootElement[$append](this[_canvas]);
    this[_initializeViewport]();
  }).prototype = src__engine.BitmapCanvas.prototype;
  dart.addTypeTests(src__engine.BitmapCanvas);
  const bounds$ = Symbol("BitmapCanvas.bounds");
  const rootElement = Symbol("BitmapCanvas.rootElement");
  dart.setMethodSignature(src__engine.BitmapCanvas, () => ({
    __proto__: dart.getMethods(src__engine.BitmapCanvas.__proto__),
    isReusable: dart.fnType(core.bool, []),
    [_initializeViewport]: dart.fnType(dart.void, []),
    [_applyPaint]: dart.fnType(dart.void, [ui.PaintData]),
    [_strokeOrFill]: dart.fnType(dart.void, [ui.PaintData], {resetPaint: core.bool}),
    [_resetPaint]: dart.fnType(dart.void, []),
    [_setFilter]: dart.fnType(dart.void, [core.String]),
    [_setFillAndStrokeStyle]: dart.fnType(dart.void, [core.Object, core.Object]),
    save: dart.fnType(core.int, []),
    saveLayer: dart.fnType(dart.void, [ui.Rect, dart.dynamic]),
    restoreToCount: dart.fnType(dart.void, [core.int]),
    drawColor: dart.fnType(dart.void, [ui.Color, ui.BlendMode]),
    drawLine: dart.fnType(dart.void, [ui.Offset, ui.Offset, ui.PaintData]),
    drawPaint: dart.fnType(dart.void, [ui.PaintData]),
    drawRect: dart.fnType(dart.void, [ui.Rect, ui.PaintData]),
    drawRRect: dart.fnType(dart.void, [ui.RRect, ui.PaintData]),
    [_drawRRectPath]: dart.fnType(dart.void, [ui.RRect], {startNewPath: core.bool}),
    [_drawRRectPathReverse]: dart.fnType(dart.void, [ui.RRect], {startNewPath: core.bool}),
    drawDRRect: dart.fnType(dart.void, [ui.RRect, ui.RRect, ui.PaintData]),
    drawOval: dart.fnType(dart.void, [ui.Rect, ui.PaintData]),
    drawCircle: dart.fnType(dart.void, [ui.Offset, core.double, ui.PaintData]),
    drawPath: dart.fnType(dart.void, [ui.Path, ui.PaintData]),
    drawShadow: dart.fnType(dart.void, [ui.Path, ui.Color, core.double, core.bool]),
    drawImage: dart.fnType(dart.void, [ui.Image, ui.Offset, ui.PaintData]),
    drawImageRect: dart.fnType(dart.void, [ui.Image, ui.Rect, ui.Rect, ui.PaintData]),
    drawParagraph: dart.fnType(dart.void, [ui.Paragraph, ui.Offset]),
    drawPicture: dart.fnType(dart.void, [ui.Picture]),
    [_runPath]: dart.fnType(dart.void, [ui.Path])
  }));
  dart.setGetterSignature(src__engine.BitmapCanvas, () => ({
    __proto__: dart.getGetters(src__engine.BitmapCanvas.__proto__),
    size: ui.Size,
    widthInBitmapPixels: core.int,
    heightInBitmapPixels: core.int,
    bitmapPixelCount: core.int,
    canvas: html.CanvasElement,
    ctx: html.CanvasRenderingContext2D
  }));
  dart.setFieldSignature(src__engine.BitmapCanvas, () => ({
    __proto__: dart.getFields(src__engine.BitmapCanvas.__proto__),
    bounds: dart.fieldType(ui.Rect),
    rootElement: dart.finalFieldType(html.Element),
    [_canvas]: dart.fieldType(html.CanvasElement),
    [_ctx]: dart.fieldType(html.CanvasRenderingContext2D),
    [_cachedLastStyle]: dart.fieldType(src__engine.ParagraphGeometricStyle),
    [_children]: dart.finalFieldType(core.List$(html.Element)),
    [_widthInBitmapPixels]: dart.fieldType(core.int),
    [_heightInBitmapPixels]: dart.fieldType(core.int),
    [_saveCount]: dart.fieldType(core.int),
    [_devicePixelRatio]: dart.finalFieldType(core.double),
    [_prevFilter]: dart.fieldType(core.String),
    [_prevFillStyle]: dart.fieldType(core.Object),
    [_prevStrokeStyle]: dart.fieldType(core.Object)
  }));
  dart.defineLazy(src__engine.BitmapCanvas, {
    /*src__engine.BitmapCanvas.paddingPixels*/get paddingPixels() {
      return 1;
    }
  });
  src__engine._NullTreeSanitizer = class _NullTreeSanitizer extends core.Object {
    sanitizeTree(node) {
    }
  };
  (src__engine._NullTreeSanitizer.new = function() {
    ;
  }).prototype = src__engine._NullTreeSanitizer.prototype;
  dart.addTypeTests(src__engine._NullTreeSanitizer);
  src__engine._NullTreeSanitizer[dart.implements] = () => [html.NodeTreeSanitizer];
  dart.setMethodSignature(src__engine._NullTreeSanitizer, () => ({
    __proto__: dart.getMethods(src__engine._NullTreeSanitizer.__proto__),
    sanitizeTree: dart.fnType(dart.void, [html.Node])
  }));
  const _name$ = dart.privateName(src__engine, "_name");
  src__engine.BrowserEngine = class BrowserEngine extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (src__engine.BrowserEngine.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = src__engine.BrowserEngine.prototype;
  dart.addTypeTests(src__engine.BrowserEngine);
  dart.setFieldSignature(src__engine.BrowserEngine, () => ({
    __proto__: dart.getFields(src__engine.BrowserEngine.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(src__engine.BrowserEngine, ['toString']);
  src__engine.BrowserEngine.blink = dart.const(new src__engine.BrowserEngine.new(0, "BrowserEngine.blink"));
  src__engine.BrowserEngine.webkit = dart.const(new src__engine.BrowserEngine.new(1, "BrowserEngine.webkit"));
  src__engine.BrowserEngine.unknown = dart.const(new src__engine.BrowserEngine.new(2, "BrowserEngine.unknown"));
  src__engine.BrowserEngine.values = dart.constList([src__engine.BrowserEngine.blink, src__engine.BrowserEngine.webkit, src__engine.BrowserEngine.unknown], src__engine.BrowserEngine);
  const _initialRoute = dart.privateName(src__engine, "_initialRoute");
  const _viewportMetrics = dart.privateName(src__engine, "_viewportMetrics");
  const _animator$ = dart.privateName(src__engine, "_animator");
  const _runtimeController$ = dart.privateName(src__engine, "_runtimeController");
  const _assetManager$ = dart.privateName(src__engine, "_assetManager");
  const _delegate$ = dart.privateName(src__engine, "_delegate");
  src__engine.RuntimeDelegate = class RuntimeDelegate extends core.Object {};
  (src__engine.RuntimeDelegate.new = function() {
    ;
  }).prototype = src__engine.RuntimeDelegate.prototype;
  dart.addTypeTests(src__engine.RuntimeDelegate);
  src__engine.Engine = class Engine extends src__engine.RuntimeDelegate {
    get defaultRouteName() {
      let t1;
      t1 = this[_initialRoute];
      return t1 == null ? "/" : t1;
    }
    get haveSurface() {
      return true;
    }
    set viewportMetrics(metrics) {
      let dimensionsChanged = this[_viewportMetrics].physicalHeight != metrics.physicalHeight || this[_viewportMetrics].physicalWidth != metrics.physicalWidth;
      this[_viewportMetrics] = metrics;
      dart.dput(this[_runtimeController$], 'viewportMetrics', this[_viewportMetrics]);
      if (this[_animator$] != null) {
        if (dimensionsChanged) {
          this[_animator$].setDimensionChangePending();
        }
        if (dart.test(this.haveSurface)) {
          this.scheduleFrame();
        }
      }
    }
    scheduleFrame(opts) {
      let regenerateLayerTree = opts && 'regenerateLayerTree' in opts ? opts.regenerateLayerTree : true;
      this[_animator$].requestFrame(regenerateLayerTree);
    }
    render(layerTree) {
      if (layerTree == null) return;
      let frameSize = new ui.Size.new(this[_viewportMetrics].physicalWidth, this[_viewportMetrics].physicalHeight);
      if (dart.test(frameSize.isEmpty)) {
        return;
      }
      layerTree.frameSize = frameSize;
      this[_animator$].render(layerTree);
    }
    handlePlatformMessage(message) {
      if (message.channel == src__engine.assetChannel) {
        this.handleAssetPlatformMessage(message);
      } else {
        dart.dsend(this[_delegate$], 'onEngineHandlePlatformMessage', [message]);
      }
    }
    handleAssetPlatformMessage(message) {
      let response = message.response;
      if (response == null) return;
      let asset = convert.utf8.decode(message.data[$buffer][$asUint8List]());
      if (this[_assetManager$] != null) {
        this[_assetManager$].load(asset).then(dart.dynamic, dart.fn(data => {
          if (data != null) {
            response.complete(data[$buffer][$asUint8List]());
          } else {
            response.completeEmpty();
          }
        }, ByteDataToNull()));
      } else {
        response.completeEmpty();
      }
    }
    getFontCollection() {
      return null;
    }
  };
  (src__engine.Engine.new = function(_animator, _runtimeController, _assetManager, _delegate) {
    this[_initialRoute] = null;
    this[_viewportMetrics] = null;
    this[_animator$] = _animator;
    this[_runtimeController$] = _runtimeController;
    this[_assetManager$] = _assetManager;
    this[_delegate$] = _delegate;
    ;
  }).prototype = src__engine.Engine.prototype;
  dart.addTypeTests(src__engine.Engine);
  dart.setMethodSignature(src__engine.Engine, () => ({
    __proto__: dart.getMethods(src__engine.Engine.__proto__),
    scheduleFrame: dart.fnType(dart.void, [], {regenerateLayerTree: core.bool}),
    render: dart.fnType(dart.void, [src__engine.LayerTree]),
    handlePlatformMessage: dart.fnType(dart.void, [src__engine.PlatformMessage]),
    handleAssetPlatformMessage: dart.fnType(dart.void, [src__engine.PlatformMessage]),
    getFontCollection: dart.fnType(src__engine.FontCollection, [])
  }));
  dart.setGetterSignature(src__engine.Engine, () => ({
    __proto__: dart.getGetters(src__engine.Engine.__proto__),
    defaultRouteName: core.String,
    haveSurface: core.bool
  }));
  dart.setSetterSignature(src__engine.Engine, () => ({
    __proto__: dart.getSetters(src__engine.Engine.__proto__),
    viewportMetrics: src__engine.ViewportMetrics
  }));
  dart.setFieldSignature(src__engine.Engine, () => ({
    __proto__: dart.getFields(src__engine.Engine.__proto__),
    [_animator$]: dart.finalFieldType(src__engine.Animator),
    [_runtimeController$]: dart.finalFieldType(dart.dynamic),
    [_assetManager$]: dart.finalFieldType(src__engine.AssetManager),
    [_delegate$]: dart.finalFieldType(dart.dynamic),
    [_initialRoute]: dart.fieldType(core.String),
    [_viewportMetrics]: dart.fieldType(src__engine.ViewportMetrics)
  }));
  src__engine.Animator = class Animator extends core.Object {
    setDimensionChangePending() {
    }
    render(layerTree) {
    }
    requestFrame(regenerateLayerTree) {
    }
  };
  (src__engine.Animator.new = function() {
    ;
  }).prototype = src__engine.Animator.prototype;
  dart.addTypeTests(src__engine.Animator);
  dart.setMethodSignature(src__engine.Animator, () => ({
    __proto__: dart.getMethods(src__engine.Animator.__proto__),
    setDimensionChangePending: dart.fnType(dart.void, []),
    render: dart.fnType(dart.void, [src__engine.LayerTree]),
    requestFrame: dart.fnType(dart.void, [core.bool])
  }));
  src__engine.Layer = class Layer extends core.Object {
    get parent() {
      return this[parent];
    }
    set parent(value) {
      this[parent] = value;
    }
    get paintBounds() {
      return this[paintBounds];
    }
    set paintBounds(value) {
      this[paintBounds] = value;
    }
    get needsPainting() {
      return !dart.test(this.paintBounds.isEmpty);
    }
  };
  (src__engine.Layer.new = function() {
    this[parent] = null;
    this[paintBounds] = ui.Rect.zero;
    ;
  }).prototype = src__engine.Layer.prototype;
  dart.addTypeTests(src__engine.Layer);
  const parent = Symbol("Layer.parent");
  const paintBounds = Symbol("Layer.paintBounds");
  dart.setGetterSignature(src__engine.Layer, () => ({
    __proto__: dart.getGetters(src__engine.Layer.__proto__),
    needsPainting: core.bool
  }));
  dart.setFieldSignature(src__engine.Layer, () => ({
    __proto__: dart.getFields(src__engine.Layer.__proto__),
    parent: dart.fieldType(src__engine.ContainerLayer),
    paintBounds: dart.fieldType(ui.Rect)
  }));
  src__engine.PrerollContext = class PrerollContext extends core.Object {
    get rasterCache() {
      return this[rasterCache$];
    }
    set rasterCache(value) {
      super.rasterCache = value;
    }
  };
  (src__engine.PrerollContext.new = function(rasterCache) {
    this[rasterCache$] = rasterCache;
    ;
  }).prototype = src__engine.PrerollContext.prototype;
  dart.addTypeTests(src__engine.PrerollContext);
  const rasterCache$ = Symbol("PrerollContext.rasterCache");
  dart.setFieldSignature(src__engine.PrerollContext, () => ({
    __proto__: dart.getFields(src__engine.PrerollContext.__proto__),
    rasterCache: dart.finalFieldType(src__engine.RasterCache)
  }));
  src__engine.PaintContext = class PaintContext extends core.Object {
    get canvas() {
      return this[canvas$];
    }
    set canvas(value) {
      super.canvas = value;
    }
    get rasterCache() {
      return this[rasterCache$0];
    }
    set rasterCache(value) {
      super.rasterCache = value;
    }
  };
  (src__engine.PaintContext.new = function(canvas, rasterCache) {
    this[canvas$] = canvas;
    this[rasterCache$0] = rasterCache;
    ;
  }).prototype = src__engine.PaintContext.prototype;
  dart.addTypeTests(src__engine.PaintContext);
  const canvas$ = Symbol("PaintContext.canvas");
  const rasterCache$0 = Symbol("PaintContext.rasterCache");
  dart.setFieldSignature(src__engine.PaintContext, () => ({
    __proto__: dart.getFields(src__engine.PaintContext.__proto__),
    canvas: dart.finalFieldType(src__engine.BitmapCanvas),
    rasterCache: dart.finalFieldType(src__engine.RasterCache)
  }));
  const _layers = dart.privateName(src__engine, "_layers");
  src__engine.ContainerLayer = class ContainerLayer extends src__engine.Layer {
    add(child) {
      child.parent = this;
      this[_layers][$add](child);
    }
    preroll(context, matrix) {
      this.paintBounds = this.prerollChildren(context, matrix);
    }
    prerollChildren(context, childMatrix) {
      let childPaintBounds = ui.Rect.zero;
      for (let layer of this[_layers]) {
        layer.preroll(context, childMatrix);
        if (dart.test(childPaintBounds.isEmpty)) {
          childPaintBounds = layer.paintBounds;
        } else if (!dart.test(layer.paintBounds.isEmpty)) {
          childPaintBounds = childPaintBounds.expandToInclude(layer.paintBounds);
        }
      }
      return childPaintBounds;
    }
    paintChildren(context) {
      if (!dart.test(this.needsPainting)) dart.assertFailed();
      for (let layer of this[_layers]) {
        if (dart.test(layer.needsPainting)) {
          layer.paint(context);
        }
      }
    }
  };
  (src__engine.ContainerLayer.new = function() {
    this[_layers] = JSArrayOfLayer().of([]);
    src__engine.ContainerLayer.__proto__.new.call(this);
    ;
  }).prototype = src__engine.ContainerLayer.prototype;
  dart.addTypeTests(src__engine.ContainerLayer);
  dart.setMethodSignature(src__engine.ContainerLayer, () => ({
    __proto__: dart.getMethods(src__engine.ContainerLayer.__proto__),
    add: dart.fnType(dart.void, [src__engine.Layer]),
    preroll: dart.fnType(dart.void, [src__engine.PrerollContext, src__engine.Matrix4]),
    prerollChildren: dart.fnType(ui.Rect, [src__engine.PrerollContext, src__engine.Matrix4]),
    paintChildren: dart.fnType(dart.void, [src__engine.PaintContext])
  }));
  dart.setFieldSignature(src__engine.ContainerLayer, () => ({
    __proto__: dart.getFields(src__engine.ContainerLayer.__proto__),
    [_layers]: dart.finalFieldType(core.List$(src__engine.Layer))
  }));
  const _clipPath$ = dart.privateName(src__engine, "_clipPath");
  src__engine.ClipPathLayer = class ClipPathLayer extends src__engine.ContainerLayer {
    preroll(context, matrix) {
      let childPaintBounds = this.prerollChildren(context, matrix);
      let clipBounds = this[_clipPath$].getBounds();
      if (dart.test(childPaintBounds.overlaps(clipBounds))) {
        this.paintBounds = childPaintBounds.intersect(clipBounds);
      }
    }
    paint(context) {
      if (!dart.test(this.needsPainting)) dart.assertFailed();
      context.canvas.save();
      context.canvas.clipPath(this[_clipPath$]);
      this.paintChildren(context);
      context.canvas.restore();
    }
  };
  (src__engine.ClipPathLayer.new = function(_clipPath) {
    this[_clipPath$] = _clipPath;
    src__engine.ClipPathLayer.__proto__.new.call(this);
    ;
  }).prototype = src__engine.ClipPathLayer.prototype;
  dart.addTypeTests(src__engine.ClipPathLayer);
  dart.setMethodSignature(src__engine.ClipPathLayer, () => ({
    __proto__: dart.getMethods(src__engine.ClipPathLayer.__proto__),
    paint: dart.fnType(dart.void, [src__engine.PaintContext])
  }));
  dart.setFieldSignature(src__engine.ClipPathLayer, () => ({
    __proto__: dart.getFields(src__engine.ClipPathLayer.__proto__),
    [_clipPath$]: dart.finalFieldType(ui.Path)
  }));
  const _clipRect$ = dart.privateName(src__engine, "_clipRect");
  src__engine.ClipRectLayer = class ClipRectLayer extends src__engine.ContainerLayer {
    preroll(context, matrix) {
      let childPaintBounds = this.prerollChildren(context, matrix);
      if (dart.test(childPaintBounds.overlaps(this[_clipRect$]))) {
        this.paintBounds = childPaintBounds.intersect(this[_clipRect$]);
      }
    }
    paint(context) {
      if (!dart.test(this.needsPainting)) dart.assertFailed();
      context.canvas.save();
      context.canvas.clipRect(this[_clipRect$]);
      this.paintChildren(context);
      context.canvas.restore();
    }
  };
  (src__engine.ClipRectLayer.new = function(_clipRect) {
    this[_clipRect$] = _clipRect;
    src__engine.ClipRectLayer.__proto__.new.call(this);
    ;
  }).prototype = src__engine.ClipRectLayer.prototype;
  dart.addTypeTests(src__engine.ClipRectLayer);
  dart.setMethodSignature(src__engine.ClipRectLayer, () => ({
    __proto__: dart.getMethods(src__engine.ClipRectLayer.__proto__),
    paint: dart.fnType(dart.void, [src__engine.PaintContext])
  }));
  dart.setFieldSignature(src__engine.ClipRectLayer, () => ({
    __proto__: dart.getFields(src__engine.ClipRectLayer.__proto__),
    [_clipRect$]: dart.finalFieldType(ui.Rect)
  }));
  const _clipRRect$ = dart.privateName(src__engine, "_clipRRect");
  src__engine.ClipRRectLayer = class ClipRRectLayer extends src__engine.ContainerLayer {
    preroll(context, matrix) {
      let childPaintBounds = this.prerollChildren(context, matrix);
      if (dart.test(childPaintBounds.overlaps(this[_clipRRect$].outerRect))) {
        this.paintBounds = childPaintBounds.intersect(this[_clipRRect$].outerRect);
      }
    }
    paint(context) {
      if (!dart.test(this.needsPainting)) dart.assertFailed();
      context.canvas.save();
      context.canvas.clipRRect(this[_clipRRect$]);
      this.paintChildren(context);
      context.canvas.restore();
    }
  };
  (src__engine.ClipRRectLayer.new = function(_clipRRect) {
    this[_clipRRect$] = _clipRRect;
    src__engine.ClipRRectLayer.__proto__.new.call(this);
    ;
  }).prototype = src__engine.ClipRRectLayer.prototype;
  dart.addTypeTests(src__engine.ClipRRectLayer);
  dart.setMethodSignature(src__engine.ClipRRectLayer, () => ({
    __proto__: dart.getMethods(src__engine.ClipRRectLayer.__proto__),
    paint: dart.fnType(dart.void, [src__engine.PaintContext])
  }));
  dart.setFieldSignature(src__engine.ClipRRectLayer, () => ({
    __proto__: dart.getFields(src__engine.ClipRRectLayer.__proto__),
    [_clipRRect$]: dart.finalFieldType(ui.RRect)
  }));
  const _transform$ = dart.privateName(src__engine, "_transform");
  src__engine.TransformLayer = class TransformLayer extends src__engine.ContainerLayer {
    preroll(context, matrix) {
      let childMatrix = matrix['*'](this[_transform$]);
      let childPaintBounds = this.prerollChildren(context, src__engine.Matrix4._check(childMatrix));
      this.paintBounds = src__engine.TransformLayer._transformRect(this[_transform$], childPaintBounds);
    }
    static _transformPoint(transform, point) {
      let position3 = src__engine.Vector3.new(point.dx, point.dy, 0.0);
      let transformed3 = transform.perspectiveTransform(position3);
      return new ui.Offset.new(transformed3.x, transformed3.y);
    }
    static _transformRect(transform, rect) {
      let point1 = src__engine.TransformLayer._transformPoint(transform, rect.topLeft);
      let point2 = src__engine.TransformLayer._transformPoint(transform, rect.topRight);
      let point3 = src__engine.TransformLayer._transformPoint(transform, rect.bottomLeft);
      let point4 = src__engine.TransformLayer._transformPoint(transform, rect.bottomRight);
      return new ui.Rect.fromLTRB(src__engine.TransformLayer._min4(point1.dx, point2.dx, point3.dx, point4.dx), src__engine.TransformLayer._min4(point1.dy, point2.dy, point3.dy, point4.dy), src__engine.TransformLayer._max4(point1.dx, point2.dx, point3.dx, point4.dx), src__engine.TransformLayer._max4(point1.dy, point2.dy, point3.dy, point4.dy));
    }
    static _min4(a, b, c, d) {
      return math.min(core.double, a, math.min(core.double, b, math.min(core.double, c, d)));
    }
    static _max4(a, b, c, d) {
      return math.max(core.double, a, math.max(core.double, b, math.max(core.double, c, d)));
    }
    paint(context) {
      if (!dart.test(this.needsPainting)) dart.assertFailed();
      context.canvas.save();
      context.canvas.transform(this[_transform$].storage);
      this.paintChildren(context);
      context.canvas.restore();
    }
  };
  (src__engine.TransformLayer.new = function(_transform) {
    this[_transform$] = _transform;
    src__engine.TransformLayer.__proto__.new.call(this);
    ;
  }).prototype = src__engine.TransformLayer.prototype;
  dart.addTypeTests(src__engine.TransformLayer);
  dart.setMethodSignature(src__engine.TransformLayer, () => ({
    __proto__: dart.getMethods(src__engine.TransformLayer.__proto__),
    paint: dart.fnType(dart.void, [src__engine.PaintContext])
  }));
  dart.setFieldSignature(src__engine.TransformLayer, () => ({
    __proto__: dart.getFields(src__engine.TransformLayer.__proto__),
    [_transform$]: dart.finalFieldType(src__engine.Matrix4)
  }));
  src__engine.PictureLayer = class PictureLayer extends src__engine.Layer {
    get picture() {
      return this[picture$];
    }
    set picture(value) {
      super.picture = value;
    }
    get offset() {
      return this[offset$];
    }
    set offset(value) {
      super.offset = value;
    }
    get isComplex() {
      return this[isComplex$];
    }
    set isComplex(value) {
      super.isComplex = value;
    }
    get willChange() {
      return this[willChange$];
    }
    set willChange(value) {
      super.willChange = value;
    }
    preroll(context, matrix) {
      let t1;
      let cache = context.rasterCache;
      if (cache != null) {
        let translateMatrix = (t1 = src__engine.Matrix4.identity(), t1.setTranslationRaw(this.offset.dx, this.offset.dy, 0.0), t1);
        let cacheMatrix = translateMatrix['*'](matrix);
        cache.prepare(this.picture, src__engine.Matrix4._check(cacheMatrix), this.isComplex, this.willChange);
      }
      this.paintBounds = this.picture.cullRect.shift(this.offset);
    }
    paint(context) {
      if (!(this.picture != null)) dart.assertFailed();
      if (!dart.test(this.needsPainting)) dart.assertFailed();
      context.canvas.save();
      context.canvas.translate(this.offset.dx, this.offset.dy);
      if (context.rasterCache != null) {
        let cacheMatrix = context.canvas.currentTransform;
        let result = context.rasterCache.get(this.picture, cacheMatrix);
        if (dart.test(result.isValid)) {
          result.draw(context.canvas);
          return;
        }
      }
      context.canvas.drawPicture(this.picture);
      context.canvas.restore();
    }
  };
  (src__engine.PictureLayer.new = function(picture, offset, isComplex, willChange) {
    this[picture$] = picture;
    this[offset$] = offset;
    this[isComplex$] = isComplex;
    this[willChange$] = willChange;
    src__engine.PictureLayer.__proto__.new.call(this);
    ;
  }).prototype = src__engine.PictureLayer.prototype;
  dart.addTypeTests(src__engine.PictureLayer);
  const picture$ = Symbol("PictureLayer.picture");
  const offset$ = Symbol("PictureLayer.offset");
  const isComplex$ = Symbol("PictureLayer.isComplex");
  const willChange$ = Symbol("PictureLayer.willChange");
  dart.setMethodSignature(src__engine.PictureLayer, () => ({
    __proto__: dart.getMethods(src__engine.PictureLayer.__proto__),
    preroll: dart.fnType(dart.void, [src__engine.PrerollContext, src__engine.Matrix4]),
    paint: dart.fnType(dart.void, [src__engine.PaintContext])
  }));
  dart.setFieldSignature(src__engine.PictureLayer, () => ({
    __proto__: dart.getFields(src__engine.PictureLayer.__proto__),
    picture: dart.finalFieldType(ui.Picture),
    offset: dart.finalFieldType(ui.Offset),
    isComplex: dart.finalFieldType(core.bool),
    willChange: dart.finalFieldType(core.bool)
  }));
  const _elevation$ = dart.privateName(src__engine, "_elevation");
  const _color$ = dart.privateName(src__engine, "_color");
  const _shadowColor$ = dart.privateName(src__engine, "_shadowColor");
  const _path$ = dart.privateName(src__engine, "_path");
  const _clipBehavior$ = dart.privateName(src__engine, "_clipBehavior");
  src__engine.PhysicalShapeLayer = class PhysicalShapeLayer extends src__engine.ContainerLayer {
    preroll(context, matrix) {
      this.prerollChildren(context, matrix);
      this.paintBounds = src__engine.ElevationShadow.computeShadowRect(this[_path$].getBounds(), this[_elevation$]);
    }
    paint(context) {
      let t1;
      if (!dart.test(this.needsPainting)) dart.assertFailed();
      if (this[_elevation$] !== 0) {
        src__engine.PhysicalShapeLayer.drawShadow(context.canvas, this[_path$], this[_shadowColor$], this[_elevation$], this[_color$].alpha !== 255);
      }
      let paint = (t1 = new ui.Paint.new(), t1.color = this[_color$], t1).webOnlyPaintData;
      if (!dart.equals(this[_clipBehavior$], ui.Clip.antiAliasWithSaveLayer)) {
        context.canvas.drawPath(this[_path$], paint);
      }
      let saveCount = context.canvas.save();
      switch (this[_clipBehavior$]) {
        case ui.Clip.hardEdge:
        {
          context.canvas.clipPath(this[_path$]);
          break;
        }
        case ui.Clip.antiAlias:
        {
          context.canvas.clipPath(this[_path$]);
          break;
        }
        case ui.Clip.antiAliasWithSaveLayer:
        {
          context.canvas.clipPath(this[_path$]);
          context.canvas.saveLayer(this.paintBounds, null);
          break;
        }
        case ui.Clip.none:
        {
          break;
        }
      }
      if (dart.equals(this[_clipBehavior$], ui.Clip.antiAliasWithSaveLayer)) {
        context.canvas.drawPaint(paint);
      }
      this.paintChildren(context);
      context.canvas.restoreToCount(saveCount);
    }
    static drawShadow(canvas, path, color, elevation, transparentOccluder) {
      canvas.drawShadow(path, color, elevation, transparentOccluder);
    }
  };
  (src__engine.PhysicalShapeLayer.new = function(_elevation, _color, _shadowColor, _path, _clipBehavior) {
    this[_elevation$] = _elevation;
    this[_color$] = _color;
    this[_shadowColor$] = _shadowColor;
    this[_path$] = _path;
    this[_clipBehavior$] = _clipBehavior;
    src__engine.PhysicalShapeLayer.__proto__.new.call(this);
    ;
  }).prototype = src__engine.PhysicalShapeLayer.prototype;
  dart.addTypeTests(src__engine.PhysicalShapeLayer);
  dart.setMethodSignature(src__engine.PhysicalShapeLayer, () => ({
    __proto__: dart.getMethods(src__engine.PhysicalShapeLayer.__proto__),
    paint: dart.fnType(dart.void, [src__engine.PaintContext])
  }));
  dart.setFieldSignature(src__engine.PhysicalShapeLayer, () => ({
    __proto__: dart.getFields(src__engine.PhysicalShapeLayer.__proto__),
    [_elevation$]: dart.finalFieldType(core.double),
    [_color$]: dart.finalFieldType(ui.Color),
    [_shadowColor$]: dart.finalFieldType(ui.Color),
    [_path$]: dart.finalFieldType(ui.Path),
    [_clipBehavior$]: dart.finalFieldType(ui.Clip)
  }));
  const _layer$ = dart.privateName(src__engine, "_layer");
  ui.EngineLayer = class EngineLayer extends core.Object {};
  (ui.EngineLayer.new = function() {
    ;
  }).prototype = ui.EngineLayer.prototype;
  dart.addTypeTests(ui.EngineLayer);
  src__engine.EngineLayerImpl = class EngineLayerImpl extends ui.EngineLayer {};
  (src__engine.EngineLayerImpl.new = function(_layer) {
    this[_layer$] = _layer;
    ;
  }).prototype = src__engine.EngineLayerImpl.prototype;
  dart.addTypeTests(src__engine.EngineLayerImpl);
  dart.setFieldSignature(src__engine.EngineLayerImpl, () => ({
    __proto__: dart.getFields(src__engine.EngineLayerImpl.__proto__),
    [_layer$]: dart.finalFieldType(src__engine.ContainerLayer)
  }));
  src__engine.LayerScene = class LayerScene extends core.Object {
    get layerTree() {
      return this[layerTree];
    }
    set layerTree(value) {
      super.layerTree = value;
    }
    dispose() {
    }
    toImage(width, height) {
      return null;
    }
    get webOnlyRootElement() {
      return null;
    }
  };
  (src__engine.LayerScene.new = function(rootLayer) {
    this[layerTree] = new src__engine.LayerTree.new();
    this.layerTree.rootLayer = rootLayer;
  }).prototype = src__engine.LayerScene.prototype;
  dart.addTypeTests(src__engine.LayerScene);
  const layerTree = Symbol("LayerScene.layerTree");
  src__engine.LayerScene[dart.implements] = () => [ui.Scene];
  dart.setMethodSignature(src__engine.LayerScene, () => ({
    __proto__: dart.getMethods(src__engine.LayerScene.__proto__),
    dispose: dart.fnType(dart.void, []),
    toImage: dart.fnType(async.Future$(ui.Image), [core.int, core.int])
  }));
  dart.setGetterSignature(src__engine.LayerScene, () => ({
    __proto__: dart.getGetters(src__engine.LayerScene.__proto__),
    webOnlyRootElement: html.Element
  }));
  dart.setFieldSignature(src__engine.LayerScene, () => ({
    __proto__: dart.getFields(src__engine.LayerScene.__proto__),
    layerTree: dart.finalFieldType(src__engine.LayerTree)
  }));
  const _addTexture = dart.privateName(src__engine, "_addTexture");
  let const$;
  const _addTexture$ = dart.privateName(ui, "_addTexture");
  const _addPicture = dart.privateName(src__engine, "_addPicture");
  let const$0;
  let const$1;
  const _addPicture$ = dart.privateName(ui, "_addPicture");
  const _surfaceStack = dart.privateName(src__engine, "_surfaceStack");
  let const$2;
  const _surfaceStack$ = dart.privateName(ui, "_surfaceStack");
  const _addSurface = dart.privateName(src__engine, "_addSurface");
  let const$3;
  const _addSurface$ = dart.privateName(ui, "_addSurface");
  const _adoptSurface = dart.privateName(src__engine, "_adoptSurface");
  let const$4;
  const _adoptSurface$ = dart.privateName(ui, "_adoptSurface");
  const _currentSurface = dart.privateName(src__engine, "_currentSurface");
  let const$5;
  const _currentSurface$ = dart.privateName(ui, "_currentSurface");
  const _addChildScene = dart.privateName(src__engine, "_addChildScene");
  let const$6;
  const _addChildScene$ = dart.privateName(ui, "_addChildScene");
  const _pushSurface = dart.privateName(src__engine, "_pushSurface");
  let const$7;
  const _pushSurface$ = dart.privateName(ui, "_pushSurface");
  const _addPlatformView = dart.privateName(src__engine, "_addPlatformView");
  let const$8;
  const _addPlatformView$ = dart.privateName(ui, "_addPlatformView");
  const _addPerformanceOverlay = dart.privateName(src__engine, "_addPerformanceOverlay");
  let const$9;
  const _addPerformanceOverlay$ = dart.privateName(ui, "_addPerformanceOverlay");
  const _persistedScene = dart.privateName(src__engine, "_persistedScene");
  let const$10;
  const _persistedScene$ = dart.privateName(ui, "_persistedScene");
  src__engine.LayerSceneBuilder = class LayerSceneBuilder extends core.Object {
    get rootLayer() {
      return this[rootLayer];
    }
    set rootLayer(value) {
      this[rootLayer] = value;
    }
    get currentLayer() {
      return this[currentLayer];
    }
    set currentLayer(value) {
      this[currentLayer] = value;
    }
    addChildScene(opts) {
      let offset = opts && 'offset' in opts ? opts.offset : ui.Offset.zero;
      let width = opts && 'width' in opts ? opts.width : 0.0;
      let height = opts && 'height' in opts ? opts.height : 0.0;
      let sceneHost = opts && 'sceneHost' in opts ? opts.sceneHost : null;
      let hitTestable = opts && 'hitTestable' in opts ? opts.hitTestable : true;
      dart.throw(new core.UnimplementedError.new());
    }
    addPerformanceOverlay(enabledOptions, bounds, opts) {
      let webOnlyPaintedBy = opts && 'webOnlyPaintedBy' in opts ? opts.webOnlyPaintedBy : null;
      dart.throw(new core.UnimplementedError.new());
    }
    addPicture(offset, picture, opts) {
      let isComplexHint = opts && 'isComplexHint' in opts ? opts.isComplexHint : false;
      let willChangeHint = opts && 'willChangeHint' in opts ? opts.willChangeHint : false;
      let webOnlyPaintedBy = opts && 'webOnlyPaintedBy' in opts ? opts.webOnlyPaintedBy : null;
      this.currentLayer.add(new src__engine.PictureLayer.new(picture, offset, isComplexHint, willChangeHint));
    }
    addRetained(retainedLayer) {
      if (this.currentLayer == null) return;
      this.currentLayer.add(src__engine.EngineLayerImpl.as(retainedLayer)[_layer$]);
    }
    addTexture(textureId, opts) {
      let offset = opts && 'offset' in opts ? opts.offset : ui.Offset.zero;
      let width = opts && 'width' in opts ? opts.width : 0.0;
      let height = opts && 'height' in opts ? opts.height : 0.0;
      let freeze = opts && 'freeze' in opts ? opts.freeze : false;
      let webOnlyPaintedBy = opts && 'webOnlyPaintedBy' in opts ? opts.webOnlyPaintedBy : null;
    }
    addPlatformView(viewId, opts) {
      let offset = opts && 'offset' in opts ? opts.offset : ui.Offset.zero;
      let width = opts && 'width' in opts ? opts.width : 0.0;
      let height = opts && 'height' in opts ? opts.height : 0.0;
    }
    build() {
      return new src__engine.LayerScene.new(this.rootLayer);
    }
    pop() {
      if (this.currentLayer == null) return;
      this.currentLayer = this.currentLayer.parent;
    }
    pushBackdropFilter(filter, opts) {
      let webOnlyPaintedBy = opts && 'webOnlyPaintedBy' in opts ? opts.webOnlyPaintedBy : null;
      dart.throw(new core.UnimplementedError.new());
    }
    pushClipPath(path, opts) {
      let clipBehavior = opts && 'clipBehavior' in opts ? opts.clipBehavior : ui.Clip.antiAlias;
      let webOnlyPaintedBy = opts && 'webOnlyPaintedBy' in opts ? opts.webOnlyPaintedBy : null;
      this.pushLayer(new src__engine.ClipPathLayer.new(path));
      return null;
    }
    pushClipRRect(rrect, opts) {
      let clipBehavior = opts && 'clipBehavior' in opts ? opts.clipBehavior : null;
      let webOnlyPaintedBy = opts && 'webOnlyPaintedBy' in opts ? opts.webOnlyPaintedBy : null;
      this.pushLayer(new src__engine.ClipRRectLayer.new(rrect));
      return null;
    }
    pushClipRect(rect, opts) {
      let clipBehavior = opts && 'clipBehavior' in opts ? opts.clipBehavior : ui.Clip.antiAlias;
      let webOnlyPaintedBy = opts && 'webOnlyPaintedBy' in opts ? opts.webOnlyPaintedBy : null;
      this.pushLayer(new src__engine.ClipRectLayer.new(rect));
      return null;
    }
    pushColorFilter(color, blendMode, opts) {
      let webOnlyPaintedBy = opts && 'webOnlyPaintedBy' in opts ? opts.webOnlyPaintedBy : null;
      dart.throw(new core.UnimplementedError.new());
    }
    pushOffset(dx, dy, opts) {
      let webOnlyPaintedBy = opts && 'webOnlyPaintedBy' in opts ? opts.webOnlyPaintedBy : null;
      let matrix = src__engine.Matrix4.translationValues(dx, dy, 0.0);
      let layer = new src__engine.TransformLayer.new(matrix);
      this.pushLayer(layer);
      return new src__engine.EngineLayerImpl.new(layer);
    }
    pushOpacity(alpha, opts) {
      let webOnlyPaintedBy = opts && 'webOnlyPaintedBy' in opts ? opts.webOnlyPaintedBy : null;
      let offset = opts && 'offset' in opts ? opts.offset : ui.Offset.zero;
      this.pushOffset(0.0, 0.0);
      return null;
    }
    pushPhysicalShape(opts) {
      let path = opts && 'path' in opts ? opts.path : null;
      let elevation = opts && 'elevation' in opts ? opts.elevation : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let shadowColor = opts && 'shadowColor' in opts ? opts.shadowColor : null;
      let clipBehavior = opts && 'clipBehavior' in opts ? opts.clipBehavior : ui.Clip.none;
      let webOnlyPaintedBy = opts && 'webOnlyPaintedBy' in opts ? opts.webOnlyPaintedBy : null;
      let layer = new src__engine.PhysicalShapeLayer.new(elevation, color, shadowColor, path, clipBehavior);
      this.pushLayer(layer);
      return new src__engine.EngineLayerImpl.new(layer);
    }
    pushShaderMask(shader, maskRect, blendMode, opts) {
      let webOnlyPaintedBy = opts && 'webOnlyPaintedBy' in opts ? opts.webOnlyPaintedBy : null;
      dart.throw(new core.UnimplementedError.new());
    }
    pushTransform(matrix4, opts) {
      let webOnlyPaintedBy = opts && 'webOnlyPaintedBy' in opts ? opts.webOnlyPaintedBy : null;
      let matrix = src__engine.Matrix4.fromList(matrix4);
      this.pushLayer(new src__engine.TransformLayer.new(matrix));
      return null;
    }
    setCheckerboardOffscreenLayers(checkerboard) {
    }
    setCheckerboardRasterCacheImages(checkerboard) {
    }
    setRasterizerTracingThreshold(frameInterval) {
    }
    pushLayer(layer) {
      if (this.rootLayer == null) {
        this.rootLayer = this.currentLayer = layer;
        return;
      }
      if (this.currentLayer == null) return;
      this.currentLayer.add(layer);
      this.currentLayer = layer;
    }
    [_addTexture$](dx, dy, width, height, textureId, webOnlyPaintedBy) {
      return this[$noSuchMethod](new core._Invocation.method(const$ || (const$ = dart.const(new _js_helper.PrivateSymbol.new('_addTexture', _addTexture))), null, [dx, dy, width, height, textureId, webOnlyPaintedBy]));
    }
    [_addPicture$](dx, dy, picture, hints, opts) {
      let webOnlyPaintedBy = opts && 'webOnlyPaintedBy' in opts ? opts.webOnlyPaintedBy : null;
      return this[$noSuchMethod](new core._Invocation.method(const$0 || (const$0 = dart.const(new _js_helper.PrivateSymbol.new('_addPicture', _addPicture))), null, [dx, dy, picture, hints], new (LinkedMapOfSymbol$dynamic()).from([const$1 || (const$1 = dart.const(new _internal.Symbol.new('webOnlyPaintedBy'))), webOnlyPaintedBy])));
    }
    get [_surfaceStack$]() {
      return ListOfPersistedContainerSurface()._check(this[$noSuchMethod](new core._Invocation.getter(const$2 || (const$2 = dart.const(new _js_helper.PrivateSymbol.new('_surfaceStack', _surfaceStack))))));
    }
    [_addSurface$](surface) {
      return this[$noSuchMethod](new core._Invocation.method(const$3 || (const$3 = dart.const(new _js_helper.PrivateSymbol.new('_addSurface', _addSurface))), null, [surface]));
    }
    [_adoptSurface$](surface) {
      return this[$noSuchMethod](new core._Invocation.method(const$4 || (const$4 = dart.const(new _js_helper.PrivateSymbol.new('_adoptSurface', _adoptSurface))), null, [surface]));
    }
    get [_currentSurface$]() {
      return ui.PersistedContainerSurface._check(this[$noSuchMethod](new core._Invocation.getter(const$5 || (const$5 = dart.const(new _js_helper.PrivateSymbol.new('_currentSurface', _currentSurface))))));
    }
    [_addChildScene$](dx, dy, width, height, sceneHost, hitTestable) {
      return this[$noSuchMethod](new core._Invocation.method(const$6 || (const$6 = dart.const(new _js_helper.PrivateSymbol.new('_addChildScene', _addChildScene))), null, [dx, dy, width, height, sceneHost, hitTestable]));
    }
    [_pushSurface$](surface) {
      return ui.EngineLayer._check(this[$noSuchMethod](new core._Invocation.method(const$7 || (const$7 = dart.const(new _js_helper.PrivateSymbol.new('_pushSurface', _pushSurface))), null, [surface])));
    }
    [_addPlatformView$](dx, dy, width, height, viewId) {
      return this[$noSuchMethod](new core._Invocation.method(const$8 || (const$8 = dart.const(new _js_helper.PrivateSymbol.new('_addPlatformView', _addPlatformView))), null, [dx, dy, width, height, viewId]));
    }
    [_addPerformanceOverlay$](enabledOptions, left, right, top, bottom, webOnlyPaintedBy) {
      return this[$noSuchMethod](new core._Invocation.method(const$9 || (const$9 = dart.const(new _js_helper.PrivateSymbol.new('_addPerformanceOverlay', _addPerformanceOverlay))), null, [enabledOptions, left, right, top, bottom, webOnlyPaintedBy]));
    }
    get [_persistedScene$]() {
      return ui.PersistedScene._check(this[$noSuchMethod](new core._Invocation.getter(const$10 || (const$10 = dart.const(new _js_helper.PrivateSymbol.new('_persistedScene', _persistedScene))))));
    }
  };
  (src__engine.LayerSceneBuilder.new = function() {
    this[rootLayer] = null;
    this[currentLayer] = null;
    ;
  }).prototype = src__engine.LayerSceneBuilder.prototype;
  dart.addTypeTests(src__engine.LayerSceneBuilder);
  const rootLayer = Symbol("LayerSceneBuilder.rootLayer");
  const currentLayer = Symbol("LayerSceneBuilder.currentLayer");
  src__engine.LayerSceneBuilder[dart.implements] = () => [ui.SceneBuilder];
  dart.setMethodSignature(src__engine.LayerSceneBuilder, () => ({
    __proto__: dart.getMethods(src__engine.LayerSceneBuilder.__proto__),
    addChildScene: dart.fnType(dart.void, [], {height: core.double, hitTestable: core.bool, offset: ui.Offset, sceneHost: ui.SceneHost, width: core.double}),
    addPerformanceOverlay: dart.fnType(dart.void, [core.int, ui.Rect], {webOnlyPaintedBy: core.Object}),
    addPicture: dart.fnType(dart.void, [ui.Offset, ui.Picture], {isComplexHint: core.bool, webOnlyPaintedBy: core.Object, willChangeHint: core.bool}),
    addRetained: dart.fnType(dart.void, [ui.EngineLayer]),
    addTexture: dart.fnType(dart.void, [core.int], {freeze: core.bool, height: core.double, offset: ui.Offset, webOnlyPaintedBy: core.Object, width: core.double}),
    addPlatformView: dart.fnType(dart.void, [core.int], {height: core.double, offset: ui.Offset, width: core.double}),
    build: dart.fnType(ui.Scene, []),
    pop: dart.fnType(dart.void, []),
    pushBackdropFilter: dart.fnType(ui.EngineLayer, [ui.ImageFilter], {webOnlyPaintedBy: core.Object}),
    pushClipPath: dart.fnType(ui.EngineLayer, [ui.Path], {clipBehavior: ui.Clip, webOnlyPaintedBy: core.Object}),
    pushClipRRect: dart.fnType(ui.EngineLayer, [ui.RRect], {clipBehavior: ui.Clip, webOnlyPaintedBy: core.Object}),
    pushClipRect: dart.fnType(ui.EngineLayer, [ui.Rect], {clipBehavior: ui.Clip, webOnlyPaintedBy: core.Object}),
    pushColorFilter: dart.fnType(ui.EngineLayer, [ui.Color, ui.BlendMode], {webOnlyPaintedBy: core.Object}),
    pushOffset: dart.fnType(ui.EngineLayer, [core.double, core.double], {webOnlyPaintedBy: core.Object}),
    pushOpacity: dart.fnType(ui.EngineLayer, [core.int], {offset: ui.Offset, webOnlyPaintedBy: core.Object}),
    pushPhysicalShape: dart.fnType(ui.EngineLayer, [], {clipBehavior: ui.Clip, color: ui.Color, elevation: core.double, path: ui.Path, shadowColor: ui.Color, webOnlyPaintedBy: core.Object}),
    pushShaderMask: dart.fnType(ui.EngineLayer, [ui.Shader, ui.Rect, ui.BlendMode], {webOnlyPaintedBy: core.Object}),
    pushTransform: dart.fnType(ui.EngineLayer, [typed_data.Float64List], {webOnlyPaintedBy: core.Object}),
    setCheckerboardOffscreenLayers: dart.fnType(dart.void, [core.bool]),
    setCheckerboardRasterCacheImages: dart.fnType(dart.void, [core.bool]),
    setRasterizerTracingThreshold: dart.fnType(dart.void, [core.int]),
    pushLayer: dart.fnType(dart.void, [src__engine.ContainerLayer]),
    [_addTexture$]: dart.fnType(dart.void, [core.double, core.double, core.double, core.double, core.int, core.Object]),
    [_addPicture$]: dart.fnType(dart.void, [core.double, core.double, ui.Picture, core.int], {webOnlyPaintedBy: core.Object}),
    [_addSurface$]: dart.fnType(dart.void, [ui.PersistedSurface]),
    [_adoptSurface$]: dart.fnType(dart.void, [ui.PersistedSurface]),
    [_addChildScene$]: dart.fnType(dart.void, [core.double, core.double, core.double, core.double, ui.SceneHost, core.bool]),
    [_pushSurface$]: dart.fnType(ui.EngineLayer, [ui.PersistedContainerSurface]),
    [_addPlatformView$]: dart.fnType(dart.void, [core.double, core.double, core.double, core.double, core.int]),
    [_addPerformanceOverlay$]: dart.fnType(dart.void, [core.int, core.double, core.double, core.double, core.double, core.Object])
  }));
  dart.setGetterSignature(src__engine.LayerSceneBuilder, () => ({
    __proto__: dart.getGetters(src__engine.LayerSceneBuilder.__proto__),
    [_surfaceStack$]: core.List$(ui.PersistedContainerSurface),
    [_currentSurface$]: ui.PersistedContainerSurface,
    [_persistedScene$]: ui.PersistedScene
  }));
  dart.setFieldSignature(src__engine.LayerSceneBuilder, () => ({
    __proto__: dart.getFields(src__engine.LayerSceneBuilder.__proto__),
    rootLayer: dart.fieldType(src__engine.Layer),
    currentLayer: dart.fieldType(src__engine.ContainerLayer)
  }));
  src__engine.LayerTree = class LayerTree extends core.Object {
    get rootLayer() {
      return this[rootLayer$];
    }
    set rootLayer(value) {
      this[rootLayer$] = value;
    }
    get frameSize() {
      return this[frameSize];
    }
    set frameSize(value) {
      this[frameSize] = value;
    }
    preroll(frame, opts) {
      let ignoreRasterCache = opts && 'ignoreRasterCache' in opts ? opts.ignoreRasterCache : false;
      let context = new src__engine.PrerollContext.new(dart.test(ignoreRasterCache) ? null : frame.rasterCache);
      this.rootLayer.preroll(context, src__engine.Matrix4.identity());
    }
    paint(frame, opts) {
      let ignoreRasterCache = opts && 'ignoreRasterCache' in opts ? opts.ignoreRasterCache : false;
      let context = new src__engine.PaintContext.new(frame.canvas, dart.test(ignoreRasterCache) ? null : frame.rasterCache);
      if (dart.test(this.rootLayer.needsPainting)) {
        this.rootLayer.paint(context);
      }
    }
  };
  (src__engine.LayerTree.new = function() {
    this[rootLayer$] = null;
    this[frameSize] = null;
    ;
  }).prototype = src__engine.LayerTree.prototype;
  dart.addTypeTests(src__engine.LayerTree);
  const rootLayer$ = Symbol("LayerTree.rootLayer");
  const frameSize = Symbol("LayerTree.frameSize");
  dart.setMethodSignature(src__engine.LayerTree, () => ({
    __proto__: dart.getMethods(src__engine.LayerTree.__proto__),
    preroll: dart.fnType(dart.void, [src__engine.Frame], {ignoreRasterCache: core.bool}),
    paint: dart.fnType(dart.void, [src__engine.Frame], {ignoreRasterCache: core.bool})
  }));
  dart.setFieldSignature(src__engine.LayerTree, () => ({
    __proto__: dart.getFields(src__engine.LayerTree.__proto__),
    rootLayer: dart.fieldType(src__engine.Layer),
    frameSize: dart.fieldType(ui.Size)
  }));
  src__engine.Frame = class Frame extends core.Object {
    get canvas() {
      return this[canvas$0];
    }
    set canvas(value) {
      super.canvas = value;
    }
    get rasterCache() {
      return this[rasterCache$1];
    }
    set rasterCache(value) {
      super.rasterCache = value;
    }
    raster(layerTree, opts) {
      let ignoreRasterCache = opts && 'ignoreRasterCache' in opts ? opts.ignoreRasterCache : false;
      layerTree.preroll(this, {ignoreRasterCache: ignoreRasterCache});
      layerTree.paint(this, {ignoreRasterCache: ignoreRasterCache});
      return true;
    }
  };
  (src__engine.Frame.new = function(canvas, rasterCache) {
    this[canvas$0] = canvas;
    this[rasterCache$1] = rasterCache;
    ;
  }).prototype = src__engine.Frame.prototype;
  dart.addTypeTests(src__engine.Frame);
  const canvas$0 = Symbol("Frame.canvas");
  const rasterCache$1 = Symbol("Frame.rasterCache");
  dart.setMethodSignature(src__engine.Frame, () => ({
    __proto__: dart.getMethods(src__engine.Frame.__proto__),
    raster: dart.fnType(core.bool, [src__engine.LayerTree], {ignoreRasterCache: core.bool})
  }));
  dart.setFieldSignature(src__engine.Frame, () => ({
    __proto__: dart.getFields(src__engine.Frame.__proto__),
    canvas: dart.finalFieldType(src__engine.BitmapCanvas),
    rasterCache: dart.finalFieldType(src__engine.RasterCache)
  }));
  src__engine.CompositorContext = class CompositorContext extends core.Object {
    get rasterCache() {
      return this[rasterCache];
    }
    set rasterCache(value) {
      this[rasterCache] = value;
    }
    acquireFrame(canvas) {
      return new src__engine.Frame.new(canvas, this.rasterCache);
    }
  };
  (src__engine.CompositorContext.new = function() {
    this[rasterCache] = null;
    ;
  }).prototype = src__engine.CompositorContext.prototype;
  dart.addTypeTests(src__engine.CompositorContext);
  const rasterCache = Symbol("CompositorContext.rasterCache");
  dart.setMethodSignature(src__engine.CompositorContext, () => ({
    __proto__: dart.getMethods(src__engine.CompositorContext.__proto__),
    acquireFrame: dart.fnType(src__engine.Frame, [src__engine.BitmapCanvas])
  }));
  dart.setFieldSignature(src__engine.CompositorContext, () => ({
    __proto__: dart.getFields(src__engine.CompositorContext.__proto__),
    rasterCache: dart.fieldType(src__engine.RasterCache)
  }));
  src__engine.RasterCache = class RasterCache extends core.Object {
    prepare(picture, matrix, isComplex, willChange) {
    }
    get(picture, matrix) {
      return new src__engine.RasterCacheResult.new();
    }
  };
  (src__engine.RasterCache.new = function() {
    ;
  }).prototype = src__engine.RasterCache.prototype;
  dart.addTypeTests(src__engine.RasterCache);
  dart.setMethodSignature(src__engine.RasterCache, () => ({
    __proto__: dart.getMethods(src__engine.RasterCache.__proto__),
    prepare: dart.fnType(dart.void, [ui.Picture, src__engine.Matrix4, core.bool, core.bool]),
    get: dart.fnType(src__engine.RasterCacheResult, [ui.Picture, src__engine.Matrix4])
  }));
  src__engine.RasterCacheResult = class RasterCacheResult extends core.Object {
    get isValid() {
      return false;
    }
    draw(canvas) {
    }
  };
  (src__engine.RasterCacheResult.new = function() {
    ;
  }).prototype = src__engine.RasterCacheResult.prototype;
  dart.addTypeTests(src__engine.RasterCacheResult);
  dart.setMethodSignature(src__engine.RasterCacheResult, () => ({
    __proto__: dart.getMethods(src__engine.RasterCacheResult.__proto__),
    draw: dart.fnType(dart.void, [src__engine.BitmapCanvas])
  }));
  dart.setGetterSignature(src__engine.RasterCacheResult, () => ({
    __proto__: dart.getGetters(src__engine.RasterCacheResult.__proto__),
    isValid: core.bool
  }));
  src__engine.Rasterizer = class Rasterizer extends core.Object {
    get surface() {
      return this[surface$];
    }
    set surface(value) {
      super.surface = value;
    }
    get context() {
      return this[context];
    }
    set context(value) {
      super.context = value;
    }
    draw(layerTree) {
      let frame = this.surface.acquireFrame(ui.window.physicalSize);
      let canvas = frame.canvas;
      let compositorFrame = this.context.acquireFrame(canvas);
      canvas.clear();
      compositorFrame.raster(layerTree, {ignoreRasterCache: true});
      frame.submit();
    }
  };
  (src__engine.Rasterizer.new = function(surface) {
    this[context] = new src__engine.CompositorContext.new();
    this[surface$] = surface;
    ;
  }).prototype = src__engine.Rasterizer.prototype;
  dart.addTypeTests(src__engine.Rasterizer);
  const surface$ = Symbol("Rasterizer.surface");
  const context = Symbol("Rasterizer.context");
  dart.setMethodSignature(src__engine.Rasterizer, () => ({
    __proto__: dart.getMethods(src__engine.Rasterizer.__proto__),
    draw: dart.fnType(dart.void, [src__engine.LayerTree])
  }));
  dart.setFieldSignature(src__engine.Rasterizer, () => ({
    __proto__: dart.getFields(src__engine.Rasterizer.__proto__),
    surface: dart.finalFieldType(src__engine.Surface),
    context: dart.finalFieldType(src__engine.CompositorContext)
  }));
  src__engine.SurfaceFrame = class SurfaceFrame extends core.Object {
    get submitFn() {
      return this[submitFn$];
    }
    set submitFn(value) {
      super.submitFn = value;
    }
    get canvas() {
      return this[canvas$1];
    }
    set canvas(value) {
      super.canvas = value;
    }
    submit() {
      this.submitFn(this.canvas);
    }
  };
  (src__engine.SurfaceFrame.new = function(submitFn, canvas) {
    this[submitFn$] = submitFn;
    this[canvas$1] = canvas;
    ;
  }).prototype = src__engine.SurfaceFrame.prototype;
  dart.addTypeTests(src__engine.SurfaceFrame);
  const submitFn$ = Symbol("SurfaceFrame.submitFn");
  const canvas$1 = Symbol("SurfaceFrame.canvas");
  dart.setMethodSignature(src__engine.SurfaceFrame, () => ({
    __proto__: dart.getMethods(src__engine.SurfaceFrame.__proto__),
    submit: dart.fnType(dart.void, [])
  }));
  dart.setFieldSignature(src__engine.SurfaceFrame, () => ({
    __proto__: dart.getFields(src__engine.SurfaceFrame.__proto__),
    submitFn: dart.finalFieldType(dart.fnType(dart.void, [src__engine.BitmapCanvas])),
    canvas: dart.finalFieldType(src__engine.BitmapCanvas)
  }));
  src__engine.Surface = class Surface extends core.Object {
    get canvasCache() {
      return this[canvasCache];
    }
    set canvasCache(value) {
      super.canvasCache = value;
    }
    get submitFunction() {
      return this[submitFunction$];
    }
    set submitFunction(value) {
      super.submitFunction = value;
    }
    acquireFrame(size) {
      let canvas = this.canvasCache.acquireCanvas(size);
      return new src__engine.SurfaceFrame.new(this.submitFunction, canvas);
    }
    get rootTransformation() {
      return null;
    }
  };
  (src__engine.Surface.new = function(submitFunction) {
    this[canvasCache] = new src__engine._CanvasCache.new();
    this[submitFunction$] = submitFunction;
    ;
  }).prototype = src__engine.Surface.prototype;
  dart.addTypeTests(src__engine.Surface);
  const canvasCache = Symbol("Surface.canvasCache");
  const submitFunction$ = Symbol("Surface.submitFunction");
  dart.setMethodSignature(src__engine.Surface, () => ({
    __proto__: dart.getMethods(src__engine.Surface.__proto__),
    acquireFrame: dart.fnType(src__engine.SurfaceFrame, [ui.Size])
  }));
  dart.setGetterSignature(src__engine.Surface, () => ({
    __proto__: dart.getGetters(src__engine.Surface.__proto__),
    rootTransformation: src__engine.Matrix4
  }));
  dart.setFieldSignature(src__engine.Surface, () => ({
    __proto__: dart.getFields(src__engine.Surface.__proto__),
    canvasCache: dart.finalFieldType(src__engine._CanvasCache),
    submitFunction: dart.finalFieldType(dart.fnType(dart.void, [src__engine.BitmapCanvas]))
  }));
  src__engine._CanvasCache = class _CanvasCache extends core.Object {
    acquireCanvas(size) {
      let t1;
      if (!(size != null)) dart.assertFailed();
      if (dart.equals(size, (t1 = this[_canvas], t1 == null ? null : t1.size))) return this[_canvas];
      this[_canvas] = new src__engine.BitmapCanvas.new(ui.Offset.zero['&'](size));
      return this[_canvas];
    }
  };
  (src__engine._CanvasCache.new = function() {
    this[_canvas] = null;
    ;
  }).prototype = src__engine._CanvasCache.prototype;
  dart.addTypeTests(src__engine._CanvasCache);
  dart.setMethodSignature(src__engine._CanvasCache, () => ({
    __proto__: dart.getMethods(src__engine._CanvasCache.__proto__),
    acquireCanvas: dart.fnType(src__engine.BitmapCanvas, [ui.Size])
  }));
  dart.setFieldSignature(src__engine._CanvasCache, () => ({
    __proto__: dart.getFields(src__engine._CanvasCache.__proto__),
    [_canvas]: dart.fieldType(src__engine.BitmapCanvas)
  }));
  src__engine.ViewportMetrics = class ViewportMetrics extends core.Object {
    get devicePixelRatio() {
      return this[devicePixelRatio$];
    }
    set devicePixelRatio(value) {
      super.devicePixelRatio = value;
    }
    get physicalWidth() {
      return this[physicalWidth$];
    }
    set physicalWidth(value) {
      super.physicalWidth = value;
    }
    get physicalHeight() {
      return this[physicalHeight$];
    }
    set physicalHeight(value) {
      super.physicalHeight = value;
    }
  };
  (src__engine.ViewportMetrics.new = function(devicePixelRatio, physicalWidth, physicalHeight) {
    this[devicePixelRatio$] = devicePixelRatio;
    this[physicalWidth$] = physicalWidth;
    this[physicalHeight$] = physicalHeight;
    ;
  }).prototype = src__engine.ViewportMetrics.prototype;
  dart.addTypeTests(src__engine.ViewportMetrics);
  const devicePixelRatio$ = Symbol("ViewportMetrics.devicePixelRatio");
  const physicalWidth$ = Symbol("ViewportMetrics.physicalWidth");
  const physicalHeight$ = Symbol("ViewportMetrics.physicalHeight");
  dart.setFieldSignature(src__engine.ViewportMetrics, () => ({
    __proto__: dart.getFields(src__engine.ViewportMetrics.__proto__),
    devicePixelRatio: dart.finalFieldType(core.double),
    physicalWidth: dart.finalFieldType(core.double),
    physicalHeight: dart.finalFieldType(core.double)
  }));
  src__engine.PlatformMessage = class PlatformMessage extends core.Object {
    get channel() {
      return this[channel$];
    }
    set channel(value) {
      super.channel = value;
    }
    get data() {
      return this[data$];
    }
    set data(value) {
      super.data = value;
    }
    get response() {
      return this[response$];
    }
    set response(value) {
      super.response = value;
    }
  };
  (src__engine.PlatformMessage.new = function(channel, data, response) {
    this[channel$] = channel;
    this[data$] = data;
    this[response$] = response;
    ;
  }).prototype = src__engine.PlatformMessage.prototype;
  dart.addTypeTests(src__engine.PlatformMessage);
  const channel$ = Symbol("PlatformMessage.channel");
  const data$ = Symbol("PlatformMessage.data");
  const response$ = Symbol("PlatformMessage.response");
  dart.setFieldSignature(src__engine.PlatformMessage, () => ({
    __proto__: dart.getFields(src__engine.PlatformMessage.__proto__),
    channel: dart.finalFieldType(core.String),
    data: dart.finalFieldType(typed_data.ByteData),
    response: dart.finalFieldType(src__engine.PlatformMessageResponse)
  }));
  src__engine.PlatformMessageResponse = class PlatformMessageResponse extends core.Object {
    complete(data) {
    }
    completeEmpty() {
    }
  };
  (src__engine.PlatformMessageResponse.new = function() {
    ;
  }).prototype = src__engine.PlatformMessageResponse.prototype;
  dart.addTypeTests(src__engine.PlatformMessageResponse);
  dart.setMethodSignature(src__engine.PlatformMessageResponse, () => ({
    __proto__: dart.getMethods(src__engine.PlatformMessageResponse.__proto__),
    complete: dart.fnType(dart.void, [typed_data.Uint8List]),
    completeEmpty: dart.fnType(dart.void, [])
  }));
  const _computeSubdivisionCount = dart.privateName(src__engine, "_computeSubdivisionCount");
  const _chop = dart.privateName(src__engine, "_chop");
  src__engine.Conic = class Conic extends core.Object {
    get p0x() {
      return this[p0x$];
    }
    set p0x(value) {
      this[p0x$] = value;
    }
    get p0y() {
      return this[p0y$];
    }
    set p0y(value) {
      this[p0y$] = value;
    }
    get p1x() {
      return this[p1x$];
    }
    set p1x(value) {
      this[p1x$] = value;
    }
    get p1y() {
      return this[p1y$];
    }
    set p1y(value) {
      this[p1y$] = value;
    }
    get p2x() {
      return this[p2x$];
    }
    set p2x(value) {
      this[p2x$] = value;
    }
    get p2y() {
      return this[p2y$];
    }
    set p2y(value) {
      this[p2y$] = value;
    }
    get fW() {
      return this[fW$];
    }
    set fW(value) {
      super.fW = value;
    }
    toQuads() {
      let pointList = JSArrayOfOffset().of([]);
      let conicTolerance = 1.0 / 4.0;
      let subdivideCount = this[_computeSubdivisionCount](conicTolerance);
      if (!(dart.notNull(subdivideCount) > 0)) dart.assertFailed();
      let quadCount = (1)[$leftShift](subdivideCount);
      let skipSubdivide = false;
      pointList[$add](new ui.Offset.new(this.p0x, this.p0y));
      if (subdivideCount == src__engine.Conic._maxSubdivisionCount) {
        let dst = ListOfConic().new(2);
        this[_chop](dst);
        let conic0 = dst[$_get](0);
        let conic1 = dst[$_get](1);
        if (conic0.p1x == conic0.p2x && conic0.p1y == conic0.p2y && conic1.p0x == conic1.p1x && conic1.p0y == conic1.p1y) {
          let controlPointOffset = new ui.Offset.new(conic0.p1x, conic0.p1y);
          pointList[$add](controlPointOffset);
          pointList[$add](controlPointOffset);
          pointList[$add](controlPointOffset);
          pointList[$add](new ui.Offset.new(conic1.p2x, conic1.p2y));
          quadCount = 2;
          skipSubdivide = true;
        }
      }
      if (!skipSubdivide) {
        src__engine.Conic._subdivide(this, subdivideCount, pointList);
      }
      let pointCount = 2 * quadCount + 1;
      let hasNonFinitePoints = false;
      for (let p = 0; p < pointCount; p = p + 1) {
        if (pointList[$_get](p).dx[$isNaN] || pointList[$_get](p).dy[$isNaN]) {
          hasNonFinitePoints = true;
          break;
        }
      }
      if (hasNonFinitePoints) {
        for (let p = 1; p < pointCount - 1; p = p + 1) {
          pointList[$_set](p, new ui.Offset.new(this.p1x, this.p1y));
        }
      }
      return pointList;
    }
    static _between(a, b, c) {
      return (dart.notNull(a) - dart.notNull(b)) * (dart.notNull(c) - dart.notNull(b)) <= 0;
    }
    static _subdivide(src, level, pointList) {
      if (!(dart.notNull(level) >= 0)) dart.assertFailed();
      if (0 === level) {
        pointList[$add](new ui.Offset.new(src.p1x, src.p1y));
        pointList[$add](new ui.Offset.new(src.p2x, src.p2y));
        return;
      }
      let dst = ListOfConic().new(2);
      src[_chop](dst);
      let conic0 = dst[$_get](0);
      let conic1 = dst[$_get](1);
      let startY = src.p0y;
      let endY = src.p2y;
      let cpY = src.p1y;
      if (dart.test(src__engine.Conic._between(startY, cpY, endY))) {
        let midY = conic0.p2y;
        if (!dart.test(src__engine.Conic._between(startY, midY, endY))) {
          let closerY = (dart.notNull(midY) - dart.notNull(startY))[$abs]() < (dart.notNull(midY) - dart.notNull(endY))[$abs]() ? startY : endY;
          conic0.p2y = conic1.p0y = closerY;
        }
        if (!dart.test(src__engine.Conic._between(startY, conic0.p1y, conic0.p2y))) {
          conic0.p1y = startY;
        }
        if (!dart.test(src__engine.Conic._between(conic1.p0y, conic1.p1y, endY))) {
          conic1.p1y = endY;
        }
        if (!dart.test(src__engine.Conic._between(startY, conic0.p1y, conic0.p2y))) dart.assertFailed();
        if (!dart.test(src__engine.Conic._between(conic0.p1y, conic0.p2y, conic1.p1y))) dart.assertFailed();
        if (!dart.test(src__engine.Conic._between(conic0.p2y, conic1.p1y, endY))) dart.assertFailed();
      }
      level = dart.notNull(level) - 1;
      src__engine.Conic._subdivide(conic0, level, pointList);
      src__engine.Conic._subdivide(conic1, level, pointList);
    }
    static _subdivideWeightValue(w) {
      return math.sqrt(0.5 + dart.notNull(w) * 0.5);
    }
    [_chop](dst) {
      let scale = 1.0 / (1.0 + dart.notNull(this.fW));
      let newW = src__engine.Conic._subdivideWeightValue(this.fW);
      let wp1 = new ui.Offset.new(dart.notNull(this.fW) * dart.notNull(this.p1x), dart.notNull(this.fW) * dart.notNull(this.p1y));
      let m = new ui.Offset.new((dart.notNull(this.p0x) + 2 * dart.notNull(wp1.dx) + dart.notNull(this.p2x)) * scale * 0.5, (dart.notNull(this.p0y) + 2 * dart.notNull(wp1.dy) + dart.notNull(this.p2y)) * scale * 0.5);
      if (m.dx[$isNaN] || m.dy[$isNaN]) {
        let w2 = dart.notNull(this.fW) * 2;
        let scaleHalf = 1.0 / (1 + dart.notNull(this.fW)) * 0.5;
        m = new ui.Offset.new((dart.notNull(this.p0x) + w2 * dart.notNull(this.p1x) + dart.notNull(this.p2x)) * scaleHalf, (dart.notNull(this.p0y) + w2 * dart.notNull(this.p1y) + dart.notNull(this.p2y)) * scaleHalf);
      }
      dst[$_set](0, new src__engine.Conic.new(this.p0x, this.p0y, (dart.notNull(this.p0x) + dart.notNull(wp1.dx)) * scale, (dart.notNull(this.p0y) + dart.notNull(wp1.dy)) * scale, m.dx, m.dy, newW));
      dst[$_set](1, new src__engine.Conic.new(m.dx, m.dy, (dart.notNull(this.p2x) + dart.notNull(wp1.dx)) * scale, (dart.notNull(this.p2y) + dart.notNull(wp1.dy)) * scale, this.p2x, this.p2y, newW));
    }
    [_computeSubdivisionCount](tolerance) {
      if (!tolerance[$isFinite]) dart.assertFailed();
      if (!(this.p0x[$isFinite] && this.p1x[$isFinite] && this.p2x[$isFinite] && this.p0y[$isFinite] && this.p1y[$isFinite] && this.p2y[$isFinite])) dart.assertFailed();
      if (dart.notNull(tolerance) < 0) {
        return 0;
      }
      let a = dart.notNull(this.fW) - 1;
      let k = a / (4.0 * (2.0 + a));
      let x = k * (dart.notNull(this.p0x) - 2 * dart.notNull(this.p1x) + dart.notNull(this.p2x));
      let y = k * (dart.notNull(this.p0y) - 2 * dart.notNull(this.p1y) + dart.notNull(this.p2y));
      let error = math.sqrt(x * x + y * y);
      let pow2 = 0;
      for (; pow2 < dart.notNull(src__engine.Conic._maxSubdivisionCount); pow2 = pow2 + 1) {
        if (error <= dart.notNull(tolerance)) {
          break;
        }
        error = error * 0.25;
      }
      return pow2;
    }
  };
  (src__engine.Conic.new = function(p0x, p0y, p1x, p1y, p2x, p2y, fW) {
    this[p0x$] = p0x;
    this[p0y$] = p0y;
    this[p1x$] = p1x;
    this[p1y$] = p1y;
    this[p2x$] = p2x;
    this[p2y$] = p2y;
    this[fW$] = fW;
    ;
  }).prototype = src__engine.Conic.prototype;
  dart.addTypeTests(src__engine.Conic);
  const p0x$ = Symbol("Conic.p0x");
  const p0y$ = Symbol("Conic.p0y");
  const p1x$ = Symbol("Conic.p1x");
  const p1y$ = Symbol("Conic.p1y");
  const p2x$ = Symbol("Conic.p2x");
  const p2y$ = Symbol("Conic.p2y");
  const fW$ = Symbol("Conic.fW");
  dart.setMethodSignature(src__engine.Conic, () => ({
    __proto__: dart.getMethods(src__engine.Conic.__proto__),
    toQuads: dart.fnType(core.List$(ui.Offset), []),
    [_chop]: dart.fnType(dart.void, [core.List$(src__engine.Conic)]),
    [_computeSubdivisionCount]: dart.fnType(core.int, [core.double])
  }));
  dart.setFieldSignature(src__engine.Conic, () => ({
    __proto__: dart.getFields(src__engine.Conic.__proto__),
    p0x: dart.fieldType(core.double),
    p0y: dart.fieldType(core.double),
    p1x: dart.fieldType(core.double),
    p1y: dart.fieldType(core.double),
    p2x: dart.fieldType(core.double),
    p2y: dart.fieldType(core.double),
    fW: dart.finalFieldType(core.double)
  }));
  dart.defineLazy(src__engine.Conic, {
    /*src__engine.Conic._maxSubdivisionCount*/get _maxSubdivisionCount() {
      return 5;
    }
  });
  const _elementStack = dart.privateName(src__engine, "_elementStack");
  src__engine.SaveElementStackTracking = class SaveElementStackTracking extends src__engine.EngineCanvas {};
  src__engine.SaveElementStackTracking[dart.mixinOn] = EngineCanvas => class SaveElementStackTracking extends EngineCanvas {
    get currentElement() {
      return dart.test(this[_elementStack][$isEmpty]) ? this.rootElement : this[_elementStack][$last];
    }
    pushElement(element) {
      this[_elementStack][$add](element);
    }
    clear() {
      this[_saveStack][$clear]();
      this[_elementStack][$clear]();
      this[_currentTransform] = src__engine.Matrix4.identity();
    }
    get currentTransform() {
      return this[_currentTransform];
    }
    save() {
      this[_saveStack][$add](new src__engine._SaveElementStackEntry.new({savedElement: this.currentElement, transform: this[_currentTransform].clone()}));
    }
    restore() {
      if (dart.test(this[_saveStack][$isEmpty])) {
        return;
      }
      let entry = this[_saveStack][$removeLast]();
      this[_currentTransform] = entry.transform;
      while (!dart.equals(this.currentElement, entry.savedElement)) {
        this[_elementStack][$removeLast]();
      }
    }
    translate(dx, dy) {
      this[_currentTransform].translate(dx, dy);
    }
    scale(sx, sy) {
      this[_currentTransform].scale(sx, sy);
    }
    rotate(radians) {
      this[_currentTransform].rotate(src__engine.SaveElementStackTracking._unitZ, radians);
    }
    skew(sx, sy) {
      let skewMatrix = src__engine.Matrix4.identity();
      let storage = skewMatrix.storage;
      storage[$_set](1, sy);
      storage[$_set](4, sx);
      this[_currentTransform].multiply(skewMatrix);
    }
    transform(matrix4) {
      this[_currentTransform].multiply(new src__engine.Matrix4.fromFloat64List(matrix4));
    }
  };
  (src__engine.SaveElementStackTracking[dart.mixinNew] = function() {
    this[_saveStack] = JSArrayOf_SaveElementStackEntry().of([]);
    this[_elementStack] = JSArrayOfElement().of([]);
    this[_currentTransform] = src__engine.Matrix4.identity();
  }).prototype = src__engine.SaveElementStackTracking.prototype;
  dart.addTypeTests(src__engine.SaveElementStackTracking);
  src__engine.SaveElementStackTracking[dart.implements] = () => [src__engine.EngineCanvas];
  dart.setMethodSignature(src__engine.SaveElementStackTracking, () => ({
    __proto__: dart.getMethods(src__engine.SaveElementStackTracking.__proto__),
    pushElement: dart.fnType(dart.void, [html.Element]),
    clear: dart.fnType(dart.void, []),
    save: dart.fnType(dart.void, []),
    restore: dart.fnType(dart.void, []),
    translate: dart.fnType(dart.void, [core.double, core.double]),
    scale: dart.fnType(dart.void, [core.double, core.double]),
    rotate: dart.fnType(dart.void, [core.double]),
    skew: dart.fnType(dart.void, [core.double, core.double]),
    transform: dart.fnType(dart.void, [typed_data.Float64List])
  }));
  dart.setGetterSignature(src__engine.SaveElementStackTracking, () => ({
    __proto__: dart.getGetters(src__engine.SaveElementStackTracking.__proto__),
    currentElement: html.Element,
    currentTransform: src__engine.Matrix4
  }));
  dart.setFieldSignature(src__engine.SaveElementStackTracking, () => ({
    __proto__: dart.getFields(src__engine.SaveElementStackTracking.__proto__),
    [_saveStack]: dart.finalFieldType(core.List$(src__engine._SaveElementStackEntry)),
    [_elementStack]: dart.finalFieldType(core.List$(html.Element)),
    [_currentTransform]: dart.fieldType(src__engine.Matrix4)
  }));
  dart.defineLazy(src__engine.SaveElementStackTracking, {
    /*src__engine.SaveElementStackTracking._unitZ*/get _unitZ() {
      return src__engine.Vector3.new(0.0, 0.0, 1.0);
    }
  });
  const EngineCanvas_SaveElementStackTracking$ = class EngineCanvas_SaveElementStackTracking extends src__engine.EngineCanvas {};
  (EngineCanvas_SaveElementStackTracking$.new = function() {
    src__engine.SaveElementStackTracking[dart.mixinNew].call(this);
  }).prototype = EngineCanvas_SaveElementStackTracking$.prototype;
  dart.applyMixin(EngineCanvas_SaveElementStackTracking$, src__engine.SaveElementStackTracking);
  src__engine.DomCanvas = class DomCanvas extends EngineCanvas_SaveElementStackTracking$ {
    get rootElement() {
      return this[rootElement$];
    }
    set rootElement(value) {
      super.rootElement = value;
    }
    clear() {
      super.clear();
      src__engine.domRenderer.clearDom(this.rootElement);
    }
    clipRect(rect) {
      dart.throw(new core.UnimplementedError.new());
    }
    clipRRect(rrect) {
      dart.throw(new core.UnimplementedError.new());
    }
    clipPath(path) {
      dart.throw(new core.UnimplementedError.new());
    }
    drawColor(color, blendMode) {
      let t1;
      let box = html.Element.tag("draw-color");
      t1 = box.style;
      t1[$position] = "absolute";
      t1[$top] = "0";
      t1[$right] = "0";
      t1[$bottom] = "0";
      t1[$left] = "0";
      t1[$backgroundColor] = color.toCssString();
      t1;
      this.currentElement[$append](box);
    }
    drawLine(p1, p2, paint) {
      dart.throw(new core.UnimplementedError.new());
    }
    drawPaint(paint) {
      dart.throw(new core.UnimplementedError.new());
    }
    drawRect(rect, paint) {
      let t1, t1$, t1$0, t1$1, t1$2;
      if (!(paint.shader == null)) dart.assertFailed();
      let rectangle = html.Element.tag("draw-rect");
      if (!dart.test(dart.fn(() => {
        rectangle[$setAttribute]("flt-rect", dart.str(rect));
        rectangle[$setAttribute]("flt-paint", dart.str(paint));
        return true;
      }, VoidTobool())())) dart.assertFailed();
      let effectiveTransform = null;
      let isStroke = dart.equals(paint.style, ui.PaintingStyle.stroke);
      let left = math.min(core.double, rect.left, rect.right);
      let right = math.max(core.double, rect.left, rect.right);
      let top = math.min(core.double, rect.top, rect.bottom);
      let bottom = math.max(core.double, rect.top, rect.bottom);
      if (dart.test(this.currentTransform.isIdentity())) {
        if (isStroke) {
          effectiveTransform = "translate(" + dart.str(left - dart.notNull(paint.strokeWidth) / 2.0) + "px, " + dart.str(top - dart.notNull(paint.strokeWidth) / 2.0) + "px)";
        } else {
          effectiveTransform = "translate(" + dart.str(left) + "px, " + dart.str(top) + "px)";
        }
      } else {
        let translated = this.currentTransform.clone();
        if (isStroke) {
          translated.translate(left - dart.notNull(paint.strokeWidth) / 2.0, top - dart.notNull(paint.strokeWidth) / 2.0);
        } else {
          translated.translate(left, top);
        }
        effectiveTransform = src__engine.matrix4ToCssTransform(translated);
      }
      let style = rectangle.style;
      t1 = style;
      t1[$position] = "absolute";
      t1[$transformOrigin] = "0 0 0";
      t1[$transform] = effectiveTransform;
      t1;
      let cssColor = (t1$0 = (t1$ = paint.color, t1$ == null ? null : t1$.toCssString()), t1$0 == null ? "#000000" : t1$0);
      if (paint.maskFilter != null) {
        style[$filter] = "blur(" + dart.str(paint.maskFilter.webOnlySigma) + "px)";
      }
      if (isStroke) {
        t1$1 = style;
        t1$1[$width] = dart.str(right - left - dart.notNull(paint.strokeWidth)) + "px";
        t1$1[$height] = dart.str(bottom - top - dart.notNull(paint.strokeWidth)) + "px";
        t1$1[$border] = dart.str(paint.strokeWidth) + "px solid " + dart.str(cssColor);
        t1$1;
      } else {
        t1$2 = style;
        t1$2[$width] = dart.str(right - left) + "px";
        t1$2[$height] = dart.str(bottom - top) + "px";
        t1$2[$backgroundColor] = cssColor;
        t1$2;
      }
      this.currentElement[$append](rectangle);
    }
    drawRRect(rrect, paint) {
      dart.throw(new core.UnimplementedError.new());
    }
    drawDRRect(outer, inner, paint) {
      dart.throw(new core.UnimplementedError.new());
    }
    drawOval(rect, paint) {
      dart.throw(new core.UnimplementedError.new());
    }
    drawCircle(c, radius, paint) {
      dart.throw(new core.UnimplementedError.new());
    }
    drawPath(path, paint) {
      dart.throw(new core.UnimplementedError.new());
    }
    drawShadow(path, color, elevation, transparentOccluder) {
      dart.throw(new core.UnimplementedError.new());
    }
    drawImage(image, p, paint) {
      dart.throw(new core.UnimplementedError.new());
    }
    drawImageRect(image, src, dst, paint) {
      dart.throw(new core.UnimplementedError.new());
    }
    drawParagraph(paragraph, offset) {
      let t1, t1$, t1$0;
      if (!dart.test(paragraph.webOnlyIsLaidOut)) dart.assertFailed();
      let paragraphElement = html.Element._check(paragraph.webOnlyGetParagraphElement()[$clone](true));
      let cssTransform = src__engine.matrix4ToCssTransform(src__engine.transformWithOffset(this.currentTransform, offset));
      let paragraphStyle = paragraphElement.style;
      t1 = paragraphStyle;
      t1[$position] = "absolute";
      t1[$transformOrigin] = "0 0 0";
      t1[$transform] = cssTransform;
      t1[$whiteSpace] = "pre-wrap";
      t1[$width] = dart.str(paragraph.width) + "px";
      t1;
      let style = paragraph.webOnlyGetParagraphGeometricStyle();
      if (style.ellipsis != null && (style.maxLines == null || style.maxLines === 1)) {
        t1$ = paragraphStyle;
        t1$[$height] = dart.str(paragraph.webOnlyMaxLinesHeight) + "px";
        t1$[$whiteSpace] = "pre";
        t1$[$overflow] = "hidden";
        t1$[$textOverflow] = "ellipsis";
        t1$;
      } else if (dart.test(paragraph.didExceedMaxLines)) {
        t1$0 = paragraphStyle;
        t1$0[$height] = dart.str(paragraph.webOnlyMaxLinesHeight) + "px";
        t1$0[$overflowY] = "hidden";
        t1$0;
      } else {
        paragraphStyle[$height] = dart.str(paragraph.height) + "px";
      }
      this.currentElement[$append](paragraphElement);
    }
  };
  (src__engine.DomCanvas.new = function() {
    let t1;
    this[rootElement$] = html.Element.tag("flt-dom-canvas");
    src__engine.DomCanvas.__proto__.new.call(this);
    t1 = this.rootElement.style;
    t1[$position] = "absolute";
    t1[$top] = "0";
    t1[$right] = "0";
    t1[$bottom] = "0";
    t1[$left] = "0";
    t1;
  }).prototype = src__engine.DomCanvas.prototype;
  dart.addTypeTests(src__engine.DomCanvas);
  const rootElement$ = Symbol("DomCanvas.rootElement");
  dart.setMethodSignature(src__engine.DomCanvas, () => ({
    __proto__: dart.getMethods(src__engine.DomCanvas.__proto__),
    clipRect: dart.fnType(dart.void, [ui.Rect]),
    clipRRect: dart.fnType(dart.void, [ui.RRect]),
    clipPath: dart.fnType(dart.void, [ui.Path]),
    drawColor: dart.fnType(dart.void, [ui.Color, ui.BlendMode]),
    drawLine: dart.fnType(dart.void, [ui.Offset, ui.Offset, ui.PaintData]),
    drawPaint: dart.fnType(dart.void, [ui.PaintData]),
    drawRect: dart.fnType(dart.void, [ui.Rect, ui.PaintData]),
    drawRRect: dart.fnType(dart.void, [ui.RRect, ui.PaintData]),
    drawDRRect: dart.fnType(dart.void, [ui.RRect, ui.RRect, ui.PaintData]),
    drawOval: dart.fnType(dart.void, [ui.Rect, ui.PaintData]),
    drawCircle: dart.fnType(dart.void, [ui.Offset, core.double, ui.PaintData]),
    drawPath: dart.fnType(dart.void, [ui.Path, ui.PaintData]),
    drawShadow: dart.fnType(dart.void, [ui.Path, ui.Color, core.double, core.bool]),
    drawImage: dart.fnType(dart.void, [ui.Image, ui.Offset, ui.PaintData]),
    drawImageRect: dart.fnType(dart.void, [ui.Image, ui.Rect, ui.Rect, ui.PaintData]),
    drawParagraph: dart.fnType(dart.void, [ui.Paragraph, ui.Offset])
  }));
  dart.setFieldSignature(src__engine.DomCanvas, () => ({
    __proto__: dart.getFields(src__engine.DomCanvas.__proto__),
    rootElement: dart.finalFieldType(html.Element)
  }));
  const _resizeSubscription = dart.privateName(src__engine, "_resizeSubscription");
  const _styleElement = dart.privateName(src__engine, "_styleElement");
  const _viewportMeta = dart.privateName(src__engine, "_viewportMeta");
  const _sceneHostElement = dart.privateName(src__engine, "_sceneHostElement");
  const _sceneElement = dart.privateName(src__engine, "_sceneElement");
  const _staleHotRestartState = dart.privateName(src__engine, "_staleHotRestartState");
  const _glassPaneElement = dart.privateName(src__engine, "_glassPaneElement");
  const _debugIsInWidgetTest = dart.privateName(src__engine, "_debugIsInWidgetTest");
  const _debugFrameStatistics = dart.privateName(src__engine, "_debugFrameStatistics");
  const _setupHotRestart = dart.privateName(src__engine, "_setupHotRestart");
  const _clearOnHotRestart = dart.privateName(src__engine, "_clearOnHotRestart");
  let const$11;
  const _metricsDidChange = dart.privateName(src__engine, "_metricsDidChange");
  const _rootApplicationElement = dart.privateName(src__engine, "_rootApplicationElement");
  src__engine.DomRenderer = class DomRenderer extends core.Object {
    get rootElement() {
      return this[rootElement$0];
    }
    set rootElement(value) {
      super.rootElement = value;
    }
    get sceneHostElement() {
      return this[_sceneHostElement];
    }
    get sceneElement() {
      return this[_sceneElement];
    }
    [_setupHotRestart]() {
      this[_staleHotRestartState] = ListOfElement()._check(js_util.getProperty(html.window, src__engine.DomRenderer._staleHotRestartStore));
      if (this[_staleHotRestartState] == null) {
        this[_staleHotRestartState] = JSArrayOfElement().of([]);
        js_util.setProperty(html.window, src__engine.DomRenderer._staleHotRestartStore, this[_staleHotRestartState]);
      }
      src__engine.registerHotRestartListener(dart.fn(() => {
        let t1;
        t1 = this[_resizeSubscription];
        t1 == null ? null : t1.cancel();
        this[_staleHotRestartState][$addAll](JSArrayOfElement().of([this[_sceneHostElement], this[_glassPaneElement], this[_styleElement], this[_viewportMeta]]));
      }, VoidToNull()));
    }
    [_clearOnHotRestart]() {
      let t1;
      if (dart.test(this[_staleHotRestartState][$isNotEmpty])) {
        for (let element of this[_staleHotRestartState]) {
          t1 = element;
          t1 == null ? null : t1[$remove]();
        }
        this[_staleHotRestartState][$clear]();
      }
    }
    renderScene(sceneElement) {
      let t1;
      if (!dart.equals(sceneElement, this[_sceneElement])) {
        t1 = this[_sceneElement];
        t1 == null ? null : t1[$remove]();
        this[_sceneElement] = sceneElement;
        this.append(this[_sceneHostElement], sceneElement);
      }
      if (!dart.test(dart.fn(() => {
        this[_clearOnHotRestart]();
        return true;
      }, VoidTobool())())) dart.assertFailed();
    }
    get glassPaneElement() {
      return this[_glassPaneElement];
    }
    get debugIsInWidgetTest() {
      return this[_debugIsInWidgetTest];
    }
    set debugIsInWidgetTest(value) {
      this[_debugIsInWidgetTest] = value;
      if (dart.test(this[_debugIsInWidgetTest])) {
        let logicalSize = new ui.Size.new(800.0, 600.0);
        ui.window.webOnlyDebugPhysicalSizeOverride = logicalSize['*'](ui.window.devicePixelRatio);
      }
    }
    addElementClass(element, className) {
      element[$classes].add(className);
    }
    attachBeforeElement(parent, before, newElement) {
      if (!(parent != null)) dart.assertFailed();
      if (parent != null) {
        if (!dart.test(dart.fn(() => {
          if (before == null) {
            return true;
          }
          if (!dart.equals(before[$parent], parent)) {
            dart.throw(core.Exception.new("attachBeforeElement was called with `before` element that's " + "not a child of the `parent` element:\n" + "  before: " + dart.str(before) + "\n" + "  parent: " + dart.str(parent)));
          }
          return true;
        }, VoidTobool())())) dart.assertFailed();
        parent.insertBefore(newElement, before);
      }
    }
    createElement(tagName, opts) {
      let t1;
      let parent = opts && 'parent' in opts ? opts.parent : null;
      let element = html.document[$createElement](tagName);
      t1 = parent;
      t1 == null ? null : t1[$append](element);
      return element;
    }
    append(parent, child) {
      parent[$append](child);
    }
    appendText(parent, text) {
      parent[$appendText](text);
    }
    detachElement(element) {
      element[$remove]();
    }
    removeElementClass(element, className) {
      element[$classes].remove(className);
    }
    setElementAttribute(element, name, value) {
      element[$setAttribute](name, value);
    }
    setElementProperty(element, name, value) {
      js_util.setProperty(element, name, value);
    }
    setElementStyle(element, name, value) {
      if (value == null) {
        element.style.removeProperty(name);
      } else {
        element.style[$setProperty](name, value);
      }
    }
    setText(element, text) {
      element[$text] = text;
    }
    removeAllChildren(element) {
      element[$children][$clear]();
    }
    getParent(element) {
      return element[$parent];
    }
    setTitle(title) {
      html.document[$title] = title;
    }
    setThemeColor(color) {
      let t1;
      let theme = html.MetaElement._check(html.document.querySelector("#flutterweb-theme"));
      if (theme == null) {
        theme = (t1 = html.MetaElement.new(), t1.id = "flutterweb-theme", t1.name = "theme-color", t1);
        html.document[$head][$append](theme);
      }
      theme.content = color.toCssString();
    }
    reset() {
      let t1, t1$, t1$0, t1$1, t1$2, t1$3;
      t1 = this[_styleElement];
      t1 == null ? null : t1[$remove]();
      this[_styleElement] = html.StyleElement.new();
      html.document[$head][$append](this[_styleElement]);
      let sheet = html.CssStyleSheet._check(this[_styleElement].sheet);
      sheet.insertRule("flt-ruler-host p, flt-scene p {\n  margin: 0;\n}", sheet.cssRules[$length]);
      sheet.insertRule("flt-semantics input[type=range] {\n  appearance: none;\n  -webkit-appearance: none;\n  width: 100%;\n  position: absolute;\n  border: none;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n}", sheet.cssRules[$length]);
      if (dart.equals(src__engine.browserEngine, src__engine.BrowserEngine.webkit)) {
        sheet.insertRule("flt-semantics input[type=range]::-webkit-slider-thumb {" + "  -webkit-appearance: none;" + "}", sheet.cssRules[$length]);
        sheet.insertRule("flt-semantics ::selection {" + "  background-color: transparent;" + "}", sheet.cssRules[$length]);
      }
      sheet.insertRule("flt-semantics input,\nflt-semantics textarea,\nflt-semantics [contentEditable=\"true\"] {\n  caret-color: transparent;\n}\n", sheet.cssRules[$length]);
      if (dart.equals(src__engine.browserEngine, src__engine.BrowserEngine.webkit)) {
        sheet.insertRule("flt-glass-pane * {\n  -webkit-tap-highlight-color: transparent;\n}\n", sheet.cssRules[$length]);
      }
      let bodyElement = html.document.body;
      this.setElementStyle(bodyElement, "position", "fixed");
      this.setElementStyle(bodyElement, "top", "0");
      this.setElementStyle(bodyElement, "right", "0");
      this.setElementStyle(bodyElement, "bottom", "0");
      this.setElementStyle(bodyElement, "left", "0");
      this.setElementStyle(bodyElement, "overflow", "hidden");
      this.setElementStyle(bodyElement, "padding", "0");
      this.setElementStyle(bodyElement, "margin", "0");
      this.setElementStyle(bodyElement, "user-select", "none");
      this.setElementStyle(bodyElement, "-webkit-user-select", "none");
      this.setElementStyle(bodyElement, "-ms-user-select", "none");
      this.setElementStyle(bodyElement, "-moz-user-select", "none");
      this.setElementStyle(bodyElement, "touch-action", "none");
      this.setElementStyle(bodyElement, "font", src__engine.DomRenderer.defaultCssFont);
      this.setElementStyle(bodyElement, "color", "red");
      for (let viewportMeta of html.document[$head][$querySelectorAll](html.Element, "meta[name=\"viewport\"]")) {
        if (dart.test(src__engine.assertionsEnabled)) {
          if (!dart.test(viewportMeta[$hasAttribute]("flt-viewport"))) {
            core.print("WARNING: found an existing <meta name=\"viewport\"> tag. Flutter " + "Web uses its own viewport configuration for better compatibility " + "with Flutter. This tag will be replaced.");
          }
        }
        viewportMeta[$remove]();
      }
      t1$ = this[_viewportMeta];
      t1$ == null ? null : t1$[$remove]();
      this[_viewportMeta] = (t1$0 = html.MetaElement.new(), t1$0[$setAttribute]("flt-viewport", ""), t1$0.name = "viewport", t1$0.content = "width=device-width, initial-scale=1.0, " + "maximum-scale=1.0, user-scalable=no", t1$0);
      html.document[$head][$append](this[_viewportMeta]);
      t1$1 = this[_sceneHostElement];
      t1$1 == null ? null : t1$1[$remove]();
      this[_sceneHostElement] = this.createElement("flt-scene-host");
      bodyElement[$append](this[_sceneHostElement]);
      t1$2 = this[_glassPaneElement];
      t1$2 == null ? null : t1$2[$remove]();
      this[_glassPaneElement] = this.createElement("flt-glass-pane");
      t1$3 = this[_glassPaneElement].style;
      t1$3[$position] = "absolute";
      t1$3[$top] = "0";
      t1$3[$right] = "0";
      t1$3[$bottom] = "0";
      t1$3[$left] = "0";
      t1$3;
      bodyElement[$append](this[_glassPaneElement]);
      src__engine.EngineSemanticsOwner.instance.autoEnableOnTap(this);
      new src__engine.PointerBinding.new(this);
      this.setElementAttribute(this[_sceneHostElement], "aria-hidden", "true");
      ui.window.devicePixelRatio = 1.0;
      if (dart.equals(src__engine.browserEngine, src__engine.BrowserEngine.webkit)) {
        let initialInnerWidth = html.window.innerWidth;
        let checkCount = 0;
        async.Timer.periodic(const$11 || (const$11 = dart.const(new core.Duration.new({milliseconds: 100}))), dart.fn(t => {
          checkCount = checkCount + 1;
          if (initialInnerWidth != html.window.innerWidth) {
            t.cancel();
            this[_metricsDidChange](null);
          } else if (checkCount > 5) {
            t.cancel();
          }
        }, TimerToNull()));
      }
      this[_resizeSubscription] = html.window[$onResize].listen(dart.bind(this, _metricsDidChange));
    }
    [_metricsDidChange](event) {
      if (ui.window.onMetricsChanged != null) {
        ui.window.onMetricsChanged();
      }
    }
    focus(element) {
      element.focus();
    }
    clearDom(node) {
      while (node.lastChild != null) {
        node.lastChild[$remove]();
      }
    }
    get [_rootApplicationElement]() {
      return html.DivElement.as(this.rootElement[$children][$last])[$children][$singleWhere](dart.fn(element => element.tagName === "FLT-SCENE", ElementTobool()), {orElse: dart.fn(() => null, VoidToNull())});
    }
    vibrate(durationMs) {
      let navigator = html.window.navigator;
      if (dart.dtest(js_util.hasProperty(navigator, "vibrate"))) {
        js_util.callMethod(navigator, "vibrate", JSArrayOfnum().of([durationMs]));
      }
      return null;
    }
    get currentHtml() {
      let t1, t1$;
      t1$ = (t1 = this[_rootApplicationElement], t1 == null ? null : t1[$outerHtml]);
      return t1$ == null ? "" : t1$;
    }
    debugFlushFrameStatistics() {
      if (!dart.test(src__engine.assertionsEnabled)) {
        dart.throw(core.Exception.new("This code should not be reachable in production."));
      }
      let current = this[_debugFrameStatistics];
      this[_debugFrameStatistics] = new src__engine.DebugDomRendererFrameStatistics.new();
      return current;
    }
    debugRulerCacheHit() {
      let t2, t1;
      t1 = this[_debugFrameStatistics];
      t2 = t1.paragraphRulerCacheHits;
      t1.paragraphRulerCacheHits = dart.notNull(t2) + 1;
      return t2;
    }
    debugRulerCacheMiss() {
      let t2, t1;
      t1 = this[_debugFrameStatistics];
      t2 = t1.paragraphRulerCacheMisses;
      t1.paragraphRulerCacheMisses = dart.notNull(t2) + 1;
      return t2;
    }
    debugRichTextLayout() {
      let t2, t1;
      t1 = this[_debugFrameStatistics];
      t2 = t1.richTextLayouts;
      t1.richTextLayouts = dart.notNull(t2) + 1;
      return t2;
    }
    debugPlainTextLayout() {
      let t2, t1;
      t1 = this[_debugFrameStatistics];
      t2 = t1.plainTextLayouts;
      t1.plainTextLayouts = dart.notNull(t2) + 1;
      return t2;
    }
  };
  (src__engine.DomRenderer.new = function() {
    this[_resizeSubscription] = null;
    this[_styleElement] = null;
    this[_viewportMeta] = null;
    this[_sceneHostElement] = null;
    this[_sceneElement] = null;
    this[_staleHotRestartState] = null;
    this[_glassPaneElement] = null;
    this[_debugIsInWidgetTest] = false;
    this[rootElement$0] = html.document.body;
    this[_debugFrameStatistics] = null;
    if (dart.test(src__engine.assertionsEnabled)) {
      this[_debugFrameStatistics] = new src__engine.DebugDomRendererFrameStatistics.new();
    }
    this.reset();
    src__engine.TextMeasurementService.initialize({rulerCacheCapacity: 10});
    if (!dart.test(dart.fn(() => {
      this[_setupHotRestart]();
      return true;
    }, VoidTobool())())) dart.assertFailed();
  }).prototype = src__engine.DomRenderer.prototype;
  dart.addTypeTests(src__engine.DomRenderer);
  const rootElement$0 = Symbol("DomRenderer.rootElement");
  dart.setMethodSignature(src__engine.DomRenderer, () => ({
    __proto__: dart.getMethods(src__engine.DomRenderer.__proto__),
    [_setupHotRestart]: dart.fnType(dart.void, []),
    [_clearOnHotRestart]: dart.fnType(dart.void, []),
    renderScene: dart.fnType(dart.void, [html.Element]),
    addElementClass: dart.fnType(dart.void, [html.Element, core.String]),
    attachBeforeElement: dart.fnType(dart.void, [html.Element, html.Element, html.Element]),
    createElement: dart.fnType(html.Element, [core.String], {parent: html.Element}),
    append: dart.fnType(dart.void, [html.Element, html.Element]),
    appendText: dart.fnType(dart.void, [html.Element, core.String]),
    detachElement: dart.fnType(dart.void, [html.Element]),
    removeElementClass: dart.fnType(dart.void, [html.Element, core.String]),
    setElementAttribute: dart.fnType(dart.void, [html.Element, core.String, core.String]),
    setElementProperty: dart.fnType(dart.void, [html.Element, core.String, core.Object]),
    setElementStyle: dart.fnType(dart.void, [html.Element, core.String, core.String]),
    setText: dart.fnType(dart.void, [html.Element, core.String]),
    removeAllChildren: dart.fnType(dart.void, [html.Element]),
    getParent: dart.fnType(html.Element, [html.Element]),
    setTitle: dart.fnType(dart.void, [core.String]),
    setThemeColor: dart.fnType(dart.void, [ui.Color]),
    reset: dart.fnType(dart.void, []),
    [_metricsDidChange]: dart.fnType(dart.void, [html.Event]),
    focus: dart.fnType(dart.void, [html.Element]),
    clearDom: dart.fnType(dart.void, [html.Node]),
    vibrate: dart.fnType(async.Future, [core.int]),
    debugFlushFrameStatistics: dart.fnType(src__engine.DebugDomRendererFrameStatistics, []),
    debugRulerCacheHit: dart.fnType(dart.void, []),
    debugRulerCacheMiss: dart.fnType(dart.void, []),
    debugRichTextLayout: dart.fnType(dart.void, []),
    debugPlainTextLayout: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(src__engine.DomRenderer, () => ({
    __proto__: dart.getGetters(src__engine.DomRenderer.__proto__),
    sceneHostElement: html.Element,
    sceneElement: html.Element,
    glassPaneElement: html.Element,
    debugIsInWidgetTest: core.bool,
    [_rootApplicationElement]: html.Element,
    currentHtml: core.String
  }));
  dart.setSetterSignature(src__engine.DomRenderer, () => ({
    __proto__: dart.getSetters(src__engine.DomRenderer.__proto__),
    debugIsInWidgetTest: core.bool
  }));
  dart.setFieldSignature(src__engine.DomRenderer, () => ({
    __proto__: dart.getFields(src__engine.DomRenderer.__proto__),
    [_resizeSubscription]: dart.fieldType(async.StreamSubscription),
    [_styleElement]: dart.fieldType(html.StyleElement),
    [_viewportMeta]: dart.fieldType(html.MetaElement),
    [_sceneHostElement]: dart.fieldType(html.Element),
    [_sceneElement]: dart.fieldType(html.Element),
    [_staleHotRestartState]: dart.fieldType(core.List$(html.Element)),
    [_glassPaneElement]: dart.fieldType(html.Element),
    [_debugIsInWidgetTest]: dart.fieldType(core.bool),
    rootElement: dart.finalFieldType(html.Element),
    [_debugFrameStatistics]: dart.fieldType(src__engine.DebugDomRendererFrameStatistics)
  }));
  dart.defineLazy(src__engine.DomRenderer, {
    /*src__engine.DomRenderer.vibrateLongPress*/get vibrateLongPress() {
      return 50;
    },
    /*src__engine.DomRenderer.vibrateLightImpact*/get vibrateLightImpact() {
      return 10;
    },
    /*src__engine.DomRenderer.vibrateMediumImpact*/get vibrateMediumImpact() {
      return 20;
    },
    /*src__engine.DomRenderer.vibrateHeavyImpact*/get vibrateHeavyImpact() {
      return 30;
    },
    /*src__engine.DomRenderer.vibrateSelectionClick*/get vibrateSelectionClick() {
      return 10;
    },
    /*src__engine.DomRenderer._staleHotRestartStore*/get _staleHotRestartStore() {
      return "__flutter_state";
    },
    /*src__engine.DomRenderer.defaultFontStyle*/get defaultFontStyle() {
      return "normal";
    },
    /*src__engine.DomRenderer.defaultFontWeight*/get defaultFontWeight() {
      return "normal";
    },
    /*src__engine.DomRenderer.defaultFontSize*/get defaultFontSize() {
      return "14px";
    },
    /*src__engine.DomRenderer.defaultFontFamily*/get defaultFontFamily() {
      return "sans-serif";
    },
    /*src__engine.DomRenderer.defaultCssFont*/get defaultCssFont() {
      return dart.str(src__engine.DomRenderer.defaultFontStyle) + " " + dart.str(src__engine.DomRenderer.defaultFontWeight) + " " + dart.str(src__engine.DomRenderer.defaultFontSize) + " " + dart.str(src__engine.DomRenderer.defaultFontFamily);
    }
  });
  src__engine.DebugDomRendererFrameStatistics = class DebugDomRendererFrameStatistics extends core.Object {
    get paragraphRulerCacheHits() {
      return this[paragraphRulerCacheHits];
    }
    set paragraphRulerCacheHits(value) {
      this[paragraphRulerCacheHits] = value;
    }
    get paragraphRulerCacheMisses() {
      return this[paragraphRulerCacheMisses];
    }
    set paragraphRulerCacheMisses(value) {
      this[paragraphRulerCacheMisses] = value;
    }
    get richTextLayouts() {
      return this[richTextLayouts];
    }
    set richTextLayouts(value) {
      this[richTextLayouts] = value;
    }
    get plainTextLayouts() {
      return this[plainTextLayouts];
    }
    set plainTextLayouts(value) {
      this[plainTextLayouts] = value;
    }
    get totalParagraphRulerAccesses() {
      return dart.notNull(this.paragraphRulerCacheHits) + dart.notNull(this.paragraphRulerCacheMisses);
    }
    toString() {
      return ("Frame statistics:\n  Paragraph ruler cache hits: " + dart.str(this.paragraphRulerCacheHits) + "\n  Paragraph ruler cache misses: " + dart.str(this.paragraphRulerCacheMisses) + "\n  Paragraph ruler accesses: " + dart.str(this.totalParagraphRulerAccesses) + "\n  Rich text layouts: " + dart.str(this.richTextLayouts) + "\n  Plain text layouts: " + dart.str(this.plainTextLayouts) + "\n")[$trim]();
    }
  };
  (src__engine.DebugDomRendererFrameStatistics.new = function() {
    this[paragraphRulerCacheHits] = 0;
    this[paragraphRulerCacheMisses] = 0;
    this[richTextLayouts] = 0;
    this[plainTextLayouts] = 0;
    ;
  }).prototype = src__engine.DebugDomRendererFrameStatistics.prototype;
  dart.addTypeTests(src__engine.DebugDomRendererFrameStatistics);
  const paragraphRulerCacheHits = Symbol("DebugDomRendererFrameStatistics.paragraphRulerCacheHits");
  const paragraphRulerCacheMisses = Symbol("DebugDomRendererFrameStatistics.paragraphRulerCacheMisses");
  const richTextLayouts = Symbol("DebugDomRendererFrameStatistics.richTextLayouts");
  const plainTextLayouts = Symbol("DebugDomRendererFrameStatistics.plainTextLayouts");
  dart.setGetterSignature(src__engine.DebugDomRendererFrameStatistics, () => ({
    __proto__: dart.getGetters(src__engine.DebugDomRendererFrameStatistics.__proto__),
    totalParagraphRulerAccesses: core.int
  }));
  dart.setFieldSignature(src__engine.DebugDomRendererFrameStatistics, () => ({
    __proto__: dart.getFields(src__engine.DebugDomRendererFrameStatistics.__proto__),
    paragraphRulerCacheHits: dart.fieldType(core.int),
    paragraphRulerCacheMisses: dart.fieldType(core.int),
    richTextLayouts: dart.fieldType(core.int),
    plainTextLayouts: dart.fieldType(core.int)
  }));
  dart.defineExtensionMethods(src__engine.DebugDomRendererFrameStatistics, ['toString']);
  src__engine._SaveStackEntry = class _SaveStackEntry extends core.Object {};
  (src__engine._SaveStackEntry.new = function(opts) {
    let transform = opts && 'transform' in opts ? opts.transform : null;
    let clipStack = opts && 'clipStack' in opts ? opts.clipStack : null;
    this.transform = transform;
    this.clipStack = clipStack;
    ;
  }).prototype = src__engine._SaveStackEntry.prototype;
  dart.addTypeTests(src__engine._SaveStackEntry);
  dart.setFieldSignature(src__engine._SaveStackEntry, () => ({
    __proto__: dart.getFields(src__engine._SaveStackEntry.__proto__),
    transform: dart.finalFieldType(src__engine.Matrix4),
    clipStack: dart.finalFieldType(core.List$(src__engine._SaveClipEntry))
  }));
  src__engine._SaveClipEntry = class _SaveClipEntry extends core.Object {};
  (src__engine._SaveClipEntry.rect = function(rect, currentTransform) {
    this.rect = rect;
    this.currentTransform = currentTransform;
    this.rrect = null;
    this.path = null;
    ;
  }).prototype = src__engine._SaveClipEntry.prototype;
  (src__engine._SaveClipEntry.rrect = function(rrect, currentTransform) {
    this.rrect = rrect;
    this.currentTransform = currentTransform;
    this.rect = null;
    this.path = null;
    ;
  }).prototype = src__engine._SaveClipEntry.prototype;
  (src__engine._SaveClipEntry.path = function(path, currentTransform) {
    this.path = path;
    this.currentTransform = currentTransform;
    this.rect = null;
    this.rrect = null;
    ;
  }).prototype = src__engine._SaveClipEntry.prototype;
  dart.addTypeTests(src__engine._SaveClipEntry);
  dart.setFieldSignature(src__engine._SaveClipEntry, () => ({
    __proto__: dart.getFields(src__engine._SaveClipEntry.__proto__),
    rect: dart.finalFieldType(ui.Rect),
    rrect: dart.finalFieldType(ui.RRect),
    path: dart.finalFieldType(ui.Path),
    currentTransform: dart.finalFieldType(src__engine.Matrix4)
  }));
  const _locationStrategy = dart.privateName(src__engine, "_locationStrategy");
  const _unsubscribe = dart.privateName(src__engine, "_unsubscribe");
  const _userProvidedRouteName = dart.privateName(src__engine, "_userProvidedRouteName");
  const _tearoffStrategy = dart.privateName(src__engine, "_tearoffStrategy");
  const _setupStrategy = dart.privateName(src__engine, "_setupStrategy");
  const _setupFlutterEntry = dart.privateName(src__engine, "_setupFlutterEntry");
  let const$12;
  let const$13;
  const _popStateListener = dart.privateName(src__engine, "_popStateListener");
  const _setupOriginEntry = dart.privateName(src__engine, "_setupOriginEntry");
  src__engine.BrowserHistory = class BrowserHistory extends core.Object {
    set locationStrategy(strategy) {
      if (!dart.equals(strategy, this[_locationStrategy])) {
        this[_tearoffStrategy](this[_locationStrategy]);
        this[_locationStrategy] = strategy;
        this[_setupStrategy](this[_locationStrategy]);
      }
    }
    get currentPath() {
      let t1, t1$;
      t1$ = (t1 = this[_locationStrategy], t1 == null ? null : t1.path);
      return t1$ == null ? "/" : t1$;
    }
    setRouteName(routeName) {
      if (this[_locationStrategy] != null) {
        this[_setupFlutterEntry](this[_locationStrategy], {replace: true, path: routeName});
      }
    }
    back() {
      if (this[_locationStrategy] != null) {
        return this[_locationStrategy].back();
      }
      return FutureOfvoid().value();
    }
    exit() {
      if (this[_locationStrategy] != null) {
        this[_tearoffStrategy](this[_locationStrategy]);
        let backFuture = this[_locationStrategy].back();
        this[_locationStrategy] = null;
        return backFuture;
      }
      return FutureOfvoid().value();
    }
    [_popStateListener](event) {
      html.PopStateEvent._check(event);
      if (dart.test(src__engine._isOriginEntry(event[$state]))) {
        this[_setupFlutterEntry](this[_locationStrategy]);
        ui.window.onPlatformMessage("flutter/navigation", (const$12 || (const$12 = dart.const(new src__engine.JSONMethodCodec.new()))).encodeMethodCall(src__engine._popRouteMethodCall), dart.fn(_ => {
        }, ByteDataToNull()));
      } else if (dart.test(src__engine._isFlutterEntry(event[$state]))) {
        if (!(this[_userProvidedRouteName] != null)) dart.assertFailed();
        let newRouteName = this[_userProvidedRouteName];
        this[_userProvidedRouteName] = null;
        ui.window.onPlatformMessage("flutter/navigation", (const$13 || (const$13 = dart.const(new src__engine.JSONMethodCodec.new()))).encodeMethodCall(new src__engine.MethodCall.new("pushRoute", newRouteName)), dart.fn(_ => {
        }, ByteDataToNull()));
      } else {
        this[_userProvidedRouteName] = this.currentPath;
        this[_locationStrategy].back();
      }
    }
    [_setupOriginEntry](strategy) {
      if (!(strategy != null)) dart.assertFailed();
      strategy.replaceState(src__engine._originState, "origin", "");
    }
    [_setupFlutterEntry](strategy, opts) {
      let replace = opts && 'replace' in opts ? opts.replace : false;
      let path = opts && 'path' in opts ? opts.path : null;
      if (!(strategy != null)) dart.assertFailed();
      path == null ? path = this.currentPath : null;
      if (dart.test(replace)) {
        strategy.replaceState(src__engine._flutterState, "flutter", path);
      } else {
        strategy.pushState(src__engine._flutterState, "flutter", path);
      }
    }
    [_setupStrategy](strategy) {
      if (strategy == null) {
        return;
      }
      let path = this.currentPath;
      if (dart.test(src__engine._isFlutterEntry(html.window.history[$state]))) {
      } else {
        this[_setupOriginEntry](strategy);
        this[_setupFlutterEntry](strategy, {replace: false, path: path});
      }
      this[_unsubscribe] = strategy.onPopState(EventTodynamic()._check(dart.bind(this, _popStateListener)));
    }
    [_tearoffStrategy](strategy) {
      if (strategy == null) {
        return;
      }
      if (!(this[_unsubscribe] != null)) dart.assertFailed();
      this[_unsubscribe]();
      this[_unsubscribe] = null;
      strategy.back();
    }
  };
  (src__engine.BrowserHistory.new = function() {
    this[_locationStrategy] = null;
    this[_unsubscribe] = null;
    this[_userProvidedRouteName] = null;
    ;
  }).prototype = src__engine.BrowserHistory.prototype;
  dart.addTypeTests(src__engine.BrowserHistory);
  dart.setMethodSignature(src__engine.BrowserHistory, () => ({
    __proto__: dart.getMethods(src__engine.BrowserHistory.__proto__),
    setRouteName: dart.fnType(dart.void, [core.String]),
    back: dart.fnType(async.Future$(dart.void), []),
    exit: dart.fnType(async.Future$(dart.void), []),
    [_popStateListener]: dart.fnType(dart.void, [core.Object]),
    [_setupOriginEntry]: dart.fnType(dart.void, [ui.LocationStrategy]),
    [_setupFlutterEntry]: dart.fnType(dart.void, [ui.LocationStrategy], {path: core.String, replace: core.bool}),
    [_setupStrategy]: dart.fnType(dart.void, [ui.LocationStrategy]),
    [_tearoffStrategy]: dart.fnType(dart.void, [ui.LocationStrategy])
  }));
  dart.setGetterSignature(src__engine.BrowserHistory, () => ({
    __proto__: dart.getGetters(src__engine.BrowserHistory.__proto__),
    currentPath: core.String
  }));
  dart.setSetterSignature(src__engine.BrowserHistory, () => ({
    __proto__: dart.getSetters(src__engine.BrowserHistory.__proto__),
    locationStrategy: ui.LocationStrategy
  }));
  dart.setFieldSignature(src__engine.BrowserHistory, () => ({
    __proto__: dart.getFields(src__engine.BrowserHistory.__proto__),
    [_locationStrategy]: dart.fieldType(ui.LocationStrategy),
    [_unsubscribe]: dart.fieldType(dart.fnType(dart.void, [])),
    [_userProvidedRouteName]: dart.fieldType(core.String)
  }));
  const _serializedCommands = dart.privateName(src__engine, "_serializedCommands");
  const EngineCanvas_SaveElementStackTracking$$ = class EngineCanvas_SaveElementStackTracking extends src__engine.EngineCanvas {};
  (EngineCanvas_SaveElementStackTracking$$.new = function() {
    src__engine.SaveElementStackTracking[dart.mixinNew].call(this);
  }).prototype = EngineCanvas_SaveElementStackTracking$$.prototype;
  dart.applyMixin(EngineCanvas_SaveElementStackTracking$$, src__engine.SaveElementStackTracking);
  src__engine.HoudiniCanvas = class HoudiniCanvas extends EngineCanvas_SaveElementStackTracking$$ {
    get rootElement() {
      return this[rootElement$1];
    }
    set rootElement(value) {
      super.rootElement = value;
    }
    get bounds() {
      return this[bounds$0];
    }
    set bounds(value) {
      super.bounds = value;
    }
    clear() {
      super.clear();
      this[_serializedCommands] = JSArrayOfList().of([]);
      src__engine.domRenderer.clearDom(this.rootElement);
    }
    apply(command) {
      if (!src__engine.PaintDrawParagraph.is(command) && !src__engine.PaintDrawImageRect.is(command) && !src__engine.PaintTransform.is(command)) {
        command.serializeToCssPaint(this[_serializedCommands]);
      }
      command.apply(this);
    }
    commit() {
      if (dart.test(this[_serializedCommands][$isNotEmpty])) {
        this.rootElement.style[$setProperty]("--flt", convert.json.encode(this[_serializedCommands]));
      } else {
        this.rootElement.style.removeProperty("--flt");
      }
    }
    clipRect(rect) {
      let t1;
      let clip = html.Element.tag("flt-clip-rect");
      let cssTransform = src__engine.matrix4ToCssTransform(src__engine.transformWithOffset(this.currentTransform, new ui.Offset.new(rect.left, rect.top)));
      t1 = clip.style;
      t1[$overflow] = "hidden";
      t1[$position] = "absolute";
      t1[$transform] = cssTransform;
      t1[$width] = dart.str(rect.width) + "px";
      t1[$height] = dart.str(rect.height) + "px";
      t1;
      super.translate(-dart.notNull(rect.left), -dart.notNull(rect.top));
      this.currentElement[$append](clip);
      this.pushElement(clip);
    }
    clipRRect(rrect) {
      let t1;
      let outer = rrect.outerRect;
      if (dart.test(rrect.isRect)) {
        this.clipRect(outer);
        return;
      }
      let clip = html.Element.tag("flt-clip-rrect");
      let style = clip.style;
      t1 = style;
      t1[$overflow] = "hidden";
      t1[$position] = "absolute";
      t1[$transform] = "translate(" + dart.str(outer.left) + "px, " + dart.str(outer.right) + "px)";
      t1[$width] = dart.str(outer.width) + "px";
      t1[$height] = dart.str(outer.height) + "px";
      t1;
      if (rrect.tlRadiusY == rrect.tlRadiusX) {
        style[$borderTopLeftRadius] = dart.str(rrect.tlRadiusX) + "px";
      } else {
        style[$borderTopLeftRadius] = dart.str(rrect.tlRadiusX) + "px " + dart.str(rrect.tlRadiusY) + "px";
      }
      if (rrect.trRadiusY == rrect.trRadiusX) {
        style[$borderTopRightRadius] = dart.str(rrect.trRadiusX) + "px";
      } else {
        style[$borderTopRightRadius] = dart.str(rrect.trRadiusX) + "px " + dart.str(rrect.trRadiusY) + "px";
      }
      if (rrect.brRadiusY == rrect.brRadiusX) {
        style[$borderBottomRightRadius] = dart.str(rrect.brRadiusX) + "px";
      } else {
        style[$borderBottomRightRadius] = dart.str(rrect.brRadiusX) + "px " + dart.str(rrect.brRadiusY) + "px";
      }
      if (rrect.blRadiusY == rrect.blRadiusX) {
        style[$borderBottomLeftRadius] = dart.str(rrect.blRadiusX) + "px";
      } else {
        style[$borderBottomLeftRadius] = dart.str(rrect.blRadiusX) + "px " + dart.str(rrect.blRadiusY) + "px";
      }
      super.translate(-dart.notNull(rrect.left), -dart.notNull(rrect.top));
      this.currentElement[$append](clip);
      this.pushElement(clip);
    }
    clipPath(path) {
    }
    drawColor(color, blendMode) {
    }
    drawLine(p1, p2, paint) {
    }
    drawPaint(paint) {
    }
    drawRect(rect, paint) {
    }
    drawRRect(rrect, paint) {
    }
    drawDRRect(outer, inner, paint) {
    }
    drawOval(rect, paint) {
    }
    drawCircle(c, radius, paint) {
    }
    drawPath(path, paint) {
    }
    drawShadow(path, color, elevation, transparentOccluder) {
    }
    drawImage(image, p, paint) {
    }
    drawImageRect(image, src, dst, paint) {
      let t1;
      let htmlImage = src__engine.HtmlImage.as(image);
      let imageBox = html.Element.tag("flt-img");
      let cssTransform = src__engine.matrix4ToCssTransform(src__engine.transformWithOffset(this.currentTransform, new ui.Offset.new(dst.left, dst.top)));
      t1 = imageBox.style;
      t1[$position] = "absolute";
      t1[$transformOrigin] = "0 0 0";
      t1[$width] = dart.str(dst.width[$toInt]()) + "px";
      t1[$height] = dart.str(dst.height[$toInt]()) + "px";
      t1[$transform] = cssTransform;
      t1[$backgroundImage] = "url(" + dart.str(htmlImage.imgElement.src) + ")";
      t1[$backgroundRepeat] = "norepeat";
      t1[$backgroundSize] = dart.str(dst.width) + "px " + dart.str(dst.height) + "px";
      t1;
      this.currentElement[$append](imageBox);
    }
    drawParagraph(paragraph, offset) {
      let t1;
      if (!dart.test(paragraph.webOnlyIsLaidOut)) dart.assertFailed();
      let paragraphElement = html.Element._check(paragraph.webOnlyGetParagraphElement()[$clone](true));
      let cssTransform = src__engine.matrix4ToCssTransform(src__engine.transformWithOffset(this.currentTransform, offset));
      t1 = paragraphElement.style;
      t1[$position] = "absolute";
      t1[$transformOrigin] = "0 0 0";
      t1[$transform] = cssTransform;
      t1[$whiteSpace] = dart.test(paragraph.webOnlyDrawOnCanvas) ? "nowrap" : "pre-wrap";
      t1[$width] = dart.str(paragraph.width) + "px";
      t1[$height] = dart.str(paragraph.height) + "px";
      t1;
      this.currentElement[$append](paragraphElement);
    }
  };
  (src__engine.HoudiniCanvas.new = function(bounds) {
    let t1;
    this[rootElement$1] = html.Element.tag("flt-houdini");
    this[_serializedCommands] = JSArrayOfList().of([]);
    this[bounds$0] = bounds;
    src__engine.HoudiniCanvas.__proto__.new.call(this);
    t1 = this.rootElement.style;
    t1[$position] = "absolute";
    t1[$top] = "0";
    t1[$left] = "0";
    t1[$width] = dart.str(this.bounds.size.width) + "px";
    t1[$height] = dart.str(this.bounds.size.height) + "px";
    t1[$backgroundImage] = "paint(flt)";
    t1;
  }).prototype = src__engine.HoudiniCanvas.prototype;
  dart.addTypeTests(src__engine.HoudiniCanvas);
  const rootElement$1 = Symbol("HoudiniCanvas.rootElement");
  const bounds$0 = Symbol("HoudiniCanvas.bounds");
  dart.setMethodSignature(src__engine.HoudiniCanvas, () => ({
    __proto__: dart.getMethods(src__engine.HoudiniCanvas.__proto__),
    apply: dart.fnType(dart.void, [src__engine.PaintCommand]),
    commit: dart.fnType(dart.void, []),
    clipRect: dart.fnType(dart.void, [ui.Rect]),
    clipRRect: dart.fnType(dart.void, [ui.RRect]),
    clipPath: dart.fnType(dart.void, [ui.Path]),
    drawColor: dart.fnType(dart.void, [ui.Color, ui.BlendMode]),
    drawLine: dart.fnType(dart.void, [ui.Offset, ui.Offset, ui.PaintData]),
    drawPaint: dart.fnType(dart.void, [ui.PaintData]),
    drawRect: dart.fnType(dart.void, [ui.Rect, ui.PaintData]),
    drawRRect: dart.fnType(dart.void, [ui.RRect, ui.PaintData]),
    drawDRRect: dart.fnType(dart.void, [ui.RRect, ui.RRect, ui.PaintData]),
    drawOval: dart.fnType(dart.void, [ui.Rect, ui.PaintData]),
    drawCircle: dart.fnType(dart.void, [ui.Offset, core.double, ui.PaintData]),
    drawPath: dart.fnType(dart.void, [ui.Path, ui.PaintData]),
    drawShadow: dart.fnType(dart.void, [ui.Path, ui.Color, core.double, core.bool]),
    drawImage: dart.fnType(dart.void, [ui.Image, ui.Offset, ui.PaintData]),
    drawImageRect: dart.fnType(dart.void, [ui.Image, ui.Rect, ui.Rect, ui.PaintData]),
    drawParagraph: dart.fnType(dart.void, [ui.Paragraph, ui.Offset])
  }));
  dart.setFieldSignature(src__engine.HoudiniCanvas, () => ({
    __proto__: dart.getFields(src__engine.HoudiniCanvas.__proto__),
    rootElement: dart.finalFieldType(html.Element),
    bounds: dart.finalFieldType(ui.Rect),
    [_serializedCommands]: dart.fieldType(core.List$(core.List))
  }));
  src__engine._SaveElementStackEntry = class _SaveElementStackEntry extends core.Object {};
  (src__engine._SaveElementStackEntry.new = function(opts) {
    let savedElement = opts && 'savedElement' in opts ? opts.savedElement : null;
    let transform = opts && 'transform' in opts ? opts.transform : null;
    this.savedElement = savedElement;
    this.transform = transform;
    ;
  }).prototype = src__engine._SaveElementStackEntry.prototype;
  dart.addTypeTests(src__engine._SaveElementStackEntry);
  dart.setFieldSignature(src__engine._SaveElementStackEntry, () => ({
    __proto__: dart.getFields(src__engine._SaveElementStackEntry.__proto__),
    savedElement: dart.finalFieldType(html.Element),
    transform: dart.finalFieldType(src__engine.Matrix4)
  }));
  const _getNextFrame = dart.privateName(src__engine, "_getNextFrame");
  let const$14;
  const _getNextFrame$ = dart.privateName(ui, "_getNextFrame");
  src__engine.HtmlCodec = class HtmlCodec extends core.Object {
    get src() {
      return this[src$];
    }
    set src(value) {
      super.src = value;
    }
    get frameCount() {
      return 1;
    }
    get repetitionCount() {
      return 0;
    }
    getNextFrame() {
      return async.async(ui.FrameInfo, (function* getNextFrame() {
        let subscription = null;
        let errorSubscription = null;
        let completer = CompleterOfFrameInfo().new();
        let imgElement = html.ImageElement.new();
        subscription = imgElement[$onLoad].listen(dart.fn(_ => {
          subscription.cancel();
          errorSubscription.cancel();
          let image = new src__engine.HtmlImage.new(imgElement, imgElement.naturalWidth, imgElement.naturalHeight);
          completer.complete(new src__engine.SingleFrameInfo.new(image));
        }, EventToNull()));
        errorSubscription = imgElement[$onError].listen(dart.fn(e => {
          subscription.cancel();
          errorSubscription.cancel();
          completer.completeError(e);
        }, EventToNull()));
        imgElement.src = this.src;
        return completer.future;
      }).bind(this));
    }
    dispose() {
    }
    [_getNextFrame$](callback) {
      return core.String._check(this[$noSuchMethod](new core._Invocation.method(const$14 || (const$14 = dart.const(new _js_helper.PrivateSymbol.new('_getNextFrame', _getNextFrame))), null, [callback])));
    }
  };
  (src__engine.HtmlCodec.new = function(src) {
    this[src$] = src;
    ;
  }).prototype = src__engine.HtmlCodec.prototype;
  dart.addTypeTests(src__engine.HtmlCodec);
  const src$ = Symbol("HtmlCodec.src");
  src__engine.HtmlCodec[dart.implements] = () => [ui.Codec];
  dart.setMethodSignature(src__engine.HtmlCodec, () => ({
    __proto__: dart.getMethods(src__engine.HtmlCodec.__proto__),
    getNextFrame: dart.fnType(async.Future$(ui.FrameInfo), []),
    dispose: dart.fnType(dart.void, []),
    [_getNextFrame$]: dart.fnType(core.String, [dart.fnType(dart.void, [ui.FrameInfo])])
  }));
  dart.setGetterSignature(src__engine.HtmlCodec, () => ({
    __proto__: dart.getGetters(src__engine.HtmlCodec.__proto__),
    frameCount: core.int,
    repetitionCount: core.int
  }));
  dart.setFieldSignature(src__engine.HtmlCodec, () => ({
    __proto__: dart.getFields(src__engine.HtmlCodec.__proto__),
    src: dart.finalFieldType(core.String)
  }));
  src__engine.HtmlBlobCodec = class HtmlBlobCodec extends src__engine.HtmlCodec {
    get blob() {
      return this[blob$];
    }
    set blob(value) {
      super.blob = value;
    }
    dispose() {
      html.Url.revokeObjectUrl(this.src);
    }
  };
  (src__engine.HtmlBlobCodec.new = function(blob) {
    this[blob$] = blob;
    src__engine.HtmlBlobCodec.__proto__.new.call(this, html.Url.createObjectUrlFromBlob(blob));
    ;
  }).prototype = src__engine.HtmlBlobCodec.prototype;
  dart.addTypeTests(src__engine.HtmlBlobCodec);
  const blob$ = Symbol("HtmlBlobCodec.blob");
  dart.setFieldSignature(src__engine.HtmlBlobCodec, () => ({
    __proto__: dart.getFields(src__engine.HtmlBlobCodec.__proto__),
    blob: dart.finalFieldType(html.Blob)
  }));
  let const$15;
  const _durationMillis = dart.privateName(src__engine, "_durationMillis");
  let const$16;
  const _durationMillis$ = dart.privateName(ui, "_durationMillis");
  src__engine.SingleFrameInfo = class SingleFrameInfo extends core.Object {
    get image() {
      return this[image$];
    }
    set image(value) {
      super.image = value;
    }
    get duration() {
      return const$15 || (const$15 = dart.const(new core.Duration.new({milliseconds: 0})));
    }
    get [_durationMillis$]() {
      return core.int._check(this[$noSuchMethod](new core._Invocation.getter(const$16 || (const$16 = dart.const(new _js_helper.PrivateSymbol.new('_durationMillis', _durationMillis))))));
    }
  };
  (src__engine.SingleFrameInfo.new = function(image) {
    this[image$] = image;
    ;
  }).prototype = src__engine.SingleFrameInfo.prototype;
  dart.addTypeTests(src__engine.SingleFrameInfo);
  const image$ = Symbol("SingleFrameInfo.image");
  src__engine.SingleFrameInfo[dart.implements] = () => [ui.FrameInfo];
  dart.setGetterSignature(src__engine.SingleFrameInfo, () => ({
    __proto__: dart.getGetters(src__engine.SingleFrameInfo.__proto__),
    duration: core.Duration,
    [_durationMillis$]: core.int
  }));
  dart.setFieldSignature(src__engine.SingleFrameInfo, () => ({
    __proto__: dart.getFields(src__engine.SingleFrameInfo.__proto__),
    image: dart.finalFieldType(ui.Image)
  }));
  const _toByteData = dart.privateName(src__engine, "_toByteData");
  src__engine.HtmlImage = class HtmlImage extends core.Object {
    get imgElement() {
      return this[imgElement$];
    }
    set imgElement(value) {
      super.imgElement = value;
    }
    get width() {
      return this[width$];
    }
    set width(value) {
      super.width = value;
    }
    get height() {
      return this[height$];
    }
    set height(value) {
      super.height = value;
    }
    dispose() {
    }
    toByteData(opts) {
      let format = opts && 'format' in opts ? opts.format : ui.ImageByteFormat.rawRgba;
      return src__engine.futurize(typed_data.ByteData, dart.fn(callback => this[_toByteData](format.index, dart.fn(encoded => {
        let t1, t1$;
        callback((t1$ = (t1 = encoded, t1 == null ? null : t1[$buffer]), t1$ == null ? null : t1$[$asByteData]()));
      }, Uint8ListToNull())), FnToString()));
    }
    [_toByteData](format, callback) {
      return null;
    }
  };
  (src__engine.HtmlImage.new = function(imgElement, width, height) {
    this[imgElement$] = imgElement;
    this[width$] = width;
    this[height$] = height;
    ;
  }).prototype = src__engine.HtmlImage.prototype;
  dart.addTypeTests(src__engine.HtmlImage);
  const imgElement$ = Symbol("HtmlImage.imgElement");
  const width$ = Symbol("HtmlImage.width");
  const height$ = Symbol("HtmlImage.height");
  src__engine.HtmlImage[dart.implements] = () => [ui.Image];
  dart.setMethodSignature(src__engine.HtmlImage, () => ({
    __proto__: dart.getMethods(src__engine.HtmlImage.__proto__),
    dispose: dart.fnType(dart.void, []),
    toByteData: dart.fnType(async.Future$(typed_data.ByteData), [], {format: ui.ImageByteFormat}),
    [_toByteData]: dart.fnType(core.String, [core.int, dart.fnType(dart.void, [typed_data.Uint8List])])
  }));
  dart.setFieldSignature(src__engine.HtmlImage, () => ({
    __proto__: dart.getFields(src__engine.HtmlImage.__proto__),
    imgElement: dart.finalFieldType(html.ImageElement),
    width: dart.finalFieldType(core.int),
    height: dart.finalFieldType(core.int)
  }));
  const _keydownListener = dart.privateName(src__engine, "_keydownListener");
  const _keyupListener = dart.privateName(src__engine, "_keyupListener");
  const _messageCodec = dart.privateName(src__engine, "_messageCodec");
  const _handleHtmlEvent = dart.privateName(src__engine, "_handleHtmlEvent");
  src__engine.Keyboard = class Keyboard extends core.Object {
    static initialize() {
      src__engine.Keyboard._instance == null ? src__engine.Keyboard._instance = new src__engine.Keyboard.__() : null;
    }
    static get instance() {
      return src__engine.Keyboard._instance;
    }
    dispose() {
      html.window[$removeEventListener]("keydown", this[_keydownListener]);
      html.window[$removeEventListener]("keyup", this[_keyupListener]);
      this[_keydownListener] = null;
      this[_keyupListener] = null;
      src__engine.Keyboard._instance = null;
    }
    [_handleHtmlEvent](event) {
      let eventData = new _js_helper.LinkedMap.from(["type", event.type, "keymap", "android", "keyCode", event.keyCode]);
      if (event.key[$codeUnits][$length] === 1) {
        eventData[$_set]("codePoint", event.key[$codeUnits][$first]);
      }
      ui.window.onPlatformMessage("flutter/keyevent", this[_messageCodec].encodeMessage(eventData), dart.fn(src__engine._noopCallback, ByteDataTovoid()));
    }
  };
  (src__engine.Keyboard.__ = function() {
    this[_keydownListener] = null;
    this[_keyupListener] = null;
    this[_messageCodec] = new src__engine.JSONMessageCodec.new();
    this[_keydownListener] = dart.fn(event => {
      this[_handleHtmlEvent](html.KeyboardEvent._check(event));
    }, EventToNull());
    html.window[$addEventListener]("keydown", this[_keydownListener]);
    this[_keyupListener] = dart.fn(event => {
      this[_handleHtmlEvent](html.KeyboardEvent._check(event));
    }, EventToNull());
    html.window[$addEventListener]("keyup", this[_keyupListener]);
    src__engine.registerHotRestartListener(dart.fn(() => {
      this.dispose();
    }, VoidToNull()));
  }).prototype = src__engine.Keyboard.prototype;
  dart.addTypeTests(src__engine.Keyboard);
  dart.setMethodSignature(src__engine.Keyboard, () => ({
    __proto__: dart.getMethods(src__engine.Keyboard.__proto__),
    dispose: dart.fnType(dart.void, []),
    [_handleHtmlEvent]: dart.fnType(dart.void, [html.KeyboardEvent])
  }));
  dart.setFieldSignature(src__engine.Keyboard, () => ({
    __proto__: dart.getFields(src__engine.Keyboard.__proto__),
    [_keydownListener]: dart.fieldType(dart.fnType(dart.dynamic, [html.Event])),
    [_keyupListener]: dart.fieldType(dart.fnType(dart.dynamic, [html.Event])),
    [_messageCodec]: dart.finalFieldType(src__engine.JSONMessageCodec)
  }));
  dart.defineLazy(src__engine.Keyboard, {
    /*src__engine.Keyboard._instance*/get _instance() {
      return null;
    },
    set _instance(_) {}
  });
  src__engine._LogMessage = class _LogMessage extends core.Object {
    toString() {
      if (this.duplicateCount === 1) {
        return this.message;
      }
      return dart.str(this.duplicateCount) + "x " + dart.str(this.message);
    }
  };
  (src__engine._LogMessage.new = function(message) {
    this.duplicateCount = 1;
    this.message = message;
    ;
  }).prototype = src__engine._LogMessage.prototype;
  dart.addTypeTests(src__engine._LogMessage);
  dart.setFieldSignature(src__engine._LogMessage, () => ({
    __proto__: dart.getFields(src__engine._LogMessage.__proto__),
    duplicateCount: dart.fieldType(core.int),
    message: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(src__engine._LogMessage, ['toString']);
  const _detector = dart.privateName(src__engine, "_detector");
  const _adapter = dart.privateName(src__engine, "_adapter");
  let const$17;
  const _createAdapter = dart.privateName(src__engine, "_createAdapter");
  let const$18;
  const _onPointerData = dart.privateName(src__engine, "_onPointerData");
  src__engine.PointerBinding = class PointerBinding extends core.Object {
    get domRenderer() {
      return this[domRenderer$];
    }
    set domRenderer(value) {
      super.domRenderer = value;
    }
    static get instance() {
      return src__engine.PointerBinding._instance;
    }
    debugOverrideDetector(newDetector) {
      let t1;
      if (newDetector == null) {
        newDetector = const$18 || (const$18 = dart.const(new src__engine.PointerSupportDetector.new()));
      }
      if (!dart.equals(newDetector, this[_detector])) {
        this[_detector] = newDetector;
        t1 = this[_adapter];
        t1 == null ? null : t1.clearListeners();
        this[_adapter] = this[_createAdapter]();
      }
    }
    [_createAdapter]() {
      if (dart.test(this[_detector].hasPointerEvents)) {
        return new src__engine.PointerAdapter.new(dart.bind(this, _onPointerData), this.domRenderer);
      }
      if (dart.test(this[_detector].hasTouchEvents)) {
        return new src__engine.TouchAdapter.new(dart.bind(this, _onPointerData), this.domRenderer);
      }
      if (dart.test(this[_detector].hasMouseEvents)) {
        return new src__engine.MouseAdapter.new(dart.bind(this, _onPointerData), this.domRenderer);
      }
      return null;
    }
    [_onPointerData](data) {
      let packet = new ui.PointerDataPacket.new({data: data});
      ui.window.onPointerDataPacket(packet);
    }
  };
  (src__engine.PointerBinding.new = function(domRenderer) {
    this[_detector] = null;
    this[_adapter] = null;
    this[domRenderer$] = domRenderer;
    if (src__engine.PointerBinding._instance == null) {
      src__engine.PointerBinding._instance = this;
      this[_detector] = const$17 || (const$17 = dart.const(new src__engine.PointerSupportDetector.new()));
      this[_adapter] = this[_createAdapter]();
    }
    if (!dart.test(dart.fn(() => {
      src__engine.registerHotRestartListener(dart.fn(() => {
        let t1;
        t1 = this[_adapter];
        t1 == null ? null : t1.clearListeners();
      }, VoidToNull()));
      return true;
    }, VoidTobool())())) dart.assertFailed();
  }).prototype = src__engine.PointerBinding.prototype;
  dart.addTypeTests(src__engine.PointerBinding);
  const domRenderer$ = Symbol("PointerBinding.domRenderer");
  dart.setMethodSignature(src__engine.PointerBinding, () => ({
    __proto__: dart.getMethods(src__engine.PointerBinding.__proto__),
    debugOverrideDetector: dart.fnType(dart.void, [src__engine.PointerSupportDetector]),
    [_createAdapter]: dart.fnType(src__engine.BaseAdapter, []),
    [_onPointerData]: dart.fnType(dart.void, [core.List$(ui.PointerData)])
  }));
  dart.setFieldSignature(src__engine.PointerBinding, () => ({
    __proto__: dart.getFields(src__engine.PointerBinding.__proto__),
    domRenderer: dart.finalFieldType(src__engine.DomRenderer),
    [_detector]: dart.fieldType(src__engine.PointerSupportDetector),
    [_adapter]: dart.fieldType(src__engine.BaseAdapter)
  }));
  dart.defineLazy(src__engine.PointerBinding, {
    /*src__engine.PointerBinding._instance*/get _instance() {
      return null;
    },
    set _instance(_) {}
  });
  src__engine.PointerSupportDetector = class PointerSupportDetector extends core.Object {
    get hasPointerEvents() {
      return core.bool._check(js_util.hasProperty(html.window, "PointerEvent"));
    }
    get hasTouchEvents() {
      return core.bool._check(js_util.hasProperty(html.window, "TouchEvent"));
    }
    get hasMouseEvents() {
      return core.bool._check(js_util.hasProperty(html.window, "MouseEvent"));
    }
    toString() {
      return "pointers:" + dart.str(this.hasPointerEvents) + ", touch:" + dart.str(this.hasTouchEvents) + ", mouse:" + dart.str(this.hasMouseEvents);
    }
  };
  (src__engine.PointerSupportDetector.new = function() {
    ;
  }).prototype = src__engine.PointerSupportDetector.prototype;
  dart.addTypeTests(src__engine.PointerSupportDetector);
  dart.setGetterSignature(src__engine.PointerSupportDetector, () => ({
    __proto__: dart.getGetters(src__engine.PointerSupportDetector.__proto__),
    hasPointerEvents: core.bool,
    hasTouchEvents: core.bool,
    hasMouseEvents: core.bool
  }));
  dart.defineExtensionMethods(src__engine.PointerSupportDetector, ['toString']);
  const _isDownMap = dart.privateName(src__engine, "_isDownMap");
  const _callback$ = dart.privateName(src__engine, "_callback");
  const _setup = dart.privateName(src__engine, "_setup");
  const _isButtonDown = dart.privateName(src__engine, "_isButtonDown");
  const _updateButtonDownState = dart.privateName(src__engine, "_updateButtonDownState");
  const _addEventListener = dart.privateName(src__engine, "_addEventListener");
  src__engine.BaseAdapter = class BaseAdapter extends core.Object {
    get domRenderer() {
      return this[domRenderer$0];
    }
    set domRenderer(value) {
      super.domRenderer = value;
    }
    [_isButtonDown](button) {
      return dart.equals(this[_isDownMap][$_get](button), true);
    }
    [_updateButtonDownState](button, value) {
      this[_isDownMap][$_set](button, value);
    }
    clearListeners() {
      let glassPane = this.domRenderer.glassPaneElement;
      src__engine.BaseAdapter._listeners[$forEach](dart.fn((eventName, listener) => {
        glassPane[$removeEventListener](eventName, listener);
      }, StringAndFnToNull()));
      src__engine.BaseAdapter._listeners[$clear]();
    }
    [_addEventListener](eventName, handler) {
      let loggedHandler = dart.fn(event => {
        if (dart.test(src__engine._debugLogPointerEvents)) core.print(event.type);
        if (dart.test(src__engine.EngineSemanticsOwner.instance.receiveGlobalEvent(event))) {
          handler(event);
        }
      }, EventToNull());
      src__engine.BaseAdapter._listeners[$_set](eventName, loggedHandler);
      this.domRenderer.glassPaneElement[$addEventListener](eventName, loggedHandler, true);
    }
  };
  (src__engine.BaseAdapter.new = function(_callback, domRenderer) {
    this[_isDownMap] = new (IdentityMapOfint$bool()).new();
    this[_callback$] = _callback;
    this[domRenderer$0] = domRenderer;
    this[_setup]();
  }).prototype = src__engine.BaseAdapter.prototype;
  dart.addTypeTests(src__engine.BaseAdapter);
  const domRenderer$0 = Symbol("BaseAdapter.domRenderer");
  dart.setMethodSignature(src__engine.BaseAdapter, () => ({
    __proto__: dart.getMethods(src__engine.BaseAdapter.__proto__),
    [_isButtonDown]: dart.fnType(core.bool, [core.int]),
    [_updateButtonDownState]: dart.fnType(dart.void, [core.int, core.bool]),
    clearListeners: dart.fnType(dart.void, []),
    [_addEventListener]: dart.fnType(dart.void, [core.String, dart.fnType(dart.dynamic, [html.Event])])
  }));
  dart.setFieldSignature(src__engine.BaseAdapter, () => ({
    __proto__: dart.getFields(src__engine.BaseAdapter.__proto__),
    domRenderer: dart.finalFieldType(src__engine.DomRenderer),
    [_callback$]: dart.fieldType(dart.fnType(dart.void, [core.List$(ui.PointerData)])),
    [_isDownMap]: dart.fieldType(core.Map$(core.int, core.bool))
  }));
  dart.defineLazy(src__engine.BaseAdapter, {
    /*src__engine.BaseAdapter._listeners*/get _listeners() {
      return new (IdentityMapOfString$EventTodynamic()).new();
    }
  });
  const _convertEventToPointerData = dart.privateName(src__engine, "_convertEventToPointerData");
  const _expandEvents = dart.privateName(src__engine, "_expandEvents");
  const _pointerTypeToDeviceKind = dart.privateName(src__engine, "_pointerTypeToDeviceKind");
  const _computeHighestTilt = dart.privateName(src__engine, "_computeHighestTilt");
  src__engine.PointerAdapter = class PointerAdapter extends src__engine.BaseAdapter {
    [_setup]() {
      this[_addEventListener]("pointerdown", dart.fn(event => {
        let pointerButton = src__engine._pointerButtonFromHtmlEvent(event);
        if (dart.test(this[_isButtonDown](pointerButton))) {
          this[_callback$](this[_convertEventToPointerData](ui.PointerChange.up, html.PointerEvent._check(event)));
        }
        this[_updateButtonDownState](pointerButton, true);
        this[_callback$](this[_convertEventToPointerData](ui.PointerChange.down, html.PointerEvent._check(event)));
      }, EventToNull()));
      this[_addEventListener]("pointermove", dart.fn(event => {
        if (!dart.test(this[_isButtonDown](src__engine._pointerButtonFromHtmlEvent(event)))) return;
        this[_callback$](this[_convertEventToPointerData](ui.PointerChange.move, html.PointerEvent._check(event)));
      }, EventToNull()));
      this[_addEventListener]("pointerup", dart.fn(event => {
        let pointerButton = src__engine._pointerButtonFromHtmlEvent(event);
        if (!dart.test(this[_isButtonDown](pointerButton))) return;
        this[_updateButtonDownState](pointerButton, false);
        this[_callback$](this[_convertEventToPointerData](ui.PointerChange.up, html.PointerEvent._check(event)));
      }, EventToNull()));
      this[_addEventListener]("pointercancel", dart.fn(event => {
        this[_callback$](this[_convertEventToPointerData](ui.PointerChange.cancel, html.PointerEvent._check(event)));
      }, EventToNull()));
      src__engine._addWheelEventListener(dart.fn(event => {
        if (dart.test(src__engine._debugLogPointerEvents)) core.print(event.type);
        this[_callback$](src__engine._convertWheelEventToPointerData(event));
        event.preventDefault();
      }, WheelEventToNull()));
    }
    [_convertEventToPointerData](change, evt) {
      let allEvents = this[_expandEvents](evt);
      let data = ListOfPointerData().new(allEvents[$length]);
      for (let i = 0; i < dart.notNull(allEvents[$length]); i = i + 1) {
        let event = allEvents[$_get](i);
        data[$_set](i, new ui.PointerData.new({change: change, timeStamp: src__engine._eventTimeStampToDuration(event.timeStamp), kind: this[_pointerTypeToDeviceKind](event.pointerType), device: event.pointerId, physicalX: event[$client].x, physicalY: event[$client].y, buttons: event.buttons, pressure: event.pressure, pressureMin: 0.0, pressureMax: 1.0, tilt: this[_computeHighestTilt](event)}));
      }
      return data;
    }
    [_expandEvents](event) {
      if (dart.dtest(js_util.hasProperty(event, "getCoalescedEvents"))) {
        let coalescedEvents = event.getCoalescedEvents();
        if (dart.test(coalescedEvents[$isNotEmpty])) {
          return coalescedEvents;
        }
      }
      return JSArrayOfPointerEvent().of([event]);
    }
    [_pointerTypeToDeviceKind](pointerType) {
      switch (pointerType) {
        case "mouse":
        {
          return ui.PointerDeviceKind.mouse;
        }
        case "pen":
        {
          return ui.PointerDeviceKind.stylus;
        }
        case "touch":
        {
          return ui.PointerDeviceKind.touch;
        }
        default:
        {
          return ui.PointerDeviceKind.unknown;
        }
      }
    }
    [_computeHighestTilt](e) {
      return (e.tiltX[$abs]() > e.tiltY[$abs]() ? e.tiltX : e.tiltY)[$toDouble]() / 180.0 * dart.notNull(math.pi);
    }
  };
  (src__engine.PointerAdapter.new = function(callback, domRenderer) {
    src__engine.PointerAdapter.__proto__.new.call(this, callback, domRenderer);
    ;
  }).prototype = src__engine.PointerAdapter.prototype;
  dart.addTypeTests(src__engine.PointerAdapter);
  dart.setMethodSignature(src__engine.PointerAdapter, () => ({
    __proto__: dart.getMethods(src__engine.PointerAdapter.__proto__),
    [_setup]: dart.fnType(dart.void, []),
    [_convertEventToPointerData]: dart.fnType(core.List$(ui.PointerData), [ui.PointerChange, html.PointerEvent]),
    [_expandEvents]: dart.fnType(core.List$(html.PointerEvent), [html.PointerEvent]),
    [_pointerTypeToDeviceKind]: dart.fnType(ui.PointerDeviceKind, [core.String]),
    [_computeHighestTilt]: dart.fnType(core.double, [html.PointerEvent])
  }));
  src__engine.TouchAdapter = class TouchAdapter extends src__engine.BaseAdapter {
    [_setup]() {
      this[_addEventListener]("touchstart", dart.fn(event => {
        this[_updateButtonDownState](src__engine._kPrimaryMouseButton, true);
        this[_callback$](this[_convertEventToPointerData](ui.PointerChange.down, html.TouchEvent._check(event)));
      }, EventToNull()));
      this[_addEventListener]("touchmove", dart.fn(event => {
        event.preventDefault();
        if (!dart.test(this[_isButtonDown](src__engine._kPrimaryMouseButton))) return;
        this[_callback$](this[_convertEventToPointerData](ui.PointerChange.move, html.TouchEvent._check(event)));
      }, EventToNull()));
      this[_addEventListener]("touchend", dart.fn(event => {
        this[_updateButtonDownState](src__engine._kPrimaryMouseButton, false);
        this[_callback$](this[_convertEventToPointerData](ui.PointerChange.up, html.TouchEvent._check(event)));
      }, EventToNull()));
      this[_addEventListener]("touchcancel", dart.fn(event => {
        this[_callback$](this[_convertEventToPointerData](ui.PointerChange.cancel, html.TouchEvent._check(event)));
      }, EventToNull()));
    }
    [_convertEventToPointerData](change, event) {
      let touches = event.changedTouches;
      let data = ListOfPointerData().new(touches[$length]);
      for (let i = 0, len = touches[$length]; i < dart.notNull(len); i = i + 1) {
        let touch = touches[$_get](i);
        data[$_set](i, new ui.PointerData.new({change: change, timeStamp: src__engine._eventTimeStampToDuration(event.timeStamp), kind: ui.PointerDeviceKind.touch, signalKind: ui.PointerSignalKind.none, device: touch.identifier, physicalX: touch[$client].x, physicalY: touch[$client].y, pressure: 1.0, pressureMin: 0.0, pressureMax: 1.0}));
      }
      return data;
    }
  };
  (src__engine.TouchAdapter.new = function(callback, domRenderer) {
    src__engine.TouchAdapter.__proto__.new.call(this, callback, domRenderer);
    ;
  }).prototype = src__engine.TouchAdapter.prototype;
  dart.addTypeTests(src__engine.TouchAdapter);
  dart.setMethodSignature(src__engine.TouchAdapter, () => ({
    __proto__: dart.getMethods(src__engine.TouchAdapter.__proto__),
    [_setup]: dart.fnType(dart.void, []),
    [_convertEventToPointerData]: dart.fnType(core.List$(ui.PointerData), [ui.PointerChange, html.TouchEvent])
  }));
  src__engine.MouseAdapter = class MouseAdapter extends src__engine.BaseAdapter {
    [_setup]() {
      this[_addEventListener]("mousedown", dart.fn(event => {
        let pointerButton = src__engine._pointerButtonFromHtmlEvent(event);
        if (dart.test(this[_isButtonDown](pointerButton))) {
          this[_callback$](this[_convertEventToPointerData](ui.PointerChange.up, html.MouseEvent._check(event)));
        }
        this[_updateButtonDownState](pointerButton, true);
        this[_callback$](this[_convertEventToPointerData](ui.PointerChange.down, html.MouseEvent._check(event)));
      }, EventToNull()));
      this[_addEventListener]("mousemove", dart.fn(event => {
        if (!dart.test(this[_isButtonDown](src__engine._pointerButtonFromHtmlEvent(event)))) return;
        this[_callback$](this[_convertEventToPointerData](ui.PointerChange.move, html.MouseEvent._check(event)));
      }, EventToNull()));
      this[_addEventListener]("mouseup", dart.fn(event => {
        this[_updateButtonDownState](src__engine._pointerButtonFromHtmlEvent(event), false);
        this[_callback$](this[_convertEventToPointerData](ui.PointerChange.up, html.MouseEvent._check(event)));
      }, EventToNull()));
      src__engine._addWheelEventListener(dart.fn(event => {
        if (dart.test(src__engine._debugLogPointerEvents)) core.print(event.type);
        this[_callback$](src__engine._convertWheelEventToPointerData(event));
        event.preventDefault();
      }, WheelEventToNull()));
    }
    [_convertEventToPointerData](change, event) {
      return JSArrayOfPointerData().of([new ui.PointerData.new({change: change, timeStamp: src__engine._eventTimeStampToDuration(event.timeStamp), kind: ui.PointerDeviceKind.mouse, signalKind: ui.PointerSignalKind.none, device: src__engine._mouseDeviceId, physicalX: event[$client].x, physicalY: event[$client].y, buttons: event.buttons, pressure: 1.0, pressureMin: 0.0, pressureMax: 1.0})]);
    }
  };
  (src__engine.MouseAdapter.new = function(callback, domRenderer) {
    src__engine.MouseAdapter.__proto__.new.call(this, callback, domRenderer);
    ;
  }).prototype = src__engine.MouseAdapter.prototype;
  dart.addTypeTests(src__engine.MouseAdapter);
  dart.setMethodSignature(src__engine.MouseAdapter, () => ({
    __proto__: dart.getMethods(src__engine.MouseAdapter.__proto__),
    [_setup]: dart.fnType(dart.void, []),
    [_convertEventToPointerData]: dart.fnType(core.List$(ui.PointerData), [ui.PointerChange, html.MouseEvent])
  }));
  const _commands = dart.privateName(src__engine, "_commands");
  const _hasArbitraryPaint = dart.privateName(src__engine, "_hasArbitraryPaint");
  const _didDraw = dart.privateName(src__engine, "_didDraw");
  const _paintBounds = dart.privateName(src__engine, "_paintBounds");
  let const$19;
  let const$20;
  let const$21;
  let const$22;
  src__engine.RecordingCanvas = class RecordingCanvas extends core.Object {
    get saveCount() {
      return this[saveCount];
    }
    set saveCount(value) {
      this[saveCount] = value;
    }
    get hasArbitraryPaint() {
      return this[_hasArbitraryPaint];
    }
    debugEnforceArbitraryPaint() {
      this[_hasArbitraryPaint] = true;
    }
    get didDraw() {
      return this[_didDraw];
    }
    computePaintBounds() {
      return this[_paintBounds].computeBounds();
    }
    apply(engineCanvas) {
      if (dart.test(src__engine._debugDumpPaintCommands)) {
        let debugBuf = new core.StringBuffer.new();
        debugBuf.writeln("--- Applying RecordingCanvas to " + dart.str(dart.runtimeType(engineCanvas)) + " " + "with bounds " + dart.str(this[_paintBounds]));
        for (let i = 0; i < dart.notNull(this[_commands][$length]); i = i + 1) {
          let command = this[_commands][$_get](i);
          debugBuf.writeln("ctx." + dart.str(command) + ";");
          command.apply(engineCanvas);
        }
        debugBuf.writeln("--- End of command stream");
        core.print(debugBuf);
      } else {
        for (let i = 0; i < dart.notNull(this[_commands][$length]); i = i + 1) {
          this[_commands][$_get](i).apply(engineCanvas);
        }
      }
    }
    debugPrintCommands() {
      if (dart.test(src__engine.assertionsEnabled)) {
        let debugBuf = new core.StringBuffer.new();
        for (let i = 0; i < dart.notNull(this[_commands][$length]); i = i + 1) {
          let command = this[_commands][$_get](i);
          debugBuf.writeln("ctx." + dart.str(command) + ";");
        }
        return debugBuf.toString();
      }
      return null;
    }
    save() {
      this[_paintBounds].saveTransformsAndClip();
      this[_commands][$add](const$19 || (const$19 = dart.const(new src__engine.PaintSave.new())));
      this.saveCount = dart.notNull(this.saveCount) + 1;
    }
    saveLayerWithoutBounds(paint) {
      this[_hasArbitraryPaint] = true;
      this[_commands][$add](const$20 || (const$20 = dart.const(new src__engine.PaintSave.new())));
      this[_paintBounds].saveTransformsAndClip();
      this.saveCount = dart.notNull(this.saveCount) + 1;
    }
    saveLayer(bounds, paint) {
      this[_hasArbitraryPaint] = true;
      this[_commands][$add](const$21 || (const$21 = dart.const(new src__engine.PaintSave.new())));
      this[_paintBounds].saveTransformsAndClip();
      this.saveCount = dart.notNull(this.saveCount) + 1;
    }
    restore() {
      this[_paintBounds].restoreTransformsAndClip();
      if (dart.test(this[_commands][$isNotEmpty]) && src__engine.PaintSave.is(this[_commands][$last])) {
        this[_commands][$removeLast]();
      } else {
        this[_commands][$add](const$22 || (const$22 = dart.const(new src__engine.PaintRestore.new())));
      }
      this.saveCount = dart.notNull(this.saveCount) - 1;
    }
    translate(dx, dy) {
      this[_paintBounds].translate(dx, dy);
      this[_commands][$add](new src__engine.PaintTranslate.new(dx, dy));
    }
    scale(sx, sy) {
      this[_paintBounds].scale(sx, sy);
      this[_commands][$add](new src__engine.PaintScale.new(sx, sy));
    }
    rotate(radians) {
      this[_paintBounds].rotateZ(radians);
      this[_commands][$add](new src__engine.PaintRotate.new(radians));
    }
    transform(matrix4) {
      this[_paintBounds].transform(matrix4);
      this[_commands][$add](new src__engine.PaintTransform.new(matrix4));
    }
    skew(sx, sy) {
      this[_hasArbitraryPaint] = true;
      this[_paintBounds].skew(sx, sy);
      this[_commands][$add](new src__engine.PaintSkew.new(sx, sy));
    }
    clipRect(rect) {
      this[_paintBounds].clipRect(rect);
      this[_hasArbitraryPaint] = true;
      this[_commands][$add](new src__engine.PaintClipRect.new(rect));
    }
    clipRRect(rrect) {
      this[_paintBounds].clipRect(rrect.outerRect);
      this[_hasArbitraryPaint] = true;
      this[_commands][$add](new src__engine.PaintClipRRect.new(rrect));
    }
    clipPath(path) {
      this[_paintBounds].clipRect(path.getBounds());
      this[_hasArbitraryPaint] = true;
      this[_commands][$add](new src__engine.PaintClipPath.new(path));
    }
    drawColor(color, blendMode) {
      this[_hasArbitraryPaint] = true;
      this[_didDraw] = true;
      this[_paintBounds].grow(this[_paintBounds].maxPaintBounds);
      this[_commands][$add](new src__engine.PaintDrawColor.new(color, blendMode));
    }
    drawLine(p1, p2, paint) {
      let strokeWidth = math.max(core.double, paint.strokeWidth, 1.0);
      this[_paintBounds].growLTRB(math.min(core.double, p1.dx, p2.dx) - strokeWidth, math.min(core.double, p1.dy, p2.dy) - strokeWidth, math.max(core.double, p1.dx, p2.dx) + strokeWidth, math.max(core.double, p1.dy, p2.dy) + strokeWidth);
      this[_hasArbitraryPaint] = true;
      this[_didDraw] = true;
      this[_commands][$add](new src__engine.PaintDrawLine.new(p1, p2, paint.webOnlyPaintData));
    }
    drawPaint(paint) {
      this[_hasArbitraryPaint] = true;
      this[_didDraw] = true;
      this[_paintBounds].grow(this[_paintBounds].maxPaintBounds);
      this[_commands][$add](new src__engine.PaintDrawPaint.new(paint.webOnlyPaintData));
    }
    drawRect(rect, paint) {
      if (paint.shader != null) {
        this[_hasArbitraryPaint] = true;
      }
      this[_didDraw] = true;
      if (paint.strokeWidth != null && paint.strokeWidth !== 0) {
        this[_paintBounds].grow(rect.inflate(dart.notNull(paint.strokeWidth) / 2.0));
      } else {
        this[_paintBounds].grow(rect);
      }
      this[_commands][$add](new src__engine.PaintDrawRect.new(rect, paint.webOnlyPaintData));
    }
    drawRRect(rrect, paint) {
      this[_hasArbitraryPaint] = true;
      this[_didDraw] = true;
      let strokeWidth = paint.strokeWidth == null ? 0 : paint.strokeWidth;
      let left = math.min(core.double, rrect.left, rrect.right) - dart.notNull(strokeWidth);
      let right = math.max(core.double, rrect.left, rrect.right) + dart.notNull(strokeWidth);
      let top = math.min(core.double, rrect.top, rrect.bottom) - dart.notNull(strokeWidth);
      let bottom = math.max(core.double, rrect.top, rrect.bottom) + dart.notNull(strokeWidth);
      this[_paintBounds].growLTRB(left, top, right, bottom);
      this[_commands][$add](new src__engine.PaintDrawRRect.new(rrect, paint.webOnlyPaintData));
    }
    drawDRRect(outer, inner, paint) {
      if (!(dart.test(outer.contains(new ui.Offset.new(inner.left, inner.top))) && dart.test(outer.contains(new ui.Offset.new(inner.right, inner.bottom))))) {
        return;
      }
      this[_hasArbitraryPaint] = true;
      this[_didDraw] = true;
      let strokeWidth = paint.strokeWidth == null ? 0 : paint.strokeWidth;
      this[_paintBounds].growLTRB(dart.notNull(outer.left) - dart.notNull(strokeWidth), dart.notNull(outer.top) - dart.notNull(strokeWidth), dart.notNull(outer.right) + dart.notNull(strokeWidth), dart.notNull(outer.bottom) + dart.notNull(strokeWidth));
      this[_commands][$add](new src__engine.PaintDrawDRRect.new(outer, inner, paint.webOnlyPaintData));
    }
    drawOval(rect, paint) {
      this[_hasArbitraryPaint] = true;
      this[_didDraw] = true;
      if (paint.strokeWidth != null) {
        this[_paintBounds].grow(rect.inflate(paint.strokeWidth));
      } else {
        this[_paintBounds].grow(rect);
      }
      this[_commands][$add](new src__engine.PaintDrawOval.new(rect, paint.webOnlyPaintData));
    }
    drawCircle(c, radius, paint) {
      this[_hasArbitraryPaint] = true;
      this[_didDraw] = true;
      let strokeWidth = paint.strokeWidth == null ? 0 : paint.strokeWidth;
      this[_paintBounds].growLTRB(dart.notNull(c.dx) - dart.notNull(radius) - dart.notNull(strokeWidth), dart.notNull(c.dy) - dart.notNull(radius) - dart.notNull(strokeWidth), dart.notNull(c.dx) + dart.notNull(radius) + dart.notNull(strokeWidth), dart.notNull(c.dy) + dart.notNull(radius) + dart.notNull(strokeWidth));
      this[_commands][$add](new src__engine.PaintDrawCircle.new(c, radius, paint.webOnlyPaintData));
    }
    drawPath(path, paint) {
      this[_hasArbitraryPaint] = true;
      this[_didDraw] = true;
      let pathBounds = path.getBounds();
      if (paint.strokeWidth != null) {
        pathBounds = pathBounds.inflate(paint.strokeWidth);
      }
      this[_paintBounds].grow(pathBounds);
      this[_commands][$add](new src__engine.PaintDrawPath.new(path, paint.webOnlyPaintData));
    }
    drawImage(image, offset, paint) {
      this[_hasArbitraryPaint] = true;
      this[_didDraw] = true;
      let left = offset.dx;
      let top = offset.dy;
      this[_paintBounds].growLTRB(left, top, dart.notNull(left) + dart.notNull(image.width), dart.notNull(top) + dart.notNull(image.height));
      this[_commands][$add](new src__engine.PaintDrawImage.new(image, offset, paint.webOnlyPaintData));
    }
    drawImageRect(image, src, dst, paint) {
      this[_hasArbitraryPaint] = true;
      this[_didDraw] = true;
      this[_paintBounds].grow(dst);
      this[_commands][$add](new src__engine.PaintDrawImageRect.new(image, src, dst, paint.webOnlyPaintData));
    }
    drawParagraph(paragraph, offset) {
      this[_didDraw] = true;
      let left = offset.dx;
      let top = offset.dy;
      this[_paintBounds].growLTRB(left, top, dart.notNull(left) + dart.notNull(paragraph.width), dart.notNull(top) + dart.notNull(paragraph.height));
      this[_commands][$add](new src__engine.PaintDrawParagraph.new(paragraph, offset));
    }
    drawShadow(path, color, elevation, transparentOccluder) {
      this[_hasArbitraryPaint] = true;
      this[_didDraw] = true;
      let shadowRect = src__engine.ElevationShadow.computeShadowRect(path.getBounds(), elevation);
      this[_paintBounds].grow(shadowRect);
      this[_commands][$add](new src__engine.PaintDrawShadow.new(path, color, elevation, transparentOccluder));
    }
    debugDumpCommands() {
      core.print("/"[$times](40) + " CANVAS COMMANDS " + "/"[$times](40));
      for (let command of this[_commands]) {
        core.print(command);
      }
      core.print("/"[$times](37) + " END OF CANVAS COMMANDS " + "/"[$times](36));
    }
  };
  (src__engine.RecordingCanvas.new = function(bounds) {
    this[_commands] = JSArrayOfPaintCommand().of([]);
    this[_hasArbitraryPaint] = false;
    this[_didDraw] = false;
    this[saveCount] = 1;
    this[_paintBounds] = new src__engine._PaintBounds.new(bounds);
    ;
  }).prototype = src__engine.RecordingCanvas.prototype;
  dart.addTypeTests(src__engine.RecordingCanvas);
  const saveCount = Symbol("RecordingCanvas.saveCount");
  dart.setMethodSignature(src__engine.RecordingCanvas, () => ({
    __proto__: dart.getMethods(src__engine.RecordingCanvas.__proto__),
    debugEnforceArbitraryPaint: dart.fnType(dart.void, []),
    computePaintBounds: dart.fnType(ui.Rect, []),
    apply: dart.fnType(dart.void, [src__engine.EngineCanvas]),
    debugPrintCommands: dart.fnType(core.String, []),
    save: dart.fnType(dart.void, []),
    saveLayerWithoutBounds: dart.fnType(dart.void, [ui.Paint]),
    saveLayer: dart.fnType(dart.void, [ui.Rect, ui.Paint]),
    restore: dart.fnType(dart.void, []),
    translate: dart.fnType(dart.void, [core.double, core.double]),
    scale: dart.fnType(dart.void, [core.double, core.double]),
    rotate: dart.fnType(dart.void, [core.double]),
    transform: dart.fnType(dart.void, [typed_data.Float64List]),
    skew: dart.fnType(dart.void, [core.double, core.double]),
    clipRect: dart.fnType(dart.void, [ui.Rect]),
    clipRRect: dart.fnType(dart.void, [ui.RRect]),
    clipPath: dart.fnType(dart.void, [ui.Path]),
    drawColor: dart.fnType(dart.void, [ui.Color, ui.BlendMode]),
    drawLine: dart.fnType(dart.void, [ui.Offset, ui.Offset, ui.Paint]),
    drawPaint: dart.fnType(dart.void, [ui.Paint]),
    drawRect: dart.fnType(dart.void, [ui.Rect, ui.Paint]),
    drawRRect: dart.fnType(dart.void, [ui.RRect, ui.Paint]),
    drawDRRect: dart.fnType(dart.void, [ui.RRect, ui.RRect, ui.Paint]),
    drawOval: dart.fnType(dart.void, [ui.Rect, ui.Paint]),
    drawCircle: dart.fnType(dart.void, [ui.Offset, core.double, ui.Paint]),
    drawPath: dart.fnType(dart.void, [ui.Path, ui.Paint]),
    drawImage: dart.fnType(dart.void, [ui.Image, ui.Offset, ui.Paint]),
    drawImageRect: dart.fnType(dart.void, [ui.Image, ui.Rect, ui.Rect, ui.Paint]),
    drawParagraph: dart.fnType(dart.void, [ui.Paragraph, ui.Offset]),
    drawShadow: dart.fnType(dart.void, [ui.Path, ui.Color, core.double, core.bool]),
    debugDumpCommands: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(src__engine.RecordingCanvas, () => ({
    __proto__: dart.getGetters(src__engine.RecordingCanvas.__proto__),
    hasArbitraryPaint: core.bool,
    didDraw: core.bool
  }));
  dart.setFieldSignature(src__engine.RecordingCanvas, () => ({
    __proto__: dart.getFields(src__engine.RecordingCanvas.__proto__),
    [_paintBounds]: dart.finalFieldType(src__engine._PaintBounds),
    [_commands]: dart.finalFieldType(core.List$(src__engine.PaintCommand)),
    [_hasArbitraryPaint]: dart.fieldType(core.bool),
    [_didDraw]: dart.fieldType(core.bool),
    saveCount: dart.fieldType(core.int)
  }));
  src__engine.PaintCommand = class PaintCommand extends core.Object {};
  (src__engine.PaintCommand.new = function() {
    ;
  }).prototype = src__engine.PaintCommand.prototype;
  dart.addTypeTests(src__engine.PaintCommand);
  let const$23;
  src__engine.PaintSave = class PaintSave extends src__engine.PaintCommand {
    apply(canvas) {
      canvas.save();
    }
    toString() {
      if (dart.test(src__engine.assertionsEnabled)) {
        return "save()";
      } else {
        return super[$toString]();
      }
    }
    serializeToCssPaint(serializedCommands) {
      serializedCommands[$add](const$23 || (const$23 = dart.constList([1], dart.dynamic)));
    }
  };
  (src__engine.PaintSave.new = function() {
    src__engine.PaintSave.__proto__.new.call(this);
    ;
  }).prototype = src__engine.PaintSave.prototype;
  dart.addTypeTests(src__engine.PaintSave);
  dart.setMethodSignature(src__engine.PaintSave, () => ({
    __proto__: dart.getMethods(src__engine.PaintSave.__proto__),
    apply: dart.fnType(dart.void, [src__engine.EngineCanvas]),
    serializeToCssPaint: dart.fnType(dart.void, [core.List$(core.List)])
  }));
  dart.defineExtensionMethods(src__engine.PaintSave, ['toString']);
  let const$24;
  src__engine.PaintRestore = class PaintRestore extends src__engine.PaintCommand {
    apply(canvas) {
      canvas.restore();
    }
    toString() {
      if (dart.test(src__engine.assertionsEnabled)) {
        return "restore()";
      } else {
        return super[$toString]();
      }
    }
    serializeToCssPaint(serializedCommands) {
      serializedCommands[$add](const$24 || (const$24 = dart.constList([2], dart.dynamic)));
    }
  };
  (src__engine.PaintRestore.new = function() {
    src__engine.PaintRestore.__proto__.new.call(this);
    ;
  }).prototype = src__engine.PaintRestore.prototype;
  dart.addTypeTests(src__engine.PaintRestore);
  dart.setMethodSignature(src__engine.PaintRestore, () => ({
    __proto__: dart.getMethods(src__engine.PaintRestore.__proto__),
    apply: dart.fnType(dart.void, [src__engine.EngineCanvas]),
    serializeToCssPaint: dart.fnType(dart.void, [core.List$(core.List)])
  }));
  dart.defineExtensionMethods(src__engine.PaintRestore, ['toString']);
  src__engine.PaintTranslate = class PaintTranslate extends src__engine.PaintCommand {
    get dx() {
      return this[dx$];
    }
    set dx(value) {
      super.dx = value;
    }
    get dy() {
      return this[dy$];
    }
    set dy(value) {
      super.dy = value;
    }
    apply(canvas) {
      canvas.translate(this.dx, this.dy);
    }
    toString() {
      if (dart.test(src__engine.assertionsEnabled)) {
        return "translate(" + dart.str(this.dx) + ", " + dart.str(this.dy) + ")";
      } else {
        return super[$toString]();
      }
    }
    serializeToCssPaint(serializedCommands) {
      serializedCommands[$add]([3, this.dx, this.dy]);
    }
  };
  (src__engine.PaintTranslate.new = function(dx, dy) {
    this[dx$] = dx;
    this[dy$] = dy;
    src__engine.PaintTranslate.__proto__.new.call(this);
    ;
  }).prototype = src__engine.PaintTranslate.prototype;
  dart.addTypeTests(src__engine.PaintTranslate);
  const dx$ = Symbol("PaintTranslate.dx");
  const dy$ = Symbol("PaintTranslate.dy");
  dart.setMethodSignature(src__engine.PaintTranslate, () => ({
    __proto__: dart.getMethods(src__engine.PaintTranslate.__proto__),
    apply: dart.fnType(dart.void, [src__engine.EngineCanvas]),
    serializeToCssPaint: dart.fnType(dart.void, [core.List$(core.List)])
  }));
  dart.setFieldSignature(src__engine.PaintTranslate, () => ({
    __proto__: dart.getFields(src__engine.PaintTranslate.__proto__),
    dx: dart.finalFieldType(core.double),
    dy: dart.finalFieldType(core.double)
  }));
  dart.defineExtensionMethods(src__engine.PaintTranslate, ['toString']);
  src__engine.PaintScale = class PaintScale extends src__engine.PaintCommand {
    get sx() {
      return this[sx$];
    }
    set sx(value) {
      super.sx = value;
    }
    get sy() {
      return this[sy$];
    }
    set sy(value) {
      super.sy = value;
    }
    apply(canvas) {
      canvas.scale(this.sx, this.sy);
    }
    toString() {
      if (dart.test(src__engine.assertionsEnabled)) {
        return "scale(" + dart.str(this.sx) + ", " + dart.str(this.sy) + ")";
      } else {
        return super[$toString]();
      }
    }
    serializeToCssPaint(serializedCommands) {
      serializedCommands[$add]([4, this.sx, this.sy]);
    }
  };
  (src__engine.PaintScale.new = function(sx, sy) {
    this[sx$] = sx;
    this[sy$] = sy;
    src__engine.PaintScale.__proto__.new.call(this);
    ;
  }).prototype = src__engine.PaintScale.prototype;
  dart.addTypeTests(src__engine.PaintScale);
  const sx$ = Symbol("PaintScale.sx");
  const sy$ = Symbol("PaintScale.sy");
  dart.setMethodSignature(src__engine.PaintScale, () => ({
    __proto__: dart.getMethods(src__engine.PaintScale.__proto__),
    apply: dart.fnType(dart.void, [src__engine.EngineCanvas]),
    serializeToCssPaint: dart.fnType(dart.void, [core.List$(core.List)])
  }));
  dart.setFieldSignature(src__engine.PaintScale, () => ({
    __proto__: dart.getFields(src__engine.PaintScale.__proto__),
    sx: dart.finalFieldType(core.double),
    sy: dart.finalFieldType(core.double)
  }));
  dart.defineExtensionMethods(src__engine.PaintScale, ['toString']);
  src__engine.PaintRotate = class PaintRotate extends src__engine.PaintCommand {
    get radians() {
      return this[radians$];
    }
    set radians(value) {
      super.radians = value;
    }
    apply(canvas) {
      canvas.rotate(this.radians);
    }
    toString() {
      if (dart.test(src__engine.assertionsEnabled)) {
        return "rotate(" + dart.str(this.radians) + ")";
      } else {
        return super[$toString]();
      }
    }
    serializeToCssPaint(serializedCommands) {
      serializedCommands[$add]([5, this.radians]);
    }
  };
  (src__engine.PaintRotate.new = function(radians) {
    this[radians$] = radians;
    src__engine.PaintRotate.__proto__.new.call(this);
    ;
  }).prototype = src__engine.PaintRotate.prototype;
  dart.addTypeTests(src__engine.PaintRotate);
  const radians$ = Symbol("PaintRotate.radians");
  dart.setMethodSignature(src__engine.PaintRotate, () => ({
    __proto__: dart.getMethods(src__engine.PaintRotate.__proto__),
    apply: dart.fnType(dart.void, [src__engine.EngineCanvas]),
    serializeToCssPaint: dart.fnType(dart.void, [core.List$(core.List)])
  }));
  dart.setFieldSignature(src__engine.PaintRotate, () => ({
    __proto__: dart.getFields(src__engine.PaintRotate.__proto__),
    radians: dart.finalFieldType(core.double)
  }));
  dart.defineExtensionMethods(src__engine.PaintRotate, ['toString']);
  src__engine.PaintTransform = class PaintTransform extends src__engine.PaintCommand {
    get matrix4() {
      return this[matrix4$];
    }
    set matrix4(value) {
      super.matrix4 = value;
    }
    apply(canvas) {
      canvas.transform(this.matrix4);
    }
    toString() {
      if (dart.test(src__engine.assertionsEnabled)) {
        return "transform(Matrix4.fromFloat64List(Float64List.fromList(<double>[" + dart.str(this.matrix4[$join](", ")) + "])))";
      } else {
        return super[$toString]();
      }
    }
    serializeToCssPaint(serializedCommands) {
      let t1;
      serializedCommands[$add]((t1 = [6], t1[$addAll](this.matrix4), t1));
    }
  };
  (src__engine.PaintTransform.new = function(matrix4) {
    this[matrix4$] = matrix4;
    src__engine.PaintTransform.__proto__.new.call(this);
    ;
  }).prototype = src__engine.PaintTransform.prototype;
  dart.addTypeTests(src__engine.PaintTransform);
  const matrix4$ = Symbol("PaintTransform.matrix4");
  dart.setMethodSignature(src__engine.PaintTransform, () => ({
    __proto__: dart.getMethods(src__engine.PaintTransform.__proto__),
    apply: dart.fnType(dart.void, [src__engine.EngineCanvas]),
    serializeToCssPaint: dart.fnType(dart.void, [core.List$(core.List)])
  }));
  dart.setFieldSignature(src__engine.PaintTransform, () => ({
    __proto__: dart.getFields(src__engine.PaintTransform.__proto__),
    matrix4: dart.finalFieldType(typed_data.Float64List)
  }));
  dart.defineExtensionMethods(src__engine.PaintTransform, ['toString']);
  src__engine.PaintSkew = class PaintSkew extends src__engine.PaintCommand {
    get sx() {
      return this[sx$0];
    }
    set sx(value) {
      super.sx = value;
    }
    get sy() {
      return this[sy$0];
    }
    set sy(value) {
      super.sy = value;
    }
    apply(canvas) {
      canvas.skew(this.sx, this.sy);
    }
    toString() {
      if (dart.test(src__engine.assertionsEnabled)) {
        return "skew(" + dart.str(this.sx) + ", " + dart.str(this.sy) + ")";
      } else {
        return super[$toString]();
      }
    }
    serializeToCssPaint(serializedCommands) {
      serializedCommands[$add]([7, this.sx, this.sy]);
    }
  };
  (src__engine.PaintSkew.new = function(sx, sy) {
    this[sx$0] = sx;
    this[sy$0] = sy;
    src__engine.PaintSkew.__proto__.new.call(this);
    ;
  }).prototype = src__engine.PaintSkew.prototype;
  dart.addTypeTests(src__engine.PaintSkew);
  const sx$0 = Symbol("PaintSkew.sx");
  const sy$0 = Symbol("PaintSkew.sy");
  dart.setMethodSignature(src__engine.PaintSkew, () => ({
    __proto__: dart.getMethods(src__engine.PaintSkew.__proto__),
    apply: dart.fnType(dart.void, [src__engine.EngineCanvas]),
    serializeToCssPaint: dart.fnType(dart.void, [core.List$(core.List)])
  }));
  dart.setFieldSignature(src__engine.PaintSkew, () => ({
    __proto__: dart.getFields(src__engine.PaintSkew.__proto__),
    sx: dart.finalFieldType(core.double),
    sy: dart.finalFieldType(core.double)
  }));
  dart.defineExtensionMethods(src__engine.PaintSkew, ['toString']);
  src__engine.PaintClipRect = class PaintClipRect extends src__engine.PaintCommand {
    get rect() {
      return this[rect$];
    }
    set rect(value) {
      super.rect = value;
    }
    apply(canvas) {
      canvas.clipRect(this.rect);
    }
    toString() {
      if (dart.test(src__engine.assertionsEnabled)) {
        return "clipRect(" + dart.str(this.rect) + ")";
      } else {
        return super[$toString]();
      }
    }
    serializeToCssPaint(serializedCommands) {
      serializedCommands[$add]([8, src__engine._serializeRectToCssPaint(this.rect)]);
    }
  };
  (src__engine.PaintClipRect.new = function(rect) {
    this[rect$] = rect;
    src__engine.PaintClipRect.__proto__.new.call(this);
    ;
  }).prototype = src__engine.PaintClipRect.prototype;
  dart.addTypeTests(src__engine.PaintClipRect);
  const rect$ = Symbol("PaintClipRect.rect");
  dart.setMethodSignature(src__engine.PaintClipRect, () => ({
    __proto__: dart.getMethods(src__engine.PaintClipRect.__proto__),
    apply: dart.fnType(dart.void, [src__engine.EngineCanvas]),
    serializeToCssPaint: dart.fnType(dart.void, [core.List$(core.List)])
  }));
  dart.setFieldSignature(src__engine.PaintClipRect, () => ({
    __proto__: dart.getFields(src__engine.PaintClipRect.__proto__),
    rect: dart.finalFieldType(ui.Rect)
  }));
  dart.defineExtensionMethods(src__engine.PaintClipRect, ['toString']);
  src__engine.PaintClipRRect = class PaintClipRRect extends src__engine.PaintCommand {
    get rrect() {
      return this[rrect$];
    }
    set rrect(value) {
      super.rrect = value;
    }
    apply(canvas) {
      canvas.clipRRect(this.rrect);
    }
    toString() {
      if (dart.test(src__engine.assertionsEnabled)) {
        return "clipRRect(" + dart.str(this.rrect) + ")";
      } else {
        return super[$toString]();
      }
    }
    serializeToCssPaint(serializedCommands) {
      serializedCommands[$add]([9, src__engine._serializeRRectToCssPaint(this.rrect)]);
    }
  };
  (src__engine.PaintClipRRect.new = function(rrect) {
    this[rrect$] = rrect;
    src__engine.PaintClipRRect.__proto__.new.call(this);
    ;
  }).prototype = src__engine.PaintClipRRect.prototype;
  dart.addTypeTests(src__engine.PaintClipRRect);
  const rrect$ = Symbol("PaintClipRRect.rrect");
  dart.setMethodSignature(src__engine.PaintClipRRect, () => ({
    __proto__: dart.getMethods(src__engine.PaintClipRRect.__proto__),
    apply: dart.fnType(dart.void, [src__engine.EngineCanvas]),
    serializeToCssPaint: dart.fnType(dart.void, [core.List$(core.List)])
  }));
  dart.setFieldSignature(src__engine.PaintClipRRect, () => ({
    __proto__: dart.getFields(src__engine.PaintClipRRect.__proto__),
    rrect: dart.finalFieldType(ui.RRect)
  }));
  dart.defineExtensionMethods(src__engine.PaintClipRRect, ['toString']);
  src__engine.PaintClipPath = class PaintClipPath extends src__engine.PaintCommand {
    get path() {
      return this[path$];
    }
    set path(value) {
      super.path = value;
    }
    apply(canvas) {
      canvas.clipPath(this.path);
    }
    toString() {
      if (dart.test(src__engine.assertionsEnabled)) {
        return "clipPath(" + dart.str(this.path) + ")";
      } else {
        return super[$toString]();
      }
    }
    serializeToCssPaint(serializedCommands) {
      serializedCommands[$add]([10, this.path.webOnlySerializeToCssPaint()]);
    }
  };
  (src__engine.PaintClipPath.new = function(path) {
    this[path$] = path;
    src__engine.PaintClipPath.__proto__.new.call(this);
    ;
  }).prototype = src__engine.PaintClipPath.prototype;
  dart.addTypeTests(src__engine.PaintClipPath);
  const path$ = Symbol("PaintClipPath.path");
  dart.setMethodSignature(src__engine.PaintClipPath, () => ({
    __proto__: dart.getMethods(src__engine.PaintClipPath.__proto__),
    apply: dart.fnType(dart.void, [src__engine.EngineCanvas]),
    serializeToCssPaint: dart.fnType(dart.void, [core.List$(core.List)])
  }));
  dart.setFieldSignature(src__engine.PaintClipPath, () => ({
    __proto__: dart.getFields(src__engine.PaintClipPath.__proto__),
    path: dart.finalFieldType(ui.Path)
  }));
  dart.defineExtensionMethods(src__engine.PaintClipPath, ['toString']);
  src__engine.PaintDrawColor = class PaintDrawColor extends src__engine.PaintCommand {
    get color() {
      return this[color$];
    }
    set color(value) {
      super.color = value;
    }
    get blendMode() {
      return this[blendMode$];
    }
    set blendMode(value) {
      super.blendMode = value;
    }
    apply(canvas) {
      canvas.drawColor(this.color, this.blendMode);
    }
    toString() {
      if (dart.test(src__engine.assertionsEnabled)) {
        return "drawColor(" + dart.str(this.color) + ", " + dart.str(this.blendMode) + ")";
      } else {
        return super[$toString]();
      }
    }
    serializeToCssPaint(serializedCommands) {
      serializedCommands[$add]([11, this.color.toCssString(), this.blendMode.index]);
    }
  };
  (src__engine.PaintDrawColor.new = function(color, blendMode) {
    this[color$] = color;
    this[blendMode$] = blendMode;
    src__engine.PaintDrawColor.__proto__.new.call(this);
    ;
  }).prototype = src__engine.PaintDrawColor.prototype;
  dart.addTypeTests(src__engine.PaintDrawColor);
  const color$ = Symbol("PaintDrawColor.color");
  const blendMode$ = Symbol("PaintDrawColor.blendMode");
  dart.setMethodSignature(src__engine.PaintDrawColor, () => ({
    __proto__: dart.getMethods(src__engine.PaintDrawColor.__proto__),
    apply: dart.fnType(dart.void, [src__engine.EngineCanvas]),
    serializeToCssPaint: dart.fnType(dart.void, [core.List$(core.List)])
  }));
  dart.setFieldSignature(src__engine.PaintDrawColor, () => ({
    __proto__: dart.getFields(src__engine.PaintDrawColor.__proto__),
    color: dart.finalFieldType(ui.Color),
    blendMode: dart.finalFieldType(ui.BlendMode)
  }));
  dart.defineExtensionMethods(src__engine.PaintDrawColor, ['toString']);
  src__engine.PaintDrawLine = class PaintDrawLine extends src__engine.PaintCommand {
    get p1() {
      return this[p1$];
    }
    set p1(value) {
      super.p1 = value;
    }
    get p2() {
      return this[p2$];
    }
    set p2(value) {
      super.p2 = value;
    }
    get paint() {
      return this[paint$];
    }
    set paint(value) {
      super.paint = value;
    }
    apply(canvas) {
      canvas.drawLine(this.p1, this.p2, this.paint);
    }
    toString() {
      if (dart.test(src__engine.assertionsEnabled)) {
        return "drawLine(" + dart.str(this.p1) + ", " + dart.str(this.p2) + ", " + dart.str(this.paint) + ")";
      } else {
        return super[$toString]();
      }
    }
    serializeToCssPaint(serializedCommands) {
      serializedCommands[$add]([12, this.p1.dx, this.p1.dy, this.p2.dx, this.p2.dy, src__engine._serializePaintToCssPaint(this.paint)]);
    }
  };
  (src__engine.PaintDrawLine.new = function(p1, p2, paint) {
    this[p1$] = p1;
    this[p2$] = p2;
    this[paint$] = paint;
    src__engine.PaintDrawLine.__proto__.new.call(this);
    ;
  }).prototype = src__engine.PaintDrawLine.prototype;
  dart.addTypeTests(src__engine.PaintDrawLine);
  const p1$ = Symbol("PaintDrawLine.p1");
  const p2$ = Symbol("PaintDrawLine.p2");
  const paint$ = Symbol("PaintDrawLine.paint");
  dart.setMethodSignature(src__engine.PaintDrawLine, () => ({
    __proto__: dart.getMethods(src__engine.PaintDrawLine.__proto__),
    apply: dart.fnType(dart.void, [src__engine.EngineCanvas]),
    serializeToCssPaint: dart.fnType(dart.void, [core.List$(core.List)])
  }));
  dart.setFieldSignature(src__engine.PaintDrawLine, () => ({
    __proto__: dart.getFields(src__engine.PaintDrawLine.__proto__),
    p1: dart.finalFieldType(ui.Offset),
    p2: dart.finalFieldType(ui.Offset),
    paint: dart.finalFieldType(ui.PaintData)
  }));
  dart.defineExtensionMethods(src__engine.PaintDrawLine, ['toString']);
  src__engine.PaintDrawPaint = class PaintDrawPaint extends src__engine.PaintCommand {
    get paint() {
      return this[paint$0];
    }
    set paint(value) {
      super.paint = value;
    }
    apply(canvas) {
      canvas.drawPaint(this.paint);
    }
    toString() {
      if (dart.test(src__engine.assertionsEnabled)) {
        return "drawPaint(" + dart.str(this.paint) + ")";
      } else {
        return super[$toString]();
      }
    }
    serializeToCssPaint(serializedCommands) {
      serializedCommands[$add]([13, src__engine._serializePaintToCssPaint(this.paint)]);
    }
  };
  (src__engine.PaintDrawPaint.new = function(paint) {
    this[paint$0] = paint;
    src__engine.PaintDrawPaint.__proto__.new.call(this);
    ;
  }).prototype = src__engine.PaintDrawPaint.prototype;
  dart.addTypeTests(src__engine.PaintDrawPaint);
  const paint$0 = Symbol("PaintDrawPaint.paint");
  dart.setMethodSignature(src__engine.PaintDrawPaint, () => ({
    __proto__: dart.getMethods(src__engine.PaintDrawPaint.__proto__),
    apply: dart.fnType(dart.void, [src__engine.EngineCanvas]),
    serializeToCssPaint: dart.fnType(dart.void, [core.List$(core.List)])
  }));
  dart.setFieldSignature(src__engine.PaintDrawPaint, () => ({
    __proto__: dart.getFields(src__engine.PaintDrawPaint.__proto__),
    paint: dart.finalFieldType(ui.PaintData)
  }));
  dart.defineExtensionMethods(src__engine.PaintDrawPaint, ['toString']);
  src__engine.PaintDrawRect = class PaintDrawRect extends src__engine.PaintCommand {
    get rect() {
      return this[rect$0];
    }
    set rect(value) {
      super.rect = value;
    }
    get paint() {
      return this[paint$1];
    }
    set paint(value) {
      super.paint = value;
    }
    apply(canvas) {
      canvas.drawRect(this.rect, this.paint);
    }
    toString() {
      if (dart.test(src__engine.assertionsEnabled)) {
        return "drawRect(" + dart.str(this.rect) + ", " + dart.str(this.paint) + ")";
      } else {
        return super[$toString]();
      }
    }
    serializeToCssPaint(serializedCommands) {
      serializedCommands[$add]([14, src__engine._serializeRectToCssPaint(this.rect), src__engine._serializePaintToCssPaint(this.paint)]);
    }
  };
  (src__engine.PaintDrawRect.new = function(rect, paint) {
    this[rect$0] = rect;
    this[paint$1] = paint;
    src__engine.PaintDrawRect.__proto__.new.call(this);
    ;
  }).prototype = src__engine.PaintDrawRect.prototype;
  dart.addTypeTests(src__engine.PaintDrawRect);
  const rect$0 = Symbol("PaintDrawRect.rect");
  const paint$1 = Symbol("PaintDrawRect.paint");
  dart.setMethodSignature(src__engine.PaintDrawRect, () => ({
    __proto__: dart.getMethods(src__engine.PaintDrawRect.__proto__),
    apply: dart.fnType(dart.void, [src__engine.EngineCanvas]),
    serializeToCssPaint: dart.fnType(dart.void, [core.List$(core.List)])
  }));
  dart.setFieldSignature(src__engine.PaintDrawRect, () => ({
    __proto__: dart.getFields(src__engine.PaintDrawRect.__proto__),
    rect: dart.finalFieldType(ui.Rect),
    paint: dart.finalFieldType(ui.PaintData)
  }));
  dart.defineExtensionMethods(src__engine.PaintDrawRect, ['toString']);
  src__engine.PaintDrawRRect = class PaintDrawRRect extends src__engine.PaintCommand {
    get rrect() {
      return this[rrect$0];
    }
    set rrect(value) {
      super.rrect = value;
    }
    get paint() {
      return this[paint$2];
    }
    set paint(value) {
      super.paint = value;
    }
    apply(canvas) {
      canvas.drawRRect(this.rrect, this.paint);
    }
    toString() {
      if (dart.test(src__engine.assertionsEnabled)) {
        return "drawRRect(" + dart.str(this.rrect) + ", " + dart.str(this.paint) + ")";
      } else {
        return super[$toString]();
      }
    }
    serializeToCssPaint(serializedCommands) {
      serializedCommands[$add]([15, src__engine._serializeRRectToCssPaint(this.rrect), src__engine._serializePaintToCssPaint(this.paint)]);
    }
  };
  (src__engine.PaintDrawRRect.new = function(rrect, paint) {
    this[rrect$0] = rrect;
    this[paint$2] = paint;
    src__engine.PaintDrawRRect.__proto__.new.call(this);
    ;
  }).prototype = src__engine.PaintDrawRRect.prototype;
  dart.addTypeTests(src__engine.PaintDrawRRect);
  const rrect$0 = Symbol("PaintDrawRRect.rrect");
  const paint$2 = Symbol("PaintDrawRRect.paint");
  dart.setMethodSignature(src__engine.PaintDrawRRect, () => ({
    __proto__: dart.getMethods(src__engine.PaintDrawRRect.__proto__),
    apply: dart.fnType(dart.void, [src__engine.EngineCanvas]),
    serializeToCssPaint: dart.fnType(dart.void, [core.List$(core.List)])
  }));
  dart.setFieldSignature(src__engine.PaintDrawRRect, () => ({
    __proto__: dart.getFields(src__engine.PaintDrawRRect.__proto__),
    rrect: dart.finalFieldType(ui.RRect),
    paint: dart.finalFieldType(ui.PaintData)
  }));
  dart.defineExtensionMethods(src__engine.PaintDrawRRect, ['toString']);
  src__engine.PaintDrawDRRect = class PaintDrawDRRect extends src__engine.PaintCommand {
    get outer() {
      return this[outer$];
    }
    set outer(value) {
      super.outer = value;
    }
    get inner() {
      return this[inner$];
    }
    set inner(value) {
      super.inner = value;
    }
    get paint() {
      return this[paint$3];
    }
    set paint(value) {
      super.paint = value;
    }
    apply(canvas) {
      canvas.drawDRRect(this.outer, this.inner, this.paint);
    }
    toString() {
      if (dart.test(src__engine.assertionsEnabled)) {
        return "drawDRRect(" + dart.str(this.outer) + ", " + dart.str(this.inner) + ", " + dart.str(this.paint) + ")";
      } else {
        return super[$toString]();
      }
    }
    serializeToCssPaint(serializedCommands) {
      serializedCommands[$add]([16, src__engine._serializeRRectToCssPaint(this.outer), src__engine._serializeRRectToCssPaint(this.inner), src__engine._serializePaintToCssPaint(this.paint)]);
    }
  };
  (src__engine.PaintDrawDRRect.new = function(outer, inner, paint) {
    this[outer$] = outer;
    this[inner$] = inner;
    this[paint$3] = paint;
    src__engine.PaintDrawDRRect.__proto__.new.call(this);
    ;
  }).prototype = src__engine.PaintDrawDRRect.prototype;
  dart.addTypeTests(src__engine.PaintDrawDRRect);
  const outer$ = Symbol("PaintDrawDRRect.outer");
  const inner$ = Symbol("PaintDrawDRRect.inner");
  const paint$3 = Symbol("PaintDrawDRRect.paint");
  dart.setMethodSignature(src__engine.PaintDrawDRRect, () => ({
    __proto__: dart.getMethods(src__engine.PaintDrawDRRect.__proto__),
    apply: dart.fnType(dart.void, [src__engine.EngineCanvas]),
    serializeToCssPaint: dart.fnType(dart.void, [core.List$(core.List)])
  }));
  dart.setFieldSignature(src__engine.PaintDrawDRRect, () => ({
    __proto__: dart.getFields(src__engine.PaintDrawDRRect.__proto__),
    outer: dart.finalFieldType(ui.RRect),
    inner: dart.finalFieldType(ui.RRect),
    paint: dart.finalFieldType(ui.PaintData)
  }));
  dart.defineExtensionMethods(src__engine.PaintDrawDRRect, ['toString']);
  src__engine.PaintDrawOval = class PaintDrawOval extends src__engine.PaintCommand {
    get rect() {
      return this[rect$1];
    }
    set rect(value) {
      super.rect = value;
    }
    get paint() {
      return this[paint$4];
    }
    set paint(value) {
      super.paint = value;
    }
    apply(canvas) {
      canvas.drawOval(this.rect, this.paint);
    }
    toString() {
      if (dart.test(src__engine.assertionsEnabled)) {
        return "drawOval(" + dart.str(this.rect) + ", " + dart.str(this.paint) + ")";
      } else {
        return super[$toString]();
      }
    }
    serializeToCssPaint(serializedCommands) {
      serializedCommands[$add]([17, src__engine._serializeRectToCssPaint(this.rect), src__engine._serializePaintToCssPaint(this.paint)]);
    }
  };
  (src__engine.PaintDrawOval.new = function(rect, paint) {
    this[rect$1] = rect;
    this[paint$4] = paint;
    src__engine.PaintDrawOval.__proto__.new.call(this);
    ;
  }).prototype = src__engine.PaintDrawOval.prototype;
  dart.addTypeTests(src__engine.PaintDrawOval);
  const rect$1 = Symbol("PaintDrawOval.rect");
  const paint$4 = Symbol("PaintDrawOval.paint");
  dart.setMethodSignature(src__engine.PaintDrawOval, () => ({
    __proto__: dart.getMethods(src__engine.PaintDrawOval.__proto__),
    apply: dart.fnType(dart.void, [src__engine.EngineCanvas]),
    serializeToCssPaint: dart.fnType(dart.void, [core.List$(core.List)])
  }));
  dart.setFieldSignature(src__engine.PaintDrawOval, () => ({
    __proto__: dart.getFields(src__engine.PaintDrawOval.__proto__),
    rect: dart.finalFieldType(ui.Rect),
    paint: dart.finalFieldType(ui.PaintData)
  }));
  dart.defineExtensionMethods(src__engine.PaintDrawOval, ['toString']);
  src__engine.PaintDrawCircle = class PaintDrawCircle extends src__engine.PaintCommand {
    get c() {
      return this[c$];
    }
    set c(value) {
      super.c = value;
    }
    get radius() {
      return this[radius$];
    }
    set radius(value) {
      super.radius = value;
    }
    get paint() {
      return this[paint$5];
    }
    set paint(value) {
      super.paint = value;
    }
    apply(canvas) {
      canvas.drawCircle(this.c, this.radius, this.paint);
    }
    toString() {
      if (dart.test(src__engine.assertionsEnabled)) {
        return "drawCircle(" + dart.str(this.c) + ", " + dart.str(this.radius) + ", " + dart.str(this.paint) + ")";
      } else {
        return super[$toString]();
      }
    }
    serializeToCssPaint(serializedCommands) {
      serializedCommands[$add]([18, this.c.dx, this.c.dy, this.radius, src__engine._serializePaintToCssPaint(this.paint)]);
    }
  };
  (src__engine.PaintDrawCircle.new = function(c, radius, paint) {
    this[c$] = c;
    this[radius$] = radius;
    this[paint$5] = paint;
    src__engine.PaintDrawCircle.__proto__.new.call(this);
    ;
  }).prototype = src__engine.PaintDrawCircle.prototype;
  dart.addTypeTests(src__engine.PaintDrawCircle);
  const c$ = Symbol("PaintDrawCircle.c");
  const radius$ = Symbol("PaintDrawCircle.radius");
  const paint$5 = Symbol("PaintDrawCircle.paint");
  dart.setMethodSignature(src__engine.PaintDrawCircle, () => ({
    __proto__: dart.getMethods(src__engine.PaintDrawCircle.__proto__),
    apply: dart.fnType(dart.void, [src__engine.EngineCanvas]),
    serializeToCssPaint: dart.fnType(dart.void, [core.List$(core.List)])
  }));
  dart.setFieldSignature(src__engine.PaintDrawCircle, () => ({
    __proto__: dart.getFields(src__engine.PaintDrawCircle.__proto__),
    c: dart.finalFieldType(ui.Offset),
    radius: dart.finalFieldType(core.double),
    paint: dart.finalFieldType(ui.PaintData)
  }));
  dart.defineExtensionMethods(src__engine.PaintDrawCircle, ['toString']);
  src__engine.PaintDrawPath = class PaintDrawPath extends src__engine.PaintCommand {
    get path() {
      return this[path$0];
    }
    set path(value) {
      super.path = value;
    }
    get paint() {
      return this[paint$6];
    }
    set paint(value) {
      super.paint = value;
    }
    apply(canvas) {
      canvas.drawPath(this.path, this.paint);
    }
    toString() {
      if (dart.test(src__engine.assertionsEnabled)) {
        return "drawPath(" + dart.str(this.path) + ", " + dart.str(this.paint) + ")";
      } else {
        return super[$toString]();
      }
    }
    serializeToCssPaint(serializedCommands) {
      serializedCommands[$add]([19, this.path.webOnlySerializeToCssPaint(), src__engine._serializePaintToCssPaint(this.paint)]);
    }
  };
  (src__engine.PaintDrawPath.new = function(path, paint) {
    this[path$0] = path;
    this[paint$6] = paint;
    src__engine.PaintDrawPath.__proto__.new.call(this);
    ;
  }).prototype = src__engine.PaintDrawPath.prototype;
  dart.addTypeTests(src__engine.PaintDrawPath);
  const path$0 = Symbol("PaintDrawPath.path");
  const paint$6 = Symbol("PaintDrawPath.paint");
  dart.setMethodSignature(src__engine.PaintDrawPath, () => ({
    __proto__: dart.getMethods(src__engine.PaintDrawPath.__proto__),
    apply: dart.fnType(dart.void, [src__engine.EngineCanvas]),
    serializeToCssPaint: dart.fnType(dart.void, [core.List$(core.List)])
  }));
  dart.setFieldSignature(src__engine.PaintDrawPath, () => ({
    __proto__: dart.getFields(src__engine.PaintDrawPath.__proto__),
    path: dart.finalFieldType(ui.Path),
    paint: dart.finalFieldType(ui.PaintData)
  }));
  dart.defineExtensionMethods(src__engine.PaintDrawPath, ['toString']);
  src__engine.PaintDrawShadow = class PaintDrawShadow extends src__engine.PaintCommand {
    get path() {
      return this[path$1];
    }
    set path(value) {
      super.path = value;
    }
    get color() {
      return this[color$0];
    }
    set color(value) {
      super.color = value;
    }
    get elevation() {
      return this[elevation$];
    }
    set elevation(value) {
      super.elevation = value;
    }
    get transparentOccluder() {
      return this[transparentOccluder$];
    }
    set transparentOccluder(value) {
      super.transparentOccluder = value;
    }
    apply(canvas) {
      canvas.drawShadow(this.path, this.color, this.elevation, this.transparentOccluder);
    }
    toString() {
      if (dart.test(src__engine.assertionsEnabled)) {
        return "drawShadow(" + dart.str(this.path) + ", " + dart.str(this.color) + ", " + dart.str(this.elevation) + ", " + dart.str(this.transparentOccluder) + ")";
      } else {
        return super[$toString]();
      }
    }
    serializeToCssPaint(serializedCommands) {
      serializedCommands[$add]([20, this.path.webOnlySerializeToCssPaint(), JSArrayOfint().of([this.color.alpha, this.color.red, this.color.green, this.color.blue]), this.elevation, this.transparentOccluder]);
    }
  };
  (src__engine.PaintDrawShadow.new = function(path, color, elevation, transparentOccluder) {
    this[path$1] = path;
    this[color$0] = color;
    this[elevation$] = elevation;
    this[transparentOccluder$] = transparentOccluder;
    src__engine.PaintDrawShadow.__proto__.new.call(this);
    ;
  }).prototype = src__engine.PaintDrawShadow.prototype;
  dart.addTypeTests(src__engine.PaintDrawShadow);
  const path$1 = Symbol("PaintDrawShadow.path");
  const color$0 = Symbol("PaintDrawShadow.color");
  const elevation$ = Symbol("PaintDrawShadow.elevation");
  const transparentOccluder$ = Symbol("PaintDrawShadow.transparentOccluder");
  dart.setMethodSignature(src__engine.PaintDrawShadow, () => ({
    __proto__: dart.getMethods(src__engine.PaintDrawShadow.__proto__),
    apply: dart.fnType(dart.void, [src__engine.EngineCanvas]),
    serializeToCssPaint: dart.fnType(dart.void, [core.List$(core.List)])
  }));
  dart.setFieldSignature(src__engine.PaintDrawShadow, () => ({
    __proto__: dart.getFields(src__engine.PaintDrawShadow.__proto__),
    path: dart.finalFieldType(ui.Path),
    color: dart.finalFieldType(ui.Color),
    elevation: dart.finalFieldType(core.double),
    transparentOccluder: dart.finalFieldType(core.bool)
  }));
  dart.defineExtensionMethods(src__engine.PaintDrawShadow, ['toString']);
  src__engine.PaintDrawImage = class PaintDrawImage extends src__engine.PaintCommand {
    get image() {
      return this[image$0];
    }
    set image(value) {
      super.image = value;
    }
    get offset() {
      return this[offset$0];
    }
    set offset(value) {
      super.offset = value;
    }
    get paint() {
      return this[paint$7];
    }
    set paint(value) {
      super.paint = value;
    }
    apply(canvas) {
      canvas.drawImage(this.image, this.offset, this.paint);
    }
    toString() {
      if (dart.test(src__engine.assertionsEnabled)) {
        return "drawImage(" + dart.str(this.image) + ", " + dart.str(this.offset) + ", " + dart.str(this.paint) + ")";
      } else {
        return super[$toString]();
      }
    }
    serializeToCssPaint(serializedCommands) {
      if (dart.test(src__engine.assertionsEnabled)) {
        dart.throw(new core.UnsupportedError.new("drawImage not serializable"));
      }
    }
  };
  (src__engine.PaintDrawImage.new = function(image, offset, paint) {
    this[image$0] = image;
    this[offset$0] = offset;
    this[paint$7] = paint;
    src__engine.PaintDrawImage.__proto__.new.call(this);
    ;
  }).prototype = src__engine.PaintDrawImage.prototype;
  dart.addTypeTests(src__engine.PaintDrawImage);
  const image$0 = Symbol("PaintDrawImage.image");
  const offset$0 = Symbol("PaintDrawImage.offset");
  const paint$7 = Symbol("PaintDrawImage.paint");
  dart.setMethodSignature(src__engine.PaintDrawImage, () => ({
    __proto__: dart.getMethods(src__engine.PaintDrawImage.__proto__),
    apply: dart.fnType(dart.void, [src__engine.EngineCanvas]),
    serializeToCssPaint: dart.fnType(dart.void, [core.List$(core.List)])
  }));
  dart.setFieldSignature(src__engine.PaintDrawImage, () => ({
    __proto__: dart.getFields(src__engine.PaintDrawImage.__proto__),
    image: dart.finalFieldType(ui.Image),
    offset: dart.finalFieldType(ui.Offset),
    paint: dart.finalFieldType(ui.PaintData)
  }));
  dart.defineExtensionMethods(src__engine.PaintDrawImage, ['toString']);
  src__engine.PaintDrawImageRect = class PaintDrawImageRect extends src__engine.PaintCommand {
    get image() {
      return this[image$1];
    }
    set image(value) {
      super.image = value;
    }
    get src() {
      return this[src$0];
    }
    set src(value) {
      super.src = value;
    }
    get dst() {
      return this[dst$];
    }
    set dst(value) {
      super.dst = value;
    }
    get paint() {
      return this[paint$8];
    }
    set paint(value) {
      super.paint = value;
    }
    apply(canvas) {
      canvas.drawImageRect(this.image, this.src, this.dst, this.paint);
    }
    toString() {
      if (dart.test(src__engine.assertionsEnabled)) {
        return "drawImageRect(" + dart.str(this.image) + ", " + dart.str(this.src) + ", " + dart.str(this.dst) + ", " + dart.str(this.paint) + ")";
      } else {
        return super[$toString]();
      }
    }
    serializeToCssPaint(serializedCommands) {
      if (dart.test(src__engine.assertionsEnabled)) {
        dart.throw(new core.UnsupportedError.new("drawImageRect not serializable"));
      }
    }
  };
  (src__engine.PaintDrawImageRect.new = function(image, src, dst, paint) {
    this[image$1] = image;
    this[src$0] = src;
    this[dst$] = dst;
    this[paint$8] = paint;
    src__engine.PaintDrawImageRect.__proto__.new.call(this);
    ;
  }).prototype = src__engine.PaintDrawImageRect.prototype;
  dart.addTypeTests(src__engine.PaintDrawImageRect);
  const image$1 = Symbol("PaintDrawImageRect.image");
  const src$0 = Symbol("PaintDrawImageRect.src");
  const dst$ = Symbol("PaintDrawImageRect.dst");
  const paint$8 = Symbol("PaintDrawImageRect.paint");
  dart.setMethodSignature(src__engine.PaintDrawImageRect, () => ({
    __proto__: dart.getMethods(src__engine.PaintDrawImageRect.__proto__),
    apply: dart.fnType(dart.void, [src__engine.EngineCanvas]),
    serializeToCssPaint: dart.fnType(dart.void, [core.List$(core.List)])
  }));
  dart.setFieldSignature(src__engine.PaintDrawImageRect, () => ({
    __proto__: dart.getFields(src__engine.PaintDrawImageRect.__proto__),
    image: dart.finalFieldType(ui.Image),
    src: dart.finalFieldType(ui.Rect),
    dst: dart.finalFieldType(ui.Rect),
    paint: dart.finalFieldType(ui.PaintData)
  }));
  dart.defineExtensionMethods(src__engine.PaintDrawImageRect, ['toString']);
  src__engine.PaintDrawParagraph = class PaintDrawParagraph extends src__engine.PaintCommand {
    get paragraph() {
      return this[paragraph$];
    }
    set paragraph(value) {
      super.paragraph = value;
    }
    get offset() {
      return this[offset$1];
    }
    set offset(value) {
      super.offset = value;
    }
    apply(canvas) {
      if (!dart.test(this.paragraph.webOnlyIsLaidOut)) {
        return;
      }
      canvas.drawParagraph(this.paragraph, this.offset);
    }
    toString() {
      if (dart.test(src__engine.assertionsEnabled)) {
        return "DrawParagraph(" + dart.str(this.paragraph.webOnlyGetPlainText()) + ", " + dart.str(this.offset) + ")";
      } else {
        return super[$toString]();
      }
    }
    serializeToCssPaint(serializedCommands) {
      if (dart.test(src__engine.assertionsEnabled)) {
        dart.throw(new core.UnsupportedError.new("drawParagraph not serializable"));
      }
    }
  };
  (src__engine.PaintDrawParagraph.new = function(paragraph, offset) {
    this[paragraph$] = paragraph;
    this[offset$1] = offset;
    src__engine.PaintDrawParagraph.__proto__.new.call(this);
    ;
  }).prototype = src__engine.PaintDrawParagraph.prototype;
  dart.addTypeTests(src__engine.PaintDrawParagraph);
  const paragraph$ = Symbol("PaintDrawParagraph.paragraph");
  const offset$1 = Symbol("PaintDrawParagraph.offset");
  dart.setMethodSignature(src__engine.PaintDrawParagraph, () => ({
    __proto__: dart.getMethods(src__engine.PaintDrawParagraph.__proto__),
    apply: dart.fnType(dart.void, [src__engine.EngineCanvas]),
    serializeToCssPaint: dart.fnType(dart.void, [core.List$(core.List)])
  }));
  dart.setFieldSignature(src__engine.PaintDrawParagraph, () => ({
    __proto__: dart.getFields(src__engine.PaintDrawParagraph.__proto__),
    paragraph: dart.finalFieldType(ui.Paragraph),
    offset: dart.finalFieldType(ui.Offset)
  }));
  dart.defineExtensionMethods(src__engine.PaintDrawParagraph, ['toString']);
  src__engine.Subpath = class Subpath extends core.Object {
    get startX() {
      return this[startX$];
    }
    set startX(value) {
      this[startX$] = value;
    }
    get startY() {
      return this[startY$];
    }
    set startY(value) {
      this[startY$] = value;
    }
    get currentX() {
      return this[currentX];
    }
    set currentX(value) {
      this[currentX] = value;
    }
    get currentY() {
      return this[currentY];
    }
    set currentY(value) {
      this[currentY] = value;
    }
    get commands() {
      return this[commands];
    }
    set commands(value) {
      super.commands = value;
    }
    shift(offset) {
      let t1;
      let result = (t1 = new src__engine.Subpath.new(dart.notNull(this.startX) + dart.notNull(offset.dx), dart.notNull(this.startY) + dart.notNull(offset.dy)), t1.currentX = dart.notNull(this.currentX) + dart.notNull(offset.dx), t1.currentY = dart.notNull(this.currentY) + dart.notNull(offset.dy), t1);
      for (let command of this.commands) {
        result.commands[$add](command.shifted(offset));
      }
      return result;
    }
    serializeToCssPaint() {
      let serialization = [];
      for (let i = 0; i < dart.notNull(this.commands[$length]); i = i + 1) {
        serialization[$add](this.commands[$_get](i).serializeToCssPaint());
      }
      return serialization;
    }
    toString() {
      if (dart.test(src__engine.assertionsEnabled)) {
        return "Subpath(" + dart.str(this.commands[$join](", ")) + ")";
      } else {
        return super[$toString]();
      }
    }
  };
  (src__engine.Subpath.new = function(startX, startY) {
    this[currentX] = 0.0;
    this[currentY] = 0.0;
    this[startX$] = startX;
    this[startY$] = startY;
    this[commands] = JSArrayOfPathCommand().of([]);
    ;
  }).prototype = src__engine.Subpath.prototype;
  dart.addTypeTests(src__engine.Subpath);
  const startX$ = Symbol("Subpath.startX");
  const startY$ = Symbol("Subpath.startY");
  const currentX = Symbol("Subpath.currentX");
  const currentY = Symbol("Subpath.currentY");
  const commands = Symbol("Subpath.commands");
  dart.setMethodSignature(src__engine.Subpath, () => ({
    __proto__: dart.getMethods(src__engine.Subpath.__proto__),
    shift: dart.fnType(src__engine.Subpath, [ui.Offset]),
    serializeToCssPaint: dart.fnType(core.List, [])
  }));
  dart.setFieldSignature(src__engine.Subpath, () => ({
    __proto__: dart.getFields(src__engine.Subpath.__proto__),
    startX: dart.fieldType(core.double),
    startY: dart.fieldType(core.double),
    currentX: dart.fieldType(core.double),
    currentY: dart.fieldType(core.double),
    commands: dart.finalFieldType(core.List$(src__engine.PathCommand))
  }));
  dart.defineExtensionMethods(src__engine.Subpath, ['toString']);
  src__engine.PathCommandTypes = class PathCommandTypes extends core.Object {};
  (src__engine.PathCommandTypes.new = function() {
    ;
  }).prototype = src__engine.PathCommandTypes.prototype;
  dart.addTypeTests(src__engine.PathCommandTypes);
  dart.defineLazy(src__engine.PathCommandTypes, {
    /*src__engine.PathCommandTypes.moveTo*/get moveTo() {
      return 0;
    },
    /*src__engine.PathCommandTypes.lineTo*/get lineTo() {
      return 1;
    },
    /*src__engine.PathCommandTypes.ellipse*/get ellipse() {
      return 2;
    },
    /*src__engine.PathCommandTypes.close*/get close() {
      return 3;
    },
    /*src__engine.PathCommandTypes.quadraticCurveTo*/get quadraticCurveTo() {
      return 4;
    },
    /*src__engine.PathCommandTypes.bezierCurveTo*/get bezierCurveTo() {
      return 5;
    },
    /*src__engine.PathCommandTypes.rect*/get rect() {
      return 6;
    },
    /*src__engine.PathCommandTypes.rRect*/get rRect() {
      return 7;
    }
  });
  src__engine.PathCommand = class PathCommand extends core.Object {
    get type() {
      return this[type$];
    }
    set type(value) {
      super.type = value;
    }
  };
  (src__engine.PathCommand.new = function(type) {
    this[type$] = type;
    ;
  }).prototype = src__engine.PathCommand.prototype;
  dart.addTypeTests(src__engine.PathCommand);
  const type$ = Symbol("PathCommand.type");
  dart.setFieldSignature(src__engine.PathCommand, () => ({
    __proto__: dart.getFields(src__engine.PathCommand.__proto__),
    type: dart.finalFieldType(core.int)
  }));
  src__engine.MoveTo = class MoveTo extends src__engine.PathCommand {
    get x() {
      return this[x$];
    }
    set x(value) {
      super.x = value;
    }
    get y() {
      return this[y$];
    }
    set y(value) {
      super.y = value;
    }
    shifted(offset) {
      return new src__engine.MoveTo.new(dart.notNull(this.x) + dart.notNull(offset.dx), dart.notNull(this.y) + dart.notNull(offset.dy));
    }
    serializeToCssPaint() {
      return [1, this.x, this.y];
    }
    toString() {
      if (dart.test(src__engine.assertionsEnabled)) {
        return "MoveTo(" + dart.str(this.x) + ", " + dart.str(this.y) + ")";
      } else {
        return super[$toString]();
      }
    }
  };
  (src__engine.MoveTo.new = function(x, y) {
    this[x$] = x;
    this[y$] = y;
    src__engine.MoveTo.__proto__.new.call(this, src__engine.PathCommandTypes.moveTo);
    ;
  }).prototype = src__engine.MoveTo.prototype;
  dart.addTypeTests(src__engine.MoveTo);
  const x$ = Symbol("MoveTo.x");
  const y$ = Symbol("MoveTo.y");
  dart.setMethodSignature(src__engine.MoveTo, () => ({
    __proto__: dart.getMethods(src__engine.MoveTo.__proto__),
    shifted: dart.fnType(src__engine.MoveTo, [ui.Offset]),
    serializeToCssPaint: dart.fnType(core.List, [])
  }));
  dart.setFieldSignature(src__engine.MoveTo, () => ({
    __proto__: dart.getFields(src__engine.MoveTo.__proto__),
    x: dart.finalFieldType(core.double),
    y: dart.finalFieldType(core.double)
  }));
  dart.defineExtensionMethods(src__engine.MoveTo, ['toString']);
  src__engine.LineTo = class LineTo extends src__engine.PathCommand {
    get x() {
      return this[x$0];
    }
    set x(value) {
      super.x = value;
    }
    get y() {
      return this[y$0];
    }
    set y(value) {
      super.y = value;
    }
    shifted(offset) {
      return new src__engine.LineTo.new(dart.notNull(this.x) + dart.notNull(offset.dx), dart.notNull(this.y) + dart.notNull(offset.dy));
    }
    serializeToCssPaint() {
      return [2, this.x, this.y];
    }
    toString() {
      if (dart.test(src__engine.assertionsEnabled)) {
        return "LineTo(" + dart.str(this.x) + ", " + dart.str(this.y) + ")";
      } else {
        return super[$toString]();
      }
    }
  };
  (src__engine.LineTo.new = function(x, y) {
    this[x$0] = x;
    this[y$0] = y;
    src__engine.LineTo.__proto__.new.call(this, src__engine.PathCommandTypes.lineTo);
    ;
  }).prototype = src__engine.LineTo.prototype;
  dart.addTypeTests(src__engine.LineTo);
  const x$0 = Symbol("LineTo.x");
  const y$0 = Symbol("LineTo.y");
  dart.setMethodSignature(src__engine.LineTo, () => ({
    __proto__: dart.getMethods(src__engine.LineTo.__proto__),
    shifted: dart.fnType(src__engine.LineTo, [ui.Offset]),
    serializeToCssPaint: dart.fnType(core.List, [])
  }));
  dart.setFieldSignature(src__engine.LineTo, () => ({
    __proto__: dart.getFields(src__engine.LineTo.__proto__),
    x: dart.finalFieldType(core.double),
    y: dart.finalFieldType(core.double)
  }));
  dart.defineExtensionMethods(src__engine.LineTo, ['toString']);
  src__engine.Ellipse = class Ellipse extends src__engine.PathCommand {
    get x() {
      return this[x$1];
    }
    set x(value) {
      super.x = value;
    }
    get y() {
      return this[y$1];
    }
    set y(value) {
      super.y = value;
    }
    get radiusX() {
      return this[radiusX$];
    }
    set radiusX(value) {
      super.radiusX = value;
    }
    get radiusY() {
      return this[radiusY$];
    }
    set radiusY(value) {
      super.radiusY = value;
    }
    get rotation() {
      return this[rotation$];
    }
    set rotation(value) {
      super.rotation = value;
    }
    get startAngle() {
      return this[startAngle$];
    }
    set startAngle(value) {
      super.startAngle = value;
    }
    get endAngle() {
      return this[endAngle$];
    }
    set endAngle(value) {
      super.endAngle = value;
    }
    get anticlockwise() {
      return this[anticlockwise$];
    }
    set anticlockwise(value) {
      super.anticlockwise = value;
    }
    shifted(offset) {
      return new src__engine.Ellipse.new(dart.notNull(this.x) + dart.notNull(offset.dx), dart.notNull(this.y) + dart.notNull(offset.dy), this.radiusX, this.radiusY, this.rotation, this.startAngle, this.endAngle, this.anticlockwise);
    }
    serializeToCssPaint() {
      return [3, this.x, this.y, this.radiusX, this.radiusY, this.rotation, this.startAngle, this.endAngle, this.anticlockwise];
    }
    toString() {
      if (dart.test(src__engine.assertionsEnabled)) {
        return "Ellipse(" + dart.str(this.x) + ", " + dart.str(this.y) + ", " + dart.str(this.radiusX) + ", " + dart.str(this.radiusY) + ")";
      } else {
        return super[$toString]();
      }
    }
  };
  (src__engine.Ellipse.new = function(x, y, radiusX, radiusY, rotation, startAngle, endAngle, anticlockwise) {
    this[x$1] = x;
    this[y$1] = y;
    this[radiusX$] = radiusX;
    this[radiusY$] = radiusY;
    this[rotation$] = rotation;
    this[startAngle$] = startAngle;
    this[endAngle$] = endAngle;
    this[anticlockwise$] = anticlockwise;
    src__engine.Ellipse.__proto__.new.call(this, src__engine.PathCommandTypes.ellipse);
    ;
  }).prototype = src__engine.Ellipse.prototype;
  dart.addTypeTests(src__engine.Ellipse);
  const x$1 = Symbol("Ellipse.x");
  const y$1 = Symbol("Ellipse.y");
  const radiusX$ = Symbol("Ellipse.radiusX");
  const radiusY$ = Symbol("Ellipse.radiusY");
  const rotation$ = Symbol("Ellipse.rotation");
  const startAngle$ = Symbol("Ellipse.startAngle");
  const endAngle$ = Symbol("Ellipse.endAngle");
  const anticlockwise$ = Symbol("Ellipse.anticlockwise");
  dart.setMethodSignature(src__engine.Ellipse, () => ({
    __proto__: dart.getMethods(src__engine.Ellipse.__proto__),
    shifted: dart.fnType(src__engine.Ellipse, [ui.Offset]),
    serializeToCssPaint: dart.fnType(core.List, [])
  }));
  dart.setFieldSignature(src__engine.Ellipse, () => ({
    __proto__: dart.getFields(src__engine.Ellipse.__proto__),
    x: dart.finalFieldType(core.double),
    y: dart.finalFieldType(core.double),
    radiusX: dart.finalFieldType(core.double),
    radiusY: dart.finalFieldType(core.double),
    rotation: dart.finalFieldType(core.double),
    startAngle: dart.finalFieldType(core.double),
    endAngle: dart.finalFieldType(core.double),
    anticlockwise: dart.finalFieldType(core.bool)
  }));
  dart.defineExtensionMethods(src__engine.Ellipse, ['toString']);
  src__engine.QuadraticCurveTo = class QuadraticCurveTo extends src__engine.PathCommand {
    get x1() {
      return this[x1$];
    }
    set x1(value) {
      super.x1 = value;
    }
    get y1() {
      return this[y1$];
    }
    set y1(value) {
      super.y1 = value;
    }
    get x2() {
      return this[x2$];
    }
    set x2(value) {
      super.x2 = value;
    }
    get y2() {
      return this[y2$];
    }
    set y2(value) {
      super.y2 = value;
    }
    shifted(offset) {
      return new src__engine.QuadraticCurveTo.new(dart.notNull(this.x1) + dart.notNull(offset.dx), dart.notNull(this.y1) + dart.notNull(offset.dy), dart.notNull(this.x2) + dart.notNull(offset.dx), dart.notNull(this.y2) + dart.notNull(offset.dy));
    }
    serializeToCssPaint() {
      return [4, this.x1, this.y1, this.x2, this.y2];
    }
    toString() {
      if (dart.test(src__engine.assertionsEnabled)) {
        return "QuadraticCurveTo(" + dart.str(this.x1) + ", " + dart.str(this.y1) + ", " + dart.str(this.x2) + ", " + dart.str(this.y2) + ")";
      } else {
        return super[$toString]();
      }
    }
  };
  (src__engine.QuadraticCurveTo.new = function(x1, y1, x2, y2) {
    this[x1$] = x1;
    this[y1$] = y1;
    this[x2$] = x2;
    this[y2$] = y2;
    src__engine.QuadraticCurveTo.__proto__.new.call(this, src__engine.PathCommandTypes.quadraticCurveTo);
    ;
  }).prototype = src__engine.QuadraticCurveTo.prototype;
  dart.addTypeTests(src__engine.QuadraticCurveTo);
  const x1$ = Symbol("QuadraticCurveTo.x1");
  const y1$ = Symbol("QuadraticCurveTo.y1");
  const x2$ = Symbol("QuadraticCurveTo.x2");
  const y2$ = Symbol("QuadraticCurveTo.y2");
  dart.setMethodSignature(src__engine.QuadraticCurveTo, () => ({
    __proto__: dart.getMethods(src__engine.QuadraticCurveTo.__proto__),
    shifted: dart.fnType(src__engine.QuadraticCurveTo, [ui.Offset]),
    serializeToCssPaint: dart.fnType(core.List, [])
  }));
  dart.setFieldSignature(src__engine.QuadraticCurveTo, () => ({
    __proto__: dart.getFields(src__engine.QuadraticCurveTo.__proto__),
    x1: dart.finalFieldType(core.double),
    y1: dart.finalFieldType(core.double),
    x2: dart.finalFieldType(core.double),
    y2: dart.finalFieldType(core.double)
  }));
  dart.defineExtensionMethods(src__engine.QuadraticCurveTo, ['toString']);
  src__engine.BezierCurveTo = class BezierCurveTo extends src__engine.PathCommand {
    get x1() {
      return this[x1$0];
    }
    set x1(value) {
      super.x1 = value;
    }
    get y1() {
      return this[y1$0];
    }
    set y1(value) {
      super.y1 = value;
    }
    get x2() {
      return this[x2$0];
    }
    set x2(value) {
      super.x2 = value;
    }
    get y2() {
      return this[y2$0];
    }
    set y2(value) {
      super.y2 = value;
    }
    get x3() {
      return this[x3$];
    }
    set x3(value) {
      super.x3 = value;
    }
    get y3() {
      return this[y3$];
    }
    set y3(value) {
      super.y3 = value;
    }
    shifted(offset) {
      return new src__engine.BezierCurveTo.new(dart.notNull(this.x1) + dart.notNull(offset.dx), dart.notNull(this.y1) + dart.notNull(offset.dy), dart.notNull(this.x2) + dart.notNull(offset.dx), dart.notNull(this.y2) + dart.notNull(offset.dy), dart.notNull(this.x3) + dart.notNull(offset.dx), dart.notNull(this.y3) + dart.notNull(offset.dy));
    }
    serializeToCssPaint() {
      return [5, this.x1, this.y1, this.x2, this.y2, this.x3, this.y3];
    }
    toString() {
      if (dart.test(src__engine.assertionsEnabled)) {
        return "BezierCurveTo(" + dart.str(this.x1) + ", " + dart.str(this.y1) + ", " + dart.str(this.x2) + ", " + dart.str(this.y2) + ", " + dart.str(this.x3) + ", " + dart.str(this.y3) + ")";
      } else {
        return super[$toString]();
      }
    }
  };
  (src__engine.BezierCurveTo.new = function(x1, y1, x2, y2, x3, y3) {
    this[x1$0] = x1;
    this[y1$0] = y1;
    this[x2$0] = x2;
    this[y2$0] = y2;
    this[x3$] = x3;
    this[y3$] = y3;
    src__engine.BezierCurveTo.__proto__.new.call(this, src__engine.PathCommandTypes.bezierCurveTo);
    ;
  }).prototype = src__engine.BezierCurveTo.prototype;
  dart.addTypeTests(src__engine.BezierCurveTo);
  const x1$0 = Symbol("BezierCurveTo.x1");
  const y1$0 = Symbol("BezierCurveTo.y1");
  const x2$0 = Symbol("BezierCurveTo.x2");
  const y2$0 = Symbol("BezierCurveTo.y2");
  const x3$ = Symbol("BezierCurveTo.x3");
  const y3$ = Symbol("BezierCurveTo.y3");
  dart.setMethodSignature(src__engine.BezierCurveTo, () => ({
    __proto__: dart.getMethods(src__engine.BezierCurveTo.__proto__),
    shifted: dart.fnType(src__engine.BezierCurveTo, [ui.Offset]),
    serializeToCssPaint: dart.fnType(core.List, [])
  }));
  dart.setFieldSignature(src__engine.BezierCurveTo, () => ({
    __proto__: dart.getFields(src__engine.BezierCurveTo.__proto__),
    x1: dart.finalFieldType(core.double),
    y1: dart.finalFieldType(core.double),
    x2: dart.finalFieldType(core.double),
    y2: dart.finalFieldType(core.double),
    x3: dart.finalFieldType(core.double),
    y3: dart.finalFieldType(core.double)
  }));
  dart.defineExtensionMethods(src__engine.BezierCurveTo, ['toString']);
  src__engine.RectCommand = class RectCommand extends src__engine.PathCommand {
    get x() {
      return this[x$2];
    }
    set x(value) {
      super.x = value;
    }
    get y() {
      return this[y$2];
    }
    set y(value) {
      super.y = value;
    }
    get width() {
      return this[width$0];
    }
    set width(value) {
      super.width = value;
    }
    get height() {
      return this[height$0];
    }
    set height(value) {
      super.height = value;
    }
    shifted(offset) {
      return new src__engine.RectCommand.new(dart.notNull(this.x) + dart.notNull(offset.dx), dart.notNull(this.y) + dart.notNull(offset.dy), this.width, this.height);
    }
    serializeToCssPaint() {
      return [6, this.x, this.y, this.width, this.height];
    }
    toString() {
      if (dart.test(src__engine.assertionsEnabled)) {
        return "Rect(" + dart.str(this.x) + ", " + dart.str(this.y) + ", " + dart.str(this.width) + ", " + dart.str(this.height) + ")";
      } else {
        return super[$toString]();
      }
    }
  };
  (src__engine.RectCommand.new = function(x, y, width, height) {
    this[x$2] = x;
    this[y$2] = y;
    this[width$0] = width;
    this[height$0] = height;
    src__engine.RectCommand.__proto__.new.call(this, src__engine.PathCommandTypes.rect);
    ;
  }).prototype = src__engine.RectCommand.prototype;
  dart.addTypeTests(src__engine.RectCommand);
  const x$2 = Symbol("RectCommand.x");
  const y$2 = Symbol("RectCommand.y");
  const width$0 = Symbol("RectCommand.width");
  const height$0 = Symbol("RectCommand.height");
  dart.setMethodSignature(src__engine.RectCommand, () => ({
    __proto__: dart.getMethods(src__engine.RectCommand.__proto__),
    shifted: dart.fnType(src__engine.RectCommand, [ui.Offset]),
    serializeToCssPaint: dart.fnType(core.List, [])
  }));
  dart.setFieldSignature(src__engine.RectCommand, () => ({
    __proto__: dart.getFields(src__engine.RectCommand.__proto__),
    x: dart.finalFieldType(core.double),
    y: dart.finalFieldType(core.double),
    width: dart.finalFieldType(core.double),
    height: dart.finalFieldType(core.double)
  }));
  dart.defineExtensionMethods(src__engine.RectCommand, ['toString']);
  src__engine.RRectCommand = class RRectCommand extends src__engine.PathCommand {
    get rrect() {
      return this[rrect$1];
    }
    set rrect(value) {
      super.rrect = value;
    }
    shifted(offset) {
      return new src__engine.RRectCommand.new(this.rrect.shift(offset));
    }
    serializeToCssPaint() {
      return [7, src__engine._serializeRRectToCssPaint(this.rrect)];
    }
    toString() {
      if (dart.test(src__engine.assertionsEnabled)) {
        return dart.str(this.rrect);
      } else {
        return super[$toString]();
      }
    }
  };
  (src__engine.RRectCommand.new = function(rrect) {
    this[rrect$1] = rrect;
    src__engine.RRectCommand.__proto__.new.call(this, src__engine.PathCommandTypes.rRect);
    ;
  }).prototype = src__engine.RRectCommand.prototype;
  dart.addTypeTests(src__engine.RRectCommand);
  const rrect$1 = Symbol("RRectCommand.rrect");
  dart.setMethodSignature(src__engine.RRectCommand, () => ({
    __proto__: dart.getMethods(src__engine.RRectCommand.__proto__),
    shifted: dart.fnType(src__engine.RRectCommand, [ui.Offset]),
    serializeToCssPaint: dart.fnType(core.List, [])
  }));
  dart.setFieldSignature(src__engine.RRectCommand, () => ({
    __proto__: dart.getFields(src__engine.RRectCommand.__proto__),
    rrect: dart.finalFieldType(ui.RRect)
  }));
  dart.defineExtensionMethods(src__engine.RRectCommand, ['toString']);
  src__engine.CloseCommand = class CloseCommand extends src__engine.PathCommand {
    shifted(offset) {
      return this;
    }
    serializeToCssPaint() {
      return [8];
    }
    toString() {
      if (dart.test(src__engine.assertionsEnabled)) {
        return "Close()";
      } else {
        return super[$toString]();
      }
    }
  };
  (src__engine.CloseCommand.new = function() {
    src__engine.CloseCommand.__proto__.new.call(this, src__engine.PathCommandTypes.close);
    ;
  }).prototype = src__engine.CloseCommand.prototype;
  dart.addTypeTests(src__engine.CloseCommand);
  dart.setMethodSignature(src__engine.CloseCommand, () => ({
    __proto__: dart.getMethods(src__engine.CloseCommand.__proto__),
    shifted: dart.fnType(src__engine.CloseCommand, [ui.Offset]),
    serializeToCssPaint: dart.fnType(core.List, [])
  }));
  dart.defineExtensionMethods(src__engine.CloseCommand, ['toString']);
  const _didPaintInsideClipArea = dart.privateName(src__engine, "_didPaintInsideClipArea");
  const _left = dart.privateName(src__engine, "_left");
  const _top = dart.privateName(src__engine, "_top");
  const _right = dart.privateName(src__engine, "_right");
  const _bottom = dart.privateName(src__engine, "_bottom");
  const _transforms = dart.privateName(src__engine, "_transforms");
  const _currentMatrixIsIdentity = dart.privateName(src__engine, "_currentMatrixIsIdentity");
  const _currentMatrix = dart.privateName(src__engine, "_currentMatrix");
  const _clipRectInitialized = dart.privateName(src__engine, "_clipRectInitialized");
  const _currentClipLeft = dart.privateName(src__engine, "_currentClipLeft");
  const _currentClipTop = dart.privateName(src__engine, "_currentClipTop");
  const _currentClipRight = dart.privateName(src__engine, "_currentClipRight");
  const _currentClipBottom = dart.privateName(src__engine, "_currentClipBottom");
  src__engine._PaintBounds = class _PaintBounds extends core.Object {
    translate(dx, dy) {
      if (dx !== 0.0 || dy !== 0.0) this[_currentMatrixIsIdentity] = false;
      this[_currentMatrix].translate(dx, dy);
    }
    scale(sx, sy) {
      if (sx !== 1.0 || sy !== 1.0) this[_currentMatrixIsIdentity] = false;
      this[_currentMatrix].scale(sx, sy);
    }
    rotateZ(radians) {
      if (radians !== 0.0) this[_currentMatrixIsIdentity] = false;
      this[_currentMatrix].rotateZ(radians);
    }
    transform(matrix4) {
      let m4 = new src__engine.Matrix4.fromFloat64List(matrix4);
      this[_currentMatrix].multiply(m4);
      this[_currentMatrixIsIdentity] = this[_currentMatrix].isIdentity();
    }
    skew(sx, sy) {
      this[_currentMatrixIsIdentity] = false;
      let skewMatrix = src__engine.Matrix4.identity();
      let storage = skewMatrix.storage;
      storage[$_set](1, sy);
      storage[$_set](4, sx);
      this[_currentMatrix].multiply(skewMatrix);
    }
    clipRect(rect) {
      if (!dart.test(this[_currentMatrixIsIdentity])) {
        let leftTop = this[_currentMatrix].transform3(src__engine.Vector3.new(rect.left, rect.top, 0.0));
        let rightTop = this[_currentMatrix].transform3(src__engine.Vector3.new(rect.right, rect.top, 0.0));
        let leftBottom = this[_currentMatrix].transform3(src__engine.Vector3.new(rect.left, rect.bottom, 0.0));
        let rightBottom = this[_currentMatrix].transform3(src__engine.Vector3.new(rect.right, rect.bottom, 0.0));
        rect = new ui.Rect.fromLTRB(math.min(core.double, math.min(core.double, math.min(core.double, leftTop.x, rightTop.x), leftBottom.x), rightBottom.x), math.min(core.double, math.min(core.double, math.min(core.double, leftTop.y, rightTop.y), leftBottom.y), rightBottom.y), math.max(core.double, math.max(core.double, math.max(core.double, leftTop.x, rightTop.x), leftBottom.x), rightBottom.x), math.max(core.double, math.max(core.double, math.max(core.double, leftTop.y, rightTop.y), leftBottom.y), rightBottom.y));
      }
      if (!dart.test(this[_clipRectInitialized])) {
        this[_currentClipLeft] = rect.left;
        this[_currentClipTop] = rect.top;
        this[_currentClipRight] = rect.right;
        this[_currentClipBottom] = rect.bottom;
        this[_clipRectInitialized] = true;
      } else {
        if (dart.notNull(rect.left) > dart.notNull(this[_currentClipLeft])) this[_currentClipLeft] = rect.left;
        if (dart.notNull(rect.top) > dart.notNull(this[_currentClipTop])) this[_currentClipTop] = rect.top;
        if (dart.notNull(rect.right) < dart.notNull(this[_currentClipRight])) {
          this[_currentClipRight] = rect.right;
        }
        if (dart.notNull(rect.bottom) < dart.notNull(this[_currentClipBottom])) this[_currentClipBottom] = rect.bottom;
      }
    }
    grow(r) {
      this.growLTRB(r.left, r.top, r.right, r.bottom);
    }
    growLTRB(left, top, right, bottom) {
      if (left == right || top == bottom) return;
      let transformedPointLeft = left;
      let transformedPointTop = top;
      let transformedPointRight = right;
      let transformedPointBottom = bottom;
      if (!dart.test(this[_currentMatrixIsIdentity])) {
        let transformedRect = src__engine.localClipToGlobalClip({localLeft: left, localTop: top, localRight: right, localBottom: bottom, transform: this[_currentMatrix]});
        transformedPointLeft = transformedRect.left;
        transformedPointTop = transformedRect.top;
        transformedPointRight = transformedRect.right;
        transformedPointBottom = transformedRect.bottom;
      }
      if (dart.test(this[_clipRectInitialized])) {
        if (dart.notNull(transformedPointLeft) > dart.notNull(this[_currentClipRight])) return;
        if (dart.notNull(transformedPointRight) < dart.notNull(this[_currentClipLeft])) return;
        if (dart.notNull(transformedPointTop) > dart.notNull(this[_currentClipBottom])) return;
        if (dart.notNull(transformedPointBottom) < dart.notNull(this[_currentClipTop])) return;
        if (dart.notNull(transformedPointLeft) < dart.notNull(this[_currentClipLeft])) {
          transformedPointLeft = this[_currentClipLeft];
        }
        if (dart.notNull(transformedPointRight) > dart.notNull(this[_currentClipRight])) {
          transformedPointRight = this[_currentClipRight];
        }
        if (dart.notNull(transformedPointTop) < dart.notNull(this[_currentClipTop])) {
          transformedPointTop = this[_currentClipTop];
        }
        if (dart.notNull(transformedPointBottom) > dart.notNull(this[_currentClipBottom])) {
          transformedPointBottom = this[_currentClipBottom];
        }
      }
      if (dart.test(this[_didPaintInsideClipArea])) {
        this[_left] = math.min(core.double, math.min(core.double, this[_left], transformedPointLeft), transformedPointRight);
        this[_right] = math.max(core.double, math.max(core.double, this[_right], transformedPointLeft), transformedPointRight);
        this[_top] = math.min(core.double, math.min(core.double, this[_top], transformedPointTop), transformedPointBottom);
        this[_bottom] = math.max(core.double, math.max(core.double, this[_bottom], transformedPointTop), transformedPointBottom);
      } else {
        this[_left] = math.min(core.double, transformedPointLeft, transformedPointRight);
        this[_right] = math.max(core.double, transformedPointLeft, transformedPointRight);
        this[_top] = math.min(core.double, transformedPointTop, transformedPointBottom);
        this[_bottom] = math.max(core.double, transformedPointTop, transformedPointBottom);
      }
      this[_didPaintInsideClipArea] = true;
    }
    saveTransformsAndClip() {
      let t1;
      this[_clipStack] == null ? this[_clipStack] = JSArrayOfRect().of([]) : null;
      this[_transforms] == null ? this[_transforms] = JSArrayOfMatrix4().of([]) : null;
      this[_transforms][$add]((t1 = this[_currentMatrix], t1 == null ? null : t1.clone()));
      this[_clipStack][$add](dart.test(this[_clipRectInitialized]) ? new ui.Rect.fromLTRB(this[_currentClipLeft], this[_currentClipTop], this[_currentClipRight], this[_currentClipBottom]) : null);
    }
    restoreTransformsAndClip() {
      this[_currentMatrix] = this[_transforms][$removeLast]();
      let clipRect = this[_clipStack][$removeLast]();
      if (clipRect != null) {
        this[_currentClipLeft] = clipRect.left;
        this[_currentClipTop] = clipRect.top;
        this[_currentClipRight] = clipRect.right;
        this[_currentClipBottom] = clipRect.bottom;
        this[_clipRectInitialized] = true;
      } else if (dart.test(this[_clipRectInitialized])) {
        this[_clipRectInitialized] = false;
      }
    }
    computeBounds() {
      if (!dart.test(this[_didPaintInsideClipArea])) return ui.Rect.zero;
      let maxLeft = this.maxPaintBounds.left[$isNaN] ? core.double.negativeInfinity : this.maxPaintBounds.left;
      let maxRight = this.maxPaintBounds.right[$isNaN] ? core.double.infinity : this.maxPaintBounds.right;
      let maxTop = this.maxPaintBounds.top[$isNaN] ? core.double.negativeInfinity : this.maxPaintBounds.top;
      let maxBottom = this.maxPaintBounds.bottom[$isNaN] ? core.double.infinity : this.maxPaintBounds.bottom;
      let left = math.min(core.double, this[_left], this[_right]);
      let right = math.max(core.double, this[_left], this[_right]);
      let top = math.min(core.double, this[_top], this[_bottom]);
      let bottom = math.max(core.double, this[_top], this[_bottom]);
      if (right < dart.notNull(maxLeft) || bottom < dart.notNull(maxTop)) {
        return ui.Rect.zero;
      }
      return new ui.Rect.fromLTRB(math.max(core.double, left, maxLeft), math.max(core.double, top, maxTop), math.min(core.double, right, maxRight), math.min(core.double, bottom, maxBottom));
    }
    toString() {
      if (dart.test(src__engine.assertionsEnabled)) {
        let bounds = this.computeBounds();
        return "_PaintBounds(" + dart.str(bounds) + " of size " + dart.str(bounds.size) + ")";
      } else {
        return super[$toString]();
      }
    }
  };
  (src__engine._PaintBounds.new = function(maxPaintBounds) {
    this[_didPaintInsideClipArea] = false;
    this[_left] = null;
    this[_top] = null;
    this[_right] = null;
    this[_bottom] = null;
    this[_transforms] = null;
    this[_clipStack] = null;
    this[_currentMatrixIsIdentity] = true;
    this[_currentMatrix] = src__engine.Matrix4.identity();
    this[_clipRectInitialized] = false;
    this[_currentClipLeft] = 0.0;
    this[_currentClipTop] = 0.0;
    this[_currentClipRight] = 0.0;
    this[_currentClipBottom] = 0.0;
    this.maxPaintBounds = maxPaintBounds;
    ;
  }).prototype = src__engine._PaintBounds.prototype;
  dart.addTypeTests(src__engine._PaintBounds);
  dart.setMethodSignature(src__engine._PaintBounds, () => ({
    __proto__: dart.getMethods(src__engine._PaintBounds.__proto__),
    translate: dart.fnType(dart.void, [core.double, core.double]),
    scale: dart.fnType(dart.void, [core.double, core.double]),
    rotateZ: dart.fnType(dart.void, [core.double]),
    transform: dart.fnType(dart.void, [typed_data.Float64List]),
    skew: dart.fnType(dart.void, [core.double, core.double]),
    clipRect: dart.fnType(dart.void, [ui.Rect]),
    grow: dart.fnType(dart.void, [ui.Rect]),
    growLTRB: dart.fnType(dart.void, [core.double, core.double, core.double, core.double]),
    saveTransformsAndClip: dart.fnType(dart.void, []),
    restoreTransformsAndClip: dart.fnType(dart.void, []),
    computeBounds: dart.fnType(ui.Rect, [])
  }));
  dart.setFieldSignature(src__engine._PaintBounds, () => ({
    __proto__: dart.getFields(src__engine._PaintBounds.__proto__),
    maxPaintBounds: dart.finalFieldType(ui.Rect),
    [_didPaintInsideClipArea]: dart.fieldType(core.bool),
    [_left]: dart.fieldType(core.double),
    [_top]: dart.fieldType(core.double),
    [_right]: dart.fieldType(core.double),
    [_bottom]: dart.fieldType(core.double),
    [_transforms]: dart.fieldType(core.List$(src__engine.Matrix4)),
    [_clipStack]: dart.fieldType(core.List$(ui.Rect)),
    [_currentMatrixIsIdentity]: dart.fieldType(core.bool),
    [_currentMatrix]: dart.fieldType(src__engine.Matrix4),
    [_clipRectInitialized]: dart.fieldType(core.bool),
    [_currentClipLeft]: dart.fieldType(core.double),
    [_currentClipTop]: dart.fieldType(core.double),
    [_currentClipRight]: dart.fieldType(core.double),
    [_currentClipBottom]: dart.fieldType(core.double)
  }));
  dart.defineExtensionMethods(src__engine._PaintBounds, ['toString']);
  src__engine._CheckableKind = class _CheckableKind extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (src__engine._CheckableKind.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = src__engine._CheckableKind.prototype;
  dart.addTypeTests(src__engine._CheckableKind);
  dart.setFieldSignature(src__engine._CheckableKind, () => ({
    __proto__: dart.getFields(src__engine._CheckableKind.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(src__engine._CheckableKind, ['toString']);
  src__engine._CheckableKind.checkbox = dart.const(new src__engine._CheckableKind.new(0, "_CheckableKind.checkbox"));
  src__engine._CheckableKind.radio = dart.const(new src__engine._CheckableKind.new(1, "_CheckableKind.radio"));
  src__engine._CheckableKind.values = dart.constList([src__engine._CheckableKind.checkbox, src__engine._CheckableKind.radio], src__engine._CheckableKind);
  const _kind = dart.privateName(src__engine, "_kind");
  src__engine.RoleManager = class RoleManager extends core.Object {
    get role() {
      return this[role$];
    }
    set role(value) {
      super.role = value;
    }
    get semanticsObject() {
      return this[semanticsObject$];
    }
    set semanticsObject(value) {
      super.semanticsObject = value;
    }
  };
  (src__engine.RoleManager.new = function(role, semanticsObject) {
    this[role$] = role;
    this[semanticsObject$] = semanticsObject;
    if (!(semanticsObject != null)) dart.assertFailed();
    ;
  }).prototype = src__engine.RoleManager.prototype;
  dart.addTypeTests(src__engine.RoleManager);
  const role$ = Symbol("RoleManager.role");
  const semanticsObject$ = Symbol("RoleManager.semanticsObject");
  dart.setFieldSignature(src__engine.RoleManager, () => ({
    __proto__: dart.getFields(src__engine.RoleManager.__proto__),
    role: dart.finalFieldType(src__engine.Role),
    semanticsObject: dart.finalFieldType(src__engine.SemanticsObject)
  }));
  src__engine.Checkable = class Checkable extends src__engine.RoleManager {
    update() {
      if (dart.test(this.semanticsObject.isFlagsDirty)) {
        switch (this[_kind]) {
          case src__engine._CheckableKind.checkbox:
          {
            this.semanticsObject.setAriaRole("checkbox", true);
            break;
          }
          case src__engine._CheckableKind.radio:
          {
            this.semanticsObject.setAriaRole("radio", true);
            break;
          }
        }
        this.semanticsObject.element[$setAttribute]("aria-checked", dart.test(this.semanticsObject.hasFlag(ui.SemanticsFlag.isChecked)) ? "true" : "false");
      }
    }
    dispose() {
      switch (this[_kind]) {
        case src__engine._CheckableKind.checkbox:
        {
          this.semanticsObject.setAriaRole("checkbox", false);
          break;
        }
        case src__engine._CheckableKind.radio:
        {
          this.semanticsObject.setAriaRole("radio", false);
          break;
        }
      }
    }
  };
  (src__engine.Checkable.new = function(semanticsObject) {
    this[_kind] = null;
    src__engine.Checkable.__proto__.new.call(this, src__engine.Role.checkable, semanticsObject);
    if (dart.test(semanticsObject.hasFlag(ui.SemanticsFlag.isInMutuallyExclusiveGroup))) {
      this[_kind] = src__engine._CheckableKind.radio;
    } else {
      this[_kind] = src__engine._CheckableKind.checkbox;
    }
  }).prototype = src__engine.Checkable.prototype;
  dart.addTypeTests(src__engine.Checkable);
  dart.setMethodSignature(src__engine.Checkable, () => ({
    __proto__: dart.getMethods(src__engine.Checkable.__proto__),
    update: dart.fnType(dart.void, []),
    dispose: dart.fnType(dart.void, [])
  }));
  dart.setFieldSignature(src__engine.Checkable, () => ({
    __proto__: dart.getFields(src__engine.Checkable.__proto__),
    [_kind]: dart.fieldType(src__engine._CheckableKind)
  }));
  const _element$ = dart.privateName(src__engine, "_element");
  const _currentSurrogateValue = dart.privateName(src__engine, "_currentSurrogateValue");
  const _gestureModeListener = dart.privateName(src__engine, "_gestureModeListener");
  const _pendingResync = dart.privateName(src__engine, "_pendingResync");
  const _enableBrowserGestureHandling = dart.privateName(src__engine, "_enableBrowserGestureHandling");
  const _updateInputValues = dart.privateName(src__engine, "_updateInputValues");
  const _disableBrowserGestureHandling = dart.privateName(src__engine, "_disableBrowserGestureHandling");
  src__engine.Incrementable = class Incrementable extends src__engine.RoleManager {
    update() {
      switch (this.semanticsObject.owner.gestureMode) {
        case src__engine.GestureMode.browserGestures:
        {
          this[_enableBrowserGestureHandling]();
          this[_updateInputValues]();
          break;
        }
        case src__engine.GestureMode.pointerEvents:
        {
          this[_disableBrowserGestureHandling]();
          break;
        }
      }
    }
    [_enableBrowserGestureHandling]() {
      if (!dart.equals(this.semanticsObject.owner.gestureMode, src__engine.GestureMode.browserGestures)) dart.assertFailed();
      if (!dart.test(this[_element$].disabled)) {
        return;
      }
      this[_element$].disabled = false;
    }
    [_updateInputValues]() {
      if (!dart.equals(this.semanticsObject.owner.gestureMode, src__engine.GestureMode.browserGestures)) dart.assertFailed();
      let updateNeeded = dart.test(this[_pendingResync]) || dart.test(this.semanticsObject.isValueDirty) || dart.test(this.semanticsObject.isIncreasedValueDirty) || dart.test(this.semanticsObject.isDecreasedValueDirty);
      if (!updateNeeded) {
        return;
      }
      this[_pendingResync] = false;
      let surrogateTextValue = dart.str(this[_currentSurrogateValue]);
      this[_element$].value = surrogateTextValue;
      this[_element$][$setAttribute]("aria-valuenow", surrogateTextValue);
      this[_element$][$setAttribute]("aria-valuetext", this.semanticsObject.value);
      let canIncrease = this.semanticsObject.increasedValue != null;
      let surrogateMaxTextValue = canIncrease ? dart.str(dart.notNull(this[_currentSurrogateValue]) + 1) : surrogateTextValue;
      this[_element$].max = surrogateMaxTextValue;
      this[_element$][$setAttribute]("aria-valuemax", surrogateMaxTextValue);
      let canDecrease = this.semanticsObject.decreasedValue != null;
      let surrogateMinTextValue = canDecrease ? dart.str(dart.notNull(this[_currentSurrogateValue]) - 1) : surrogateTextValue;
      this[_element$].min = surrogateMinTextValue;
      this[_element$][$setAttribute]("aria-valuemin", surrogateMinTextValue);
    }
    [_disableBrowserGestureHandling]() {
      if (dart.test(this[_element$].disabled)) {
        return;
      }
      this[_element$].disabled = true;
    }
    dispose() {
      if (!(this[_gestureModeListener] != null)) dart.assertFailed();
      this.semanticsObject.owner.removeGestureModeListener(this[_gestureModeListener]);
      this[_gestureModeListener] = null;
      this[_disableBrowserGestureHandling]();
      this[_element$][$remove]();
    }
  };
  (src__engine.Incrementable.new = function(semanticsObject) {
    this[_element$] = html.InputElement.new();
    this[_currentSurrogateValue] = 1;
    this[_gestureModeListener] = null;
    this[_pendingResync] = false;
    src__engine.Incrementable.__proto__.new.call(this, src__engine.Role.incrementable, semanticsObject);
    semanticsObject.element[$append](this[_element$]);
    this[_element$].type = "range";
    this[_element$][$setAttribute]("role", "slider");
    this[_element$][$addEventListener]("change", dart.fn(_ => {
      if (dart.test(this[_element$].disabled)) {
        return;
      }
      this[_pendingResync] = true;
      let newInputValue = core.int.parse(this[_element$].value);
      if (dart.notNull(newInputValue) > dart.notNull(this[_currentSurrogateValue])) {
        this[_currentSurrogateValue] = dart.notNull(this[_currentSurrogateValue]) + 1;
        ui.window.onSemanticsAction(semanticsObject.id, ui.SemanticsAction.increase, null);
      } else if (dart.notNull(newInputValue) < dart.notNull(this[_currentSurrogateValue])) {
        this[_currentSurrogateValue] = dart.notNull(this[_currentSurrogateValue]) - 1;
        ui.window.onSemanticsAction(semanticsObject.id, ui.SemanticsAction.decrease, null);
      }
    }, EventToNull()));
    this[_gestureModeListener] = dart.fn(mode => {
      this.update();
    }, GestureModeToNull());
    semanticsObject.owner.addGestureModeListener(this[_gestureModeListener]);
  }).prototype = src__engine.Incrementable.prototype;
  dart.addTypeTests(src__engine.Incrementable);
  dart.setMethodSignature(src__engine.Incrementable, () => ({
    __proto__: dart.getMethods(src__engine.Incrementable.__proto__),
    update: dart.fnType(dart.void, []),
    [_enableBrowserGestureHandling]: dart.fnType(dart.void, []),
    [_updateInputValues]: dart.fnType(dart.void, []),
    [_disableBrowserGestureHandling]: dart.fnType(dart.void, []),
    dispose: dart.fnType(dart.void, [])
  }));
  dart.setFieldSignature(src__engine.Incrementable, () => ({
    __proto__: dart.getFields(src__engine.Incrementable.__proto__),
    [_element$]: dart.finalFieldType(html.InputElement),
    [_currentSurrogateValue]: dart.fieldType(core.int),
    [_gestureModeListener]: dart.fieldType(dart.fnType(dart.void, [src__engine.GestureMode])),
    [_pendingResync]: dart.fieldType(core.bool)
  }));
  const _auxiliaryValueElement = dart.privateName(src__engine, "_auxiliaryValueElement");
  const _cleanUpDom = dart.privateName(src__engine, "_cleanUpDom");
  src__engine.LabelAndValue = class LabelAndValue extends src__engine.RoleManager {
    update() {
      let t1;
      let hasValue = this.semanticsObject.hasValue;
      let hasLabel = this.semanticsObject.hasLabel;
      let shouldDisplayValue = dart.test(hasValue) && !dart.test(this.semanticsObject.isIncrementable) && !dart.test(this.semanticsObject.isTextField);
      if (!dart.test(hasLabel) && !shouldDisplayValue) {
        this[_cleanUpDom]();
        return;
      }
      let combinedValue = new core.StringBuffer.new();
      if (dart.test(hasLabel)) {
        combinedValue.write(this.semanticsObject.label);
        if (shouldDisplayValue) {
          combinedValue.write(" ");
        }
      }
      if (shouldDisplayValue) {
        combinedValue.write(this.semanticsObject.value);
      }
      this.semanticsObject.element[$setAttribute]("aria-label", combinedValue.toString());
      if (this[_auxiliaryValueElement] == null) {
        this[_auxiliaryValueElement] = html.Element.tag("flt-semantics-value");
        if (dart.test(this.semanticsObject.hasChildren)) {
          t1 = this[_auxiliaryValueElement].style;
          t1[$position] = "absolute";
          t1[$top] = "0";
          t1[$left] = "0";
          t1[$width] = dart.str(this.semanticsObject.rect.width) + "px";
          t1[$height] = dart.str(this.semanticsObject.rect.height) + "px";
          t1;
        }
        this[_auxiliaryValueElement].style[$fontSize] = "6px";
        this.semanticsObject.element[$append](this[_auxiliaryValueElement]);
      }
      this[_auxiliaryValueElement][$text] = combinedValue.toString();
    }
    [_cleanUpDom]() {
      if (this[_auxiliaryValueElement] != null) {
        this[_auxiliaryValueElement][$remove]();
        this[_auxiliaryValueElement] = null;
      }
      this.semanticsObject.element[$attributes][$remove]("aria-label");
    }
    dispose() {
      this[_cleanUpDom]();
    }
  };
  (src__engine.LabelAndValue.new = function(semanticsObject) {
    this[_auxiliaryValueElement] = null;
    src__engine.LabelAndValue.__proto__.new.call(this, src__engine.Role.labelAndValue, semanticsObject);
    ;
  }).prototype = src__engine.LabelAndValue.prototype;
  dart.addTypeTests(src__engine.LabelAndValue);
  dart.setMethodSignature(src__engine.LabelAndValue, () => ({
    __proto__: dart.getMethods(src__engine.LabelAndValue.__proto__),
    update: dart.fnType(dart.void, []),
    [_cleanUpDom]: dart.fnType(dart.void, []),
    dispose: dart.fnType(dart.void, [])
  }));
  dart.setFieldSignature(src__engine.LabelAndValue, () => ({
    __proto__: dart.getFields(src__engine.LabelAndValue.__proto__),
    [_auxiliaryValueElement]: dart.fieldType(html.Element)
  }));
  const _scrollListener = dart.privateName(src__engine, "_scrollListener");
  const _effectiveNeutralScrollPosition = dart.privateName(src__engine, "_effectiveNeutralScrollPosition");
  const _domScrollPosition = dart.privateName(src__engine, "_domScrollPosition");
  const _neutralizeDomScrollPosition = dart.privateName(src__engine, "_neutralizeDomScrollPosition");
  const _recomputeScrollPosition = dart.privateName(src__engine, "_recomputeScrollPosition");
  const _gestureModeDidChange = dart.privateName(src__engine, "_gestureModeDidChange");
  src__engine.Scrollable = class Scrollable extends src__engine.RoleManager {
    [_recomputeScrollPosition]() {
      if (this[_domScrollPosition] != this[_effectiveNeutralScrollPosition]) {
        if (!dart.test(this.semanticsObject.owner.shouldAcceptBrowserGesture("scroll"))) {
          return;
        }
        let doScrollForward = dart.notNull(this[_domScrollPosition]) > dart.notNull(this[_effectiveNeutralScrollPosition]);
        this[_neutralizeDomScrollPosition]();
        this.semanticsObject.recomputePositionAndSize();
        let semanticsId = this.semanticsObject.id;
        if (doScrollForward) {
          if (dart.test(this.semanticsObject.isVerticalScrollContainer)) {
            ui.window.onSemanticsAction(semanticsId, ui.SemanticsAction.scrollUp, null);
          } else {
            if (!dart.test(this.semanticsObject.isHorizontalScrollContainer)) dart.assertFailed();
            ui.window.onSemanticsAction(semanticsId, ui.SemanticsAction.scrollLeft, null);
          }
        } else {
          if (dart.test(this.semanticsObject.isVerticalScrollContainer)) {
            ui.window.onSemanticsAction(semanticsId, ui.SemanticsAction.scrollDown, null);
          } else {
            if (!dart.test(this.semanticsObject.isHorizontalScrollContainer)) dart.assertFailed();
            ui.window.onSemanticsAction(semanticsId, ui.SemanticsAction.scrollRight, null);
          }
        }
      }
    }
    update() {
      if (this[_scrollListener] == null) {
        this.semanticsObject.element.style[$touchAction] = "none";
        this[_gestureModeDidChange]();
        this.semanticsObject.owner.addOneTimePostUpdateCallback(dart.fn(() => {
          this[_neutralizeDomScrollPosition]();
        }, VoidToNull()));
        this[_gestureModeListener] = dart.fn(_ => {
          this[_gestureModeDidChange]();
        }, GestureModeToNull());
        this.semanticsObject.owner.addGestureModeListener(this[_gestureModeListener]);
        this[_scrollListener] = dart.fn(_ => {
          this[_recomputeScrollPosition]();
        }, EventToNull());
        this.semanticsObject.element[$addEventListener]("scroll", this[_scrollListener]);
      }
    }
    get [_domScrollPosition]() {
      if (dart.test(this.semanticsObject.isVerticalScrollContainer)) {
        return this.semanticsObject.element[$scrollTop];
      } else {
        if (!dart.test(this.semanticsObject.isHorizontalScrollContainer)) dart.assertFailed();
        return this.semanticsObject.element[$scrollLeft];
      }
    }
    [_neutralizeDomScrollPosition]() {
      let t1, t1$;
      let _canonicalNeutralScrollPosition = 10;
      let element = this.semanticsObject.element;
      if (dart.test(this.semanticsObject.isVerticalScrollContainer)) {
        element[$scrollTop] = _canonicalNeutralScrollPosition;
        this[_effectiveNeutralScrollPosition] = element[$scrollTop];
        t1 = this.semanticsObject;
        t1.verticalContainerAdjustment = this[_effectiveNeutralScrollPosition][$toDouble]();
        t1.horizontalContainerAdjustment = 0.0;
        t1;
      } else {
        element[$scrollLeft] = _canonicalNeutralScrollPosition;
        this[_effectiveNeutralScrollPosition] = element[$scrollLeft];
        t1$ = this.semanticsObject;
        t1$.verticalContainerAdjustment = 0.0;
        t1$.horizontalContainerAdjustment = this[_effectiveNeutralScrollPosition][$toDouble]();
        t1$;
      }
    }
    [_gestureModeDidChange]() {
      let element = this.semanticsObject.element;
      switch (this.semanticsObject.owner.gestureMode) {
        case src__engine.GestureMode.browserGestures:
        {
          if (dart.test(this.semanticsObject.isVerticalScrollContainer)) {
            element.style[$overflowY] = "scroll";
          } else {
            if (!dart.test(this.semanticsObject.isHorizontalScrollContainer)) dart.assertFailed();
            element.style[$overflowX] = "scroll";
          }
          break;
        }
        case src__engine.GestureMode.pointerEvents:
        {
          if (dart.test(this.semanticsObject.isVerticalScrollContainer)) {
            element.style[$overflowY] = "hidden";
          } else {
            if (!dart.test(this.semanticsObject.isHorizontalScrollContainer)) dart.assertFailed();
            element.style[$overflowX] = "hidden";
          }
          break;
        }
      }
    }
    dispose() {
      let style = this.semanticsObject.element.style;
      if (!(this[_gestureModeListener] != null)) dart.assertFailed();
      style.removeProperty("overflowY");
      style.removeProperty("overflowX");
      style.removeProperty("touch-action");
      if (this[_scrollListener] != null) {
        this.semanticsObject.element[$removeEventListener]("scroll", this[_scrollListener]);
      }
      this.semanticsObject.owner.removeGestureModeListener(this[_gestureModeListener]);
      this[_gestureModeListener] = null;
    }
  };
  (src__engine.Scrollable.new = function(semanticsObject) {
    this[_gestureModeListener] = null;
    this[_scrollListener] = null;
    this[_effectiveNeutralScrollPosition] = 0;
    src__engine.Scrollable.__proto__.new.call(this, src__engine.Role.scrollable, semanticsObject);
    ;
  }).prototype = src__engine.Scrollable.prototype;
  dart.addTypeTests(src__engine.Scrollable);
  dart.setMethodSignature(src__engine.Scrollable, () => ({
    __proto__: dart.getMethods(src__engine.Scrollable.__proto__),
    [_recomputeScrollPosition]: dart.fnType(dart.void, []),
    update: dart.fnType(dart.void, []),
    [_neutralizeDomScrollPosition]: dart.fnType(dart.void, []),
    [_gestureModeDidChange]: dart.fnType(dart.void, []),
    dispose: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(src__engine.Scrollable, () => ({
    __proto__: dart.getGetters(src__engine.Scrollable.__proto__),
    [_domScrollPosition]: core.int
  }));
  dart.setFieldSignature(src__engine.Scrollable, () => ({
    __proto__: dart.getFields(src__engine.Scrollable.__proto__),
    [_gestureModeListener]: dart.fieldType(dart.fnType(dart.void, [src__engine.GestureMode])),
    [_scrollListener]: dart.fieldType(dart.fnType(dart.dynamic, [html.Event])),
    [_effectiveNeutralScrollPosition]: dart.fieldType(core.int)
  }));
  const _nodeUpdates = dart.privateName(src__engine, "_nodeUpdates");
  src__engine.SemanticsUpdate = class SemanticsUpdate extends core.Object {
    dispose() {
    }
  };
  (src__engine.SemanticsUpdate.new = function(opts) {
    let nodeUpdates = opts && 'nodeUpdates' in opts ? opts.nodeUpdates : null;
    this[_nodeUpdates] = nodeUpdates;
    ;
  }).prototype = src__engine.SemanticsUpdate.prototype;
  dart.addTypeTests(src__engine.SemanticsUpdate);
  src__engine.SemanticsUpdate[dart.implements] = () => [ui.SemanticsUpdate];
  dart.setMethodSignature(src__engine.SemanticsUpdate, () => ({
    __proto__: dart.getMethods(src__engine.SemanticsUpdate.__proto__),
    dispose: dart.fnType(dart.void, [])
  }));
  dart.setFieldSignature(src__engine.SemanticsUpdate, () => ({
    __proto__: dart.getFields(src__engine.SemanticsUpdate.__proto__),
    [_nodeUpdates]: dart.finalFieldType(core.List$(src__engine.SemanticsNodeUpdate))
  }));
  src__engine.SemanticsNodeUpdate = class SemanticsNodeUpdate extends core.Object {
    get id() {
      return this[id$];
    }
    set id(value) {
      super.id = value;
    }
    get flags() {
      return this[flags$];
    }
    set flags(value) {
      super.flags = value;
    }
    get actions() {
      return this[actions$];
    }
    set actions(value) {
      super.actions = value;
    }
    get textSelectionBase() {
      return this[textSelectionBase$];
    }
    set textSelectionBase(value) {
      super.textSelectionBase = value;
    }
    get textSelectionExtent() {
      return this[textSelectionExtent$];
    }
    set textSelectionExtent(value) {
      super.textSelectionExtent = value;
    }
    get platformViewId() {
      return this[platformViewId$];
    }
    set platformViewId(value) {
      super.platformViewId = value;
    }
    get scrollChildren() {
      return this[scrollChildren$];
    }
    set scrollChildren(value) {
      super.scrollChildren = value;
    }
    get scrollIndex() {
      return this[scrollIndex$];
    }
    set scrollIndex(value) {
      super.scrollIndex = value;
    }
    get scrollPosition() {
      return this[scrollPosition$];
    }
    set scrollPosition(value) {
      super.scrollPosition = value;
    }
    get scrollExtentMax() {
      return this[scrollExtentMax$];
    }
    set scrollExtentMax(value) {
      super.scrollExtentMax = value;
    }
    get scrollExtentMin() {
      return this[scrollExtentMin$];
    }
    set scrollExtentMin(value) {
      super.scrollExtentMin = value;
    }
    get rect() {
      return this[rect$2];
    }
    set rect(value) {
      super.rect = value;
    }
    get label() {
      return this[label$];
    }
    set label(value) {
      super.label = value;
    }
    get hint() {
      return this[hint$];
    }
    set hint(value) {
      super.hint = value;
    }
    get value() {
      return this[value$];
    }
    set value(value) {
      super.value = value;
    }
    get increasedValue() {
      return this[increasedValue$];
    }
    set increasedValue(value) {
      super.increasedValue = value;
    }
    get decreasedValue() {
      return this[decreasedValue$];
    }
    set decreasedValue(value) {
      super.decreasedValue = value;
    }
    get textDirection() {
      return this[textDirection$];
    }
    set textDirection(value) {
      super.textDirection = value;
    }
    get transform() {
      return this[transform$];
    }
    set transform(value) {
      super.transform = value;
    }
    get childrenInTraversalOrder() {
      return this[childrenInTraversalOrder$];
    }
    set childrenInTraversalOrder(value) {
      super.childrenInTraversalOrder = value;
    }
    get childrenInHitTestOrder() {
      return this[childrenInHitTestOrder$];
    }
    set childrenInHitTestOrder(value) {
      super.childrenInHitTestOrder = value;
    }
    get additionalActions() {
      return this[additionalActions$];
    }
    set additionalActions(value) {
      super.additionalActions = value;
    }
    get elevation() {
      return this[elevation$0];
    }
    set elevation(value) {
      super.elevation = value;
    }
    get thickness() {
      return this[thickness$];
    }
    set thickness(value) {
      super.thickness = value;
    }
  };
  (src__engine.SemanticsNodeUpdate.new = function(opts) {
    let id = opts && 'id' in opts ? opts.id : null;
    let flags = opts && 'flags' in opts ? opts.flags : null;
    let actions = opts && 'actions' in opts ? opts.actions : null;
    let textSelectionBase = opts && 'textSelectionBase' in opts ? opts.textSelectionBase : null;
    let textSelectionExtent = opts && 'textSelectionExtent' in opts ? opts.textSelectionExtent : null;
    let platformViewId = opts && 'platformViewId' in opts ? opts.platformViewId : null;
    let scrollChildren = opts && 'scrollChildren' in opts ? opts.scrollChildren : null;
    let scrollIndex = opts && 'scrollIndex' in opts ? opts.scrollIndex : null;
    let scrollPosition = opts && 'scrollPosition' in opts ? opts.scrollPosition : null;
    let scrollExtentMax = opts && 'scrollExtentMax' in opts ? opts.scrollExtentMax : null;
    let scrollExtentMin = opts && 'scrollExtentMin' in opts ? opts.scrollExtentMin : null;
    let rect = opts && 'rect' in opts ? opts.rect : null;
    let label = opts && 'label' in opts ? opts.label : null;
    let hint = opts && 'hint' in opts ? opts.hint : null;
    let value = opts && 'value' in opts ? opts.value : null;
    let increasedValue = opts && 'increasedValue' in opts ? opts.increasedValue : null;
    let decreasedValue = opts && 'decreasedValue' in opts ? opts.decreasedValue : null;
    let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
    let transform = opts && 'transform' in opts ? opts.transform : null;
    let elevation = opts && 'elevation' in opts ? opts.elevation : null;
    let thickness = opts && 'thickness' in opts ? opts.thickness : null;
    let childrenInTraversalOrder = opts && 'childrenInTraversalOrder' in opts ? opts.childrenInTraversalOrder : null;
    let childrenInHitTestOrder = opts && 'childrenInHitTestOrder' in opts ? opts.childrenInHitTestOrder : null;
    let additionalActions = opts && 'additionalActions' in opts ? opts.additionalActions : null;
    this[id$] = id;
    this[flags$] = flags;
    this[actions$] = actions;
    this[textSelectionBase$] = textSelectionBase;
    this[textSelectionExtent$] = textSelectionExtent;
    this[platformViewId$] = platformViewId;
    this[scrollChildren$] = scrollChildren;
    this[scrollIndex$] = scrollIndex;
    this[scrollPosition$] = scrollPosition;
    this[scrollExtentMax$] = scrollExtentMax;
    this[scrollExtentMin$] = scrollExtentMin;
    this[rect$2] = rect;
    this[label$] = label;
    this[hint$] = hint;
    this[value$] = value;
    this[increasedValue$] = increasedValue;
    this[decreasedValue$] = decreasedValue;
    this[textDirection$] = textDirection;
    this[transform$] = transform;
    this[elevation$0] = elevation;
    this[thickness$] = thickness;
    this[childrenInTraversalOrder$] = childrenInTraversalOrder;
    this[childrenInHitTestOrder$] = childrenInHitTestOrder;
    this[additionalActions$] = additionalActions;
    ;
  }).prototype = src__engine.SemanticsNodeUpdate.prototype;
  dart.addTypeTests(src__engine.SemanticsNodeUpdate);
  const id$ = Symbol("SemanticsNodeUpdate.id");
  const flags$ = Symbol("SemanticsNodeUpdate.flags");
  const actions$ = Symbol("SemanticsNodeUpdate.actions");
  const textSelectionBase$ = Symbol("SemanticsNodeUpdate.textSelectionBase");
  const textSelectionExtent$ = Symbol("SemanticsNodeUpdate.textSelectionExtent");
  const platformViewId$ = Symbol("SemanticsNodeUpdate.platformViewId");
  const scrollChildren$ = Symbol("SemanticsNodeUpdate.scrollChildren");
  const scrollIndex$ = Symbol("SemanticsNodeUpdate.scrollIndex");
  const scrollPosition$ = Symbol("SemanticsNodeUpdate.scrollPosition");
  const scrollExtentMax$ = Symbol("SemanticsNodeUpdate.scrollExtentMax");
  const scrollExtentMin$ = Symbol("SemanticsNodeUpdate.scrollExtentMin");
  const rect$2 = Symbol("SemanticsNodeUpdate.rect");
  const label$ = Symbol("SemanticsNodeUpdate.label");
  const hint$ = Symbol("SemanticsNodeUpdate.hint");
  const value$ = Symbol("SemanticsNodeUpdate.value");
  const increasedValue$ = Symbol("SemanticsNodeUpdate.increasedValue");
  const decreasedValue$ = Symbol("SemanticsNodeUpdate.decreasedValue");
  const textDirection$ = Symbol("SemanticsNodeUpdate.textDirection");
  const transform$ = Symbol("SemanticsNodeUpdate.transform");
  const childrenInTraversalOrder$ = Symbol("SemanticsNodeUpdate.childrenInTraversalOrder");
  const childrenInHitTestOrder$ = Symbol("SemanticsNodeUpdate.childrenInHitTestOrder");
  const additionalActions$ = Symbol("SemanticsNodeUpdate.additionalActions");
  const elevation$0 = Symbol("SemanticsNodeUpdate.elevation");
  const thickness$ = Symbol("SemanticsNodeUpdate.thickness");
  dart.setFieldSignature(src__engine.SemanticsNodeUpdate, () => ({
    __proto__: dart.getFields(src__engine.SemanticsNodeUpdate.__proto__),
    id: dart.finalFieldType(core.int),
    flags: dart.finalFieldType(core.int),
    actions: dart.finalFieldType(core.int),
    textSelectionBase: dart.finalFieldType(core.int),
    textSelectionExtent: dart.finalFieldType(core.int),
    platformViewId: dart.finalFieldType(core.int),
    scrollChildren: dart.finalFieldType(core.int),
    scrollIndex: dart.finalFieldType(core.int),
    scrollPosition: dart.finalFieldType(core.double),
    scrollExtentMax: dart.finalFieldType(core.double),
    scrollExtentMin: dart.finalFieldType(core.double),
    rect: dart.finalFieldType(ui.Rect),
    label: dart.finalFieldType(core.String),
    hint: dart.finalFieldType(core.String),
    value: dart.finalFieldType(core.String),
    increasedValue: dart.finalFieldType(core.String),
    decreasedValue: dart.finalFieldType(core.String),
    textDirection: dart.finalFieldType(ui.TextDirection),
    transform: dart.finalFieldType(typed_data.Float64List),
    childrenInTraversalOrder: dart.finalFieldType(typed_data.Int32List),
    childrenInHitTestOrder: dart.finalFieldType(typed_data.Int32List),
    additionalActions: dart.finalFieldType(typed_data.Int32List),
    elevation: dart.finalFieldType(core.double),
    thickness: dart.finalFieldType(core.double)
  }));
  src__engine.Role = class Role extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (src__engine.Role.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = src__engine.Role.prototype;
  dart.addTypeTests(src__engine.Role);
  dart.setFieldSignature(src__engine.Role, () => ({
    __proto__: dart.getFields(src__engine.Role.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(src__engine.Role, ['toString']);
  src__engine.Role.incrementable = dart.const(new src__engine.Role.new(0, "Role.incrementable"));
  src__engine.Role.scrollable = dart.const(new src__engine.Role.new(1, "Role.scrollable"));
  src__engine.Role.labelAndValue = dart.const(new src__engine.Role.new(2, "Role.labelAndValue"));
  src__engine.Role.tappable = dart.const(new src__engine.Role.new(3, "Role.tappable"));
  src__engine.Role.textField = dart.const(new src__engine.Role.new(4, "Role.textField"));
  src__engine.Role.checkable = dart.const(new src__engine.Role.new(5, "Role.checkable"));
  src__engine.Role.values = dart.constList([src__engine.Role.incrementable, src__engine.Role.scrollable, src__engine.Role.labelAndValue, src__engine.Role.tappable, src__engine.Role.textField, src__engine.Role.checkable], src__engine.Role);
  const _flags = dart.privateName(src__engine, "_flags");
  const _actions = dart.privateName(src__engine, "_actions");
  const _textSelectionBase = dart.privateName(src__engine, "_textSelectionBase");
  const _textSelectionExtent = dart.privateName(src__engine, "_textSelectionExtent");
  const _scrollChildren = dart.privateName(src__engine, "_scrollChildren");
  const _scrollIndex = dart.privateName(src__engine, "_scrollIndex");
  const _scrollPosition = dart.privateName(src__engine, "_scrollPosition");
  const _scrollExtentMax = dart.privateName(src__engine, "_scrollExtentMax");
  const _scrollExtentMin = dart.privateName(src__engine, "_scrollExtentMin");
  const _rect = dart.privateName(src__engine, "_rect");
  const _label = dart.privateName(src__engine, "_label");
  const _hint = dart.privateName(src__engine, "_hint");
  const _value = dart.privateName(src__engine, "_value");
  const _increasedValue = dart.privateName(src__engine, "_increasedValue");
  const _decreasedValue = dart.privateName(src__engine, "_decreasedValue");
  const _textDirection = dart.privateName(src__engine, "_textDirection");
  const _childrenInTraversalOrder = dart.privateName(src__engine, "_childrenInTraversalOrder");
  const _childrenInHitTestOrder = dart.privateName(src__engine, "_childrenInHitTestOrder");
  const _additionalActions = dart.privateName(src__engine, "_additionalActions");
  const _dirtyFields = dart.privateName(src__engine, "_dirtyFields");
  const _childContainerElement = dart.privateName(src__engine, "_childContainerElement");
  const _parent = dart.privateName(src__engine, "_parent");
  const _roleManagers = dart.privateName(src__engine, "_roleManagers");
  const _previousChildrenInTraversalOrder = dart.privateName(src__engine, "_previousChildrenInTraversalOrder");
  const _isDirty = dart.privateName(src__engine, "_isDirty");
  const _markFlagsDirty = dart.privateName(src__engine, "_markFlagsDirty");
  const _markActionsDirty = dart.privateName(src__engine, "_markActionsDirty");
  const _markTextSelectionBaseDirty = dart.privateName(src__engine, "_markTextSelectionBaseDirty");
  const _markTextSelectionExtentDirty = dart.privateName(src__engine, "_markTextSelectionExtentDirty");
  const _markScrollChildrenDirty = dart.privateName(src__engine, "_markScrollChildrenDirty");
  const _markScrollIndexDirty = dart.privateName(src__engine, "_markScrollIndexDirty");
  const _markScrollPositionDirty = dart.privateName(src__engine, "_markScrollPositionDirty");
  const _markScrollExtentMaxDirty = dart.privateName(src__engine, "_markScrollExtentMaxDirty");
  const _markScrollExtentMinDirty = dart.privateName(src__engine, "_markScrollExtentMinDirty");
  const _markRectDirty = dart.privateName(src__engine, "_markRectDirty");
  const _markLabelDirty = dart.privateName(src__engine, "_markLabelDirty");
  const _markHintDirty = dart.privateName(src__engine, "_markHintDirty");
  const _markValueDirty = dart.privateName(src__engine, "_markValueDirty");
  const _markIncreasedValueDirty = dart.privateName(src__engine, "_markIncreasedValueDirty");
  const _markDecreasedValueDirty = dart.privateName(src__engine, "_markDecreasedValueDirty");
  const _markTextDirectionDirty = dart.privateName(src__engine, "_markTextDirectionDirty");
  const _markTransformDirty = dart.privateName(src__engine, "_markTransformDirty");
  const _markChildrenInTraversalOrderDirty = dart.privateName(src__engine, "_markChildrenInTraversalOrderDirty");
  const _markChildrenInHitTestOrderDirty = dart.privateName(src__engine, "_markChildrenInHitTestOrderDirty");
  const _markAdditionalActionsDirty = dart.privateName(src__engine, "_markAdditionalActionsDirty");
  const _updateRoles = dart.privateName(src__engine, "_updateRoles");
  const _updateChildrenInTraversalOrder = dart.privateName(src__engine, "_updateChildrenInTraversalOrder");
  const _updateRole = dart.privateName(src__engine, "_updateRole");
  const _detachObject = dart.privateName(src__engine, "_detachObject");
  const _attachObject = dart.privateName(src__engine, "_attachObject");
  src__engine.SemanticsObject = class SemanticsObject extends core.Object {
    get id() {
      return this[id$0];
    }
    set id(value) {
      super.id = value;
    }
    get owner() {
      return this[owner$];
    }
    set owner(value) {
      super.owner = value;
    }
    get element() {
      return this[element];
    }
    set element(value) {
      super.element = value;
    }
    get verticalContainerAdjustment() {
      return this[verticalContainerAdjustment];
    }
    set verticalContainerAdjustment(value) {
      this[verticalContainerAdjustment] = value;
    }
    get horizontalContainerAdjustment() {
      return this[horizontalContainerAdjustment];
    }
    set horizontalContainerAdjustment(value) {
      this[horizontalContainerAdjustment] = value;
    }
    get flags() {
      return this[_flags];
    }
    get isFlagsDirty() {
      return this[_isDirty](src__engine.SemanticsObject._flagsIndex);
    }
    [_markFlagsDirty]() {
      this[_dirtyFields] = (dart.notNull(this[_dirtyFields]) | dart.notNull(src__engine.SemanticsObject._flagsIndex)) >>> 0;
    }
    get actions() {
      return this[_actions];
    }
    get isActionsDirty() {
      return this[_isDirty](src__engine.SemanticsObject._actionsIndex);
    }
    [_markActionsDirty]() {
      this[_dirtyFields] = (dart.notNull(this[_dirtyFields]) | dart.notNull(src__engine.SemanticsObject._actionsIndex)) >>> 0;
    }
    get textSelectionBase() {
      return this[_textSelectionBase];
    }
    get isTextSelectionBaseDirty() {
      return this[_isDirty](src__engine.SemanticsObject._textSelectionBaseIndex);
    }
    [_markTextSelectionBaseDirty]() {
      this[_dirtyFields] = (dart.notNull(this[_dirtyFields]) | dart.notNull(src__engine.SemanticsObject._textSelectionBaseIndex)) >>> 0;
    }
    get textSelectionExtent() {
      return this[_textSelectionExtent];
    }
    get isTextSelectionExtentDirty() {
      return this[_isDirty](src__engine.SemanticsObject._textSelectionExtentIndex);
    }
    [_markTextSelectionExtentDirty]() {
      this[_dirtyFields] = (dart.notNull(this[_dirtyFields]) | dart.notNull(src__engine.SemanticsObject._textSelectionExtentIndex)) >>> 0;
    }
    get scrollChildren() {
      return this[_scrollChildren];
    }
    get isScrollChildrenDirty() {
      return this[_isDirty](src__engine.SemanticsObject._scrollChildrenIndex);
    }
    [_markScrollChildrenDirty]() {
      this[_dirtyFields] = (dart.notNull(this[_dirtyFields]) | dart.notNull(src__engine.SemanticsObject._scrollChildrenIndex)) >>> 0;
    }
    get scrollIndex() {
      return this[_scrollIndex];
    }
    get isScrollIndexDirty() {
      return this[_isDirty](src__engine.SemanticsObject._scrollIndexIndex);
    }
    [_markScrollIndexDirty]() {
      this[_dirtyFields] = (dart.notNull(this[_dirtyFields]) | dart.notNull(src__engine.SemanticsObject._scrollIndexIndex)) >>> 0;
    }
    get scrollPosition() {
      return this[_scrollPosition];
    }
    get isScrollPositionDirty() {
      return this[_isDirty](src__engine.SemanticsObject._scrollPositionIndex);
    }
    [_markScrollPositionDirty]() {
      this[_dirtyFields] = (dart.notNull(this[_dirtyFields]) | dart.notNull(src__engine.SemanticsObject._scrollPositionIndex)) >>> 0;
    }
    get scrollExtentMax() {
      return this[_scrollExtentMax];
    }
    get isScrollExtentMaxDirty() {
      return this[_isDirty](src__engine.SemanticsObject._scrollExtentMaxIndex);
    }
    [_markScrollExtentMaxDirty]() {
      this[_dirtyFields] = (dart.notNull(this[_dirtyFields]) | dart.notNull(src__engine.SemanticsObject._scrollExtentMaxIndex)) >>> 0;
    }
    get scrollExtentMin() {
      return this[_scrollExtentMin];
    }
    get isScrollExtentMinDirty() {
      return this[_isDirty](src__engine.SemanticsObject._scrollExtentMinIndex);
    }
    [_markScrollExtentMinDirty]() {
      this[_dirtyFields] = (dart.notNull(this[_dirtyFields]) | dart.notNull(src__engine.SemanticsObject._scrollExtentMinIndex)) >>> 0;
    }
    get rect() {
      return this[_rect];
    }
    get isRectDirty() {
      return this[_isDirty](src__engine.SemanticsObject._rectIndex);
    }
    [_markRectDirty]() {
      this[_dirtyFields] = (dart.notNull(this[_dirtyFields]) | dart.notNull(src__engine.SemanticsObject._rectIndex)) >>> 0;
    }
    get label() {
      return this[_label];
    }
    get hasLabel() {
      return this[_label] != null && this[_label][$isNotEmpty];
    }
    get isLabelDirty() {
      return this[_isDirty](src__engine.SemanticsObject._labelIndex);
    }
    [_markLabelDirty]() {
      this[_dirtyFields] = (dart.notNull(this[_dirtyFields]) | dart.notNull(src__engine.SemanticsObject._labelIndex)) >>> 0;
    }
    get hint() {
      return this[_hint];
    }
    get isHintDirty() {
      return this[_isDirty](src__engine.SemanticsObject._hintIndex);
    }
    [_markHintDirty]() {
      this[_dirtyFields] = (dart.notNull(this[_dirtyFields]) | dart.notNull(src__engine.SemanticsObject._hintIndex)) >>> 0;
    }
    get value() {
      return this[_value];
    }
    get hasValue() {
      return this[_value] != null && this[_value][$isNotEmpty];
    }
    get isValueDirty() {
      return this[_isDirty](src__engine.SemanticsObject._valueIndex);
    }
    [_markValueDirty]() {
      this[_dirtyFields] = (dart.notNull(this[_dirtyFields]) | dart.notNull(src__engine.SemanticsObject._valueIndex)) >>> 0;
    }
    get increasedValue() {
      return this[_increasedValue];
    }
    get isIncreasedValueDirty() {
      return this[_isDirty](src__engine.SemanticsObject._increasedValueIndex);
    }
    [_markIncreasedValueDirty]() {
      this[_dirtyFields] = (dart.notNull(this[_dirtyFields]) | dart.notNull(src__engine.SemanticsObject._increasedValueIndex)) >>> 0;
    }
    get decreasedValue() {
      return this[_decreasedValue];
    }
    get isDecreasedValueDirty() {
      return this[_isDirty](src__engine.SemanticsObject._decreasedValueIndex);
    }
    [_markDecreasedValueDirty]() {
      this[_dirtyFields] = (dart.notNull(this[_dirtyFields]) | dart.notNull(src__engine.SemanticsObject._decreasedValueIndex)) >>> 0;
    }
    get textDirection() {
      return this[_textDirection];
    }
    get isTextDirectionDirty() {
      return this[_isDirty](src__engine.SemanticsObject._textDirectionIndex);
    }
    [_markTextDirectionDirty]() {
      this[_dirtyFields] = (dart.notNull(this[_dirtyFields]) | dart.notNull(src__engine.SemanticsObject._textDirectionIndex)) >>> 0;
    }
    get transform() {
      return this[_transform$];
    }
    get isTransformDirty() {
      return this[_isDirty](src__engine.SemanticsObject._transformIndex);
    }
    [_markTransformDirty]() {
      this[_dirtyFields] = (dart.notNull(this[_dirtyFields]) | dart.notNull(src__engine.SemanticsObject._transformIndex)) >>> 0;
    }
    get childrenInTraversalOrder() {
      return this[_childrenInTraversalOrder];
    }
    get isChildrenInTraversalOrderDirty() {
      return this[_isDirty](src__engine.SemanticsObject._childrenInTraversalOrderIndex);
    }
    [_markChildrenInTraversalOrderDirty]() {
      this[_dirtyFields] = (dart.notNull(this[_dirtyFields]) | dart.notNull(src__engine.SemanticsObject._childrenInTraversalOrderIndex)) >>> 0;
    }
    get childrenInHitTestOrder() {
      return this[_childrenInHitTestOrder];
    }
    get isChildrenInHitTestOrderDirty() {
      return this[_isDirty](src__engine.SemanticsObject._childrenInHitTestOrderIndex);
    }
    [_markChildrenInHitTestOrderDirty]() {
      this[_dirtyFields] = (dart.notNull(this[_dirtyFields]) | dart.notNull(src__engine.SemanticsObject._childrenInHitTestOrderIndex)) >>> 0;
    }
    get additionalActions() {
      return this[_additionalActions];
    }
    get isAdditionalActionsDirty() {
      return this[_isDirty](src__engine.SemanticsObject._additionalActionsIndex);
    }
    [_markAdditionalActionsDirty]() {
      this[_dirtyFields] = (dart.notNull(this[_dirtyFields]) | dart.notNull(src__engine.SemanticsObject._additionalActionsIndex)) >>> 0;
    }
    [_isDirty](fieldIndex) {
      return (dart.notNull(this[_dirtyFields]) & dart.notNull(fieldIndex)) !== 0;
    }
    getOrCreateChildContainer() {
      if (this[_childContainerElement] == null) {
        this[_childContainerElement] = html.Element.tag("flt-semantics-container");
        this[_childContainerElement].style[$position] = "absolute";
        this.element[$append](this[_childContainerElement]);
      }
      return this[_childContainerElement];
    }
    hasFlag(flag) {
      return (dart.notNull(this[_flags]) & dart.notNull(flag.index)) !== 0;
    }
    hasAction(action) {
      return (dart.notNull(this[_actions]) & dart.notNull(action.index)) !== 0;
    }
    get isVerticalScrollContainer() {
      return dart.test(this.hasAction(ui.SemanticsAction.scrollDown)) || dart.test(this.hasAction(ui.SemanticsAction.scrollUp));
    }
    get isHorizontalScrollContainer() {
      return dart.test(this.hasAction(ui.SemanticsAction.scrollLeft)) || dart.test(this.hasAction(ui.SemanticsAction.scrollRight));
    }
    get hasChildren() {
      return this[_childrenInTraversalOrder] != null && dart.test(this[_childrenInTraversalOrder][$isNotEmpty]);
    }
    get isTextField() {
      return this.hasFlag(ui.SemanticsFlag.isTextField);
    }
    updateWith(update) {
      if (!(update.flags != null)) dart.assertFailed();
      if (this[_flags] != update.flags) {
        this[_flags] = update.flags;
        this[_markFlagsDirty]();
      }
      if (this[_value] != update.value) {
        this[_value] = update.value;
        this[_markValueDirty]();
      }
      if (this[_label] != update.label) {
        this[_label] = update.label;
        this[_markLabelDirty]();
      }
      if (!dart.equals(this[_rect], update.rect)) {
        this[_rect] = update.rect;
        this[_markRectDirty]();
      }
      if (!dart.equals(this[_transform$], update.transform)) {
        this[_transform$] = update.transform;
        this[_markTransformDirty]();
      }
      if (this[_scrollPosition] != update.scrollPosition) {
        this[_scrollPosition] = update.scrollPosition;
        this[_markScrollPositionDirty]();
      }
      if (this[_actions] != update.actions) {
        this[_actions] = update.actions;
        this[_markActionsDirty]();
      }
      if (this[_textSelectionBase] != update.textSelectionBase) {
        this[_textSelectionBase] = update.textSelectionBase;
        this[_markTextSelectionBaseDirty]();
      }
      if (this[_textSelectionExtent] != update.textSelectionExtent) {
        this[_textSelectionExtent] = update.textSelectionExtent;
        this[_markTextSelectionExtentDirty]();
      }
      if (this[_scrollChildren] != update.scrollChildren) {
        this[_scrollChildren] = update.scrollChildren;
        this[_markScrollChildrenDirty]();
      }
      if (this[_scrollIndex] != update.scrollIndex) {
        this[_scrollIndex] = update.scrollIndex;
        this[_markScrollIndexDirty]();
      }
      if (this[_scrollExtentMax] != update.scrollExtentMax) {
        this[_scrollExtentMax] = update.scrollExtentMax;
        this[_markScrollExtentMaxDirty]();
      }
      if (this[_scrollExtentMin] != update.scrollExtentMin) {
        this[_scrollExtentMin] = update.scrollExtentMin;
        this[_markScrollExtentMinDirty]();
      }
      if (this[_hint] != update.hint) {
        this[_hint] = update.hint;
        this[_markHintDirty]();
      }
      if (this[_increasedValue] != update.increasedValue) {
        this[_increasedValue] = update.increasedValue;
        this[_markIncreasedValueDirty]();
      }
      if (this[_decreasedValue] != update.decreasedValue) {
        this[_decreasedValue] = update.decreasedValue;
        this[_markDecreasedValueDirty]();
      }
      if (!dart.equals(this[_textDirection], update.textDirection)) {
        this[_textDirection] = update.textDirection;
        this[_markTextDirectionDirty]();
      }
      if (!dart.equals(this[_childrenInHitTestOrder], update.childrenInHitTestOrder)) {
        this[_childrenInHitTestOrder] = update.childrenInHitTestOrder;
        this[_markChildrenInHitTestOrderDirty]();
      }
      if (!dart.equals(this[_childrenInTraversalOrder], update.childrenInTraversalOrder)) {
        this[_childrenInTraversalOrder] = update.childrenInTraversalOrder;
        this[_markChildrenInTraversalOrderDirty]();
      }
      if (!dart.equals(this[_additionalActions], update.additionalActions)) {
        this[_additionalActions] = update.additionalActions;
        this[_markAdditionalActionsDirty]();
      }
      this[_updateRoles]();
      this[_updateChildrenInTraversalOrder]();
      if (dart.test(this.isRectDirty) || dart.test(this.isTransformDirty) || dart.test(this.isScrollPositionDirty)) {
        this.recomputePositionAndSize();
      }
      if (!(this[_childContainerElement] == null || dart.test(this.hasChildren))) dart.assertFailed();
      this[_dirtyFields] = 0;
    }
    setAriaRole(ariaRoleName, condition) {
      if (dart.test(condition)) {
        this.element[$setAttribute]("role", ariaRoleName);
      } else if (this.element[$getAttribute]("role") == ariaRoleName) {
        this.element[$attributes][$remove]("role");
      }
    }
    [_updateRoles]() {
      this[_updateRole](src__engine.Role.labelAndValue, dart.test(this.hasLabel) || dart.test(this.hasValue));
      this[_updateRole](src__engine.Role.textField, this.isTextField);
      this[_updateRole](src__engine.Role.tappable, dart.test(this.hasAction(ui.SemanticsAction.tap)) || dart.test(this.hasFlag(ui.SemanticsFlag.isButton)));
      this[_updateRole](src__engine.Role.incrementable, this.isIncrementable);
      this[_updateRole](src__engine.Role.scrollable, dart.test(this.isVerticalScrollContainer) || dart.test(this.isHorizontalScrollContainer));
      this[_updateRole](src__engine.Role.checkable, this.hasFlag(ui.SemanticsFlag.hasCheckedState));
    }
    [_updateRole](role, enabled) {
      let manager = this[_roleManagers][$_get](role);
      if (dart.test(enabled)) {
        if (manager == null) {
          manager = src__engine._roleFactories[$_get](role)(this);
          this[_roleManagers][$_set](role, manager);
        }
        manager.update();
      } else if (manager != null) {
        manager.dispose();
        this[_roleManagers][$remove](role);
      }
    }
    get isIncrementable() {
      return dart.test(this.hasAction(ui.SemanticsAction.increase)) || dart.test(this.hasAction(ui.SemanticsAction.decrease));
    }
    recomputePositionAndSize() {
      let t1, t1$, t1$0, t1$1, t1$2, t1$3, t1$4, t1$5;
      t1 = this.element.style;
      t1[$width] = dart.str(this[_rect].width) + "px";
      t1[$height] = dart.str(this[_rect].height) + "px";
      t1;
      let containerElement = dart.test(this.hasChildren) ? this.getOrCreateChildContainer() : null;
      let hasZeroRectOffset = this[_rect].top === 0.0 && this[_rect].left === 0.0;
      let hasIdentityTransform = this[_transform$] == null || dart.test(src__engine.isIdentityFloat64ListTransform(this[_transform$]));
      if (hasZeroRectOffset && hasIdentityTransform && this.verticalContainerAdjustment === 0.0 && this.horizontalContainerAdjustment === 0.0) {
        t1$ = this.element.style;
        t1$.removeProperty("transform-origin");
        t1$.removeProperty("transform");
        t1$;
        if (containerElement != null) {
          t1$0 = containerElement.style;
          t1$0.removeProperty("transform-origin");
          t1$0.removeProperty("transform");
          t1$0;
        }
        return;
      }
      let effectiveTransform = null;
      let effectiveTransformIsIdentity = true;
      if (!hasZeroRectOffset) {
        if (this[_transform$] == null) {
          let left = this[_rect].left;
          let top = this[_rect].top;
          effectiveTransform = src__engine.Matrix4.translationValues(left, top, 0.0);
          effectiveTransformIsIdentity = left === 0.0 && top === 0.0;
        } else {
          effectiveTransform = (t1$1 = new src__engine.Matrix4.fromFloat64List(this[_transform$]).clone(), t1$1.translate(this[_rect].left, this[_rect].top, 0.0), t1$1);
          effectiveTransformIsIdentity = effectiveTransform.isIdentity();
        }
      } else if (!hasIdentityTransform) {
        effectiveTransform = new src__engine.Matrix4.fromFloat64List(this[_transform$]);
        effectiveTransformIsIdentity = false;
      }
      if (!dart.test(effectiveTransformIsIdentity)) {
        t1$2 = this.element.style;
        t1$2[$transformOrigin] = "0 0 0";
        t1$2[$transform] = src__engine.matrix4ToCssTransform(effectiveTransform);
        t1$2;
      } else {
        t1$3 = this.element.style;
        t1$3.removeProperty("transform-origin");
        t1$3.removeProperty("transform");
        t1$3;
      }
      if (containerElement != null) {
        if (!hasZeroRectOffset || this.verticalContainerAdjustment !== 0.0 || this.horizontalContainerAdjustment !== 0.0) {
          let translateX = -dart.notNull(this[_rect].left) + dart.notNull(this.horizontalContainerAdjustment);
          let translateY = -dart.notNull(this[_rect].top) + dart.notNull(this.verticalContainerAdjustment);
          t1$4 = containerElement.style;
          t1$4[$transformOrigin] = "0 0 0";
          t1$4[$transform] = "translate(" + dart.str(translateX) + "px, " + dart.str(translateY) + "px)";
          t1$4;
        } else {
          t1$5 = containerElement.style;
          t1$5.removeProperty("transform-origin");
          t1$5.removeProperty("transform");
          t1$5;
        }
      }
    }
    [_updateChildrenInTraversalOrder]() {
      if (this[_childrenInTraversalOrder] == null || dart.test(this[_childrenInTraversalOrder][$isEmpty])) {
        if (this[_previousChildrenInTraversalOrder] == null || dart.test(this[_previousChildrenInTraversalOrder][$isEmpty])) {
          if (!(this[_childContainerElement] == null)) dart.assertFailed();
          this[_previousChildrenInTraversalOrder] = this[_childrenInTraversalOrder];
          return;
        }
        if (!(this[_childContainerElement] != null)) dart.assertFailed();
        for (let childId of this[_previousChildrenInTraversalOrder]) {
          this.owner[_detachObject](childId);
        }
        this[_previousChildrenInTraversalOrder] = null;
        this[_childContainerElement][$remove]();
        this[_childContainerElement] = null;
        this[_previousChildrenInTraversalOrder] = this[_childrenInTraversalOrder];
        return;
      }
      let containerElement = this.getOrCreateChildContainer();
      if (this[_previousChildrenInTraversalOrder] == null || dart.test(this[_previousChildrenInTraversalOrder][$isEmpty])) {
        this[_previousChildrenInTraversalOrder] = this[_childrenInTraversalOrder];
        for (let id of this[_previousChildrenInTraversalOrder]) {
          let child = this.owner.getOrCreateObject(id);
          containerElement[$append](child.element);
          this.owner[_attachObject]({parent: this, child: child});
        }
        this[_previousChildrenInTraversalOrder] = this[_childrenInTraversalOrder];
        return;
      }
      let intersectionIndicesNew = JSArrayOfint().of([]);
      let intersectionIndicesOld = JSArrayOfint().of([]);
      let newIndex = 0;
      let minLength = math.min(core.int, this[_previousChildrenInTraversalOrder][$length], this[_childrenInTraversalOrder][$length]);
      while (newIndex < minLength && this[_previousChildrenInTraversalOrder][$_get](newIndex) == this[_childrenInTraversalOrder][$_get](newIndex)) {
        intersectionIndicesNew[$add](newIndex);
        intersectionIndicesOld[$add](newIndex);
        newIndex = newIndex + 1;
      }
      if (this[_previousChildrenInTraversalOrder][$length] == this[_childrenInTraversalOrder][$length] && newIndex === this[_childrenInTraversalOrder][$length]) {
        return;
      }
      while (newIndex < dart.notNull(this[_childrenInTraversalOrder][$length])) {
        for (let oldIndex = 0; oldIndex < dart.notNull(this[_previousChildrenInTraversalOrder][$length]); oldIndex = oldIndex + 1) {
          if (this[_previousChildrenInTraversalOrder][$_get](oldIndex) == this[_childrenInTraversalOrder][$_get](newIndex)) {
            intersectionIndicesNew[$add](newIndex);
            intersectionIndicesOld[$add](oldIndex);
            break;
          }
        }
        newIndex = newIndex + 1;
      }
      let longestSequence = src__engine.longestIncreasingSubsequence(intersectionIndicesOld);
      let stationaryIds = JSArrayOfint().of([]);
      for (let i = 0; i < dart.notNull(longestSequence[$length]); i = i + 1) {
        stationaryIds[$add](this[_previousChildrenInTraversalOrder][$_get](intersectionIndicesOld[$_get](longestSequence[$_get](i))));
      }
      for (let i = 0; i < dart.notNull(this[_previousChildrenInTraversalOrder][$length]); i = i + 1) {
        if (!dart.test(intersectionIndicesOld[$contains](i))) {
          let childId = this[_previousChildrenInTraversalOrder][$_get](i);
          this.owner[_detachObject](childId);
        }
      }
      let refNode = null;
      for (let i = dart.notNull(this[_childrenInTraversalOrder][$length]) - 1; i >= 0; i = i - 1) {
        let childId = this[_childrenInTraversalOrder][$_get](i);
        let child = this.owner.getOrCreateObject(childId);
        if (!dart.test(stationaryIds[$contains](childId))) {
          if (refNode == null) {
            containerElement[$append](child.element);
          } else {
            containerElement.insertBefore(child.element, refNode);
          }
          this.owner[_attachObject]({parent: this, child: child});
        } else {
          if (!dart.equals(child[_parent], this)) dart.assertFailed();
        }
        refNode = child.element;
      }
      this[_previousChildrenInTraversalOrder] = this[_childrenInTraversalOrder];
    }
    toString() {
      if (dart.test(src__engine.assertionsEnabled)) {
        let children = this[_childrenInTraversalOrder] != null && dart.test(this[_childrenInTraversalOrder][$isNotEmpty]) ? "[" + dart.str(this[_childrenInTraversalOrder][$join](", ")) + "]" : "<empty>";
        return dart.str(this[$runtimeType]) + "(#" + dart.str(this.id) + ", children: " + children + ")";
      } else {
        return super[$toString]();
      }
    }
  };
  (src__engine.SemanticsObject.new = function(id, owner) {
    let t1;
    this[_flags] = null;
    this[_actions] = null;
    this[_textSelectionBase] = null;
    this[_textSelectionExtent] = null;
    this[_scrollChildren] = null;
    this[_scrollIndex] = null;
    this[_scrollPosition] = null;
    this[_scrollExtentMax] = null;
    this[_scrollExtentMin] = null;
    this[_rect] = null;
    this[_label] = null;
    this[_hint] = null;
    this[_value] = null;
    this[_increasedValue] = null;
    this[_decreasedValue] = null;
    this[_textDirection] = null;
    this[_transform$] = null;
    this[_childrenInTraversalOrder] = null;
    this[_childrenInHitTestOrder] = null;
    this[_additionalActions] = null;
    this[element] = html.Element.tag("flt-semantics");
    this[_dirtyFields] = -1;
    this[_childContainerElement] = null;
    this[_parent] = null;
    this[_roleManagers] = new (LinkedMapOfRole$RoleManager()).new();
    this[verticalContainerAdjustment] = 0.0;
    this[horizontalContainerAdjustment] = 0.0;
    this[_previousChildrenInTraversalOrder] = null;
    this[id$0] = id;
    this[owner$] = owner;
    this.element.style[$position] = "absolute";
    if (this.id === 0) {
      this.element.style[$filter] = "opacity(0%)";
      this.element.style[$color] = "rgba(0,0,0,0)";
    }
    if (dart.test(src__engine._debugShowSemanticsNodes)) {
      t1 = this.element.style;
      t1[$filter] = "opacity(90%)";
      t1[$outline] = "1px solid green";
      t1[$color] = "purple";
      t1;
    }
  }).prototype = src__engine.SemanticsObject.prototype;
  dart.addTypeTests(src__engine.SemanticsObject);
  const id$0 = Symbol("SemanticsObject.id");
  const owner$ = Symbol("SemanticsObject.owner");
  const element = Symbol("SemanticsObject.element");
  const verticalContainerAdjustment = Symbol("SemanticsObject.verticalContainerAdjustment");
  const horizontalContainerAdjustment = Symbol("SemanticsObject.horizontalContainerAdjustment");
  dart.setMethodSignature(src__engine.SemanticsObject, () => ({
    __proto__: dart.getMethods(src__engine.SemanticsObject.__proto__),
    [_markFlagsDirty]: dart.fnType(dart.void, []),
    [_markActionsDirty]: dart.fnType(dart.void, []),
    [_markTextSelectionBaseDirty]: dart.fnType(dart.void, []),
    [_markTextSelectionExtentDirty]: dart.fnType(dart.void, []),
    [_markScrollChildrenDirty]: dart.fnType(dart.void, []),
    [_markScrollIndexDirty]: dart.fnType(dart.void, []),
    [_markScrollPositionDirty]: dart.fnType(dart.void, []),
    [_markScrollExtentMaxDirty]: dart.fnType(dart.void, []),
    [_markScrollExtentMinDirty]: dart.fnType(dart.void, []),
    [_markRectDirty]: dart.fnType(dart.void, []),
    [_markLabelDirty]: dart.fnType(dart.void, []),
    [_markHintDirty]: dart.fnType(dart.void, []),
    [_markValueDirty]: dart.fnType(dart.void, []),
    [_markIncreasedValueDirty]: dart.fnType(dart.void, []),
    [_markDecreasedValueDirty]: dart.fnType(dart.void, []),
    [_markTextDirectionDirty]: dart.fnType(dart.void, []),
    [_markTransformDirty]: dart.fnType(dart.void, []),
    [_markChildrenInTraversalOrderDirty]: dart.fnType(dart.void, []),
    [_markChildrenInHitTestOrderDirty]: dart.fnType(dart.void, []),
    [_markAdditionalActionsDirty]: dart.fnType(dart.void, []),
    [_isDirty]: dart.fnType(core.bool, [core.int]),
    getOrCreateChildContainer: dart.fnType(html.Element, []),
    hasFlag: dart.fnType(core.bool, [ui.SemanticsFlag]),
    hasAction: dart.fnType(core.bool, [ui.SemanticsAction]),
    updateWith: dart.fnType(dart.void, [src__engine.SemanticsNodeUpdate]),
    setAriaRole: dart.fnType(dart.void, [core.String, core.bool]),
    [_updateRoles]: dart.fnType(dart.void, []),
    [_updateRole]: dart.fnType(dart.void, [src__engine.Role, core.bool]),
    recomputePositionAndSize: dart.fnType(dart.void, []),
    [_updateChildrenInTraversalOrder]: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(src__engine.SemanticsObject, () => ({
    __proto__: dart.getGetters(src__engine.SemanticsObject.__proto__),
    flags: core.int,
    isFlagsDirty: core.bool,
    actions: core.int,
    isActionsDirty: core.bool,
    textSelectionBase: core.int,
    isTextSelectionBaseDirty: core.bool,
    textSelectionExtent: core.int,
    isTextSelectionExtentDirty: core.bool,
    scrollChildren: core.int,
    isScrollChildrenDirty: core.bool,
    scrollIndex: core.int,
    isScrollIndexDirty: core.bool,
    scrollPosition: core.double,
    isScrollPositionDirty: core.bool,
    scrollExtentMax: core.double,
    isScrollExtentMaxDirty: core.bool,
    scrollExtentMin: core.double,
    isScrollExtentMinDirty: core.bool,
    rect: ui.Rect,
    isRectDirty: core.bool,
    label: core.String,
    hasLabel: core.bool,
    isLabelDirty: core.bool,
    hint: core.String,
    isHintDirty: core.bool,
    value: core.String,
    hasValue: core.bool,
    isValueDirty: core.bool,
    increasedValue: core.String,
    isIncreasedValueDirty: core.bool,
    decreasedValue: core.String,
    isDecreasedValueDirty: core.bool,
    textDirection: ui.TextDirection,
    isTextDirectionDirty: core.bool,
    transform: typed_data.Float64List,
    isTransformDirty: core.bool,
    childrenInTraversalOrder: typed_data.Int32List,
    isChildrenInTraversalOrderDirty: core.bool,
    childrenInHitTestOrder: typed_data.Int32List,
    isChildrenInHitTestOrderDirty: core.bool,
    additionalActions: typed_data.Int32List,
    isAdditionalActionsDirty: core.bool,
    isVerticalScrollContainer: core.bool,
    isHorizontalScrollContainer: core.bool,
    hasChildren: core.bool,
    isTextField: core.bool,
    isIncrementable: core.bool
  }));
  dart.setFieldSignature(src__engine.SemanticsObject, () => ({
    __proto__: dart.getFields(src__engine.SemanticsObject.__proto__),
    [_flags]: dart.fieldType(core.int),
    [_actions]: dart.fieldType(core.int),
    [_textSelectionBase]: dart.fieldType(core.int),
    [_textSelectionExtent]: dart.fieldType(core.int),
    [_scrollChildren]: dart.fieldType(core.int),
    [_scrollIndex]: dart.fieldType(core.int),
    [_scrollPosition]: dart.fieldType(core.double),
    [_scrollExtentMax]: dart.fieldType(core.double),
    [_scrollExtentMin]: dart.fieldType(core.double),
    [_rect]: dart.fieldType(ui.Rect),
    [_label]: dart.fieldType(core.String),
    [_hint]: dart.fieldType(core.String),
    [_value]: dart.fieldType(core.String),
    [_increasedValue]: dart.fieldType(core.String),
    [_decreasedValue]: dart.fieldType(core.String),
    [_textDirection]: dart.fieldType(ui.TextDirection),
    [_transform$]: dart.fieldType(typed_data.Float64List),
    [_childrenInTraversalOrder]: dart.fieldType(typed_data.Int32List),
    [_childrenInHitTestOrder]: dart.fieldType(typed_data.Int32List),
    [_additionalActions]: dart.fieldType(typed_data.Int32List),
    id: dart.finalFieldType(core.int),
    owner: dart.finalFieldType(src__engine.EngineSemanticsOwner),
    element: dart.finalFieldType(html.Element),
    [_dirtyFields]: dart.fieldType(core.int),
    [_childContainerElement]: dart.fieldType(html.Element),
    [_parent]: dart.fieldType(src__engine.SemanticsObject),
    [_roleManagers]: dart.finalFieldType(collection.LinkedHashMap$(src__engine.Role, src__engine.RoleManager)),
    verticalContainerAdjustment: dart.fieldType(core.double),
    horizontalContainerAdjustment: dart.fieldType(core.double),
    [_previousChildrenInTraversalOrder]: dart.fieldType(typed_data.Int32List)
  }));
  dart.defineExtensionMethods(src__engine.SemanticsObject, ['toString']);
  dart.defineLazy(src__engine.SemanticsObject, {
    /*src__engine.SemanticsObject._flagsIndex*/get _flagsIndex() {
      return 1 << 0;
    },
    /*src__engine.SemanticsObject._actionsIndex*/get _actionsIndex() {
      return 1 << 1;
    },
    /*src__engine.SemanticsObject._textSelectionBaseIndex*/get _textSelectionBaseIndex() {
      return 1 << 2;
    },
    /*src__engine.SemanticsObject._textSelectionExtentIndex*/get _textSelectionExtentIndex() {
      return 1 << 3;
    },
    /*src__engine.SemanticsObject._scrollChildrenIndex*/get _scrollChildrenIndex() {
      return 1 << 4;
    },
    /*src__engine.SemanticsObject._scrollIndexIndex*/get _scrollIndexIndex() {
      return 1 << 5;
    },
    /*src__engine.SemanticsObject._scrollPositionIndex*/get _scrollPositionIndex() {
      return 1 << 6;
    },
    /*src__engine.SemanticsObject._scrollExtentMaxIndex*/get _scrollExtentMaxIndex() {
      return 1 << 7;
    },
    /*src__engine.SemanticsObject._scrollExtentMinIndex*/get _scrollExtentMinIndex() {
      return 1 << 8;
    },
    /*src__engine.SemanticsObject._rectIndex*/get _rectIndex() {
      return 1 << 9;
    },
    /*src__engine.SemanticsObject._labelIndex*/get _labelIndex() {
      return 1 << 10;
    },
    /*src__engine.SemanticsObject._hintIndex*/get _hintIndex() {
      return 1 << 11;
    },
    /*src__engine.SemanticsObject._valueIndex*/get _valueIndex() {
      return 1 << 12;
    },
    /*src__engine.SemanticsObject._increasedValueIndex*/get _increasedValueIndex() {
      return 1 << 13;
    },
    /*src__engine.SemanticsObject._decreasedValueIndex*/get _decreasedValueIndex() {
      return 1 << 14;
    },
    /*src__engine.SemanticsObject._textDirectionIndex*/get _textDirectionIndex() {
      return 1 << 15;
    },
    /*src__engine.SemanticsObject._transformIndex*/get _transformIndex() {
      return 1 << 16;
    },
    /*src__engine.SemanticsObject._childrenInTraversalOrderIndex*/get _childrenInTraversalOrderIndex() {
      return 1 << 19;
    },
    /*src__engine.SemanticsObject._childrenInHitTestOrderIndex*/get _childrenInHitTestOrderIndex() {
      return 1 << 20;
    },
    /*src__engine.SemanticsObject._additionalActionsIndex*/get _additionalActionsIndex() {
      return 1 << 21;
    }
  });
  src__engine.AccessibilityMode = class AccessibilityMode extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (src__engine.AccessibilityMode.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = src__engine.AccessibilityMode.prototype;
  dart.addTypeTests(src__engine.AccessibilityMode);
  dart.setFieldSignature(src__engine.AccessibilityMode, () => ({
    __proto__: dart.getFields(src__engine.AccessibilityMode.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(src__engine.AccessibilityMode, ['toString']);
  src__engine.AccessibilityMode.unknown = dart.const(new src__engine.AccessibilityMode.new(0, "AccessibilityMode.unknown"));
  src__engine.AccessibilityMode.known = dart.const(new src__engine.AccessibilityMode.new(1, "AccessibilityMode.known"));
  src__engine.AccessibilityMode.values = dart.constList([src__engine.AccessibilityMode.unknown, src__engine.AccessibilityMode.known], src__engine.AccessibilityMode);
  src__engine.GestureMode = class GestureMode extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (src__engine.GestureMode.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = src__engine.GestureMode.prototype;
  dart.addTypeTests(src__engine.GestureMode);
  dart.setFieldSignature(src__engine.GestureMode, () => ({
    __proto__: dart.getFields(src__engine.GestureMode.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(src__engine.GestureMode, ['toString']);
  src__engine.GestureMode.pointerEvents = dart.const(new src__engine.GestureMode.new(0, "GestureMode.pointerEvents"));
  src__engine.GestureMode.browserGestures = dart.const(new src__engine.GestureMode.new(1, "GestureMode.browserGestures"));
  src__engine.GestureMode.values = dart.constList([src__engine.GestureMode.pointerEvents, src__engine.GestureMode.browserGestures], src__engine.GestureMode);
  const _semanticsTree = dart.privateName(src__engine, "_semanticsTree");
  const _attachments = dart.privateName(src__engine, "_attachments");
  const _detachments = dart.privateName(src__engine, "_detachments");
  const _oneTimePostUpdateCallbacks = dart.privateName(src__engine, "_oneTimePostUpdateCallbacks");
  const _rootSemanticsElement = dart.privateName(src__engine, "_rootSemanticsElement");
  const _now = dart.privateName(src__engine, "_now");
  const _semanticsPlaceholder = dart.privateName(src__engine, "_semanticsPlaceholder");
  const _semanticsActivationTimer = dart.privateName(src__engine, "_semanticsActivationTimer");
  const _semanticsActivationAttempts = dart.privateName(src__engine, "_semanticsActivationAttempts");
  const _schedulePlaceholderRemoval = dart.privateName(src__engine, "_schedulePlaceholderRemoval");
  const _semanticsEnabled = dart.privateName(src__engine, "_semanticsEnabled");
  const _mode = dart.privateName(src__engine, "_mode");
  const _gestureMode = dart.privateName(src__engine, "_gestureMode");
  const _gestureModeClock = dart.privateName(src__engine, "_gestureModeClock");
  const _gestureModeListeners = dart.privateName(src__engine, "_gestureModeListeners");
  const _finalizeTree = dart.privateName(src__engine, "_finalizeTree");
  const _isWaitingToEnableSemantics = dart.privateName(src__engine, "_isWaitingToEnableSemantics");
  let const$25;
  let const$26;
  const _tryEnableSemantics = dart.privateName(src__engine, "_tryEnableSemantics");
  const _notifyGestureModeListeners = dart.privateName(src__engine, "_notifyGestureModeListeners");
  const _getGestureModeClock = dart.privateName(src__engine, "_getGestureModeClock");
  let const$27;
  const _temporarilyDisableBrowserGestureMode = dart.privateName(src__engine, "_temporarilyDisableBrowserGestureMode");
  let const$28;
  let const$29;
  src__engine.EngineSemanticsOwner = class EngineSemanticsOwner extends core.Object {
    static get instance() {
      let t1;
      t1 = src__engine.EngineSemanticsOwner._instance;
      return t1 == null ? src__engine.EngineSemanticsOwner._instance = new src__engine.EngineSemanticsOwner.__() : t1;
    }
    static debugResetSemantics() {
      if (src__engine.EngineSemanticsOwner._instance == null) {
        return;
      }
      src__engine.EngineSemanticsOwner._instance.semanticsEnabled = false;
      src__engine.EngineSemanticsOwner._instance = null;
    }
    [_attachObject](opts) {
      let parent = opts && 'parent' in opts ? opts.parent : null;
      let child = opts && 'child' in opts ? opts.child : null;
      if (!(child != null)) dart.assertFailed();
      if (!(parent != null)) dart.assertFailed();
      child[_parent] = parent;
      this[_attachments][$_set](child.id, parent);
    }
    [_detachObject](id) {
      if (!dart.test(this[_semanticsTree][$containsKey](id))) dart.assertFailed();
      let object = this[_semanticsTree][$_get](id);
      this[_detachments][$add](object);
    }
    addOneTimePostUpdateCallback(callback) {
      this[_oneTimePostUpdateCallbacks][$add](callback);
    }
    [_finalizeTree]() {
      for (let object of this[_detachments]) {
        let parent = this[_attachments][$_get](object.id);
        if (parent == null) {
          this[_semanticsTree][$remove](object.id);
          object[_parent] = null;
          object.element[$remove]();
        } else {
          if (!dart.equals(object[_parent], parent)) dart.assertFailed();
          if (!dart.equals(object.element[$parent], parent[_childContainerElement])) dart.assertFailed();
        }
      }
      this[_detachments] = JSArrayOfSemanticsObject().of([]);
      this[_attachments] = new (IdentityMapOfint$SemanticsObject()).new();
      if (dart.test(this[_oneTimePostUpdateCallbacks][$isNotEmpty])) {
        for (let callback of this[_oneTimePostUpdateCallbacks]) {
          callback();
        }
        this[_oneTimePostUpdateCallbacks] = JSArrayOfVoidTovoid().of([]);
      }
    }
    get debugSemanticsTree() {
      let result = null;
      if (!dart.test(dart.fn(() => {
        result = this[_semanticsTree];
        return true;
      }, VoidTobool())())) dart.assertFailed();
      return result;
    }
    debugOverrideTimestampFunction(value) {
      this[_now] = value;
    }
    debugResetTimestampFunction() {
      this[_now] = dart.fn(() => new core.DateTime.now(), VoidToDateTime());
    }
    get [_isWaitingToEnableSemantics]() {
      return this[_semanticsPlaceholder] != null;
    }
    [_tryEnableSemantics](event) {
      if (dart.test(this[_schedulePlaceholderRemoval])) {
        let removeNow = !dart.equals(src__engine.browserEngine, src__engine.BrowserEngine.webkit) || event.type === "touchend";
        if (removeNow) {
          this[_semanticsPlaceholder][$remove]();
          this[_semanticsPlaceholder] = null;
          this[_semanticsActivationTimer] = null;
        }
        return true;
      }
      if (dart.test(this.semanticsEnabled)) {
        return true;
      }
      this[_semanticsActivationAttempts] = dart.notNull(this[_semanticsActivationAttempts]) + 1;
      if (dart.notNull(this[_semanticsActivationAttempts]) >= dart.notNull(src__engine.EngineSemanticsOwner._kMaxSemanticsActivationAttempts)) {
        this[_schedulePlaceholderRemoval] = true;
        return true;
      }
      let kInterestingEventTypes = const$25 || (const$25 = dart.constList(["click", "touchstart", "touchend"], core.String));
      if (!dart.test(kInterestingEventTypes[$contains](event.type))) {
        return true;
      }
      if (this[_semanticsActivationTimer] != null) {
        return false;
      }
      let blinkEnableConditionPassed = dart.equals(src__engine.browserEngine, src__engine.BrowserEngine.blink) && dart.equals(this[_gestureMode], src__engine.GestureMode.browserGestures);
      let safariEnableConditionPassed = false;
      if (dart.equals(src__engine.browserEngine, src__engine.BrowserEngine.webkit)) {
        let activationPoint = null;
        switch (event.type) {
          case "click":
          {
            let click = html.MouseEvent._check(event);
            activationPoint = click[$offset];
            break;
          }
          case "touchstart":
          case "touchend":
          {
            let touch = html.TouchEvent._check(event);
            activationPoint = touch.changedTouches[$first][$client];
            break;
          }
          default:
          {
            return true;
          }
        }
        if (!(activationPoint != null)) dart.assertFailed();
        let activatingElementRect = src__engine.domRenderer.glassPaneElement.getBoundingClientRect();
        let midX = dart.notNull(activatingElementRect[$left]) + (dart.notNull(activatingElementRect[$right]) - dart.notNull(activatingElementRect[$left])) / 2;
        let midY = dart.notNull(activatingElementRect[$top]) + (dart.notNull(activatingElementRect[$bottom]) - dart.notNull(activatingElementRect[$top])) / 2;
        let deltaX = dart.notNull(activationPoint.x) - midX;
        let deltaY = dart.notNull(activationPoint.y) - midY;
        let deltaSquared = deltaX * deltaX + deltaY * deltaY;
        if (deltaSquared < 1.0) {
          safariEnableConditionPassed = true;
        }
      }
      if (blinkEnableConditionPassed || safariEnableConditionPassed) {
        if (!(this[_semanticsActivationTimer] == null)) dart.assertFailed();
        this[_semanticsActivationTimer] = async.Timer.new(const$26 || (const$26 = dart.const(new core.Duration.new({milliseconds: 300}))), dart.fn(() => {
          this.semanticsEnabled = true;
          this[_schedulePlaceholderRemoval] = true;
        }, VoidToNull()));
        return false;
      }
      return true;
    }
    autoEnableOnTap(domRenderer) {
      let t1, t1$;
      this[_semanticsPlaceholder] = html.Element.tag("flt-semantics-placeholder");
      this[_semanticsPlaceholder][$addEventListener]("click", dart.fn(event => {
        this[_tryEnableSemantics](event);
      }, EventToNull()), true);
      t1 = this[_semanticsPlaceholder];
      t1[$setAttribute]("role", "button");
      t1[$setAttribute]("aria-label", src__engine.EngineSemanticsOwner.placeholderMessage);
      t1;
      t1$ = this[_semanticsPlaceholder].style;
      t1$[$position] = "absolute";
      t1$[$left] = "0";
      t1$[$top] = "0";
      t1$[$right] = "0";
      t1$[$bottom] = "0";
      t1$;
      domRenderer.glassPaneElement[$append](this[_semanticsPlaceholder]);
    }
    get semanticsEnabled() {
      return this[_semanticsEnabled];
    }
    set semanticsEnabled(value) {
      let t1, t1$;
      if (dart.equals(value, this[_semanticsEnabled])) {
        return;
      }
      this[_semanticsEnabled] = value;
      if (!dart.test(this[_semanticsEnabled])) {
        if (!dart.equals(this[_gestureMode], src__engine.GestureMode.pointerEvents)) {
          this[_gestureMode] = src__engine.GestureMode.pointerEvents;
          this[_notifyGestureModeListeners]();
        }
        for (let id of this[_semanticsTree][$keys][$toList]()) {
          this[_detachObject](id);
        }
        this[_finalizeTree]();
        t1 = this[_rootSemanticsElement];
        t1 == null ? null : t1[$remove]();
        this[_rootSemanticsElement] = null;
        t1$ = this[_gestureModeClock];
        t1$ == null ? null : t1$.datetime = null;
      }
      if (ui.window.onSemanticsEnabledChanged != null) {
        ui.window.onSemanticsEnabledChanged();
      }
    }
    get mode() {
      return this[_mode];
    }
    set mode(value) {
      if (!(value != null)) dart.assertFailed();
      this[_mode] = value;
    }
    get gestureMode() {
      return this[_gestureMode];
    }
    [_getGestureModeClock]() {
      if (this[_gestureModeClock] == null) {
        this[_gestureModeClock] = new src__engine.AlarmClock.new(this[_now]);
        this[_gestureModeClock].callback = dart.fn(() => {
          if (dart.equals(this[_gestureMode], src__engine.GestureMode.browserGestures)) {
            return;
          }
          this[_gestureMode] = src__engine.GestureMode.browserGestures;
          this[_notifyGestureModeListeners]();
        }, VoidToNull());
      }
      return this[_gestureModeClock];
    }
    [_temporarilyDisableBrowserGestureMode]() {
      let _kDebounceThreshold = const$27 || (const$27 = dart.const(new core.Duration.new({milliseconds: 500})));
      this[_getGestureModeClock]().datetime = this[_now]().add(_kDebounceThreshold);
      if (!dart.equals(this[_gestureMode], src__engine.GestureMode.pointerEvents)) {
        this[_gestureMode] = src__engine.GestureMode.pointerEvents;
        this[_notifyGestureModeListeners]();
      }
    }
    receiveGlobalEvent(event) {
      let _pointerEventTypes = const$28 || (const$28 = dart.constList(["pointerdown", "pointermove", "pointerup", "pointercancel", "touchstart", "touchend", "touchmove", "touchcancel", "mousedown", "mousemove", "mouseup"], core.String));
      if (dart.test(_pointerEventTypes[$contains](event.type))) {
        this[_temporarilyDisableBrowserGestureMode]();
      }
      if (!dart.test(this[_isWaitingToEnableSemantics])) {
        return true;
      } else {
        return this[_tryEnableSemantics](event);
      }
    }
    addGestureModeListener(callback) {
      this[_gestureModeListeners][$add](callback);
    }
    removeGestureModeListener(callback) {
      if (!dart.test(this[_gestureModeListeners][$contains](callback))) dart.assertFailed();
      this[_gestureModeListeners][$remove](callback);
    }
    [_notifyGestureModeListeners]() {
      for (let i = 0; i < dart.notNull(this[_gestureModeListeners][$length]); i = i + 1) {
        this[_gestureModeListeners][$_get](i)(this[_gestureMode]);
      }
    }
    shouldAcceptBrowserGesture(eventType) {
      if (dart.equals(this[_mode], src__engine.AccessibilityMode.known)) {
        return this.semanticsEnabled;
      }
      let pointerDebouncedGestures = const$29 || (const$29 = dart.constList(["click", "scroll"], core.String));
      if (dart.test(pointerDebouncedGestures[$contains](eventType))) {
        return dart.equals(this[_gestureMode], src__engine.GestureMode.browserGestures);
      }
      return false;
    }
    getOrCreateObject(id) {
      let object = this[_semanticsTree][$_get](id);
      if (object == null) {
        object = new src__engine.SemanticsObject.new(id, this);
        this[_semanticsTree][$_set](id, object);
      }
      return object;
    }
    updateSemantics(uiUpdate) {
      if (!dart.test(this[_semanticsEnabled])) {
        return;
      }
      let update = src__engine.SemanticsUpdate._check(uiUpdate);
      for (let nodeUpdate of update[_nodeUpdates]) {
        let object = this.getOrCreateObject(nodeUpdate.id);
        object.updateWith(nodeUpdate);
      }
      if (this[_rootSemanticsElement] == null) {
        let root = this[_semanticsTree][$_get](0);
        this[_rootSemanticsElement] = root.element;
        src__engine.domRenderer.glassPaneElement[$append](this[_rootSemanticsElement]);
      }
      this[_finalizeTree]();
      if (!dart.test(this[_semanticsTree][$containsKey](0))) dart.assertFailed();
      if (!dart.test(dart.fn(() => {
        this[_semanticsTree][$forEach](dart.fn((id, object) => {
          if (!(id == object.id)) dart.assertFailed();
          if (object[_childrenInTraversalOrder] != null) {
            for (let childId of object[_childrenInTraversalOrder]) {
              let child = this[_semanticsTree][$_get](childId);
              if (child == null) {
                dart.throw(new core.AssertionError.new("Child #" + dart.str(childId) + " is missing in the tree."));
              }
              if (child[_parent] == null) {
                dart.throw(new core.AssertionError.new("Child #" + dart.str(childId) + " of parent #" + dart.str(object.id) + " has null parent " + "reference."));
              }
              if (child[_parent] != object) {
                dart.throw(new core.AssertionError.new("Parent #" + dart.str(object.id) + " has child #" + dart.str(childId) + ". However, the " + "child is attached to #" + dart.str(child[_parent].id) + "."));
              }
            }
          }
        }, intAndSemanticsObjectToNull()));
        let iter = update[_nodeUpdates];
        for (let update of iter) {
          if (!dart.test(this[_semanticsTree][$containsKey](update.id))) dart.assertFailed();
          if (!(this[_semanticsTree][$_get](update.id).element != null)) dart.assertFailed();
        }
        return true;
      }, VoidTobool())())) dart.assertFailed();
    }
  };
  (src__engine.EngineSemanticsOwner.__ = function() {
    this[_semanticsTree] = new (IdentityMapOfint$SemanticsObject()).new();
    this[_attachments] = new (IdentityMapOfint$SemanticsObject()).new();
    this[_detachments] = JSArrayOfSemanticsObject().of([]);
    this[_oneTimePostUpdateCallbacks] = JSArrayOfVoidTovoid().of([]);
    this[_rootSemanticsElement] = null;
    this[_now] = dart.fn(() => new core.DateTime.now(), VoidToDateTime());
    this[_semanticsPlaceholder] = null;
    this[_semanticsActivationTimer] = null;
    this[_semanticsActivationAttempts] = 0;
    this[_schedulePlaceholderRemoval] = false;
    this[_semanticsEnabled] = false;
    this[_mode] = src__engine.AccessibilityMode.unknown;
    this[_gestureMode] = src__engine.GestureMode.browserGestures;
    this[_gestureModeClock] = null;
    this[_gestureModeListeners] = JSArrayOfGestureModeTovoid().of([]);
    src__engine.registerHotRestartListener(dart.fn(() => {
      let t1;
      t1 = this[_rootSemanticsElement];
      t1 == null ? null : t1[$remove]();
    }, VoidToNull()));
  }).prototype = src__engine.EngineSemanticsOwner.prototype;
  dart.addTypeTests(src__engine.EngineSemanticsOwner);
  dart.setMethodSignature(src__engine.EngineSemanticsOwner, () => ({
    __proto__: dart.getMethods(src__engine.EngineSemanticsOwner.__proto__),
    [_attachObject]: dart.fnType(dart.void, [], {child: src__engine.SemanticsObject, parent: src__engine.SemanticsObject}),
    [_detachObject]: dart.fnType(dart.void, [core.int]),
    addOneTimePostUpdateCallback: dart.fnType(dart.void, [dart.fnType(dart.void, [])]),
    [_finalizeTree]: dart.fnType(dart.void, []),
    debugOverrideTimestampFunction: dart.fnType(dart.void, [dart.fnType(core.DateTime, [])]),
    debugResetTimestampFunction: dart.fnType(dart.void, []),
    [_tryEnableSemantics]: dart.fnType(core.bool, [html.Event]),
    autoEnableOnTap: dart.fnType(dart.void, [src__engine.DomRenderer]),
    [_getGestureModeClock]: dart.fnType(src__engine.AlarmClock, []),
    [_temporarilyDisableBrowserGestureMode]: dart.fnType(dart.void, []),
    receiveGlobalEvent: dart.fnType(core.bool, [html.Event]),
    addGestureModeListener: dart.fnType(dart.void, [dart.fnType(dart.void, [src__engine.GestureMode])]),
    removeGestureModeListener: dart.fnType(dart.void, [dart.fnType(dart.void, [src__engine.GestureMode])]),
    [_notifyGestureModeListeners]: dart.fnType(dart.void, []),
    shouldAcceptBrowserGesture: dart.fnType(core.bool, [core.String]),
    getOrCreateObject: dart.fnType(src__engine.SemanticsObject, [core.int]),
    updateSemantics: dart.fnType(dart.void, [ui.SemanticsUpdate])
  }));
  dart.setGetterSignature(src__engine.EngineSemanticsOwner, () => ({
    __proto__: dart.getGetters(src__engine.EngineSemanticsOwner.__proto__),
    debugSemanticsTree: core.Map$(core.int, src__engine.SemanticsObject),
    [_isWaitingToEnableSemantics]: core.bool,
    semanticsEnabled: core.bool,
    mode: src__engine.AccessibilityMode,
    gestureMode: src__engine.GestureMode
  }));
  dart.setSetterSignature(src__engine.EngineSemanticsOwner, () => ({
    __proto__: dart.getSetters(src__engine.EngineSemanticsOwner.__proto__),
    semanticsEnabled: core.bool,
    mode: src__engine.AccessibilityMode
  }));
  dart.setFieldSignature(src__engine.EngineSemanticsOwner, () => ({
    __proto__: dart.getFields(src__engine.EngineSemanticsOwner.__proto__),
    [_semanticsTree]: dart.finalFieldType(core.Map$(core.int, src__engine.SemanticsObject)),
    [_attachments]: dart.fieldType(core.Map$(core.int, src__engine.SemanticsObject)),
    [_detachments]: dart.fieldType(core.List$(src__engine.SemanticsObject)),
    [_oneTimePostUpdateCallbacks]: dart.fieldType(core.List$(dart.fnType(dart.void, []))),
    [_rootSemanticsElement]: dart.fieldType(html.Element),
    [_now]: dart.fieldType(dart.fnType(core.DateTime, [])),
    [_semanticsPlaceholder]: dart.fieldType(html.Element),
    [_semanticsActivationTimer]: dart.fieldType(async.Timer),
    [_semanticsActivationAttempts]: dart.fieldType(core.int),
    [_schedulePlaceholderRemoval]: dart.fieldType(core.bool),
    [_semanticsEnabled]: dart.fieldType(core.bool),
    [_mode]: dart.fieldType(src__engine.AccessibilityMode),
    [_gestureMode]: dart.fieldType(src__engine.GestureMode),
    [_gestureModeClock]: dart.fieldType(src__engine.AlarmClock),
    [_gestureModeListeners]: dart.fieldType(core.List$(dart.fnType(dart.void, [src__engine.GestureMode])))
  }));
  dart.defineLazy(src__engine.EngineSemanticsOwner, {
    /*src__engine.EngineSemanticsOwner._instance*/get _instance() {
      return null;
    },
    set _instance(_) {},
    /*src__engine.EngineSemanticsOwner._kMaxSemanticsActivationAttempts*/get _kMaxSemanticsActivationAttempts() {
      return 20;
    },
    /*src__engine.EngineSemanticsOwner.placeholderMessage*/get placeholderMessage() {
      return "Enable accessibility";
    },
    set placeholderMessage(_) {}
  });
  const _clickListener = dart.privateName(src__engine, "_clickListener");
  const _stopListening = dart.privateName(src__engine, "_stopListening");
  src__engine.Tappable = class Tappable extends src__engine.RoleManager {
    update() {
      let element = this.semanticsObject.element;
      this.semanticsObject.setAriaRole("button", this.semanticsObject.hasFlag(ui.SemanticsFlag.isButton));
      if (dart.test(this.semanticsObject.hasAction(ui.SemanticsAction.tap)) && !dart.test(this.semanticsObject.hasFlag(ui.SemanticsFlag.isTextField))) {
        if (this[_clickListener] == null) {
          this[_clickListener] = dart.fn(_ => {
            if (!dart.equals(this.semanticsObject.owner.gestureMode, src__engine.GestureMode.browserGestures)) {
              return;
            }
            ui.window.onSemanticsAction(this.semanticsObject.id, ui.SemanticsAction.tap, null);
          }, EventToNull());
          element[$addEventListener]("click", this[_clickListener]);
        }
      } else {
        this[_stopListening]();
      }
    }
    [_stopListening]() {
      if (this[_clickListener] == null) {
        return;
      }
      this.semanticsObject.element[$removeEventListener]("click", this[_clickListener]);
      this[_clickListener] = null;
    }
    dispose() {
      this[_stopListening]();
      this.semanticsObject.setAriaRole("button", false);
    }
  };
  (src__engine.Tappable.new = function(semanticsObject) {
    this[_clickListener] = null;
    src__engine.Tappable.__proto__.new.call(this, src__engine.Role.tappable, semanticsObject);
    ;
  }).prototype = src__engine.Tappable.prototype;
  dart.addTypeTests(src__engine.Tappable);
  dart.setMethodSignature(src__engine.Tappable, () => ({
    __proto__: dart.getMethods(src__engine.Tappable.__proto__),
    update: dart.fnType(dart.void, []),
    [_stopListening]: dart.fnType(dart.void, []),
    dispose: dart.fnType(dart.void, [])
  }));
  dart.setFieldSignature(src__engine.Tappable, () => ({
    __proto__: dart.getFields(src__engine.Tappable.__proto__),
    [_clickListener]: dart.fieldType(dart.fnType(dart.dynamic, [html.Event]))
  }));
  const _setupDomElement = dart.privateName(src__engine, "_setupDomElement");
  const _textFieldElement = dart.privateName(src__engine, "_textFieldElement");
  const _initializeForBlink = dart.privateName(src__engine, "_initializeForBlink");
  const _initializeForWebkit = dart.privateName(src__engine, "_initializeForWebkit");
  src__engine.TextField = class TextField extends src__engine.RoleManager {
    get persistentTextEditingElement() {
      return this[persistentTextEditingElement];
    }
    set persistentTextEditingElement(value) {
      this[persistentTextEditingElement] = value;
    }
    get [_textFieldElement]() {
      return this.persistentTextEditingElement.domElement;
    }
    [_setupDomElement]() {
      let t1, t1$;
      t1 = this[_textFieldElement];
      t1.spellcheck = false;
      t1[$setAttribute]("spellcheck", "false");
      t1[$setAttribute]("autocorrect", "off");
      t1[$setAttribute]("autocomplete", "off");
      t1[$setAttribute]("data-semantics-role", "text-field");
      t1;
      t1$ = this[_textFieldElement].style;
      t1$[$position] = "absolute";
      t1$[$top] = "0";
      t1$[$left] = "0";
      t1$[$width] = dart.str(this.semanticsObject.rect.width) + "px";
      t1$[$height] = dart.str(this.semanticsObject.rect.height) + "px";
      t1$;
      this.semanticsObject.element[$append](this[_textFieldElement]);
      switch (src__engine.browserEngine) {
        case src__engine.BrowserEngine.blink:
        case src__engine.BrowserEngine.unknown:
        {
          this[_initializeForBlink]();
          break;
        }
        case src__engine.BrowserEngine.webkit:
        {
          this[_initializeForWebkit]();
          break;
        }
      }
    }
    [_initializeForBlink]() {
      this[_textFieldElement][$addEventListener]("focus", dart.fn(event => {
        if (!dart.equals(this.semanticsObject.owner.gestureMode, src__engine.GestureMode.browserGestures)) {
          return;
        }
        src__engine.textEditing.useCustomEditableElement(this.persistentTextEditingElement);
        ui.window.onSemanticsAction(this.semanticsObject.id, ui.SemanticsAction.tap, null);
      }, EventToNull()));
    }
    [_initializeForWebkit]() {
      let lastTouchStartOffsetX = null;
      let lastTouchStartOffsetY = null;
      this[_textFieldElement][$addEventListener]("touchstart", dart.fn(event => {
        src__engine.textEditing.useCustomEditableElement(this.persistentTextEditingElement);
        let touchEvent = html.TouchEvent._check(event);
        lastTouchStartOffsetX = touchEvent.changedTouches[$last][$client].x;
        lastTouchStartOffsetY = touchEvent.changedTouches[$last][$client].y;
      }, EventToNull()), true);
      this[_textFieldElement][$addEventListener]("touchend", dart.fn(event => {
        let touchEvent = html.TouchEvent._check(event);
        if (lastTouchStartOffsetX != null) {
          if (!(lastTouchStartOffsetY != null)) dart.assertFailed();
          let offsetX = touchEvent.changedTouches[$last][$client].x;
          let offsetY = touchEvent.changedTouches[$last][$client].y;
          let kTouchSlop = 18.0 * 18.0;
          if (dart.notNull(offsetX) * dart.notNull(offsetX) + dart.notNull(offsetY) * dart.notNull(offsetY) < kTouchSlop) {
            ui.window.onSemanticsAction(this.semanticsObject.id, ui.SemanticsAction.tap, null);
          }
        } else {
          if (!(lastTouchStartOffsetY == null)) dart.assertFailed();
        }
        lastTouchStartOffsetX = null;
        lastTouchStartOffsetY = null;
      }, EventToNull()), true);
    }
    update() {
    }
    dispose() {
      this[_textFieldElement][$remove]();
      src__engine.textEditing.stopUsingCustomEditableElement();
    }
  };
  (src__engine.TextField.new = function(semanticsObject) {
    this[persistentTextEditingElement] = null;
    src__engine.TextField.__proto__.new.call(this, src__engine.Role.textField, semanticsObject);
    let editableDomElement = dart.test(semanticsObject.hasFlag(ui.SemanticsFlag.isMultiline)) ? html.TextAreaElement.new() : html.InputElement.new();
    this.persistentTextEditingElement = new src__engine.PersistentTextEditingElement.new(editableDomElement, {onDomElementSwap: dart.bind(this, _setupDomElement)});
    this[_setupDomElement]();
  }).prototype = src__engine.TextField.prototype;
  dart.addTypeTests(src__engine.TextField);
  const persistentTextEditingElement = Symbol("TextField.persistentTextEditingElement");
  dart.setMethodSignature(src__engine.TextField, () => ({
    __proto__: dart.getMethods(src__engine.TextField.__proto__),
    [_setupDomElement]: dart.fnType(dart.void, []),
    [_initializeForBlink]: dart.fnType(dart.void, []),
    [_initializeForWebkit]: dart.fnType(dart.void, []),
    update: dart.fnType(dart.void, []),
    dispose: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(src__engine.TextField, () => ({
    __proto__: dart.getGetters(src__engine.TextField.__proto__),
    [_textFieldElement]: html.Element
  }));
  dart.setFieldSignature(src__engine.TextField, () => ({
    __proto__: dart.getFields(src__engine.TextField.__proto__),
    persistentTextEditingElement: dart.fieldType(src__engine.PersistentTextEditingElement)
  }));
  const _is_MessageCodec_default = Symbol('_is_MessageCodec_default');
  src__engine.MessageCodec$ = dart.generic(T => {
    class MessageCodec extends core.Object {}
    (MessageCodec.new = function() {
      ;
    }).prototype = MessageCodec.prototype;
    dart.addTypeTests(MessageCodec);
    MessageCodec.prototype[_is_MessageCodec_default] = true;
    return MessageCodec;
  });
  src__engine.MessageCodec = src__engine.MessageCodec$();
  dart.addTypeTests(src__engine.MessageCodec, _is_MessageCodec_default);
  src__engine.MethodCall = class MethodCall extends core.Object {
    get method() {
      return this[method$];
    }
    set method(value) {
      super.method = value;
    }
    get arguments() {
      return this[arguments$];
    }
    set arguments(value) {
      super.arguments = value;
    }
    toString() {
      return dart.str(this[$runtimeType]) + "(" + dart.str(this.method) + ", " + dart.str(this.arguments) + ")";
    }
  };
  (src__engine.MethodCall.new = function(method, arguments$0) {
    if (arguments$0 === void 0) arguments$0 = null;
    this[method$] = method;
    this[arguments$] = arguments$0;
    if (!(method != null)) dart.assertFailed();
    ;
  }).prototype = src__engine.MethodCall.prototype;
  dart.addTypeTests(src__engine.MethodCall);
  const method$ = Symbol("MethodCall.method");
  const arguments$ = Symbol("MethodCall.arguments");
  dart.setFieldSignature(src__engine.MethodCall, () => ({
    __proto__: dart.getFields(src__engine.MethodCall.__proto__),
    method: dart.finalFieldType(core.String),
    arguments: dart.finalFieldType(dart.dynamic)
  }));
  dart.defineExtensionMethods(src__engine.MethodCall, ['toString']);
  src__engine.MethodCodec = class MethodCodec extends core.Object {};
  (src__engine.MethodCodec.new = function() {
    ;
  }).prototype = src__engine.MethodCodec.prototype;
  dart.addTypeTests(src__engine.MethodCodec);
  src__engine.PlatformException = class PlatformException extends core.Object {
    get code() {
      return this[code$];
    }
    set code(value) {
      super.code = value;
    }
    get message() {
      return this[message$];
    }
    set message(value) {
      super.message = value;
    }
    get details() {
      return this[details$];
    }
    set details(value) {
      super.details = value;
    }
    toString() {
      return "PlatformException(" + dart.str(this.code) + ", " + dart.str(this.message) + ", " + dart.str(this.details) + ")";
    }
  };
  (src__engine.PlatformException.new = function(opts) {
    let code = opts && 'code' in opts ? opts.code : null;
    let message = opts && 'message' in opts ? opts.message : null;
    let details = opts && 'details' in opts ? opts.details : null;
    this[code$] = code;
    this[message$] = message;
    this[details$] = details;
    if (!(code != null)) dart.assertFailed();
    ;
  }).prototype = src__engine.PlatformException.prototype;
  dart.addTypeTests(src__engine.PlatformException);
  const code$ = Symbol("PlatformException.code");
  const message$ = Symbol("PlatformException.message");
  const details$ = Symbol("PlatformException.details");
  src__engine.PlatformException[dart.implements] = () => [core.Exception];
  dart.setFieldSignature(src__engine.PlatformException, () => ({
    __proto__: dart.getFields(src__engine.PlatformException.__proto__),
    code: dart.finalFieldType(core.String),
    message: dart.finalFieldType(core.String),
    details: dart.finalFieldType(dart.dynamic)
  }));
  dart.defineExtensionMethods(src__engine.PlatformException, ['toString']);
  src__engine.MissingPluginException = class MissingPluginException extends core.Object {
    get message() {
      return this[message$0];
    }
    set message(value) {
      super.message = value;
    }
    toString() {
      return "MissingPluginException(" + dart.str(this.message) + ")";
    }
  };
  (src__engine.MissingPluginException.new = function(message) {
    if (message === void 0) message = null;
    this[message$0] = message;
    ;
  }).prototype = src__engine.MissingPluginException.prototype;
  dart.addTypeTests(src__engine.MissingPluginException);
  const message$0 = Symbol("MissingPluginException.message");
  src__engine.MissingPluginException[dart.implements] = () => [core.Exception];
  dart.setFieldSignature(src__engine.MissingPluginException, () => ({
    __proto__: dart.getFields(src__engine.MissingPluginException.__proto__),
    message: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(src__engine.MissingPluginException, ['toString']);
  src__engine.BinaryCodec = class BinaryCodec extends core.Object {
    decodeMessage(message) {
      return message;
    }
    encodeMessage(message) {
      typed_data.ByteData._check(message);
      return message;
    }
  };
  (src__engine.BinaryCodec.new = function() {
    ;
  }).prototype = src__engine.BinaryCodec.prototype;
  dart.addTypeTests(src__engine.BinaryCodec);
  src__engine.BinaryCodec[dart.implements] = () => [src__engine.MessageCodec$(typed_data.ByteData)];
  dart.setMethodSignature(src__engine.BinaryCodec, () => ({
    __proto__: dart.getMethods(src__engine.BinaryCodec.__proto__),
    decodeMessage: dart.fnType(typed_data.ByteData, [typed_data.ByteData]),
    encodeMessage: dart.fnType(typed_data.ByteData, [core.Object])
  }));
  src__engine.StringCodec = class StringCodec extends core.Object {
    decodeMessage(message) {
      if (message == null) return null;
      return convert.utf8.decoder.convert(message[$buffer][$asUint8List]());
    }
    encodeMessage(message) {
      core.String._check(message);
      if (message == null) return null;
      let encoded = typed_data.Uint8List._check(convert.utf8.encoder.convert(message));
      return encoded[$buffer][$asByteData]();
    }
  };
  (src__engine.StringCodec.new = function() {
    ;
  }).prototype = src__engine.StringCodec.prototype;
  dart.addTypeTests(src__engine.StringCodec);
  src__engine.StringCodec[dart.implements] = () => [src__engine.MessageCodec$(core.String)];
  dart.setMethodSignature(src__engine.StringCodec, () => ({
    __proto__: dart.getMethods(src__engine.StringCodec.__proto__),
    decodeMessage: dart.fnType(core.String, [typed_data.ByteData]),
    encodeMessage: dart.fnType(typed_data.ByteData, [core.Object])
  }));
  let const$30;
  let const$31;
  src__engine.JSONMessageCodec = class JSONMessageCodec extends core.Object {
    encodeMessage(message) {
      if (message == null) return null;
      return (const$30 || (const$30 = dart.const(new src__engine.StringCodec.new()))).encodeMessage(convert.json.encode(message));
    }
    decodeMessage(message) {
      if (message == null) return message;
      return convert.json.decode((const$31 || (const$31 = dart.const(new src__engine.StringCodec.new()))).decodeMessage(message));
    }
  };
  (src__engine.JSONMessageCodec.new = function() {
    ;
  }).prototype = src__engine.JSONMessageCodec.prototype;
  dart.addTypeTests(src__engine.JSONMessageCodec);
  src__engine.JSONMessageCodec[dart.implements] = () => [src__engine.MessageCodec];
  dart.setMethodSignature(src__engine.JSONMessageCodec, () => ({
    __proto__: dart.getMethods(src__engine.JSONMessageCodec.__proto__),
    encodeMessage: dart.fnType(typed_data.ByteData, [core.Object]),
    decodeMessage: dart.fnType(dart.dynamic, [typed_data.ByteData])
  }));
  let const$32;
  let const$33;
  let const$34;
  let const$35;
  let const$36;
  src__engine.JSONMethodCodec = class JSONMethodCodec extends core.Object {
    encodeMethodCall(call) {
      return (const$32 || (const$32 = dart.const(new src__engine.JSONMessageCodec.new()))).encodeMessage(new (IdentityMapOfString$dynamic()).from(["method", call.method, "args", call.arguments]));
    }
    decodeMethodCall(methodCall) {
      let decoded = (const$33 || (const$33 = dart.const(new src__engine.JSONMessageCodec.new()))).decodeMessage(methodCall);
      if (!core.Map.is(decoded)) dart.throw(new core.FormatException.new("Expected method call Map, got " + dart.str(decoded)));
      let method = dart.dsend(decoded, '_get', ["method"]);
      let arguments$0 = dart.dsend(decoded, '_get', ["args"]);
      if (typeof method == 'string') return new src__engine.MethodCall.new(method, arguments$0);
      dart.throw(new core.FormatException.new("Invalid method call: " + dart.str(decoded)));
    }
    decodeEnvelope(envelope) {
      let decoded = (const$34 || (const$34 = dart.const(new src__engine.JSONMessageCodec.new()))).decodeMessage(envelope);
      if (!core.List.is(decoded)) dart.throw(new core.FormatException.new("Expected envelope List, got " + dart.str(decoded)));
      if (dart.equals(dart.dload(decoded, 'length'), 1)) return dart.dsend(decoded, '_get', [0]);
      if (dart.equals(dart.dload(decoded, 'length'), 3) && typeof dart.dsend(decoded, '_get', [0]) == 'string' && (dart.dsend(decoded, '_get', [1]) == null || typeof dart.dsend(decoded, '_get', [1]) == 'string')) dart.throw(new src__engine.PlatformException.new({code: core.String._check(dart.dsend(decoded, '_get', [0])), message: core.String._check(dart.dsend(decoded, '_get', [1])), details: dart.dsend(decoded, '_get', [2])}));
      dart.throw(new core.FormatException.new("Invalid envelope: " + dart.str(decoded)));
    }
    encodeSuccessEnvelope(result) {
      return (const$35 || (const$35 = dart.const(new src__engine.JSONMessageCodec.new()))).encodeMessage([result]);
    }
    encodeErrorEnvelope(opts) {
      let code = opts && 'code' in opts ? opts.code : null;
      let message = opts && 'message' in opts ? opts.message : null;
      let details = opts && 'details' in opts ? opts.details : null;
      if (!(code != null)) dart.assertFailed();
      return (const$36 || (const$36 = dart.const(new src__engine.JSONMessageCodec.new()))).encodeMessage([code, message, details]);
    }
  };
  (src__engine.JSONMethodCodec.new = function() {
    ;
  }).prototype = src__engine.JSONMethodCodec.prototype;
  dart.addTypeTests(src__engine.JSONMethodCodec);
  src__engine.JSONMethodCodec[dart.implements] = () => [src__engine.MethodCodec];
  dart.setMethodSignature(src__engine.JSONMethodCodec, () => ({
    __proto__: dart.getMethods(src__engine.JSONMethodCodec.__proto__),
    encodeMethodCall: dart.fnType(typed_data.ByteData, [src__engine.MethodCall]),
    decodeMethodCall: dart.fnType(src__engine.MethodCall, [typed_data.ByteData]),
    decodeEnvelope: dart.fnType(dart.dynamic, [typed_data.ByteData]),
    encodeSuccessEnvelope: dart.fnType(typed_data.ByteData, [dart.dynamic]),
    encodeErrorEnvelope: dart.fnType(typed_data.ByteData, [], {code: core.String, details: dart.dynamic, message: core.String})
  }));
  let const$37;
  src__engine.ElevationShadow = class ElevationShadow extends core.Object {
    static applyShadowTransition(style) {
      style[$transition] = "box-shadow .28s cubic-bezier(.4, 0, .2, 1)";
    }
    static applyShadowNone(style) {
      style[$boxShadow] = "none";
    }
    static applyShadowElevation(style, opts) {
      let dp = opts && 'dp' in opts ? opts.dp : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let keyUmbraOpacity = 0.2;
      let keyPenumbraOpacity = 0.14;
      let ambientShadowOpacity = 0.12;
      let rgb = dart.str(color.red) + ", " + dart.str(color.green) + ", " + dart.str(color.blue);
      if (dp === 2) {
        style[$boxShadow] = "0 2px 2px 0 rgba(" + rgb + ", " + dart.str(keyPenumbraOpacity) + "), " + "0 3px 1px -2px rgba(" + rgb + ", " + dart.str(ambientShadowOpacity) + "), " + "0 1px 5px 0 rgba(" + rgb + ", " + dart.str(keyUmbraOpacity) + ")";
      } else if (dp === 3) {
        style[$boxShadow] = "0 3px 4px 0 rgba(" + rgb + ", " + dart.str(keyPenumbraOpacity) + "), " + "0 3px 3px -2px rgba(" + rgb + ", " + dart.str(ambientShadowOpacity) + "), " + "0 1px 8px 0 rgba(" + rgb + ", " + dart.str(keyUmbraOpacity) + ")";
      } else if (dp === 4) {
        style[$boxShadow] = "0 4px 5px 0 rgba(" + rgb + ", " + dart.str(keyPenumbraOpacity) + "), " + "0 1px 10px 0 rgba(" + rgb + ", " + dart.str(ambientShadowOpacity) + "), " + "0 2px 4px -1px rgba(" + rgb + ", " + dart.str(keyUmbraOpacity) + ")";
      } else if (dp === 6) {
        style[$boxShadow] = "0 6px 10px 0 rgba(" + rgb + ", " + dart.str(keyPenumbraOpacity) + "), " + "0 1px 18px 0 rgba(" + rgb + ", " + dart.str(ambientShadowOpacity) + "), " + "0 3px 5px -1px rgba(" + rgb + ", " + dart.str(keyUmbraOpacity) + ")";
      } else if (dp === 8) {
        style[$boxShadow] = "0 8px 10px 1px rgba(" + rgb + ", " + dart.str(keyPenumbraOpacity) + "), " + "0 3px 14px 2px rgba(" + rgb + ", " + dart.str(ambientShadowOpacity) + "), " + "0 5px 5px -3px rgba(" + rgb + ", " + dart.str(keyUmbraOpacity) + ")";
      } else if (dp === 12) {
        style[$boxShadow] = "0 12px 17px 2px rgba(" + rgb + ", " + dart.str(keyPenumbraOpacity) + "), " + "0 5px 22px 4px rgba(" + rgb + ", " + dart.str(ambientShadowOpacity) + "), " + "0 7px 8px -4px rgba(" + rgb + ", " + dart.str(keyUmbraOpacity) + ")";
      } else if (dp === 16) {
        style[$boxShadow] = "0 16px 24px 2px rgba(" + rgb + ", " + dart.str(keyPenumbraOpacity) + "), " + "0  6px 30px 5px rgba(" + rgb + ", " + dart.str(ambientShadowOpacity) + "), " + "0  8px 10px -5px rgba(" + rgb + ", " + dart.str(keyUmbraOpacity) + ")";
      } else {
        style[$boxShadow] = "0 24px 38px 3px rgba(" + rgb + ", " + dart.str(keyPenumbraOpacity) + "), " + "0  9px 46px 8px rgba(" + rgb + ", " + dart.str(ambientShadowOpacity) + "), " + "0  11px 15px -7px rgba(" + rgb + ", " + dart.str(keyUmbraOpacity) + ")";
      }
    }
    static applyShadow(style, elevation, color) {
      src__engine.ElevationShadow.applyShadowTransition(style);
      if (dart.notNull(elevation) <= 0.0) {
        src__engine.ElevationShadow.applyShadowNone(style);
      } else if (dart.notNull(elevation) <= 1.0) {
        src__engine.ElevationShadow.applyShadowElevation(style, {dp: 2, color: color});
      } else if (dart.notNull(elevation) <= 2.0) {
        src__engine.ElevationShadow.applyShadowElevation(style, {dp: 4, color: color});
      } else if (dart.notNull(elevation) <= 3.0) {
        src__engine.ElevationShadow.applyShadowElevation(style, {dp: 6, color: color});
      } else if (dart.notNull(elevation) <= 4.0) {
        src__engine.ElevationShadow.applyShadowElevation(style, {dp: 8, color: color});
      } else if (dart.notNull(elevation) <= 5.0) {
        src__engine.ElevationShadow.applyShadowElevation(style, {dp: 16, color: color});
      } else {
        src__engine.ElevationShadow.applyShadowElevation(style, {dp: 24, color: color});
      }
    }
    static computeCanvasShadows(elevation, color) {
      if (dart.notNull(elevation) <= 0.0) {
        return const$37 || (const$37 = dart.constList([], src__engine.CanvasShadow));
      } else if (dart.notNull(elevation) <= 1.0) {
        return src__engine.ElevationShadow.computeShadowElevation({dp: 2, color: color});
      } else if (dart.notNull(elevation) <= 2.0) {
        return src__engine.ElevationShadow.computeShadowElevation({dp: 4, color: color});
      } else if (dart.notNull(elevation) <= 3.0) {
        return src__engine.ElevationShadow.computeShadowElevation({dp: 6, color: color});
      } else if (dart.notNull(elevation) <= 4.0) {
        return src__engine.ElevationShadow.computeShadowElevation({dp: 8, color: color});
      } else if (dart.notNull(elevation) <= 5.0) {
        return src__engine.ElevationShadow.computeShadowElevation({dp: 16, color: color});
      } else {
        return src__engine.ElevationShadow.computeShadowElevation({dp: 24, color: color});
      }
    }
    static computeShadowRect(r, elevation) {
      if (dart.notNull(elevation) <= 0.0) {
        return r;
      } else if (dart.notNull(elevation) <= 1.0) {
        return new ui.Rect.fromLTRB(dart.notNull(r.left) - 2.5, dart.notNull(r.top) - 1.5, dart.notNull(r.right) + 3, dart.notNull(r.bottom) + 4);
      } else if (dart.notNull(elevation) <= 2.0) {
        return new ui.Rect.fromLTRB(dart.notNull(r.left) - 5, dart.notNull(r.top) - 3, dart.notNull(r.right) + 6, dart.notNull(r.bottom) + 7);
      } else if (dart.notNull(elevation) <= 3.0) {
        return new ui.Rect.fromLTRB(dart.notNull(r.left) - 9, dart.notNull(r.top) - 8, dart.notNull(r.right) + 9, dart.notNull(r.bottom) + 11);
      } else if (dart.notNull(elevation) <= 4.0) {
        return new ui.Rect.fromLTRB(dart.notNull(r.left) - 10, dart.notNull(r.top) - 6, dart.notNull(r.right) + 10, dart.notNull(r.bottom) + 14);
      } else if (dart.notNull(elevation) <= 5.0) {
        return new ui.Rect.fromLTRB(dart.notNull(r.left) - 15, dart.notNull(r.top) - 9, dart.notNull(r.right) + 20, dart.notNull(r.bottom) + 30);
      } else {
        return new ui.Rect.fromLTRB(dart.notNull(r.left) - 23, dart.notNull(r.top) - 14, dart.notNull(r.right) + 23, dart.notNull(r.bottom) + 45);
      }
    }
    static computeShadowElevation(opts) {
      let dp = opts && 'dp' in opts ? opts.dp : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let red = color.red;
      let green = color.green;
      let blue = color.blue;
      let penumbraColor = new ui.Color.fromARGB(36, red, green, blue);
      let ambientShadowColor = new ui.Color.fromARGB(31, red, green, blue);
      let umbraColor = new ui.Color.fromARGB(51, red, green, blue);
      let result = JSArrayOfCanvasShadow().of([]);
      if (dp === 2) {
        result[$add](new src__engine.CanvasShadow.new({offsetX: 0.0, offsetY: 2.0, blur: 1.0, spread: 0.0, color: penumbraColor}));
        result[$add](new src__engine.CanvasShadow.new({offsetX: 0.0, offsetY: 3.0, blur: 0.5, spread: -2.0, color: ambientShadowColor}));
        result[$add](new src__engine.CanvasShadow.new({offsetX: 0.0, offsetY: 1.0, blur: 2.5, spread: 0.0, color: umbraColor}));
      } else if (dp === 3) {
        result[$add](new src__engine.CanvasShadow.new({offsetX: 0.0, offsetY: 1.5, blur: 4.0, spread: 0.0, color: penumbraColor}));
        result[$add](new src__engine.CanvasShadow.new({offsetX: 0.0, offsetY: 3.0, blur: 1.5, spread: -2.0, color: ambientShadowColor}));
        result[$add](new src__engine.CanvasShadow.new({offsetX: 0.0, offsetY: 1.0, blur: 4.0, spread: 0.0, color: umbraColor}));
      } else if (dp === 4) {
        result[$add](new src__engine.CanvasShadow.new({offsetX: 0.0, offsetY: 4.0, blur: 2.5, spread: 0.0, color: penumbraColor}));
        result[$add](new src__engine.CanvasShadow.new({offsetX: 0.0, offsetY: 1.0, blur: 5.0, spread: 0.0, color: ambientShadowColor}));
        result[$add](new src__engine.CanvasShadow.new({offsetX: 0.0, offsetY: 2.0, blur: 2.0, spread: -1.0, color: umbraColor}));
      } else if (dp === 6) {
        result[$add](new src__engine.CanvasShadow.new({offsetX: 0.0, offsetY: 6.0, blur: 5.0, spread: 0.0, color: penumbraColor}));
        result[$add](new src__engine.CanvasShadow.new({offsetX: 0.0, offsetY: 1.0, blur: 9.0, spread: 0.0, color: ambientShadowColor}));
        result[$add](new src__engine.CanvasShadow.new({offsetX: 0.0, offsetY: 3.0, blur: 2.5, spread: -1.0, color: umbraColor}));
      } else if (dp === 8) {
        result[$add](new src__engine.CanvasShadow.new({offsetX: 0.0, offsetY: 4.0, blur: 10.0, spread: 1.0, color: penumbraColor}));
        result[$add](new src__engine.CanvasShadow.new({offsetX: 0.0, offsetY: 3.0, blur: 7.0, spread: 2.0, color: ambientShadowColor}));
        result[$add](new src__engine.CanvasShadow.new({offsetX: 0.0, offsetY: 5.0, blur: 2.5, spread: -3.0, color: umbraColor}));
      } else if (dp === 12) {
        result[$add](new src__engine.CanvasShadow.new({offsetX: 0.0, offsetY: 12.0, blur: 8.5, spread: 2.0, color: penumbraColor}));
        result[$add](new src__engine.CanvasShadow.new({offsetX: 0.0, offsetY: 5.0, blur: 11.0, spread: 4.0, color: ambientShadowColor}));
        result[$add](new src__engine.CanvasShadow.new({offsetX: 0.0, offsetY: 7.0, blur: 4.0, spread: -4.0, color: umbraColor}));
      } else if (dp === 16) {
        result[$add](new src__engine.CanvasShadow.new({offsetX: 0.0, offsetY: 16.0, blur: 12.0, spread: 2.0, color: penumbraColor}));
        result[$add](new src__engine.CanvasShadow.new({offsetX: 0.0, offsetY: 6.0, blur: 15.0, spread: 5.0, color: ambientShadowColor}));
        result[$add](new src__engine.CanvasShadow.new({offsetX: 0.0, offsetY: 0.0, blur: 5.0, spread: -5.0, color: umbraColor}));
      } else {
        result[$add](new src__engine.CanvasShadow.new({offsetX: 0.0, offsetY: 24.0, blur: 18.0, spread: 3.0, color: penumbraColor}));
        result[$add](new src__engine.CanvasShadow.new({offsetX: 0.0, offsetY: 9.0, blur: 23.0, spread: 8.0, color: ambientShadowColor}));
        result[$add](new src__engine.CanvasShadow.new({offsetX: 0.0, offsetY: 11.0, blur: 7.5, spread: -7.0, color: umbraColor}));
      }
      return result;
    }
  };
  (src__engine.ElevationShadow.new = function() {
    ;
  }).prototype = src__engine.ElevationShadow.prototype;
  dart.addTypeTests(src__engine.ElevationShadow);
  src__engine.CanvasShadow = class CanvasShadow extends core.Object {
    get offsetX() {
      return this[offsetX$];
    }
    set offsetX(value) {
      super.offsetX = value;
    }
    get offsetY() {
      return this[offsetY$];
    }
    set offsetY(value) {
      super.offsetY = value;
    }
    get blur() {
      return this[blur$];
    }
    set blur(value) {
      super.blur = value;
    }
    get spread() {
      return this[spread$];
    }
    set spread(value) {
      super.spread = value;
    }
    get color() {
      return this[color$1];
    }
    set color(value) {
      super.color = value;
    }
  };
  (src__engine.CanvasShadow.new = function(opts) {
    let offsetX = opts && 'offsetX' in opts ? opts.offsetX : null;
    let offsetY = opts && 'offsetY' in opts ? opts.offsetY : null;
    let blur = opts && 'blur' in opts ? opts.blur : null;
    let spread = opts && 'spread' in opts ? opts.spread : null;
    let color = opts && 'color' in opts ? opts.color : null;
    this[offsetX$] = offsetX;
    this[offsetY$] = offsetY;
    this[blur$] = blur;
    this[spread$] = spread;
    this[color$1] = color;
    ;
  }).prototype = src__engine.CanvasShadow.prototype;
  dart.addTypeTests(src__engine.CanvasShadow);
  const offsetX$ = Symbol("CanvasShadow.offsetX");
  const offsetY$ = Symbol("CanvasShadow.offsetY");
  const blur$ = Symbol("CanvasShadow.blur");
  const spread$ = Symbol("CanvasShadow.spread");
  const color$1 = Symbol("CanvasShadow.color");
  dart.setFieldSignature(src__engine.CanvasShadow, () => ({
    __proto__: dart.getFields(src__engine.CanvasShadow.__proto__),
    offsetX: dart.finalFieldType(core.double),
    offsetY: dart.finalFieldType(core.double),
    blur: dart.finalFieldType(core.double),
    spread: dart.finalFieldType(core.double),
    color: dart.finalFieldType(ui.Color)
  }));
  const _assetFontManager = dart.privateName(src__engine, "_assetFontManager");
  const _testFontManager = dart.privateName(src__engine, "_testFontManager");
  let const$38;
  src__engine.FontCollection = class FontCollection extends core.Object {
    registerFonts(assetManager) {
      return async.async(dart.void, (function* registerFonts() {
        let byteData = null;
        try {
          byteData = (yield assetManager.load("FontManifest.json"));
        } catch (e$) {
          let e = dart.getThrown(e$);
          if (src__engine.AssetManagerException.is(e)) {
            if (e.httpStatus === 404) {
              html.window[$console].warn("Font manifest does not exist at `" + dart.str(e.url) + "` – ignoring.");
              return;
            } else {
              dart.rethrow(e$);
            }
          } else
            throw e$;
        }
        if (byteData == null) {
          dart.throw(new core.AssertionError.new("There was a problem trying to load FontManifest.json"));
        }
        let fontManifest = core.List._check(convert.json.decode(convert.utf8.decode(byteData[$buffer][$asUint8List]())));
        if (fontManifest == null) {
          dart.throw(new core.AssertionError.new("There was a problem trying to load FontManifest.json"));
        }
        if (dart.test(src__engine.supportsFontLoadingApi)) {
          this[_assetFontManager] = src__engine._FontManager.new();
        } else {
          this[_assetFontManager] = new src__engine._PolyfillFontManager.new();
        }
        if (!dart.equals(src__engine.browserEngine, src__engine.BrowserEngine.blink)) {
          this[_assetFontManager].registerAsset("Roboto", "url(" + dart.str(src__engine._robotoFontUrl) + ")", new (IdentityMapOfString$String()).new());
        }
        for (let t2 of fontManifest) {
          let fontFamily = MapOfString$dynamic()._check(t2);
          let family = core.String._check(fontFamily[$_get]("family"));
          let fontAssets = core.List._check(fontFamily[$_get]("fonts"));
          for (let t3 of fontAssets) {
            let fontAsset = MapOfString$dynamic()._check(t3);
            let asset = core.String._check(fontAsset[$_get]("asset"));
            let descriptors = new (IdentityMapOfString$String()).new();
            for (let descriptor of fontAsset[$keys]) {
              if (descriptor !== "asset") {
                descriptors[$_set](descriptor, dart.str(fontAsset[$_get](descriptor)));
              }
            }
            this[_assetFontManager].registerAsset(family, "url(" + dart.str(assetManager.getAssetUrl(asset)) + ")", descriptors);
          }
        }
      }).bind(this));
    }
    debugRegisterTestFonts() {
      this[_testFontManager] = src__engine._FontManager.new();
      this[_testFontManager].registerAsset(src__engine._testFontFamily, "url(" + dart.str(src__engine._testFontUrl) + ")", const$38 || (const$38 = dart.constMap(core.String, core.String, [])));
    }
    ensureFontsLoaded() {
      return async.async(dart.void, (function* ensureFontsLoaded() {
        let t4, t4$;
        yield (t4 = this[_assetFontManager], t4 == null ? null : t4.ensureFontsLoaded());
        yield (t4$ = this[_testFontManager], t4$ == null ? null : t4$.ensureFontsLoaded());
      }).bind(this));
    }
    clear() {
      this[_assetFontManager] = null;
      this[_testFontManager] = null;
      if (dart.test(src__engine.supportsFontLoadingApi)) {
        html.document.fonts.clear();
      }
    }
  };
  (src__engine.FontCollection.new = function() {
    this[_assetFontManager] = null;
    this[_testFontManager] = null;
    ;
  }).prototype = src__engine.FontCollection.prototype;
  dart.addTypeTests(src__engine.FontCollection);
  dart.setMethodSignature(src__engine.FontCollection, () => ({
    __proto__: dart.getMethods(src__engine.FontCollection.__proto__),
    registerFonts: dart.fnType(async.Future$(dart.void), [src__engine.AssetManager]),
    debugRegisterTestFonts: dart.fnType(dart.void, []),
    ensureFontsLoaded: dart.fnType(async.Future$(dart.void), []),
    clear: dart.fnType(dart.void, [])
  }));
  dart.setFieldSignature(src__engine.FontCollection, () => ({
    __proto__: dart.getFields(src__engine.FontCollection.__proto__),
    [_assetFontManager]: dart.fieldType(src__engine._FontManager),
    [_testFontManager]: dart.fieldType(src__engine._FontManager)
  }));
  const _fontLoadingFutures = dart.privateName(src__engine, "_fontLoadingFutures");
  src__engine._FontManager = class _FontManager extends core.Object {
    static new() {
      if (dart.test(src__engine.supportsFontLoadingApi)) {
        return new src__engine._FontManager.__();
      } else {
        return new src__engine._PolyfillFontManager.new();
      }
    }
    registerAsset(family, asset, descriptors) {
      let fontFace = html.FontFace.new(family, asset, descriptors);
      this[_fontLoadingFutures][$add](fontFace[$load]().then(dart.void, dart.fn(_ => html.document.fonts.add(fontFace), FontFaceToFontFaceSet()), {onError: dart.fn(e => {
          html.window[$console].warn("Error while trying to load font family \"" + dart.str(family) + "\":\n" + dart.str(e));
          return null;
        }, dynamicToNull())}));
    }
    ensureFontsLoaded() {
      return async.Future.wait(dart.void, this[_fontLoadingFutures]);
    }
  };
  (src__engine._FontManager.__ = function() {
    this[_fontLoadingFutures] = JSArrayOfFutureOfvoid().of([]);
    ;
  }).prototype = src__engine._FontManager.prototype;
  dart.addTypeTests(src__engine._FontManager);
  dart.setMethodSignature(src__engine._FontManager, () => ({
    __proto__: dart.getMethods(src__engine._FontManager.__proto__),
    registerAsset: dart.fnType(dart.void, [core.String, core.String, core.Map$(core.String, core.String)]),
    ensureFontsLoaded: dart.fnType(async.Future$(dart.void), [])
  }));
  dart.setFieldSignature(src__engine._FontManager, () => ({
    __proto__: dart.getFields(src__engine._FontManager.__proto__),
    [_fontLoadingFutures]: dart.finalFieldType(core.List$(async.Future$(dart.void)))
  }));
  src__engine._PolyfillFontManager = class _PolyfillFontManager extends src__engine._FontManager {
    registerAsset(family, asset, descriptors) {
      let paragraph = html.ParagraphElement.new();
      paragraph.style[$position] = "absolute";
      paragraph.style[$visibility] = "hidden";
      paragraph.style[$fontSize] = "72px";
      paragraph.style[$fontFamily] = "sans-serif";
      if (descriptors[$_get]("style") != null) {
        paragraph.style[$fontStyle] = descriptors[$_get]("style");
      }
      if (descriptors[$_get]("weight") != null) {
        paragraph.style[$fontWeight] = descriptors[$_get]("weight");
      }
      paragraph[$text] = src__engine._PolyfillFontManager._testString;
      html.document.body[$append](paragraph);
      let sansSerifWidth = paragraph[$offsetWidth];
      paragraph.style[$fontFamily] = dart.str(family) + ", sans-serif";
      let completer = CompleterOfvoid().new();
      let _fontLoadStart = null;
      function _watchWidth() {
        if (paragraph[$offsetWidth] != sansSerifWidth) {
          paragraph[$remove]();
          completer.complete();
        } else {
          if (dart.test(new core.DateTime.now().difference(_fontLoadStart)['>'](src__engine._PolyfillFontManager._fontLoadTimeout))) {
            completer.completeError(core.Exception.new("Timed out trying to load font: " + dart.str(family)));
          } else {
            async.Timer.new(src__engine._PolyfillFontManager._fontLoadRetryDuration, _watchWidth);
          }
        }
      }
      dart.fn(_watchWidth, VoidTovoid());
      let fontStyleMap = new (IdentityMapOfString$String()).new();
      fontStyleMap[$_set]("font-family", "'" + dart.str(family) + "'");
      fontStyleMap[$_set]("src", asset);
      if (descriptors[$_get]("style") != null) {
        fontStyleMap[$_set]("font-style", descriptors[$_get]("style"));
      }
      if (descriptors[$_get]("weight") != null) {
        fontStyleMap[$_set]("font-weight", descriptors[$_get]("weight"));
      }
      let fontFaceDeclaration = fontStyleMap[$keys][$map](core.String, dart.fn(name => dart.str(name) + ": " + dart.str(fontStyleMap[$_get](name)) + ";", StringToString()))[$join](" ");
      let fontLoadStyle = html.StyleElement.new();
      fontLoadStyle.type = "text/css";
      fontLoadStyle[$innerHtml] = "@font-face { " + dart.str(fontFaceDeclaration) + " }";
      html.document[$head][$append](fontLoadStyle);
      if (family[$toLowerCase]()[$contains]("icon")) {
        paragraph[$remove]();
        return;
      }
      _fontLoadStart = new core.DateTime.now();
      _watchWidth();
      this[_fontLoadingFutures][$add](completer.future);
    }
  };
  (src__engine._PolyfillFontManager.new = function() {
    src__engine._PolyfillFontManager.__proto__.__.call(this);
    ;
  }).prototype = src__engine._PolyfillFontManager.prototype;
  dart.addTypeTests(src__engine._PolyfillFontManager);
  dart.defineLazy(src__engine._PolyfillFontManager, {
    /*src__engine._PolyfillFontManager._testString*/get _testString() {
      return "giItT1WQy@!-/#";
    },
    /*src__engine._PolyfillFontManager._fontLoadTimeout*/get _fontLoadTimeout() {
      return dart.const(new core.Duration.new({seconds: 2}));
    },
    /*src__engine._PolyfillFontManager._fontLoadRetryDuration*/get _fontLoadRetryDuration() {
      return dart.const(new core.Duration.new({milliseconds: 50}));
    }
  });
  const _rulerHost = dart.privateName(src__engine, "_rulerHost");
  const _rulers = dart.privateName(src__engine, "_rulers");
  const _rulerCacheCleanupScheduled = dart.privateName(src__engine, "_rulerCacheCleanupScheduled");
  const _scheduleRulerCacheCleanup = dart.privateName(src__engine, "_scheduleRulerCacheCleanup");
  const _findOrCreateRuler = dart.privateName(src__engine, "_findOrCreateRuler");
  const _hitCount = dart.privateName(src__engine, "_hitCount");
  const _measureSingleLineParagraph = dart.privateName(src__engine, "_measureSingleLineParagraph");
  const _measureMultiLineParagraph = dart.privateName(src__engine, "_measureMultiLineParagraph");
  src__engine.TextMeasurementService = class TextMeasurementService extends core.Object {
    get rulerCacheCapacity() {
      return this[rulerCacheCapacity$];
    }
    set rulerCacheCapacity(value) {
      super.rulerCacheCapacity = value;
    }
    get canvasContext() {
      return this[canvasContext];
    }
    set canvasContext(value) {
      super.canvasContext = value;
    }
    static initialize(opts) {
      let rulerCacheCapacity = opts && 'rulerCacheCapacity' in opts ? opts.rulerCacheCapacity : null;
      src__engine.TextMeasurementService._instance = new src__engine.TextMeasurementService.__({rulerCacheCapacity: rulerCacheCapacity});
      return src__engine.TextMeasurementService._instance;
    }
    static get instance() {
      return src__engine.TextMeasurementService._instance;
    }
    get rulers() {
      return this[_rulers];
    }
    [_scheduleRulerCacheCleanup]() {
      if (!dart.test(this[_rulerCacheCleanupScheduled])) {
        this[_rulerCacheCleanupScheduled] = true;
        async.scheduleMicrotask(dart.fn(() => {
          this[_rulerCacheCleanupScheduled] = false;
          this.cleanUpRulerCache();
        }, VoidToNull()));
      }
    }
    cleanUpRulerCache() {
      if (dart.notNull(this[_rulers][$length]) > dart.notNull(this.rulerCacheCapacity)) {
        let sortedByUsage = this[_rulers][$values][$toList]();
        sortedByUsage[$sort](dart.fn((a, b) => dart.notNull(b.hitCount) - dart.notNull(a.hitCount), ParagraphRulerAndParagraphRulerToint()));
        this[_rulers] = new (LinkedMapOfParagraphGeometricStyle$ParagraphRuler()).new();
        for (let i = 0; i < dart.notNull(sortedByUsage[$length]); i = i + 1) {
          let ruler = sortedByUsage[$_get](i);
          ruler.resetHitCount();
          if (i < dart.notNull(this.rulerCacheCapacity)) {
            this[_rulers][$_set](ruler.style, ruler);
          } else {
            ruler.dispose();
          }
        }
      }
    }
    addHostElement(element) {
      this[_rulerHost][$append](element);
    }
    measure(paragraph, constraints) {
      let t4, t4$, t4$0;
      let style = paragraph.webOnlyGetParagraphGeometricStyle();
      let ruler = this[_findOrCreateRuler](style);
      if (dart.test(src__engine.assertionsEnabled)) {
        if (paragraph.webOnlyGetPlainText() == null) {
          src__engine.domRenderer.debugRichTextLayout();
        } else {
          src__engine.domRenderer.debugPlainTextLayout();
        }
      }
      let cacheEntry = ruler.cacheLookup(paragraph, constraints);
      if (cacheEntry != null) {
        cacheEntry.applyToParagraph(paragraph);
        t4 = ruler;
        t4[_hitCount] = dart.notNull(t4[_hitCount]) + 1;
        return;
      }
      ruler.willMeasure(paragraph);
      ruler.measureAll(constraints);
      let plainText = paragraph.webOnlyGetPlainText();
      let hasNewline = (t4$0 = (t4$ = plainText, t4$ == null ? null : t4$[$contains]("\n")), t4$0 == null ? false : t4$0);
      if (!dart.test(hasNewline) && dart.notNull(ruler.singleLineDimensions.width) <= dart.notNull(constraints.width)) {
        this[_measureSingleLineParagraph](ruler, paragraph, constraints);
      } else {
        if (!(dart.test(hasNewline) || constraints.width != core.double.infinity)) dart.assertFailed();
        this[_measureMultiLineParagraph](ruler, paragraph, constraints);
      }
      ruler.didMeasure();
    }
    measureSingleLineText(paragraph) {
      let style = paragraph.webOnlyGetParagraphGeometricStyle();
      let ruler = this[_findOrCreateRuler](style);
      ruler.willMeasure(paragraph);
      ruler.measureAsSingleLine();
      let dimensions = ruler.singleLineDimensions;
      ruler.didMeasure();
      return dimensions;
    }
    measureSingleLineWidth(text, style) {
      if (!(style.letterSpacing == null && style.wordSpacing == null && style.decoration == null)) dart.assertFailed("Cannot measure text using canvas if it uses " + "letter spacing, word spacing or decoration: " + dart.str(style));
      this.canvasContext.font = style.cssFontString;
      return this.canvasContext.measureText(text).width;
    }
    measureBoxesForRange(paragraph, constraints, opts) {
      let start = opts && 'start' in opts ? opts.start : null;
      let end = opts && 'end' in opts ? opts.end : null;
      let alignOffset = opts && 'alignOffset' in opts ? opts.alignOffset : null;
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      let style = paragraph.webOnlyGetParagraphGeometricStyle();
      let ruler = this[_findOrCreateRuler](style);
      return ruler.measureBoxesForRange(paragraph.webOnlyGetPlainText(), constraints, {start: start, end: end, alignOffset: alignOffset, textDirection: textDirection});
    }
    [_findOrCreateRuler](style) {
      let t6, t5, t4;
      let ruler = this[_rulers][$_get](style);
      if (ruler != null) {
        if (dart.test(src__engine.assertionsEnabled)) {
          src__engine.domRenderer.debugRulerCacheHit();
        }
        return ruler;
      }
      if (dart.test(src__engine.assertionsEnabled)) {
        src__engine.domRenderer.debugRulerCacheMiss();
      }
      this[_scheduleRulerCacheCleanup]();
      t4 = this[_rulers];
      t5 = style;
      t6 = new src__engine.ParagraphRuler.new(style);
      t4[$_set](t5, t6);
      return t6;
    }
    [_measureSingleLineParagraph](ruler, paragraph, constraints) {
      let width = constraints.width;
      let minIntrinsicWidth = ruler.minIntrinsicDimensions.width;
      let maxIntrinsicWidth = ruler.singleLineDimensions.width;
      let alphabeticBaseline = ruler.alphabeticBaseline;
      let height = ruler.singleLineDimensions.height;
      maxIntrinsicWidth = src__engine.TextMeasurementService._applySubPixelRoundingHack(minIntrinsicWidth, maxIntrinsicWidth);
      let ideographicBaseline = dart.notNull(alphabeticBaseline) * dart.notNull(src__engine.TextMeasurementService._baselineRatioHack);
      let cacheEntry = new src__engine.RulerCacheEntry.new(constraints.width, {isSingleLine: true, width: width, height: height, lineHeight: height, minIntrinsicWidth: minIntrinsicWidth, maxIntrinsicWidth: maxIntrinsicWidth, alphabeticBaseline: alphabeticBaseline, ideographicBaseline: ideographicBaseline});
      ruler.cacheMeasurement(paragraph, constraints, cacheEntry);
      cacheEntry.applyToParagraph(paragraph);
    }
    [_measureMultiLineParagraph](ruler, paragraph, constraints) {
      let width = constraints.width;
      let minIntrinsicWidth = ruler.minIntrinsicDimensions.width;
      let maxIntrinsicWidth = ruler.singleLineDimensions.width;
      let alphabeticBaseline = ruler.alphabeticBaseline;
      let height = ruler.constrainedDimensions.height;
      let lineHeight = height;
      if (paragraph.webOnlyGetParagraphGeometricStyle().maxLines != null) {
        lineHeight = ruler.lineHeightDimensions.height;
      }
      maxIntrinsicWidth = src__engine.TextMeasurementService._applySubPixelRoundingHack(minIntrinsicWidth, maxIntrinsicWidth);
      if (!(dart.notNull(minIntrinsicWidth) <= dart.notNull(maxIntrinsicWidth))) dart.assertFailed();
      let ideographicBaseline = dart.notNull(alphabeticBaseline) * dart.notNull(src__engine.TextMeasurementService._baselineRatioHack);
      let cacheEntry = new src__engine.RulerCacheEntry.new(constraints.width, {isSingleLine: false, width: width, height: height, lineHeight: lineHeight, minIntrinsicWidth: minIntrinsicWidth, maxIntrinsicWidth: maxIntrinsicWidth, alphabeticBaseline: alphabeticBaseline, ideographicBaseline: ideographicBaseline});
      ruler.cacheMeasurement(paragraph, constraints, cacheEntry);
      cacheEntry.applyToParagraph(paragraph);
    }
    static _applySubPixelRoundingHack(minIntrinsicWidth, maxIntrinsicWidth) {
      if (dart.notNull(minIntrinsicWidth) <= dart.notNull(maxIntrinsicWidth)) {
        return maxIntrinsicWidth;
      }
      if (dart.notNull(minIntrinsicWidth) - dart.notNull(maxIntrinsicWidth) < 2.0) {
        return minIntrinsicWidth;
      }
      dart.throw(core.Exception.new("minIntrinsicWidth (" + dart.str(minIntrinsicWidth) + ") is greater than " + "maxIntrinsicWidth (" + dart.str(maxIntrinsicWidth) + ")."));
    }
  };
  (src__engine.TextMeasurementService.__ = function(opts) {
    let t4;
    let rulerCacheCapacity = opts && 'rulerCacheCapacity' in opts ? opts.rulerCacheCapacity : null;
    this[canvasContext] = html.CanvasElement.new()[$context2D];
    this[_rulerHost] = html.Element.tag("flt-ruler-host");
    this[_rulers] = new (LinkedMapOfParagraphGeometricStyle$ParagraphRuler()).new();
    this[_rulerCacheCleanupScheduled] = false;
    this[rulerCacheCapacity$] = rulerCacheCapacity;
    t4 = this[_rulerHost].style;
    t4[$position] = "fixed";
    t4[$visibility] = "hidden";
    t4[$overflow] = "hidden";
    t4[$top] = "0";
    t4[$left] = "0";
    t4[$width] = "0";
    t4[$height] = "0";
    t4;
    html.document.body[$append](this[_rulerHost]);
    src__engine.registerHotRestartListener(dart.fn(() => {
      let t4;
      t4 = this[_rulerHost];
      t4 == null ? null : t4[$remove]();
    }, VoidToNull()));
  }).prototype = src__engine.TextMeasurementService.prototype;
  dart.addTypeTests(src__engine.TextMeasurementService);
  const rulerCacheCapacity$ = Symbol("TextMeasurementService.rulerCacheCapacity");
  const canvasContext = Symbol("TextMeasurementService.canvasContext");
  dart.setMethodSignature(src__engine.TextMeasurementService, () => ({
    __proto__: dart.getMethods(src__engine.TextMeasurementService.__proto__),
    [_scheduleRulerCacheCleanup]: dart.fnType(dart.void, []),
    cleanUpRulerCache: dart.fnType(dart.void, []),
    addHostElement: dart.fnType(dart.void, [html.DivElement]),
    measure: dart.fnType(dart.void, [ui.Paragraph, ui.ParagraphConstraints]),
    measureSingleLineText: dart.fnType(src__engine.TextDimensions, [ui.Paragraph]),
    measureSingleLineWidth: dart.fnType(core.double, [core.String, src__engine.ParagraphGeometricStyle]),
    measureBoxesForRange: dart.fnType(core.List$(ui.TextBox), [ui.Paragraph, ui.ParagraphConstraints], {alignOffset: core.double, end: core.int, start: core.int, textDirection: ui.TextDirection}),
    [_findOrCreateRuler]: dart.fnType(src__engine.ParagraphRuler, [src__engine.ParagraphGeometricStyle]),
    [_measureSingleLineParagraph]: dart.fnType(dart.void, [src__engine.ParagraphRuler, ui.Paragraph, ui.ParagraphConstraints]),
    [_measureMultiLineParagraph]: dart.fnType(dart.void, [src__engine.ParagraphRuler, ui.Paragraph, ui.ParagraphConstraints])
  }));
  dart.setGetterSignature(src__engine.TextMeasurementService, () => ({
    __proto__: dart.getGetters(src__engine.TextMeasurementService.__proto__),
    rulers: core.Map$(src__engine.ParagraphGeometricStyle, src__engine.ParagraphRuler)
  }));
  dart.setFieldSignature(src__engine.TextMeasurementService, () => ({
    __proto__: dart.getFields(src__engine.TextMeasurementService.__proto__),
    rulerCacheCapacity: dart.finalFieldType(core.int),
    canvasContext: dart.finalFieldType(html.CanvasRenderingContext2D),
    [_rulerHost]: dart.finalFieldType(html.Element),
    [_rulers]: dart.fieldType(core.Map$(src__engine.ParagraphGeometricStyle, src__engine.ParagraphRuler)),
    [_rulerCacheCleanupScheduled]: dart.fieldType(core.bool)
  }));
  dart.defineLazy(src__engine.TextMeasurementService, {
    /*src__engine.TextMeasurementService._instance*/get _instance() {
      return null;
    },
    set _instance(_) {},
    /*src__engine.TextMeasurementService._baselineRatioHack*/get _baselineRatioHack() {
      return 1.1662499904632568;
    }
  });
  const _cachedHashCode = dart.privateName(src__engine, "_cachedHashCode");
  const _cssFontString = dart.privateName(src__engine, "_cssFontString");
  const _buildCssFontString = dart.privateName(src__engine, "_buildCssFontString");
  src__engine.ParagraphGeometricStyle = class ParagraphGeometricStyle extends core.Object {
    get fontWeight() {
      return this[fontWeight$];
    }
    set fontWeight(value) {
      super.fontWeight = value;
    }
    get fontStyle() {
      return this[fontStyle$];
    }
    set fontStyle(value) {
      super.fontStyle = value;
    }
    get fontFamily() {
      return this[fontFamily$];
    }
    set fontFamily(value) {
      super.fontFamily = value;
    }
    get fontSize() {
      return this[fontSize$];
    }
    set fontSize(value) {
      super.fontSize = value;
    }
    get lineHeight() {
      return this[lineHeight$];
    }
    set lineHeight(value) {
      super.lineHeight = value;
    }
    get maxLines() {
      return this[maxLines$];
    }
    set maxLines(value) {
      super.maxLines = value;
    }
    get letterSpacing() {
      return this[letterSpacing$];
    }
    set letterSpacing(value) {
      super.letterSpacing = value;
    }
    get wordSpacing() {
      return this[wordSpacing$];
    }
    set wordSpacing(value) {
      super.wordSpacing = value;
    }
    get decoration() {
      return this[decoration$];
    }
    set decoration(value) {
      super.decoration = value;
    }
    get ellipsis() {
      return this[ellipsis$];
    }
    set ellipsis(value) {
      super.ellipsis = value;
    }
    get effectiveFontFamily() {
      if (dart.test(src__engine.assertionsEnabled)) {
        if (dart.test(src__engine.domRenderer.debugIsInWidgetTest)) {
          return "Ahem";
        }
      }
      if (this.fontFamily == null || this.fontFamily[$isEmpty]) {
        return src__engine.DomRenderer.defaultFontFamily;
      }
      return this.fontFamily;
    }
    get cssFontString() {
      if (this[_cssFontString] == null) {
        this[_cssFontString] = this[_buildCssFontString]();
      }
      return this[_cssFontString];
    }
    [_buildCssFontString]() {
      let result = new core.StringBuffer.new();
      if (this.fontStyle != null) {
        result.write(dart.equals(this.fontStyle, ui.FontStyle.normal) ? "normal" : "italic");
      } else {
        result.write(src__engine.DomRenderer.defaultFontStyle);
      }
      result.write(" ");
      if (this.fontWeight != null) {
        result.write(ui.webOnlyFontWeightToCss(this.fontWeight));
      } else {
        result.write(src__engine.DomRenderer.defaultFontWeight);
      }
      result.write(" ");
      if (this.fontSize != null) {
        result.write(this.fontSize[$floor]());
        result.write("px");
      } else {
        result.write(src__engine.DomRenderer.defaultFontSize);
      }
      result.write(" ");
      result.write(this.effectiveFontFamily);
      return result.toString();
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) return true;
      if (!dart.equals(dart.runtimeType(other), this[$runtimeType])) return false;
      let typedOther = src__engine.ParagraphGeometricStyle._check(other);
      return dart.equals(this.fontWeight, typedOther.fontWeight) && dart.equals(this.fontStyle, typedOther.fontStyle) && this.fontFamily == typedOther.fontFamily && this.fontSize == typedOther.fontSize && this.lineHeight == typedOther.lineHeight && this.maxLines == typedOther.maxLines && this.letterSpacing == typedOther.letterSpacing && this.wordSpacing == typedOther.wordSpacing && this.decoration == typedOther.decoration && this.ellipsis == typedOther.ellipsis;
    }
    get hashCode() {
      let t4;
      t4 = this[_cachedHashCode];
      return t4 == null ? this[_cachedHashCode] = ui.hashValues(this.fontWeight, this.fontStyle, this.fontFamily, this.fontSize, this.lineHeight, this.maxLines, this.letterSpacing, this.wordSpacing, this.decoration, this.ellipsis) : t4;
    }
    toString() {
      if (dart.test(src__engine.assertionsEnabled)) {
        return dart.str(this[$runtimeType]) + "(fontWeight: " + dart.str(this.fontWeight) + ", fontStyle: " + dart.str(this.fontStyle) + "," + " fontFamily: " + dart.str(this.fontFamily) + ", fontSize: " + dart.str(this.fontSize) + "," + " lineHeight: " + dart.str(this.lineHeight) + "," + " maxLines: " + dart.str(this.maxLines) + "," + " letterSpacing: " + dart.str(this.letterSpacing) + "," + " wordSpacing: " + dart.str(this.wordSpacing) + "," + " decoration: " + dart.str(this.decoration) + "," + " ellipsis: " + dart.str(this.ellipsis) + "," + ")";
      } else {
        return super[$toString]();
      }
    }
  };
  (src__engine.ParagraphGeometricStyle.new = function(opts) {
    let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
    let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
    let fontFamily = opts && 'fontFamily' in opts ? opts.fontFamily : null;
    let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
    let lineHeight = opts && 'lineHeight' in opts ? opts.lineHeight : null;
    let maxLines = opts && 'maxLines' in opts ? opts.maxLines : null;
    let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
    let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
    let decoration = opts && 'decoration' in opts ? opts.decoration : null;
    let ellipsis = opts && 'ellipsis' in opts ? opts.ellipsis : null;
    this[_cachedHashCode] = null;
    this[_cssFontString] = null;
    this[fontWeight$] = fontWeight;
    this[fontStyle$] = fontStyle;
    this[fontFamily$] = fontFamily;
    this[fontSize$] = fontSize;
    this[lineHeight$] = lineHeight;
    this[maxLines$] = maxLines;
    this[letterSpacing$] = letterSpacing;
    this[wordSpacing$] = wordSpacing;
    this[decoration$] = decoration;
    this[ellipsis$] = ellipsis;
    ;
  }).prototype = src__engine.ParagraphGeometricStyle.prototype;
  dart.addTypeTests(src__engine.ParagraphGeometricStyle);
  const fontWeight$ = Symbol("ParagraphGeometricStyle.fontWeight");
  const fontStyle$ = Symbol("ParagraphGeometricStyle.fontStyle");
  const fontFamily$ = Symbol("ParagraphGeometricStyle.fontFamily");
  const fontSize$ = Symbol("ParagraphGeometricStyle.fontSize");
  const lineHeight$ = Symbol("ParagraphGeometricStyle.lineHeight");
  const maxLines$ = Symbol("ParagraphGeometricStyle.maxLines");
  const letterSpacing$ = Symbol("ParagraphGeometricStyle.letterSpacing");
  const wordSpacing$ = Symbol("ParagraphGeometricStyle.wordSpacing");
  const decoration$ = Symbol("ParagraphGeometricStyle.decoration");
  const ellipsis$ = Symbol("ParagraphGeometricStyle.ellipsis");
  dart.setMethodSignature(src__engine.ParagraphGeometricStyle, () => ({
    __proto__: dart.getMethods(src__engine.ParagraphGeometricStyle.__proto__),
    [_buildCssFontString]: dart.fnType(core.String, [])
  }));
  dart.setGetterSignature(src__engine.ParagraphGeometricStyle, () => ({
    __proto__: dart.getGetters(src__engine.ParagraphGeometricStyle.__proto__),
    effectiveFontFamily: core.String,
    cssFontString: core.String
  }));
  dart.setFieldSignature(src__engine.ParagraphGeometricStyle, () => ({
    __proto__: dart.getFields(src__engine.ParagraphGeometricStyle.__proto__),
    fontWeight: dart.finalFieldType(ui.FontWeight),
    fontStyle: dart.finalFieldType(ui.FontStyle),
    fontFamily: dart.finalFieldType(core.String),
    fontSize: dart.finalFieldType(core.double),
    lineHeight: dart.finalFieldType(core.double),
    maxLines: dart.finalFieldType(core.int),
    letterSpacing: dart.finalFieldType(core.double),
    wordSpacing: dart.finalFieldType(core.double),
    decoration: dart.finalFieldType(core.String),
    ellipsis: dart.finalFieldType(core.String),
    [_cachedHashCode]: dart.fieldType(core.int),
    [_cssFontString]: dart.fieldType(core.String)
  }));
  dart.defineExtensionMethods(src__engine.ParagraphGeometricStyle, ['_equals', 'toString']);
  dart.defineExtensionAccessors(src__engine.ParagraphGeometricStyle, ['hashCode']);
  const _cachedBoundingClientRect = dart.privateName(src__engine, "_cachedBoundingClientRect");
  const _invalidateBoundsCache = dart.privateName(src__engine, "_invalidateBoundsCache");
  const _readAndCacheMetrics = dart.privateName(src__engine, "_readAndCacheMetrics");
  src__engine.TextDimensions = class TextDimensions extends core.Object {
    updateText(from, style) {
      if (!(from != null)) dart.assertFailed();
      if (!(this[_element$] != null)) dart.assertFailed();
      if (!dart.test(from.webOnlyDebugHasSameRootStyle(style))) dart.assertFailed();
      if (!dart.test(dart.fn(() => {
        let wasEmptyOrPlainText = dart.test(this[_element$].childNodes[$isEmpty]) || this[_element$].childNodes[$length] === 1 && html.Text.is(this[_element$].childNodes[$first]);
        if (!wasEmptyOrPlainText) {
          dart.throw(core.Exception.new("Failed to copy text into the paragraph measuring element. The " + "element already contains rich text \"" + dart.str(this[_element$][$innerHtml]) + "\". It is " + "likely that a previous measurement did not clean up after " + "itself."));
        }
        return true;
      }, VoidTobool())())) dart.assertFailed();
      this[_invalidateBoundsCache]();
      let plainText = from.webOnlyGetPlainText();
      if (plainText != null) {
        this[_element$][$text] = plainText;
      } else {
        let copy = html.Element._check(from.webOnlyGetParagraphElement()[$clone](true));
        this[_element$][$children][$addAll](copy[$children]);
      }
    }
    updateWidth(cssWidth) {
      this[_invalidateBoundsCache]();
      this[_element$].style[$width] = cssWidth;
    }
    [_invalidateBoundsCache]() {
      this[_cachedBoundingClientRect] = null;
    }
    updateTextToSpace() {
      this[_invalidateBoundsCache]();
      this[_element$][$text] = " ";
    }
    applyStyle(style) {
      let t4;
      t4 = this[_element$].style;
      t4[$fontSize] = style.fontSize != null ? dart.str(style.fontSize[$floor]()) + "px" : null;
      t4[$fontFamily] = style.effectiveFontFamily;
      t4[$fontWeight] = style.fontWeight != null ? ui.webOnlyFontWeightToCss(style.fontWeight) : null;
      t4[$fontStyle] = style.fontStyle != null ? dart.equals(style.fontStyle, ui.FontStyle.normal) ? "normal" : "italic" : null;
      t4[$letterSpacing] = style.letterSpacing != null ? dart.str(style.letterSpacing) + "px" : null;
      t4[$wordSpacing] = style.wordSpacing != null ? dart.str(style.wordSpacing) + "px" : null;
      t4[$textDecoration] = style.decoration;
      t4;
      if (style.lineHeight != null) {
        this[_element$].style[$lineHeight] = dart.toString(style.lineHeight);
      }
      this[_invalidateBoundsCache]();
    }
    appendToHost(hostElement) {
      hostElement[$append](this[_element$]);
      this[_invalidateBoundsCache]();
    }
    [_readAndCacheMetrics]() {
      let t4;
      t4 = this[_cachedBoundingClientRect];
      return t4 == null ? this[_cachedBoundingClientRect] = this[_element$].getBoundingClientRect() : t4;
    }
    get width() {
      return this[_readAndCacheMetrics]()[$width];
    }
    get height() {
      return this[_readAndCacheMetrics]()[$height];
    }
  };
  (src__engine.TextDimensions.new = function(_element) {
    this[_cachedBoundingClientRect] = null;
    this[_element$] = _element;
    ;
  }).prototype = src__engine.TextDimensions.prototype;
  dart.addTypeTests(src__engine.TextDimensions);
  dart.setMethodSignature(src__engine.TextDimensions, () => ({
    __proto__: dart.getMethods(src__engine.TextDimensions.__proto__),
    updateText: dart.fnType(dart.void, [ui.Paragraph, src__engine.ParagraphGeometricStyle]),
    updateWidth: dart.fnType(dart.void, [core.String]),
    [_invalidateBoundsCache]: dart.fnType(dart.void, []),
    updateTextToSpace: dart.fnType(dart.void, []),
    applyStyle: dart.fnType(dart.void, [src__engine.ParagraphGeometricStyle]),
    appendToHost: dart.fnType(dart.void, [html.HtmlElement]),
    [_readAndCacheMetrics]: dart.fnType(math.Rectangle$(core.num), [])
  }));
  dart.setGetterSignature(src__engine.TextDimensions, () => ({
    __proto__: dart.getGetters(src__engine.TextDimensions.__proto__),
    width: core.double,
    height: core.double
  }));
  dart.setFieldSignature(src__engine.TextDimensions, () => ({
    __proto__: dart.getFields(src__engine.TextDimensions.__proto__),
    [_element$]: dart.finalFieldType(html.HtmlElement),
    [_cachedBoundingClientRect]: dart.fieldType(math.Rectangle$(core.num))
  }));
  const _probe = dart.privateName(src__engine, "_probe");
  const _cachedAlphabeticBaseline = dart.privateName(src__engine, "_cachedAlphabeticBaseline");
  const _singleLineHost = dart.privateName(src__engine, "_singleLineHost");
  const _minIntrinsicHost = dart.privateName(src__engine, "_minIntrinsicHost");
  const _constrainedHost = dart.privateName(src__engine, "_constrainedHost");
  const _lineHeightHost = dart.privateName(src__engine, "_lineHeightHost");
  const _lineHeightDimensions = dart.privateName(src__engine, "_lineHeightDimensions");
  const _debugIsDisposed = dart.privateName(src__engine, "_debugIsDisposed");
  const _paragraph = dart.privateName(src__engine, "_paragraph");
  const _measurementCache = dart.privateName(src__engine, "_measurementCache");
  const _mruList = dart.privateName(src__engine, "_mruList");
  const _configureSingleLineHostElements = dart.privateName(src__engine, "_configureSingleLineHostElements");
  const _configureMinIntrinsicHostElements = dart.privateName(src__engine, "_configureMinIntrinsicHostElements");
  const _configureConstrainedHostElements = dart.privateName(src__engine, "_configureConstrainedHostElements");
  const _configureLineHeightHostElements = dart.privateName(src__engine, "_configureLineHeightHostElements");
  src__engine.ParagraphRuler = class ParagraphRuler extends core.Object {
    get style() {
      return this[style$];
    }
    set style(value) {
      super.style = value;
    }
    get singleLineDimensions() {
      return this[singleLineDimensions];
    }
    set singleLineDimensions(value) {
      super.singleLineDimensions = value;
    }
    get minIntrinsicDimensions() {
      return this[minIntrinsicDimensions];
    }
    set minIntrinsicDimensions(value) {
      this[minIntrinsicDimensions] = value;
    }
    get constrainedDimensions() {
      return this[constrainedDimensions];
    }
    set constrainedDimensions(value) {
      this[constrainedDimensions] = value;
    }
    get alphabeticBaseline() {
      let t4;
      t4 = this[_cachedAlphabeticBaseline];
      return t4 == null ? this[_cachedAlphabeticBaseline] = this[_probe].getBoundingClientRect()[$bottom] : t4;
    }
    get lineHeightDimensions() {
      if (this[_lineHeightDimensions] == null) {
        this[_lineHeightHost] = html.DivElement.new();
        this[_lineHeightDimensions] = new src__engine.TextDimensions.new(html.ParagraphElement.new());
        this[_configureLineHeightHostElements]();
      }
      return this[_lineHeightDimensions];
    }
    get hitCount() {
      return this[_hitCount];
    }
    resetHitCount() {
      this[_hitCount] = 0;
    }
    get debugIsDisposed() {
      return this[_debugIsDisposed];
    }
    [_configureSingleLineHostElements]() {
      let t4;
      t4 = this[_singleLineHost].style;
      t4[$visibility] = "hidden";
      t4[$position] = "absolute";
      t4[$top] = "0";
      t4[$left] = "0";
      t4[$display] = "flex";
      t4[$flexDirection] = "row";
      t4[$alignItems] = "baseline";
      t4[$margin] = "0";
      t4[$border] = "0";
      t4[$padding] = "0";
      t4;
      this.singleLineDimensions.applyStyle(this.style);
      this.singleLineDimensions[_element$].style[$whiteSpace] = "pre";
      this.singleLineDimensions.appendToHost(this[_singleLineHost]);
      src__engine.TextMeasurementService.instance.addHostElement(this[_singleLineHost]);
    }
    [_configureMinIntrinsicHostElements]() {
      let t4, t4$;
      t4 = this[_minIntrinsicHost].style;
      t4[$visibility] = "hidden";
      t4[$position] = "absolute";
      t4[$top] = "0";
      t4[$left] = "0";
      t4[$display] = "flex";
      t4[$flexDirection] = "row";
      t4[$margin] = "0";
      t4[$border] = "0";
      t4[$padding] = "0";
      t4;
      this.minIntrinsicDimensions.applyStyle(this.style);
      t4$ = this.minIntrinsicDimensions[_element$].style;
      t4$[$flex] = "0";
      t4$[$display] = "inline";
      t4$[$whiteSpace] = "pre-wrap";
      t4$;
      this[_minIntrinsicHost][$append](this.minIntrinsicDimensions[_element$]);
      src__engine.TextMeasurementService.instance.addHostElement(this[_minIntrinsicHost]);
    }
    [_configureConstrainedHostElements]() {
      let t4, t4$;
      t4 = this[_constrainedHost].style;
      t4[$visibility] = "hidden";
      t4[$position] = "absolute";
      t4[$top] = "0";
      t4[$left] = "0";
      t4[$display] = "flex";
      t4[$flexDirection] = "row";
      t4[$alignItems] = "baseline";
      t4[$margin] = "0";
      t4[$border] = "0";
      t4[$padding] = "0";
      t4;
      this.constrainedDimensions.applyStyle(this.style);
      t4$ = this.constrainedDimensions[_element$].style;
      t4$[$display] = "block";
      t4$[$whiteSpace] = "pre-wrap";
      t4$;
      this.constrainedDimensions.appendToHost(this[_constrainedHost]);
      src__engine.TextMeasurementService.instance.addHostElement(this[_constrainedHost]);
    }
    [_configureLineHeightHostElements]() {
      let t4;
      t4 = this[_lineHeightHost].style;
      t4[$visibility] = "hidden";
      t4[$position] = "absolute";
      t4[$top] = "0";
      t4[$left] = "0";
      t4[$margin] = "0";
      t4[$border] = "0";
      t4[$padding] = "0";
      t4;
      this.lineHeightDimensions.applyStyle(this.style);
      this.lineHeightDimensions[_element$].style[$whiteSpace] = "pre";
      this.lineHeightDimensions.updateTextToSpace();
      this.lineHeightDimensions.appendToHost(this[_lineHeightHost]);
      src__engine.TextMeasurementService.instance.addHostElement(this[_lineHeightHost]);
    }
    willMeasure(paragraph) {
      if (!(paragraph != null)) dart.assertFailed();
      if (!dart.test(dart.fn(() => {
        if (this[_paragraph] != null) {
          dart.throw(core.Exception.new("Attempted to reuse a " + dart.str(dart.wrapType(src__engine.ParagraphRuler)) + " but it is currently " + "measuring another paragraph (" + dart.str(this[_paragraph]) + "). It is possible that "));
        }
        return true;
      }, VoidTobool())())) dart.assertFailed();
      if (!dart.test(paragraph.webOnlyDebugHasSameRootStyle(this.style))) dart.assertFailed();
      this[_hitCount] = dart.notNull(this[_hitCount]) + 1;
      this[_paragraph] = paragraph;
    }
    measureAll(constraints) {
      this.measureAsSingleLine();
      this.measureMinIntrinsicWidth();
      this.measureWithConstraints(constraints);
    }
    measureAsSingleLine() {
      if (!!dart.test(this[_debugIsDisposed])) dart.assertFailed();
      if (!(this[_paragraph] != null)) dart.assertFailed();
      if (this[_paragraph].webOnlyGetPlainText() === "") {
        this.singleLineDimensions.updateTextToSpace();
      } else {
        this.singleLineDimensions.updateText(this[_paragraph], this.style);
      }
    }
    measureMinIntrinsicWidth() {
      if (!!dart.test(this[_debugIsDisposed])) dart.assertFailed();
      if (!(this[_paragraph] != null)) dart.assertFailed();
      this.minIntrinsicDimensions.updateText(this[_paragraph], this.style);
    }
    measureWithConstraints(constraints) {
      if (!!dart.test(this[_debugIsDisposed])) dart.assertFailed();
      if (!(this[_paragraph] != null)) dart.assertFailed();
      this.constrainedDimensions.updateText(this[_paragraph], this.style);
      this.constrainedDimensions.updateWidth(dart.str(dart.notNull(constraints.width) + 0.5) + "px");
    }
    didMeasure() {
      let t4;
      if (!(this[_paragraph] != null)) dart.assertFailed();
      if (this[_paragraph].webOnlyGetPlainText() == null) {
        t4 = src__engine.domRenderer;
        t4.clearDom(this.singleLineDimensions[_element$]);
        t4.clearDom(this.minIntrinsicDimensions[_element$]);
        t4.clearDom(this.constrainedDimensions[_element$]);
        t4;
      }
      this[_paragraph] = null;
    }
    measureBoxesForRange(plainText, constraints, opts) {
      let t4, t4$;
      let start = opts && 'start' in opts ? opts.start : null;
      let end = opts && 'end' in opts ? opts.end : null;
      let alignOffset = opts && 'alignOffset' in opts ? opts.alignOffset : null;
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      if (!!dart.test(this[_debugIsDisposed])) dart.assertFailed();
      if (!(dart.notNull(start) >= 0 && dart.notNull(start) <= plainText.length)) dart.assertFailed();
      if (!(dart.notNull(end) >= 0 && dart.notNull(end) <= plainText.length)) dart.assertFailed();
      if (!(dart.notNull(start) <= dart.notNull(end))) dart.assertFailed();
      let before = plainText[$substring](0, start);
      let rangeText = plainText[$substring](start, end);
      let after = plainText[$substring](end);
      let rangeSpan = (t4 = html.SpanElement.new(), t4[$text] = rangeText, t4);
      src__engine.domRenderer.clearDom(this.constrainedDimensions[_element$]);
      t4$ = this.constrainedDimensions[_element$];
      t4$[$appendText](before);
      t4$[$append](rangeSpan);
      t4$[$appendText](after);
      t4$;
      this.constrainedDimensions.updateWidth(dart.str(constraints.width) + "px");
      let clientRects = rangeSpan[$getClientRects]();
      let boxes = JSArrayOfTextBox().of([]);
      for (let rect of clientRects) {
        boxes[$add](new ui.TextBox.fromLTRBD(dart.notNull(rect[$left]) + dart.notNull(alignOffset), rect[$top], dart.notNull(rect[$right]) + dart.notNull(alignOffset), rect[$bottom], textDirection));
      }
      src__engine.domRenderer.clearDom(this.constrainedDimensions[_element$]);
      return boxes;
    }
    dispose() {
      let t4;
      if (!dart.test(dart.fn(() => {
        if (this[_paragraph] != null) {
          dart.throw(core.Exception.new("Attempted to dispose of a ruler in the middle of " + "measurement. This is likely a bug in the framework."));
        }
        return true;
      }, VoidTobool())())) dart.assertFailed();
      this[_singleLineHost][$remove]();
      this[_minIntrinsicHost][$remove]();
      this[_constrainedHost][$remove]();
      t4 = this[_lineHeightHost];
      t4 == null ? null : t4[$remove]();
      if (!dart.test(dart.fn(() => {
        this[_debugIsDisposed] = true;
        return true;
      }, VoidTobool())())) dart.assertFailed();
    }
    cacheMeasurement(paragraph, constraints, item) {
      let t6, t5, t4;
      let plainText = paragraph.webOnlyGetPlainText();
      let constraintCache = this[_measurementCache][$_get](plainText);
      if (constraintCache == null) {
        constraintCache = (t4 = this[_measurementCache], t5 = plainText, t6 = JSArrayOfRulerCacheEntry().of([]), t4[$_set](t5, t6), t6);
      }
      constraintCache[$add](item);
      if (dart.notNull(constraintCache[$length]) > dart.notNull(src__engine.ParagraphRuler._constraintCacheSize)) {
        constraintCache[$removeAt](0);
      }
      this[_mruList][$add](plainText);
      if (dart.notNull(this[_mruList][$length]) > dart.notNull(src__engine.ParagraphRuler._cacheLimit)) {
        for (let i = 0; i < dart.notNull(src__engine.ParagraphRuler._cacheBlockFactor); i = i + 1) {
          this[_measurementCache][$remove](this[_mruList][$_get](i));
        }
        this[_mruList][$removeRange](0, src__engine.ParagraphRuler._cacheBlockFactor);
      }
    }
    cacheLookup(paragraph, constraints) {
      let constraintCache = this[_measurementCache][$_get](paragraph.webOnlyGetPlainText());
      if (constraintCache == null) {
        return null;
      }
      for (let i = 0, len = constraintCache[$length]; i < dart.notNull(len); i = i + 1) {
        let item = constraintCache[$_get](i);
        if (item.constraintWidth == constraints.width) {
          return item;
        }
      }
      return null;
    }
  };
  (src__engine.ParagraphRuler.new = function(style) {
    this[_probe] = html.DivElement.new();
    this[_cachedAlphabeticBaseline] = null;
    this[_singleLineHost] = html.DivElement.new();
    this[singleLineDimensions] = new src__engine.TextDimensions.new(html.ParagraphElement.new());
    this[_minIntrinsicHost] = html.DivElement.new();
    this[minIntrinsicDimensions] = new src__engine.TextDimensions.new(html.ParagraphElement.new());
    this[_constrainedHost] = html.DivElement.new();
    this[constrainedDimensions] = new src__engine.TextDimensions.new(html.ParagraphElement.new());
    this[_lineHeightHost] = null;
    this[_lineHeightDimensions] = null;
    this[_hitCount] = 0;
    this[_debugIsDisposed] = false;
    this[_paragraph] = null;
    this[_measurementCache] = new (LinkedMapOfString$ListOfRulerCacheEntry()).new();
    this[_mruList] = JSArrayOfString().of([]);
    this[style$] = style;
    this[_configureSingleLineHostElements]();
    this[_singleLineHost][$append](this[_probe]);
    this[_configureMinIntrinsicHostElements]();
    this[_configureConstrainedHostElements]();
  }).prototype = src__engine.ParagraphRuler.prototype;
  dart.addTypeTests(src__engine.ParagraphRuler);
  const style$ = Symbol("ParagraphRuler.style");
  const singleLineDimensions = Symbol("ParagraphRuler.singleLineDimensions");
  const minIntrinsicDimensions = Symbol("ParagraphRuler.minIntrinsicDimensions");
  const constrainedDimensions = Symbol("ParagraphRuler.constrainedDimensions");
  dart.setMethodSignature(src__engine.ParagraphRuler, () => ({
    __proto__: dart.getMethods(src__engine.ParagraphRuler.__proto__),
    resetHitCount: dart.fnType(dart.void, []),
    [_configureSingleLineHostElements]: dart.fnType(dart.void, []),
    [_configureMinIntrinsicHostElements]: dart.fnType(dart.void, []),
    [_configureConstrainedHostElements]: dart.fnType(dart.void, []),
    [_configureLineHeightHostElements]: dart.fnType(dart.void, []),
    willMeasure: dart.fnType(dart.void, [ui.Paragraph]),
    measureAll: dart.fnType(dart.void, [ui.ParagraphConstraints]),
    measureAsSingleLine: dart.fnType(dart.void, []),
    measureMinIntrinsicWidth: dart.fnType(dart.void, []),
    measureWithConstraints: dart.fnType(dart.void, [ui.ParagraphConstraints]),
    didMeasure: dart.fnType(dart.void, []),
    measureBoxesForRange: dart.fnType(core.List$(ui.TextBox), [core.String, ui.ParagraphConstraints], {alignOffset: core.double, end: core.int, start: core.int, textDirection: ui.TextDirection}),
    dispose: dart.fnType(dart.void, []),
    cacheMeasurement: dart.fnType(dart.void, [ui.Paragraph, ui.ParagraphConstraints, src__engine.RulerCacheEntry]),
    cacheLookup: dart.fnType(src__engine.RulerCacheEntry, [ui.Paragraph, ui.ParagraphConstraints])
  }));
  dart.setGetterSignature(src__engine.ParagraphRuler, () => ({
    __proto__: dart.getGetters(src__engine.ParagraphRuler.__proto__),
    alphabeticBaseline: core.double,
    lineHeightDimensions: src__engine.TextDimensions,
    hitCount: core.int,
    debugIsDisposed: core.bool
  }));
  dart.setFieldSignature(src__engine.ParagraphRuler, () => ({
    __proto__: dart.getFields(src__engine.ParagraphRuler.__proto__),
    style: dart.finalFieldType(src__engine.ParagraphGeometricStyle),
    [_probe]: dart.finalFieldType(html.DivElement),
    [_cachedAlphabeticBaseline]: dart.fieldType(core.double),
    [_singleLineHost]: dart.finalFieldType(html.DivElement),
    singleLineDimensions: dart.finalFieldType(src__engine.TextDimensions),
    [_minIntrinsicHost]: dart.finalFieldType(html.DivElement),
    minIntrinsicDimensions: dart.fieldType(src__engine.TextDimensions),
    [_constrainedHost]: dart.finalFieldType(html.DivElement),
    constrainedDimensions: dart.fieldType(src__engine.TextDimensions),
    [_lineHeightHost]: dart.fieldType(html.DivElement),
    [_lineHeightDimensions]: dart.fieldType(src__engine.TextDimensions),
    [_hitCount]: dart.fieldType(core.int),
    [_debugIsDisposed]: dart.fieldType(core.bool),
    [_paragraph]: dart.fieldType(ui.Paragraph),
    [_measurementCache]: dart.fieldType(core.Map$(core.String, core.List$(src__engine.RulerCacheEntry))),
    [_mruList]: dart.finalFieldType(core.List$(core.String))
  }));
  dart.defineLazy(src__engine.ParagraphRuler, {
    /*src__engine.ParagraphRuler._cacheLimit*/get _cacheLimit() {
      return 2400;
    },
    /*src__engine.ParagraphRuler._cacheBlockFactor*/get _cacheBlockFactor() {
      return 100;
    },
    /*src__engine.ParagraphRuler._constraintCacheSize*/get _constraintCacheSize() {
      return 8;
    }
  });
  src__engine.RulerCacheEntry = class RulerCacheEntry extends core.Object {
    get constraintWidth() {
      return this[constraintWidth$];
    }
    set constraintWidth(value) {
      super.constraintWidth = value;
    }
    get isSingleLine() {
      return this[isSingleLine$];
    }
    set isSingleLine(value) {
      super.isSingleLine = value;
    }
    get width() {
      return this[width$1];
    }
    set width(value) {
      super.width = value;
    }
    get height() {
      return this[height$1];
    }
    set height(value) {
      super.height = value;
    }
    get lineHeight() {
      return this[lineHeight$0];
    }
    set lineHeight(value) {
      super.lineHeight = value;
    }
    get minIntrinsicWidth() {
      return this[minIntrinsicWidth$];
    }
    set minIntrinsicWidth(value) {
      super.minIntrinsicWidth = value;
    }
    get maxIntrinsicWidth() {
      return this[maxIntrinsicWidth$];
    }
    set maxIntrinsicWidth(value) {
      super.maxIntrinsicWidth = value;
    }
    get alphabeticBaseline() {
      return this[alphabeticBaseline$];
    }
    set alphabeticBaseline(value) {
      super.alphabeticBaseline = value;
    }
    get ideographicBaseline() {
      return this[ideographicBaseline$];
    }
    set ideographicBaseline(value) {
      super.ideographicBaseline = value;
    }
    applyToParagraph(paragraph) {
      paragraph.webOnlySetComputedLayout({isSingleLine: this.isSingleLine, width: this.width, height: this.height, lineHeight: this.lineHeight, minIntrinsicWidth: this.minIntrinsicWidth, maxIntrinsicWidth: this.maxIntrinsicWidth, alphabeticBaseline: this.alphabeticBaseline, ideographicBaseline: this.ideographicBaseline});
    }
  };
  (src__engine.RulerCacheEntry.new = function(constraintWidth, opts) {
    let isSingleLine = opts && 'isSingleLine' in opts ? opts.isSingleLine : null;
    let width = opts && 'width' in opts ? opts.width : null;
    let height = opts && 'height' in opts ? opts.height : null;
    let lineHeight = opts && 'lineHeight' in opts ? opts.lineHeight : null;
    let minIntrinsicWidth = opts && 'minIntrinsicWidth' in opts ? opts.minIntrinsicWidth : null;
    let maxIntrinsicWidth = opts && 'maxIntrinsicWidth' in opts ? opts.maxIntrinsicWidth : null;
    let alphabeticBaseline = opts && 'alphabeticBaseline' in opts ? opts.alphabeticBaseline : null;
    let ideographicBaseline = opts && 'ideographicBaseline' in opts ? opts.ideographicBaseline : null;
    this[constraintWidth$] = constraintWidth;
    this[isSingleLine$] = isSingleLine;
    this[width$1] = width;
    this[height$1] = height;
    this[lineHeight$0] = lineHeight;
    this[minIntrinsicWidth$] = minIntrinsicWidth;
    this[maxIntrinsicWidth$] = maxIntrinsicWidth;
    this[alphabeticBaseline$] = alphabeticBaseline;
    this[ideographicBaseline$] = ideographicBaseline;
    ;
  }).prototype = src__engine.RulerCacheEntry.prototype;
  dart.addTypeTests(src__engine.RulerCacheEntry);
  const constraintWidth$ = Symbol("RulerCacheEntry.constraintWidth");
  const isSingleLine$ = Symbol("RulerCacheEntry.isSingleLine");
  const width$1 = Symbol("RulerCacheEntry.width");
  const height$1 = Symbol("RulerCacheEntry.height");
  const lineHeight$0 = Symbol("RulerCacheEntry.lineHeight");
  const minIntrinsicWidth$ = Symbol("RulerCacheEntry.minIntrinsicWidth");
  const maxIntrinsicWidth$ = Symbol("RulerCacheEntry.maxIntrinsicWidth");
  const alphabeticBaseline$ = Symbol("RulerCacheEntry.alphabeticBaseline");
  const ideographicBaseline$ = Symbol("RulerCacheEntry.ideographicBaseline");
  dart.setMethodSignature(src__engine.RulerCacheEntry, () => ({
    __proto__: dart.getMethods(src__engine.RulerCacheEntry.__proto__),
    applyToParagraph: dart.fnType(dart.void, [ui.Paragraph])
  }));
  dart.setFieldSignature(src__engine.RulerCacheEntry, () => ({
    __proto__: dart.getFields(src__engine.RulerCacheEntry.__proto__),
    constraintWidth: dart.finalFieldType(core.double),
    isSingleLine: dart.finalFieldType(core.bool),
    width: dart.finalFieldType(core.double),
    height: dart.finalFieldType(core.double),
    lineHeight: dart.finalFieldType(core.double),
    minIntrinsicWidth: dart.finalFieldType(core.double),
    maxIntrinsicWidth: dart.finalFieldType(core.double),
    alphabeticBaseline: dart.finalFieldType(core.double),
    ideographicBaseline: dart.finalFieldType(core.double)
  }));
  src__engine._ComparisonResult = class _ComparisonResult extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (src__engine._ComparisonResult.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = src__engine._ComparisonResult.prototype;
  dart.addTypeTests(src__engine._ComparisonResult);
  dart.setFieldSignature(src__engine._ComparisonResult, () => ({
    __proto__: dart.getFields(src__engine._ComparisonResult.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(src__engine._ComparisonResult, ['toString']);
  src__engine._ComparisonResult.inside = dart.const(new src__engine._ComparisonResult.new(0, "_ComparisonResult.inside"));
  src__engine._ComparisonResult.higher = dart.const(new src__engine._ComparisonResult.new(1, "_ComparisonResult.higher"));
  src__engine._ComparisonResult.lower = dart.const(new src__engine._ComparisonResult.new(2, "_ComparisonResult.lower"));
  src__engine._ComparisonResult.values = dart.constList([src__engine._ComparisonResult.inside, src__engine._ComparisonResult.higher, src__engine._ComparisonResult.lower], src__engine._ComparisonResult);
  const _is_UnicodeRange_default = Symbol('_is_UnicodeRange_default');
  src__engine.UnicodeRange$ = dart.generic(P => {
    class UnicodeRange extends core.Object {
      get start() {
        return this[start$];
      }
      set start(value) {
        super.start = value;
      }
      get end() {
        return this[end$];
      }
      set end(value) {
        super.end = value;
      }
      get property() {
        return this[property$];
      }
      set property(value) {
        super.property = value;
      }
      compare(value) {
        if (dart.notNull(value) < dart.notNull(this.start)) return src__engine._ComparisonResult.lower;
        if (dart.notNull(value) > dart.notNull(this.end)) return src__engine._ComparisonResult.higher;
        return src__engine._ComparisonResult.inside;
      }
    }
    (UnicodeRange.new = function(start, end, property) {
      this[start$] = start;
      this[end$] = end;
      this[property$] = property;
      ;
    }).prototype = UnicodeRange.prototype;
    dart.addTypeTests(UnicodeRange);
    UnicodeRange.prototype[_is_UnicodeRange_default] = true;
    const start$ = Symbol("UnicodeRange.start");
    const end$ = Symbol("UnicodeRange.end");
    const property$ = Symbol("UnicodeRange.property");
    dart.setMethodSignature(UnicodeRange, () => ({
      __proto__: dart.getMethods(UnicodeRange.__proto__),
      compare: dart.fnType(src__engine._ComparisonResult, [core.int])
    }));
    dart.setFieldSignature(UnicodeRange, () => ({
      __proto__: dart.getFields(UnicodeRange.__proto__),
      start: dart.finalFieldType(core.int),
      end: dart.finalFieldType(core.int),
      property: dart.finalFieldType(P)
    }));
    return UnicodeRange;
  });
  src__engine.UnicodeRange = src__engine.UnicodeRange$();
  dart.addTypeTests(src__engine.UnicodeRange, _is_UnicodeRange_default);
  const _is_UnicodePropertyLookup_default = Symbol('_is_UnicodePropertyLookup_default');
  src__engine.UnicodePropertyLookup$ = dart.generic(P => {
    let UnicodeRangeOfP = () => (UnicodeRangeOfP = dart.constFn(src__engine.UnicodeRange$(P)))();
    class UnicodePropertyLookup extends core.Object {
      get ranges() {
        return this[ranges$];
      }
      set ranges(value) {
        super.ranges = value;
      }
      find(value) {
        let index = src__engine.UnicodePropertyLookup._binarySearch(core.Object, this.ranges, value, dart.fn((a, b) => {
          let range = UnicodeRangeOfP()._check(a);
          switch (range.compare(core.int._check(b))) {
            case src__engine._ComparisonResult.higher:
            {
              return -1;
            }
            case src__engine._ComparisonResult.lower:
            {
              return 1;
            }
            case src__engine._ComparisonResult.inside:
            {
              return 0;
            }
          }
        }, dynamicAnddynamicToint()));
        return index === -1 ? null : this.ranges[$_get](index).property;
      }
      static _binarySearch(T, sortedList, value, compare) {
        let min = 0;
        let max = sortedList[$length];
        while (min < dart.notNull(max)) {
          let mid = min + (dart.notNull(max) - min)[$rightShift](1);
          let element = sortedList[$_get](mid);
          let comp = compare(element, value);
          if (comp === 0) return mid;
          if (dart.notNull(comp) < 0) {
            min = mid + 1;
          } else {
            max = mid;
          }
        }
        return -1;
      }
    }
    (UnicodePropertyLookup.new = function(ranges) {
      this[ranges$] = ranges;
      ;
    }).prototype = UnicodePropertyLookup.prototype;
    dart.addTypeTests(UnicodePropertyLookup);
    UnicodePropertyLookup.prototype[_is_UnicodePropertyLookup_default] = true;
    const ranges$ = Symbol("UnicodePropertyLookup.ranges");
    dart.setMethodSignature(UnicodePropertyLookup, () => ({
      __proto__: dart.getMethods(UnicodePropertyLookup.__proto__),
      find: dart.fnType(P, [core.int])
    }));
    dart.setFieldSignature(UnicodePropertyLookup, () => ({
      __proto__: dart.getFields(UnicodePropertyLookup.__proto__),
      ranges: dart.finalFieldType(core.List$(src__engine.UnicodeRange$(P)))
    }));
    return UnicodePropertyLookup;
  });
  src__engine.UnicodePropertyLookup = src__engine.UnicodePropertyLookup$();
  dart.addTypeTests(src__engine.UnicodePropertyLookup, _is_UnicodePropertyLookup_default);
  src__engine.CharProperty = class CharProperty extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (src__engine.CharProperty.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = src__engine.CharProperty.prototype;
  dart.addTypeTests(src__engine.CharProperty);
  dart.setFieldSignature(src__engine.CharProperty, () => ({
    __proto__: dart.getFields(src__engine.CharProperty.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(src__engine.CharProperty, ['toString']);
  src__engine.CharProperty.DoubleQuote = dart.const(new src__engine.CharProperty.new(0, "CharProperty.DoubleQuote"));
  src__engine.CharProperty.SingleQuote = dart.const(new src__engine.CharProperty.new(1, "CharProperty.SingleQuote"));
  src__engine.CharProperty.HebrewLetter = dart.const(new src__engine.CharProperty.new(2, "CharProperty.HebrewLetter"));
  src__engine.CharProperty.CR = dart.const(new src__engine.CharProperty.new(3, "CharProperty.CR"));
  src__engine.CharProperty.LF = dart.const(new src__engine.CharProperty.new(4, "CharProperty.LF"));
  src__engine.CharProperty.Newline = dart.const(new src__engine.CharProperty.new(5, "CharProperty.Newline"));
  src__engine.CharProperty.Extend = dart.const(new src__engine.CharProperty.new(6, "CharProperty.Extend"));
  src__engine.CharProperty.RegionalIndicator = dart.const(new src__engine.CharProperty.new(7, "CharProperty.RegionalIndicator"));
  src__engine.CharProperty.Format = dart.const(new src__engine.CharProperty.new(8, "CharProperty.Format"));
  src__engine.CharProperty.Katakana = dart.const(new src__engine.CharProperty.new(9, "CharProperty.Katakana"));
  src__engine.CharProperty.ALetter = dart.const(new src__engine.CharProperty.new(10, "CharProperty.ALetter"));
  src__engine.CharProperty.MidLetter = dart.const(new src__engine.CharProperty.new(11, "CharProperty.MidLetter"));
  src__engine.CharProperty.MidNum = dart.const(new src__engine.CharProperty.new(12, "CharProperty.MidNum"));
  src__engine.CharProperty.MidNumLet = dart.const(new src__engine.CharProperty.new(13, "CharProperty.MidNumLet"));
  src__engine.CharProperty.Numeric = dart.const(new src__engine.CharProperty.new(14, "CharProperty.Numeric"));
  src__engine.CharProperty.ExtendNumLet = dart.const(new src__engine.CharProperty.new(15, "CharProperty.ExtendNumLet"));
  src__engine.CharProperty.ZWJ = dart.const(new src__engine.CharProperty.new(16, "CharProperty.ZWJ"));
  src__engine.CharProperty.WSegSpace = dart.const(new src__engine.CharProperty.new(17, "CharProperty.WSegSpace"));
  src__engine.CharProperty.values = dart.constList([src__engine.CharProperty.DoubleQuote, src__engine.CharProperty.SingleQuote, src__engine.CharProperty.HebrewLetter, src__engine.CharProperty.CR, src__engine.CharProperty.LF, src__engine.CharProperty.Newline, src__engine.CharProperty.Extend, src__engine.CharProperty.RegionalIndicator, src__engine.CharProperty.Format, src__engine.CharProperty.Katakana, src__engine.CharProperty.ALetter, src__engine.CharProperty.MidLetter, src__engine.CharProperty.MidNum, src__engine.CharProperty.MidNumLet, src__engine.CharProperty.Numeric, src__engine.CharProperty.ExtendNumLet, src__engine.CharProperty.ZWJ, src__engine.CharProperty.WSegSpace], src__engine.CharProperty);
  src__engine._FindBreakDirection = class _FindBreakDirection extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (src__engine._FindBreakDirection.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = src__engine._FindBreakDirection.prototype;
  dart.addTypeTests(src__engine._FindBreakDirection);
  dart.setFieldSignature(src__engine._FindBreakDirection, () => ({
    __proto__: dart.getFields(src__engine._FindBreakDirection.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(src__engine._FindBreakDirection, ['toString']);
  src__engine._FindBreakDirection.forward = dart.const(new src__engine._FindBreakDirection.new(0, "_FindBreakDirection.forward"));
  src__engine._FindBreakDirection.backward = dart.const(new src__engine._FindBreakDirection.new(1, "_FindBreakDirection.backward"));
  src__engine._FindBreakDirection.values = dart.constList([src__engine._FindBreakDirection.forward, src__engine._FindBreakDirection.backward], src__engine._FindBreakDirection);
  src__engine.WordBreaker = class WordBreaker extends core.Object {
    static nextBreakIndex(text, index) {
      return src__engine.WordBreaker._findBreakIndex(src__engine._FindBreakDirection.forward, text, index);
    }
    static prevBreakIndex(text, index) {
      return src__engine.WordBreaker._findBreakIndex(src__engine._FindBreakDirection.backward, text, index);
    }
    static _findBreakIndex(direction, text, index) {
      let step = null;
      let min = null;
      let max = null;
      if (dart.equals(direction, src__engine._FindBreakDirection.forward)) {
        step = 1;
        min = 0;
        max = text.length - 1;
      } else {
        step = -1;
        min = 1;
        max = text.length;
      }
      let i = index;
      while (dart.notNull(i) >= dart.notNull(min) && dart.notNull(i) <= dart.notNull(max)) {
        i = dart.notNull(i) + dart.notNull(step);
        if (dart.test(src__engine.WordBreaker._isBreak(text, i))) {
          break;
        }
      }
      return i;
    }
    static _isBreak(text, index) {
      if (dart.notNull(index) <= 0 || dart.notNull(index) >= text.length) {
        return true;
      }
      if (dart.test(src__engine.WordBreaker._isUtf16Surrogate(text[$codeUnitAt](dart.notNull(index) - 1)))) {
        return false;
      }
      let immediateRight = src__engine.getCharProperty(text, index);
      let immediateLeft = src__engine.getCharProperty(text, dart.notNull(index) - 1);
      if (dart.equals(immediateLeft, src__engine.CharProperty.CR) && dart.equals(immediateRight, src__engine.CharProperty.LF)) return false;
      if (dart.test(src__engine.WordBreaker._oneOf(immediateLeft, src__engine.CharProperty.Newline, src__engine.CharProperty.CR, src__engine.CharProperty.LF))) return true;
      if (dart.test(src__engine.WordBreaker._oneOf(immediateRight, src__engine.CharProperty.Newline, src__engine.CharProperty.CR, src__engine.CharProperty.LF))) return true;
      if (dart.equals(immediateLeft, src__engine.CharProperty.WSegSpace) && dart.equals(immediateRight, src__engine.CharProperty.WSegSpace)) return false;
      if (dart.test(src__engine.WordBreaker._oneOf(immediateRight, src__engine.CharProperty.Extend, src__engine.CharProperty.Format, src__engine.CharProperty.ZWJ))) {
        return false;
      }
      let l = 0;
      while (dart.test(src__engine.WordBreaker._oneOf(immediateLeft, src__engine.CharProperty.Extend, src__engine.CharProperty.Format, src__engine.CharProperty.ZWJ))) {
        l = l + 1;
        if (dart.notNull(index) - l - 1 < 0) {
          return true;
        }
        immediateLeft = src__engine.getCharProperty(text, dart.notNull(index) - l - 1);
      }
      if (dart.test(src__engine.WordBreaker._isAHLetter(immediateLeft)) && dart.test(src__engine.WordBreaker._isAHLetter(immediateRight))) return false;
      let r = 0;
      let nextRight = null;
      do {
        r = r + 1;
        nextRight = src__engine.getCharProperty(text, dart.notNull(index) + r);
      } while (dart.test(src__engine.WordBreaker._oneOf(nextRight, src__engine.CharProperty.Extend, src__engine.CharProperty.Format, src__engine.CharProperty.ZWJ)));
      let nextLeft = null;
      do {
        l = l + 1;
        nextLeft = src__engine.getCharProperty(text, dart.notNull(index) - l - 1);
      } while (dart.test(src__engine.WordBreaker._oneOf(nextLeft, src__engine.CharProperty.Extend, src__engine.CharProperty.Format, src__engine.CharProperty.ZWJ)));
      if (dart.test(src__engine.WordBreaker._isAHLetter(immediateLeft)) && dart.test(src__engine.WordBreaker._oneOf(immediateRight, src__engine.CharProperty.MidLetter, src__engine.CharProperty.MidNumLet, src__engine.CharProperty.SingleQuote)) && dart.test(src__engine.WordBreaker._isAHLetter(nextRight))) {
        return false;
      }
      if (dart.test(src__engine.WordBreaker._isAHLetter(nextLeft)) && dart.test(src__engine.WordBreaker._oneOf(immediateLeft, src__engine.CharProperty.MidLetter, src__engine.CharProperty.MidNumLet, src__engine.CharProperty.SingleQuote)) && dart.test(src__engine.WordBreaker._isAHLetter(immediateRight))) {
        return false;
      }
      if (dart.equals(immediateLeft, src__engine.CharProperty.HebrewLetter) && dart.equals(immediateRight, src__engine.CharProperty.SingleQuote)) return false;
      if (dart.equals(immediateLeft, src__engine.CharProperty.HebrewLetter) && dart.equals(immediateRight, src__engine.CharProperty.DoubleQuote) && dart.equals(nextRight, src__engine.CharProperty.HebrewLetter)) return false;
      if (dart.equals(nextLeft, src__engine.CharProperty.HebrewLetter) && dart.equals(immediateLeft, src__engine.CharProperty.DoubleQuote) && dart.equals(immediateRight, src__engine.CharProperty.HebrewLetter)) return false;
      if (dart.equals(immediateLeft, src__engine.CharProperty.Numeric) && dart.equals(immediateRight, src__engine.CharProperty.Numeric)) return false;
      if (dart.test(src__engine.WordBreaker._isAHLetter(immediateLeft)) && dart.equals(immediateRight, src__engine.CharProperty.Numeric)) return false;
      if (dart.equals(immediateLeft, src__engine.CharProperty.Numeric) && dart.test(src__engine.WordBreaker._isAHLetter(immediateRight))) return false;
      if (dart.equals(nextLeft, src__engine.CharProperty.Numeric) && dart.test(src__engine.WordBreaker._oneOf(immediateLeft, src__engine.CharProperty.MidNum, src__engine.CharProperty.MidNumLet, src__engine.CharProperty.SingleQuote)) && dart.equals(immediateRight, src__engine.CharProperty.Numeric)) {
        return false;
      }
      if (dart.equals(immediateLeft, src__engine.CharProperty.Numeric) && dart.test(src__engine.WordBreaker._oneOf(immediateRight, src__engine.CharProperty.MidNum, src__engine.CharProperty.MidNumLet, src__engine.CharProperty.SingleQuote)) && dart.equals(nextRight, src__engine.CharProperty.Numeric)) {
        return false;
      }
      if (dart.equals(immediateLeft, src__engine.CharProperty.Katakana) && dart.equals(immediateRight, src__engine.CharProperty.Katakana)) return false;
      if (dart.test(src__engine.WordBreaker._oneOf(immediateLeft, src__engine.CharProperty.ALetter, src__engine.CharProperty.HebrewLetter, src__engine.CharProperty.Numeric, src__engine.CharProperty.Katakana, src__engine.CharProperty.ExtendNumLet)) && dart.equals(immediateRight, src__engine.CharProperty.ExtendNumLet)) {
        return false;
      }
      if (dart.equals(immediateLeft, src__engine.CharProperty.ExtendNumLet) && dart.test(src__engine.WordBreaker._oneOf(immediateRight, src__engine.CharProperty.ALetter, src__engine.CharProperty.HebrewLetter, src__engine.CharProperty.Numeric, src__engine.CharProperty.Katakana))) {
        return false;
      }
      return true;
    }
    static _isUtf16Surrogate(value) {
      return (dart.notNull(value) & 63488) === 55296;
    }
    static _oneOf(value, choice1, choice2, choice3, choice4, choice5) {
      if (choice3 === void 0) choice3 = null;
      if (choice4 === void 0) choice4 = null;
      if (choice5 === void 0) choice5 = null;
      if (dart.equals(value, choice1)) return true;
      if (dart.equals(value, choice2)) return true;
      if (choice3 != null && dart.equals(value, choice3)) return true;
      if (choice4 != null && dart.equals(value, choice4)) return true;
      if (choice5 != null && dart.equals(value, choice5)) return true;
      return false;
    }
    static _isAHLetter(property) {
      return src__engine.WordBreaker._oneOf(property, src__engine.CharProperty.ALetter, src__engine.CharProperty.HebrewLetter);
    }
  };
  (src__engine.WordBreaker.new = function() {
    ;
  }).prototype = src__engine.WordBreaker.prototype;
  dart.addTypeTests(src__engine.WordBreaker);
  src__engine.EditingState = class EditingState extends core.Object {
    get text() {
      return this[text$];
    }
    set text(value) {
      super.text = value;
    }
    get baseOffset() {
      return this[baseOffset$];
    }
    set baseOffset(value) {
      super.baseOffset = value;
    }
    get extentOffset() {
      return this[extentOffset$];
    }
    set extentOffset(value) {
      super.extentOffset = value;
    }
    toFlutter() {
      return new (IdentityMapOfString$dynamic()).from(["text", this.text, "selectionBase", this.baseOffset, "selectionExtent", this.extentOffset]);
    }
    get isValid() {
      return dart.notNull(this.baseOffset) >= 0 && dart.notNull(this.extentOffset) >= 0;
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) return true;
      if (!dart.equals(this[$runtimeType], dart.runtimeType(other))) return false;
      let typedOther = src__engine.EditingState._check(other);
      return this.text == typedOther.text && this.baseOffset == typedOther.baseOffset && this.extentOffset == typedOther.extentOffset;
    }
    toString() {
      return dart.test(src__engine.assertionsEnabled) ? "EditingState(\"" + dart.str(this.text) + "\", base:" + dart.str(this.baseOffset) + ", extent:" + dart.str(this.extentOffset) + ")" : super[$toString]();
    }
  };
  (src__engine.EditingState.new = function(opts) {
    let text = opts && 'text' in opts ? opts.text : null;
    let baseOffset = opts && 'baseOffset' in opts ? opts.baseOffset : 0;
    let extentOffset = opts && 'extentOffset' in opts ? opts.extentOffset : 0;
    this[text$] = text;
    this[baseOffset$] = baseOffset;
    this[extentOffset$] = extentOffset;
    ;
  }).prototype = src__engine.EditingState.prototype;
  (src__engine.EditingState.fromFlutter = function(flutterEditingState) {
    this[text$] = core.String._check(flutterEditingState[$_get]("text"));
    this[baseOffset$] = core.int._check(flutterEditingState[$_get]("selectionBase"));
    this[extentOffset$] = core.int._check(flutterEditingState[$_get]("selectionExtent"));
    ;
  }).prototype = src__engine.EditingState.prototype;
  dart.addTypeTests(src__engine.EditingState);
  const text$ = Symbol("EditingState.text");
  const baseOffset$ = Symbol("EditingState.baseOffset");
  const extentOffset$ = Symbol("EditingState.extentOffset");
  dart.setMethodSignature(src__engine.EditingState, () => ({
    __proto__: dart.getMethods(src__engine.EditingState.__proto__),
    toFlutter: dart.fnType(core.Map$(core.String, dart.dynamic), [])
  }));
  dart.setGetterSignature(src__engine.EditingState, () => ({
    __proto__: dart.getGetters(src__engine.EditingState.__proto__),
    isValid: core.bool
  }));
  dart.setFieldSignature(src__engine.EditingState, () => ({
    __proto__: dart.getFields(src__engine.EditingState.__proto__),
    text: dart.finalFieldType(core.String),
    baseOffset: dart.finalFieldType(core.int),
    extentOffset: dart.finalFieldType(core.int)
  }));
  dart.defineExtensionMethods(src__engine.EditingState, ['_equals', 'toString']);
  src__engine.InputType = class InputType extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (src__engine.InputType.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = src__engine.InputType.prototype;
  dart.addTypeTests(src__engine.InputType);
  dart.setFieldSignature(src__engine.InputType, () => ({
    __proto__: dart.getFields(src__engine.InputType.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(src__engine.InputType, ['toString']);
  src__engine.InputType.text = dart.const(new src__engine.InputType.new(0, "InputType.text"));
  src__engine.InputType.multiline = dart.const(new src__engine.InputType.new(1, "InputType.multiline"));
  src__engine.InputType.values = dart.constList([src__engine.InputType.text, src__engine.InputType.multiline], src__engine.InputType);
  src__engine.InputConfiguration = class InputConfiguration extends core.Object {
    get inputType() {
      return this[inputType$];
    }
    set inputType(value) {
      super.inputType = value;
    }
    get obscureText() {
      return this[obscureText$];
    }
    set obscureText(value) {
      super.obscureText = value;
    }
  };
  (src__engine.InputConfiguration.new = function(opts) {
    let inputType = opts && 'inputType' in opts ? opts.inputType : null;
    let obscureText = opts && 'obscureText' in opts ? opts.obscureText : false;
    this[inputType$] = inputType;
    this[obscureText$] = obscureText;
    ;
  }).prototype = src__engine.InputConfiguration.prototype;
  (src__engine.InputConfiguration.fromFlutter = function(flutterInputConfiguration) {
    this[inputType$] = src__engine._getInputTypeFromString(core.String._check(dart.dsend(flutterInputConfiguration[$_get]("inputType"), '_get', ["name"])));
    this[obscureText$] = core.bool._check(flutterInputConfiguration[$_get]("obscureText"));
    ;
  }).prototype = src__engine.InputConfiguration.prototype;
  dart.addTypeTests(src__engine.InputConfiguration);
  const inputType$ = Symbol("InputConfiguration.inputType");
  const obscureText$ = Symbol("InputConfiguration.obscureText");
  dart.setFieldSignature(src__engine.InputConfiguration, () => ({
    __proto__: dart.getFields(src__engine.InputConfiguration.__proto__),
    inputType: dart.finalFieldType(src__engine.InputType),
    obscureText: dart.finalFieldType(core.bool)
  }));
  src__engine.ElementType = class ElementType extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (src__engine.ElementType.new = function(index, _name) {
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = src__engine.ElementType.prototype;
  dart.addTypeTests(src__engine.ElementType);
  dart.setFieldSignature(src__engine.ElementType, () => ({
    __proto__: dart.getFields(src__engine.ElementType.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(src__engine.ElementType, ['toString']);
  src__engine.ElementType.input = dart.const(new src__engine.ElementType.new(0, "ElementType.input"));
  src__engine.ElementType.textarea = dart.const(new src__engine.ElementType.new(1, "ElementType.textarea"));
  src__engine.ElementType.contentEditable = dart.const(new src__engine.ElementType.new(2, "ElementType.contentEditable"));
  src__engine.ElementType.values = dart.constList([src__engine.ElementType.input, src__engine.ElementType.textarea, src__engine.ElementType.contentEditable], src__engine.ElementType);
  const _enabled = dart.privateName(src__engine, "_enabled");
  const _lastEditingState = dart.privateName(src__engine, "_lastEditingState");
  const _onChange = dart.privateName(src__engine, "_onChange");
  const _subscriptions = dart.privateName(src__engine, "_subscriptions");
  const _elementType = dart.privateName(src__engine, "_elementType");
  const _initDomElement = dart.privateName(src__engine, "_initDomElement");
  const _refocus = dart.privateName(src__engine, "_refocus");
  const _handleChange = dart.privateName(src__engine, "_handleChange");
  const _removeDomElement = dart.privateName(src__engine, "_removeDomElement");
  const _createRange = dart.privateName(src__engine, "_createRange");
  const _swapDomElement = dart.privateName(src__engine, "_swapDomElement");
  src__engine.TextEditingElement = class TextEditingElement extends core.Object {
    get domElement() {
      return this[domElement];
    }
    set domElement(value) {
      this[domElement] = value;
    }
    get [_elementType]() {
      let type = src__engine._getTypeFromElement(this.domElement);
      if (!(type != null)) dart.assertFailed();
      return type;
    }
    enable(inputConfig, opts) {
      let t4;
      let onChange = opts && 'onChange' in opts ? opts.onChange : null;
      if (!!dart.test(this[_enabled])) dart.assertFailed();
      this[_initDomElement](inputConfig);
      this[_enabled] = true;
      this[_onChange] = onChange;
      if (dart.equals(src__engine.browserEngine, src__engine.BrowserEngine.blink) || dart.equals(src__engine.browserEngine, src__engine.BrowserEngine.unknown)) {
        this[_subscriptions][$add](this.domElement[$onBlur].listen(dart.fn(_ => {
          if (dart.test(this[_enabled])) {
            this[_refocus]();
          }
        }, EventToNull())));
      }
      this.domElement.focus();
      if (this[_lastEditingState] != null) {
        this.setEditingState(this[_lastEditingState]);
      }
      t4 = this[_subscriptions];
      t4[$add](html.document[$onSelectionChange].listen(dart.bind(this, _handleChange)));
      t4[$add](this.domElement[$onInput].listen(dart.bind(this, _handleChange)));
      t4;
    }
    disable() {
      if (!dart.test(this[_enabled])) dart.assertFailed();
      this[_enabled] = false;
      this[_lastEditingState] = null;
      for (let i = 0; i < dart.notNull(this[_subscriptions][$length]); i = i + 1) {
        this[_subscriptions][$_get](i).cancel();
      }
      this[_subscriptions][$clear]();
      this[_removeDomElement]();
    }
    [_initDomElement](inputConfig) {
      switch (inputConfig.inputType) {
        case src__engine.InputType.text:
        {
          this.domElement = src__engine._createInputElement();
          break;
        }
        case src__engine.InputType.multiline:
        {
          this.domElement = src__engine._createTextAreaElement();
          break;
        }
        default:
        {
          dart.throw(new core.UnsupportedError.new("Unsupported input type: " + dart.str(inputConfig.inputType)));
        }
      }
      html.document.body[$append](this.domElement);
    }
    [_removeDomElement]() {
      this.domElement[$remove]();
      this.domElement = null;
    }
    [_refocus]() {
      this.domElement.focus();
    }
    setEditingState(editingState) {
      let t4;
      this[_lastEditingState] = editingState;
      if (!dart.test(this[_enabled]) || !dart.test(editingState.isValid)) {
        return;
      }
      switch (this[_elementType]) {
        case src__engine.ElementType.input:
        {
          let input = html.InputElement._check(this.domElement);
          input.value = editingState.text;
          input.setSelectionRange(editingState.baseOffset, editingState.extentOffset);
          break;
        }
        case src__engine.ElementType.textarea:
        {
          let textarea = html.TextAreaElement._check(this.domElement);
          textarea.value = editingState.text;
          textarea.setSelectionRange(editingState.baseOffset, editingState.extentOffset);
          break;
        }
        case src__engine.ElementType.contentEditable:
        {
          src__engine.domRenderer.clearDom(this.domElement);
          this.domElement[$append](html.Text.new(editingState.text));
          t4 = html.window.getSelection();
          t4.removeAllRanges();
          t4.addRange(this[_createRange](editingState));
          t4;
          break;
        }
      }
      this.domElement.focus();
    }
    [_swapDomElement](newElementType) {
    }
    [_handleChange](event) {
      this[_lastEditingState] = this.calculateEditingState();
      this[_onChange](this[_lastEditingState]);
    }
    calculateEditingState() {
      if (!(this.domElement != null)) dart.assertFailed();
      let editingState = null;
      switch (this[_elementType]) {
        case src__engine.ElementType.input:
        {
          let inputElement = html.InputElement._check(this.domElement);
          editingState = new src__engine.EditingState.new({text: inputElement.value, baseOffset: inputElement.selectionStart, extentOffset: inputElement.selectionEnd});
          break;
        }
        case src__engine.ElementType.textarea:
        {
          let textAreaElement = html.TextAreaElement._check(this.domElement);
          editingState = new src__engine.EditingState.new({text: textAreaElement.value, baseOffset: textAreaElement.selectionStart, extentOffset: textAreaElement.selectionEnd});
          break;
        }
        case src__engine.ElementType.contentEditable:
        {
          let text = core.String._check(js_util.getProperty(this.domElement, "innerText"));
          if (dart.notNull(this.domElement.childNodes[$length]) > 1) {
            let prevSelectionEnd = math.max(core.int, this[_lastEditingState].baseOffset, this[_lastEditingState].extentOffset);
            let prevText = this[_lastEditingState].text;
            let offsetFromEnd = prevText.length - prevSelectionEnd;
            let newSelectionExtent = text.length - offsetFromEnd;
            editingState = new src__engine.EditingState.new({text: text, baseOffset: newSelectionExtent, extentOffset: newSelectionExtent});
          } else {
            let selection = html.window.getSelection();
            editingState = new src__engine.EditingState.new({text: text, baseOffset: selection.baseOffset, extentOffset: selection.extentOffset});
          }
        }
      }
      if (!(editingState != null)) dart.assertFailed();
      return editingState;
    }
    [_createRange](editingState) {
      let t4;
      let firstChild = this.domElement.firstChild;
      t4 = html.document.createRange();
      t4.setStart(firstChild, editingState.baseOffset);
      t4.setEnd(firstChild, editingState.extentOffset);
      return t4;
    }
  };
  (src__engine.TextEditingElement.new = function() {
    this[_enabled] = false;
    this[domElement] = null;
    this[_lastEditingState] = null;
    this[_onChange] = null;
    this[_subscriptions] = JSArrayOfStreamSubscription().of([]);
    ;
  }).prototype = src__engine.TextEditingElement.prototype;
  dart.addTypeTests(src__engine.TextEditingElement);
  const domElement = Symbol("TextEditingElement.domElement");
  dart.setMethodSignature(src__engine.TextEditingElement, () => ({
    __proto__: dart.getMethods(src__engine.TextEditingElement.__proto__),
    enable: dart.fnType(dart.void, [src__engine.InputConfiguration], {onChange: dart.fnType(dart.void, [src__engine.EditingState])}),
    disable: dart.fnType(dart.void, []),
    [_initDomElement]: dart.fnType(dart.void, [src__engine.InputConfiguration]),
    [_removeDomElement]: dart.fnType(dart.void, []),
    [_refocus]: dart.fnType(dart.void, []),
    setEditingState: dart.fnType(dart.void, [src__engine.EditingState]),
    [_swapDomElement]: dart.fnType(dart.void, [src__engine.ElementType]),
    [_handleChange]: dart.fnType(dart.void, [html.Event]),
    calculateEditingState: dart.fnType(src__engine.EditingState, []),
    [_createRange]: dart.fnType(html.Range, [src__engine.EditingState])
  }));
  dart.setGetterSignature(src__engine.TextEditingElement, () => ({
    __proto__: dart.getGetters(src__engine.TextEditingElement.__proto__),
    [_elementType]: src__engine.ElementType
  }));
  dart.setFieldSignature(src__engine.TextEditingElement, () => ({
    __proto__: dart.getFields(src__engine.TextEditingElement.__proto__),
    [_enabled]: dart.fieldType(core.bool),
    domElement: dart.fieldType(html.HtmlElement),
    [_lastEditingState]: dart.fieldType(src__engine.EditingState),
    [_onChange]: dart.fieldType(dart.fnType(dart.void, [src__engine.EditingState])),
    [_subscriptions]: dart.finalFieldType(core.List$(async.StreamSubscription))
  }));
  const _onDomElementSwap = dart.privateName(src__engine, "_onDomElementSwap");
  src__engine.PersistentTextEditingElement = class PersistentTextEditingElement extends src__engine.TextEditingElement {
    [_initDomElement](inputConfig) {
      if (!(this.domElement != null)) dart.assertFailed();
      if (!dart.test(html.document.body.contains(this.domElement))) dart.assertFailed();
    }
    [_removeDomElement]() {
      this.domElement.blur();
    }
    [_refocus]() {
    }
    [_swapDomElement](newElementType) {
      super[_swapDomElement](newElementType);
      this[_onDomElementSwap]();
    }
  };
  (src__engine.PersistentTextEditingElement.new = function(domElement, opts) {
    let onDomElementSwap = opts && 'onDomElementSwap' in opts ? opts.onDomElementSwap : null;
    this[_onDomElementSwap] = onDomElementSwap;
    src__engine.PersistentTextEditingElement.__proto__.new.call(this);
    if (!(src__engine._getTypeFromElement(domElement) != null)) dart.assertFailed();
    this.domElement = domElement;
  }).prototype = src__engine.PersistentTextEditingElement.prototype;
  dart.addTypeTests(src__engine.PersistentTextEditingElement);
  dart.setFieldSignature(src__engine.PersistentTextEditingElement, () => ({
    __proto__: dart.getFields(src__engine.PersistentTextEditingElement.__proto__),
    [_onDomElementSwap]: dart.finalFieldType(dart.fnType(dart.void, []))
  }));
  const _defaultEditingElement = dart.privateName(src__engine, "_defaultEditingElement");
  const _customEditingElement = dart.privateName(src__engine, "_customEditingElement");
  const _clientId = dart.privateName(src__engine, "_clientId");
  const _isEditing = dart.privateName(src__engine, "_isEditing");
  const _configuration = dart.privateName(src__engine, "_configuration");
  const _stopEditing = dart.privateName(src__engine, "_stopEditing");
  let const$39;
  const _startEditing = dart.privateName(src__engine, "_startEditing");
  const _syncEditingStateToFlutter = dart.privateName(src__engine, "_syncEditingStateToFlutter");
  let const$40;
  src__engine.HybridTextEditing = class HybridTextEditing extends core.Object {
    get editingElement() {
      if (this[_customEditingElement] != null) {
        return this[_customEditingElement];
      }
      return this[_defaultEditingElement];
    }
    useCustomEditableElement(customEditingElement) {
      if (dart.test(this[_isEditing]) && !dart.equals(customEditingElement, this[_customEditingElement])) {
        this[_stopEditing]();
      }
      this[_customEditingElement] = customEditingElement;
    }
    stopUsingCustomEditableElement() {
      this.useCustomEditableElement(null);
    }
    handleTextInput(data) {
      let call = (const$39 || (const$39 = dart.const(new src__engine.JSONMethodCodec.new()))).decodeMethodCall(data);
      switch (call.method) {
        case "TextInput.setClient":
        {
          this[_clientId] = core.int._check(dart.dsend(call.arguments, '_get', [0]));
          this[_configuration] = MapOfString$dynamic()._check(dart.dsend(call.arguments, '_get', [1]));
          break;
        }
        case "TextInput.setEditingState":
        {
          this.editingElement.setEditingState(new src__engine.EditingState.fromFlutter(MapOfString$dynamic()._check(call.arguments)));
          break;
        }
        case "TextInput.show":
        {
          if (!dart.test(this[_isEditing])) {
            this[_startEditing]();
          }
          break;
        }
        case "TextInput.clearClient":
        case "TextInput.hide":
        {
          if (dart.test(this[_isEditing])) {
            this[_stopEditing]();
          }
          break;
        }
      }
    }
    [_startEditing]() {
      if (!!dart.test(this[_isEditing])) dart.assertFailed();
      this[_isEditing] = true;
      this.editingElement.enable(new src__engine.InputConfiguration.fromFlutter(this[_configuration]), {onChange: dart.bind(this, _syncEditingStateToFlutter)});
    }
    [_stopEditing]() {
      if (!dart.test(this[_isEditing])) dart.assertFailed();
      this[_isEditing] = false;
      this.editingElement.disable();
    }
    [_syncEditingStateToFlutter](editingState) {
      ui.window.onPlatformMessage("flutter/textinput", (const$40 || (const$40 = dart.const(new src__engine.JSONMethodCodec.new()))).encodeMethodCall(new src__engine.MethodCall.new("TextInputClient.updateEditingState", JSArrayOfObject().of([this[_clientId], editingState.toFlutter()]))), dart.fn(src__engine._emptyCallback, dynamicTovoid()));
    }
  };
  (src__engine.HybridTextEditing.new = function() {
    this[_defaultEditingElement] = new src__engine.TextEditingElement.new();
    this[_customEditingElement] = null;
    this[_clientId] = null;
    this[_isEditing] = false;
    this[_configuration] = null;
    this[_subscriptions] = JSArrayOfStreamSubscription().of([]);
    ;
  }).prototype = src__engine.HybridTextEditing.prototype;
  dart.addTypeTests(src__engine.HybridTextEditing);
  dart.setMethodSignature(src__engine.HybridTextEditing, () => ({
    __proto__: dart.getMethods(src__engine.HybridTextEditing.__proto__),
    useCustomEditableElement: dart.fnType(dart.void, [src__engine.TextEditingElement]),
    stopUsingCustomEditableElement: dart.fnType(dart.void, []),
    handleTextInput: dart.fnType(dart.void, [typed_data.ByteData]),
    [_startEditing]: dart.fnType(dart.void, []),
    [_stopEditing]: dart.fnType(dart.void, []),
    [_syncEditingStateToFlutter]: dart.fnType(dart.void, [src__engine.EditingState])
  }));
  dart.setGetterSignature(src__engine.HybridTextEditing, () => ({
    __proto__: dart.getGetters(src__engine.HybridTextEditing.__proto__),
    editingElement: src__engine.TextEditingElement
  }));
  dart.setFieldSignature(src__engine.HybridTextEditing, () => ({
    __proto__: dart.getFields(src__engine.HybridTextEditing.__proto__),
    [_defaultEditingElement]: dart.fieldType(src__engine.TextEditingElement),
    [_customEditingElement]: dart.fieldType(src__engine.TextEditingElement),
    [_clientId]: dart.fieldType(core.int),
    [_isEditing]: dart.fieldType(core.bool),
    [_configuration]: dart.fieldType(core.Map$(core.String, dart.dynamic)),
    [_subscriptions]: dart.finalFieldType(core.List$(async.StreamSubscription))
  }));
  const _m4storage$ = dart.privateName(src__engine, "_m4storage");
  const _v3storage$ = dart.privateName(src__engine, "_v3storage");
  src__engine.Matrix4 = class Matrix4 extends core.Object {
    get storage() {
      return this[_m4storage$];
    }
    static tryInvert(other) {
      let r = new src__engine.Matrix4.zero();
      let determinant = r.copyInverse(other);
      if (determinant === 0.0) {
        return null;
      }
      return r;
    }
    index(row, col) {
      return dart.notNull(col) * 4 + dart.notNull(row);
    }
    entry(row, col) {
      if (!(dart.notNull(row) >= 0 && dart.notNull(row) < dart.notNull(this.dimension))) dart.assertFailed();
      if (!(dart.notNull(col) >= 0 && dart.notNull(col) < dart.notNull(this.dimension))) dart.assertFailed();
      return this[_m4storage$][$_get](this.index(row, col));
    }
    setEntry(row, col, v) {
      if (!(dart.notNull(row) >= 0 && dart.notNull(row) < dart.notNull(this.dimension))) dart.assertFailed();
      if (!(dart.notNull(col) >= 0 && dart.notNull(col) < dart.notNull(this.dimension))) dart.assertFailed();
      this[_m4storage$][$_set](this.index(row, col), v);
    }
    static new(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15) {
      let t4;
      t4 = new src__engine.Matrix4.zero();
      t4.setValues(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15);
      return t4;
    }
    static fromList(values) {
      let t4;
      t4 = new src__engine.Matrix4.zero();
      t4.setValues(values[$_get](0), values[$_get](1), values[$_get](2), values[$_get](3), values[$_get](4), values[$_get](5), values[$_get](6), values[$_get](7), values[$_get](8), values[$_get](9), values[$_get](10), values[$_get](11), values[$_get](12), values[$_get](13), values[$_get](14), values[$_get](15));
      return t4;
    }
    static identity() {
      let t4;
      t4 = new src__engine.Matrix4.zero();
      t4.setIdentity();
      return t4;
    }
    static copy(other) {
      let t4;
      t4 = new src__engine.Matrix4.zero();
      t4.setFrom(other);
      return t4;
    }
    static inverted(other) {
      let r = new src__engine.Matrix4.zero();
      let determinant = r.copyInverse(other);
      if (determinant === 0.0) {
        dart.throw(new core.ArgumentError.value(other, "other", "Matrix cannot be inverted"));
      }
      return r;
    }
    static rotationX(radians) {
      let t4;
      t4 = new src__engine.Matrix4.zero();
      t4[_m4storage$][$_set](15, 1.0);
      t4.setRotationX(radians);
      return t4;
    }
    static rotationY(radians) {
      let t4;
      t4 = new src__engine.Matrix4.zero();
      t4[_m4storage$][$_set](15, 1.0);
      t4.setRotationY(radians);
      return t4;
    }
    static rotationZ(radians) {
      let t4;
      t4 = new src__engine.Matrix4.zero();
      t4[_m4storage$][$_set](15, 1.0);
      t4.setRotationZ(radians);
      return t4;
    }
    static translation(translation) {
      let t4;
      t4 = new src__engine.Matrix4.zero();
      t4.setIdentity();
      t4.setTranslation(translation);
      return t4;
    }
    static translationValues(x, y, z) {
      let t4;
      t4 = new src__engine.Matrix4.zero();
      t4.setIdentity();
      t4.setTranslationRaw(x, y, z);
      return t4;
    }
    static diagonal3Values(x, y, z) {
      let t4;
      t4 = new src__engine.Matrix4.zero();
      t4[_m4storage$][$_set](15, 1.0);
      t4[_m4storage$][$_set](10, z);
      t4[_m4storage$][$_set](5, y);
      t4[_m4storage$][$_set](0, x);
      return t4;
    }
    setValues(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15) {
      this[_m4storage$][$_set](15, arg15);
      this[_m4storage$][$_set](14, arg14);
      this[_m4storage$][$_set](13, arg13);
      this[_m4storage$][$_set](12, arg12);
      this[_m4storage$][$_set](11, arg11);
      this[_m4storage$][$_set](10, arg10);
      this[_m4storage$][$_set](9, arg9);
      this[_m4storage$][$_set](8, arg8);
      this[_m4storage$][$_set](7, arg7);
      this[_m4storage$][$_set](6, arg6);
      this[_m4storage$][$_set](5, arg5);
      this[_m4storage$][$_set](4, arg4);
      this[_m4storage$][$_set](3, arg3);
      this[_m4storage$][$_set](2, arg2);
      this[_m4storage$][$_set](1, arg1);
      this[_m4storage$][$_set](0, arg0);
    }
    setFrom(arg) {
      let argStorage = arg[_m4storage$];
      this[_m4storage$][$_set](15, argStorage[$_get](15));
      this[_m4storage$][$_set](14, argStorage[$_get](14));
      this[_m4storage$][$_set](13, argStorage[$_get](13));
      this[_m4storage$][$_set](12, argStorage[$_get](12));
      this[_m4storage$][$_set](11, argStorage[$_get](11));
      this[_m4storage$][$_set](10, argStorage[$_get](10));
      this[_m4storage$][$_set](9, argStorage[$_get](9));
      this[_m4storage$][$_set](8, argStorage[$_get](8));
      this[_m4storage$][$_set](7, argStorage[$_get](7));
      this[_m4storage$][$_set](6, argStorage[$_get](6));
      this[_m4storage$][$_set](5, argStorage[$_get](5));
      this[_m4storage$][$_set](4, argStorage[$_get](4));
      this[_m4storage$][$_set](3, argStorage[$_get](3));
      this[_m4storage$][$_set](2, argStorage[$_get](2));
      this[_m4storage$][$_set](1, argStorage[$_get](1));
      this[_m4storage$][$_set](0, argStorage[$_get](0));
    }
    get dimension() {
      return 4;
    }
    _get(i) {
      return this[_m4storage$][$_get](i);
    }
    _set(i, v$) {
      let v = v$;
      this[_m4storage$][$_set](i, v);
      return v$;
    }
    clone() {
      return src__engine.Matrix4.copy(this);
    }
    copyInto(arg) {
      let argStorage = arg[_m4storage$];
      argStorage[$_set](0, this[_m4storage$][$_get](0));
      argStorage[$_set](1, this[_m4storage$][$_get](1));
      argStorage[$_set](2, this[_m4storage$][$_get](2));
      argStorage[$_set](3, this[_m4storage$][$_get](3));
      argStorage[$_set](4, this[_m4storage$][$_get](4));
      argStorage[$_set](5, this[_m4storage$][$_get](5));
      argStorage[$_set](6, this[_m4storage$][$_get](6));
      argStorage[$_set](7, this[_m4storage$][$_get](7));
      argStorage[$_set](8, this[_m4storage$][$_get](8));
      argStorage[$_set](9, this[_m4storage$][$_get](9));
      argStorage[$_set](10, this[_m4storage$][$_get](10));
      argStorage[$_set](11, this[_m4storage$][$_get](11));
      argStorage[$_set](12, this[_m4storage$][$_get](12));
      argStorage[$_set](13, this[_m4storage$][$_get](13));
      argStorage[$_set](14, this[_m4storage$][$_get](14));
      argStorage[$_set](15, this[_m4storage$][$_get](15));
      return arg;
    }
    translate(x, y, z) {
      if (y === void 0) y = 0.0;
      if (z === void 0) z = 0.0;
      let tx = null;
      let ty = null;
      let tz = null;
      let tw = 1.0;
      if (src__engine.Vector3.is(x)) {
        tx = x.x;
        ty = x.y;
        tz = x.z;
      } else if (typeof x == 'number') {
        tx = x;
        ty = y;
        tz = z;
      }
      let t1 = dart.notNull(this[_m4storage$][$_get](0)) * dart.notNull(tx) + dart.notNull(this[_m4storage$][$_get](4)) * dart.notNull(ty) + dart.notNull(this[_m4storage$][$_get](8)) * dart.notNull(tz) + dart.notNull(this[_m4storage$][$_get](12)) * tw;
      let t2 = dart.notNull(this[_m4storage$][$_get](1)) * dart.notNull(tx) + dart.notNull(this[_m4storage$][$_get](5)) * dart.notNull(ty) + dart.notNull(this[_m4storage$][$_get](9)) * dart.notNull(tz) + dart.notNull(this[_m4storage$][$_get](13)) * tw;
      let t3 = dart.notNull(this[_m4storage$][$_get](2)) * dart.notNull(tx) + dart.notNull(this[_m4storage$][$_get](6)) * dart.notNull(ty) + dart.notNull(this[_m4storage$][$_get](10)) * dart.notNull(tz) + dart.notNull(this[_m4storage$][$_get](14)) * tw;
      let t4 = dart.notNull(this[_m4storage$][$_get](3)) * dart.notNull(tx) + dart.notNull(this[_m4storage$][$_get](7)) * dart.notNull(ty) + dart.notNull(this[_m4storage$][$_get](11)) * dart.notNull(tz) + dart.notNull(this[_m4storage$][$_get](15)) * tw;
      this[_m4storage$][$_set](12, t1);
      this[_m4storage$][$_set](13, t2);
      this[_m4storage$][$_set](14, t3);
      this[_m4storage$][$_set](15, t4);
    }
    scale(x, y, z) {
      let t4, t4$, t5, t4$0, t5$, t4$1, t5$0, t4$2, t5$1, t4$3, t5$2, t4$4, t5$3, t4$5, t5$4, t4$6, t5$5, t4$7, t5$6, t4$8, t5$7, t4$9, t5$8, t4$10, t5$9, t4$11, t5$10, t4$12, t5$11, t4$13, t5$12, t4$14, t5$13, t4$15;
      if (y === void 0) y = null;
      if (z === void 0) z = null;
      let sx = null;
      let sy = null;
      let sz = null;
      let sw = 1.0;
      if (src__engine.Vector3.is(x)) {
        sx = x.x;
        sy = x.y;
        sz = x.z;
      } else if (typeof x == 'number') {
        sx = x;
        sy = (t4 = y, t4 == null ? x : t4);
        sz = (t4$ = z, t4$ == null ? x : t4$);
      }
      t4$0 = this[_m4storage$];
      t5 = 0;
      t4$0[$_set](t5, dart.notNull(t4$0[$_get](t5)) * dart.notNull(sx));
      t4$1 = this[_m4storage$];
      t5$ = 1;
      t4$1[$_set](t5$, dart.notNull(t4$1[$_get](t5$)) * dart.notNull(sx));
      t4$2 = this[_m4storage$];
      t5$0 = 2;
      t4$2[$_set](t5$0, dart.notNull(t4$2[$_get](t5$0)) * dart.notNull(sx));
      t4$3 = this[_m4storage$];
      t5$1 = 3;
      t4$3[$_set](t5$1, dart.notNull(t4$3[$_get](t5$1)) * dart.notNull(sx));
      t4$4 = this[_m4storage$];
      t5$2 = 4;
      t4$4[$_set](t5$2, dart.notNull(t4$4[$_get](t5$2)) * dart.notNull(sy));
      t4$5 = this[_m4storage$];
      t5$3 = 5;
      t4$5[$_set](t5$3, dart.notNull(t4$5[$_get](t5$3)) * dart.notNull(sy));
      t4$6 = this[_m4storage$];
      t5$4 = 6;
      t4$6[$_set](t5$4, dart.notNull(t4$6[$_get](t5$4)) * dart.notNull(sy));
      t4$7 = this[_m4storage$];
      t5$5 = 7;
      t4$7[$_set](t5$5, dart.notNull(t4$7[$_get](t5$5)) * dart.notNull(sy));
      t4$8 = this[_m4storage$];
      t5$6 = 8;
      t4$8[$_set](t5$6, dart.notNull(t4$8[$_get](t5$6)) * dart.notNull(sz));
      t4$9 = this[_m4storage$];
      t5$7 = 9;
      t4$9[$_set](t5$7, dart.notNull(t4$9[$_get](t5$7)) * dart.notNull(sz));
      t4$10 = this[_m4storage$];
      t5$8 = 10;
      t4$10[$_set](t5$8, dart.notNull(t4$10[$_get](t5$8)) * dart.notNull(sz));
      t4$11 = this[_m4storage$];
      t5$9 = 11;
      t4$11[$_set](t5$9, dart.notNull(t4$11[$_get](t5$9)) * dart.notNull(sz));
      t4$12 = this[_m4storage$];
      t5$10 = 12;
      t4$12[$_set](t5$10, dart.notNull(t4$12[$_get](t5$10)) * sw);
      t4$13 = this[_m4storage$];
      t5$11 = 13;
      t4$13[$_set](t5$11, dart.notNull(t4$13[$_get](t5$11)) * sw);
      t4$14 = this[_m4storage$];
      t5$12 = 14;
      t4$14[$_set](t5$12, dart.notNull(t4$14[$_get](t5$12)) * sw);
      t4$15 = this[_m4storage$];
      t5$13 = 15;
      t4$15[$_set](t5$13, dart.notNull(t4$15[$_get](t5$13)) * sw);
    }
    scaled(x, y, z) {
      let t4;
      if (y === void 0) y = null;
      if (z === void 0) z = null;
      t4 = this.clone();
      t4.scale(x, y, z);
      return t4;
    }
    setZero() {
      this[_m4storage$][$_set](0, 0.0);
      this[_m4storage$][$_set](1, 0.0);
      this[_m4storage$][$_set](2, 0.0);
      this[_m4storage$][$_set](3, 0.0);
      this[_m4storage$][$_set](4, 0.0);
      this[_m4storage$][$_set](5, 0.0);
      this[_m4storage$][$_set](6, 0.0);
      this[_m4storage$][$_set](7, 0.0);
      this[_m4storage$][$_set](8, 0.0);
      this[_m4storage$][$_set](9, 0.0);
      this[_m4storage$][$_set](10, 0.0);
      this[_m4storage$][$_set](11, 0.0);
      this[_m4storage$][$_set](12, 0.0);
      this[_m4storage$][$_set](13, 0.0);
      this[_m4storage$][$_set](14, 0.0);
      this[_m4storage$][$_set](15, 0.0);
    }
    setIdentity() {
      this[_m4storage$][$_set](0, 1.0);
      this[_m4storage$][$_set](1, 0.0);
      this[_m4storage$][$_set](2, 0.0);
      this[_m4storage$][$_set](3, 0.0);
      this[_m4storage$][$_set](4, 0.0);
      this[_m4storage$][$_set](5, 1.0);
      this[_m4storage$][$_set](6, 0.0);
      this[_m4storage$][$_set](7, 0.0);
      this[_m4storage$][$_set](8, 0.0);
      this[_m4storage$][$_set](9, 0.0);
      this[_m4storage$][$_set](10, 1.0);
      this[_m4storage$][$_set](11, 0.0);
      this[_m4storage$][$_set](12, 0.0);
      this[_m4storage$][$_set](13, 0.0);
      this[_m4storage$][$_set](14, 0.0);
      this[_m4storage$][$_set](15, 1.0);
    }
    transposed() {
      let t4;
      t4 = this.clone();
      t4.transpose();
      return t4;
    }
    transpose() {
      let temp = null;
      temp = this[_m4storage$][$_get](4);
      this[_m4storage$][$_set](4, this[_m4storage$][$_get](1));
      this[_m4storage$][$_set](1, temp);
      temp = this[_m4storage$][$_get](8);
      this[_m4storage$][$_set](8, this[_m4storage$][$_get](2));
      this[_m4storage$][$_set](2, temp);
      temp = this[_m4storage$][$_get](12);
      this[_m4storage$][$_set](12, this[_m4storage$][$_get](3));
      this[_m4storage$][$_set](3, temp);
      temp = this[_m4storage$][$_get](9);
      this[_m4storage$][$_set](9, this[_m4storage$][$_get](6));
      this[_m4storage$][$_set](6, temp);
      temp = this[_m4storage$][$_get](13);
      this[_m4storage$][$_set](13, this[_m4storage$][$_get](7));
      this[_m4storage$][$_set](7, temp);
      temp = this[_m4storage$][$_get](14);
      this[_m4storage$][$_set](14, this[_m4storage$][$_get](11));
      this[_m4storage$][$_set](11, temp);
    }
    determinant() {
      let det2_01_01 = dart.notNull(this[_m4storage$][$_get](0)) * dart.notNull(this[_m4storage$][$_get](5)) - dart.notNull(this[_m4storage$][$_get](1)) * dart.notNull(this[_m4storage$][$_get](4));
      let det2_01_02 = dart.notNull(this[_m4storage$][$_get](0)) * dart.notNull(this[_m4storage$][$_get](6)) - dart.notNull(this[_m4storage$][$_get](2)) * dart.notNull(this[_m4storage$][$_get](4));
      let det2_01_03 = dart.notNull(this[_m4storage$][$_get](0)) * dart.notNull(this[_m4storage$][$_get](7)) - dart.notNull(this[_m4storage$][$_get](3)) * dart.notNull(this[_m4storage$][$_get](4));
      let det2_01_12 = dart.notNull(this[_m4storage$][$_get](1)) * dart.notNull(this[_m4storage$][$_get](6)) - dart.notNull(this[_m4storage$][$_get](2)) * dart.notNull(this[_m4storage$][$_get](5));
      let det2_01_13 = dart.notNull(this[_m4storage$][$_get](1)) * dart.notNull(this[_m4storage$][$_get](7)) - dart.notNull(this[_m4storage$][$_get](3)) * dart.notNull(this[_m4storage$][$_get](5));
      let det2_01_23 = dart.notNull(this[_m4storage$][$_get](2)) * dart.notNull(this[_m4storage$][$_get](7)) - dart.notNull(this[_m4storage$][$_get](3)) * dart.notNull(this[_m4storage$][$_get](6));
      let det3_201_012 = dart.notNull(this[_m4storage$][$_get](8)) * det2_01_12 - dart.notNull(this[_m4storage$][$_get](9)) * det2_01_02 + dart.notNull(this[_m4storage$][$_get](10)) * det2_01_01;
      let det3_201_013 = dart.notNull(this[_m4storage$][$_get](8)) * det2_01_13 - dart.notNull(this[_m4storage$][$_get](9)) * det2_01_03 + dart.notNull(this[_m4storage$][$_get](11)) * det2_01_01;
      let det3_201_023 = dart.notNull(this[_m4storage$][$_get](8)) * det2_01_23 - dart.notNull(this[_m4storage$][$_get](10)) * det2_01_03 + dart.notNull(this[_m4storage$][$_get](11)) * det2_01_02;
      let det3_201_123 = dart.notNull(this[_m4storage$][$_get](9)) * det2_01_23 - dart.notNull(this[_m4storage$][$_get](10)) * det2_01_13 + dart.notNull(this[_m4storage$][$_get](11)) * det2_01_12;
      return -det3_201_123 * dart.notNull(this[_m4storage$][$_get](12)) + det3_201_023 * dart.notNull(this[_m4storage$][$_get](13)) - det3_201_013 * dart.notNull(this[_m4storage$][$_get](14)) + det3_201_012 * dart.notNull(this[_m4storage$][$_get](15));
    }
    ['*'](arg) {
      if (typeof arg == 'number') {
        return this.scaled(arg);
      }
      if (src__engine.Vector3.is(arg)) {
        return this.transformed3(arg);
      }
      if (src__engine.Matrix4.is(arg)) {
        return this.multiplied(arg);
      }
      dart.throw(new core.ArgumentError.new(arg));
    }
    perspectiveTransform(arg) {
      let argStorage = arg[_v3storage$];
      let x_ = dart.notNull(this[_m4storage$][$_get](0)) * dart.notNull(argStorage[$_get](0)) + dart.notNull(this[_m4storage$][$_get](4)) * dart.notNull(argStorage[$_get](1)) + dart.notNull(this[_m4storage$][$_get](8)) * dart.notNull(argStorage[$_get](2)) + dart.notNull(this[_m4storage$][$_get](12));
      let y_ = dart.notNull(this[_m4storage$][$_get](1)) * dart.notNull(argStorage[$_get](0)) + dart.notNull(this[_m4storage$][$_get](5)) * dart.notNull(argStorage[$_get](1)) + dart.notNull(this[_m4storage$][$_get](9)) * dart.notNull(argStorage[$_get](2)) + dart.notNull(this[_m4storage$][$_get](13));
      let z_ = dart.notNull(this[_m4storage$][$_get](2)) * dart.notNull(argStorage[$_get](0)) + dart.notNull(this[_m4storage$][$_get](6)) * dart.notNull(argStorage[$_get](1)) + dart.notNull(this[_m4storage$][$_get](10)) * dart.notNull(argStorage[$_get](2)) + dart.notNull(this[_m4storage$][$_get](14));
      let w_ = 1.0 / (dart.notNull(this[_m4storage$][$_get](3)) * dart.notNull(argStorage[$_get](0)) + dart.notNull(this[_m4storage$][$_get](7)) * dart.notNull(argStorage[$_get](1)) + dart.notNull(this[_m4storage$][$_get](11)) * dart.notNull(argStorage[$_get](2)) + dart.notNull(this[_m4storage$][$_get](15)));
      argStorage[$_set](0, x_ * w_);
      argStorage[$_set](1, y_ * w_);
      argStorage[$_set](2, z_ * w_);
      return arg;
    }
    isIdentity() {
      return this[_m4storage$][$_get](0) === 1.0 && this[_m4storage$][$_get](1) === 0.0 && this[_m4storage$][$_get](2) === 0.0 && this[_m4storage$][$_get](3) === 0.0 && this[_m4storage$][$_get](4) === 0.0 && this[_m4storage$][$_get](5) === 1.0 && this[_m4storage$][$_get](6) === 0.0 && this[_m4storage$][$_get](7) === 0.0 && this[_m4storage$][$_get](8) === 0.0 && this[_m4storage$][$_get](9) === 0.0 && this[_m4storage$][$_get](10) === 1.0 && this[_m4storage$][$_get](11) === 0.0 && this[_m4storage$][$_get](12) === 0.0 && this[_m4storage$][$_get](13) === 0.0 && this[_m4storage$][$_get](14) === 0.0 && this[_m4storage$][$_get](15) === 1.0;
    }
    getTranslation() {
      let z = this[_m4storage$][$_get](14);
      let y = this[_m4storage$][$_get](13);
      let x = this[_m4storage$][$_get](12);
      return src__engine.Vector3.new(x, y, z);
    }
    rotate(axis, angle) {
      let len = axis.length;
      let axisStorage = axis[_v3storage$];
      let x = dart.notNull(axisStorage[$_get](0)) / dart.notNull(len);
      let y = dart.notNull(axisStorage[$_get](1)) / dart.notNull(len);
      let z = dart.notNull(axisStorage[$_get](2)) / dart.notNull(len);
      let c = math.cos(angle);
      let s = math.sin(angle);
      let C = 1.0 - c;
      let m11 = x * x * C + c;
      let m12 = x * y * C - z * s;
      let m13 = x * z * C + y * s;
      let m21 = y * x * C + z * s;
      let m22 = y * y * C + c;
      let m23 = y * z * C - x * s;
      let m31 = z * x * C - y * s;
      let m32 = z * y * C + x * s;
      let m33 = z * z * C + c;
      let t1 = dart.notNull(this[_m4storage$][$_get](0)) * m11 + dart.notNull(this[_m4storage$][$_get](4)) * m21 + dart.notNull(this[_m4storage$][$_get](8)) * m31;
      let t2 = dart.notNull(this[_m4storage$][$_get](1)) * m11 + dart.notNull(this[_m4storage$][$_get](5)) * m21 + dart.notNull(this[_m4storage$][$_get](9)) * m31;
      let t3 = dart.notNull(this[_m4storage$][$_get](2)) * m11 + dart.notNull(this[_m4storage$][$_get](6)) * m21 + dart.notNull(this[_m4storage$][$_get](10)) * m31;
      let t4 = dart.notNull(this[_m4storage$][$_get](3)) * m11 + dart.notNull(this[_m4storage$][$_get](7)) * m21 + dart.notNull(this[_m4storage$][$_get](11)) * m31;
      let t5 = dart.notNull(this[_m4storage$][$_get](0)) * m12 + dart.notNull(this[_m4storage$][$_get](4)) * m22 + dart.notNull(this[_m4storage$][$_get](8)) * m32;
      let t6 = dart.notNull(this[_m4storage$][$_get](1)) * m12 + dart.notNull(this[_m4storage$][$_get](5)) * m22 + dart.notNull(this[_m4storage$][$_get](9)) * m32;
      let t7 = dart.notNull(this[_m4storage$][$_get](2)) * m12 + dart.notNull(this[_m4storage$][$_get](6)) * m22 + dart.notNull(this[_m4storage$][$_get](10)) * m32;
      let t8 = dart.notNull(this[_m4storage$][$_get](3)) * m12 + dart.notNull(this[_m4storage$][$_get](7)) * m22 + dart.notNull(this[_m4storage$][$_get](11)) * m32;
      let t9 = dart.notNull(this[_m4storage$][$_get](0)) * m13 + dart.notNull(this[_m4storage$][$_get](4)) * m23 + dart.notNull(this[_m4storage$][$_get](8)) * m33;
      let t10 = dart.notNull(this[_m4storage$][$_get](1)) * m13 + dart.notNull(this[_m4storage$][$_get](5)) * m23 + dart.notNull(this[_m4storage$][$_get](9)) * m33;
      let t11 = dart.notNull(this[_m4storage$][$_get](2)) * m13 + dart.notNull(this[_m4storage$][$_get](6)) * m23 + dart.notNull(this[_m4storage$][$_get](10)) * m33;
      let t12 = dart.notNull(this[_m4storage$][$_get](3)) * m13 + dart.notNull(this[_m4storage$][$_get](7)) * m23 + dart.notNull(this[_m4storage$][$_get](11)) * m33;
      this[_m4storage$][$_set](0, t1);
      this[_m4storage$][$_set](1, t2);
      this[_m4storage$][$_set](2, t3);
      this[_m4storage$][$_set](3, t4);
      this[_m4storage$][$_set](4, t5);
      this[_m4storage$][$_set](5, t6);
      this[_m4storage$][$_set](6, t7);
      this[_m4storage$][$_set](7, t8);
      this[_m4storage$][$_set](8, t9);
      this[_m4storage$][$_set](9, t10);
      this[_m4storage$][$_set](10, t11);
      this[_m4storage$][$_set](11, t12);
    }
    rotateZ(angle) {
      let cosAngle = math.cos(angle);
      let sinAngle = math.sin(angle);
      let t1 = dart.notNull(this[_m4storage$][$_get](0)) * cosAngle + dart.notNull(this[_m4storage$][$_get](4)) * sinAngle;
      let t2 = dart.notNull(this[_m4storage$][$_get](1)) * cosAngle + dart.notNull(this[_m4storage$][$_get](5)) * sinAngle;
      let t3 = dart.notNull(this[_m4storage$][$_get](2)) * cosAngle + dart.notNull(this[_m4storage$][$_get](6)) * sinAngle;
      let t4 = dart.notNull(this[_m4storage$][$_get](3)) * cosAngle + dart.notNull(this[_m4storage$][$_get](7)) * sinAngle;
      let t5 = dart.notNull(this[_m4storage$][$_get](0)) * -sinAngle + dart.notNull(this[_m4storage$][$_get](4)) * cosAngle;
      let t6 = dart.notNull(this[_m4storage$][$_get](1)) * -sinAngle + dart.notNull(this[_m4storage$][$_get](5)) * cosAngle;
      let t7 = dart.notNull(this[_m4storage$][$_get](2)) * -sinAngle + dart.notNull(this[_m4storage$][$_get](6)) * cosAngle;
      let t8 = dart.notNull(this[_m4storage$][$_get](3)) * -sinAngle + dart.notNull(this[_m4storage$][$_get](7)) * cosAngle;
      this[_m4storage$][$_set](0, t1);
      this[_m4storage$][$_set](1, t2);
      this[_m4storage$][$_set](2, t3);
      this[_m4storage$][$_set](3, t4);
      this[_m4storage$][$_set](4, t5);
      this[_m4storage$][$_set](5, t6);
      this[_m4storage$][$_set](6, t7);
      this[_m4storage$][$_set](7, t8);
    }
    setTranslation(t) {
      let tStorage = t[_v3storage$];
      let z = tStorage[$_get](2);
      let y = tStorage[$_get](1);
      let x = tStorage[$_get](0);
      this[_m4storage$][$_set](14, z);
      this[_m4storage$][$_set](13, y);
      this[_m4storage$][$_set](12, x);
    }
    setTranslationRaw(x, y, z) {
      this[_m4storage$][$_set](14, z);
      this[_m4storage$][$_set](13, y);
      this[_m4storage$][$_set](12, x);
    }
    transposeRotation() {
      let temp = null;
      temp = this[_m4storage$][$_get](1);
      this[_m4storage$][$_set](1, this[_m4storage$][$_get](4));
      this[_m4storage$][$_set](4, temp);
      temp = this[_m4storage$][$_get](2);
      this[_m4storage$][$_set](2, this[_m4storage$][$_get](8));
      this[_m4storage$][$_set](8, temp);
      temp = this[_m4storage$][$_get](4);
      this[_m4storage$][$_set](4, this[_m4storage$][$_get](1));
      this[_m4storage$][$_set](1, temp);
      temp = this[_m4storage$][$_get](6);
      this[_m4storage$][$_set](6, this[_m4storage$][$_get](9));
      this[_m4storage$][$_set](9, temp);
      temp = this[_m4storage$][$_get](8);
      this[_m4storage$][$_set](8, this[_m4storage$][$_get](2));
      this[_m4storage$][$_set](2, temp);
      temp = this[_m4storage$][$_get](9);
      this[_m4storage$][$_set](9, this[_m4storage$][$_get](6));
      this[_m4storage$][$_set](6, temp);
    }
    invert() {
      return this.copyInverse(this);
    }
    copyInverse(arg) {
      let argStorage = arg[_m4storage$];
      let a00 = argStorage[$_get](0);
      let a01 = argStorage[$_get](1);
      let a02 = argStorage[$_get](2);
      let a03 = argStorage[$_get](3);
      let a10 = argStorage[$_get](4);
      let a11 = argStorage[$_get](5);
      let a12 = argStorage[$_get](6);
      let a13 = argStorage[$_get](7);
      let a20 = argStorage[$_get](8);
      let a21 = argStorage[$_get](9);
      let a22 = argStorage[$_get](10);
      let a23 = argStorage[$_get](11);
      let a30 = argStorage[$_get](12);
      let a31 = argStorage[$_get](13);
      let a32 = argStorage[$_get](14);
      let a33 = argStorage[$_get](15);
      let b00 = dart.notNull(a00) * dart.notNull(a11) - dart.notNull(a01) * dart.notNull(a10);
      let b01 = dart.notNull(a00) * dart.notNull(a12) - dart.notNull(a02) * dart.notNull(a10);
      let b02 = dart.notNull(a00) * dart.notNull(a13) - dart.notNull(a03) * dart.notNull(a10);
      let b03 = dart.notNull(a01) * dart.notNull(a12) - dart.notNull(a02) * dart.notNull(a11);
      let b04 = dart.notNull(a01) * dart.notNull(a13) - dart.notNull(a03) * dart.notNull(a11);
      let b05 = dart.notNull(a02) * dart.notNull(a13) - dart.notNull(a03) * dart.notNull(a12);
      let b06 = dart.notNull(a20) * dart.notNull(a31) - dart.notNull(a21) * dart.notNull(a30);
      let b07 = dart.notNull(a20) * dart.notNull(a32) - dart.notNull(a22) * dart.notNull(a30);
      let b08 = dart.notNull(a20) * dart.notNull(a33) - dart.notNull(a23) * dart.notNull(a30);
      let b09 = dart.notNull(a21) * dart.notNull(a32) - dart.notNull(a22) * dart.notNull(a31);
      let b10 = dart.notNull(a21) * dart.notNull(a33) - dart.notNull(a23) * dart.notNull(a31);
      let b11 = dart.notNull(a22) * dart.notNull(a33) - dart.notNull(a23) * dart.notNull(a32);
      let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
      if (det === 0.0) {
        this.setFrom(arg);
        return 0.0;
      }
      let invDet = 1.0 / det;
      this[_m4storage$][$_set](0, (dart.notNull(a11) * b11 - dart.notNull(a12) * b10 + dart.notNull(a13) * b09) * invDet);
      this[_m4storage$][$_set](1, (-dart.notNull(a01) * b11 + dart.notNull(a02) * b10 - dart.notNull(a03) * b09) * invDet);
      this[_m4storage$][$_set](2, (dart.notNull(a31) * b05 - dart.notNull(a32) * b04 + dart.notNull(a33) * b03) * invDet);
      this[_m4storage$][$_set](3, (-dart.notNull(a21) * b05 + dart.notNull(a22) * b04 - dart.notNull(a23) * b03) * invDet);
      this[_m4storage$][$_set](4, (-dart.notNull(a10) * b11 + dart.notNull(a12) * b08 - dart.notNull(a13) * b07) * invDet);
      this[_m4storage$][$_set](5, (dart.notNull(a00) * b11 - dart.notNull(a02) * b08 + dart.notNull(a03) * b07) * invDet);
      this[_m4storage$][$_set](6, (-dart.notNull(a30) * b05 + dart.notNull(a32) * b02 - dart.notNull(a33) * b01) * invDet);
      this[_m4storage$][$_set](7, (dart.notNull(a20) * b05 - dart.notNull(a22) * b02 + dart.notNull(a23) * b01) * invDet);
      this[_m4storage$][$_set](8, (dart.notNull(a10) * b10 - dart.notNull(a11) * b08 + dart.notNull(a13) * b06) * invDet);
      this[_m4storage$][$_set](9, (-dart.notNull(a00) * b10 + dart.notNull(a01) * b08 - dart.notNull(a03) * b06) * invDet);
      this[_m4storage$][$_set](10, (dart.notNull(a30) * b04 - dart.notNull(a31) * b02 + dart.notNull(a33) * b00) * invDet);
      this[_m4storage$][$_set](11, (-dart.notNull(a20) * b04 + dart.notNull(a21) * b02 - dart.notNull(a23) * b00) * invDet);
      this[_m4storage$][$_set](12, (-dart.notNull(a10) * b09 + dart.notNull(a11) * b07 - dart.notNull(a12) * b06) * invDet);
      this[_m4storage$][$_set](13, (dart.notNull(a00) * b09 - dart.notNull(a01) * b07 + dart.notNull(a02) * b06) * invDet);
      this[_m4storage$][$_set](14, (-dart.notNull(a30) * b03 + dart.notNull(a31) * b01 - dart.notNull(a32) * b00) * invDet);
      this[_m4storage$][$_set](15, (dart.notNull(a20) * b03 - dart.notNull(a21) * b01 + dart.notNull(a22) * b00) * invDet);
      return det;
    }
    invertRotation() {
      let det = this.determinant();
      if (det === 0.0) {
        return 0.0;
      }
      let invDet = 1.0 / dart.notNull(det);
      let ix = null;
      let iy = null;
      let iz = null;
      let jx = null;
      let jy = null;
      let jz = null;
      let kx = null;
      let ky = null;
      let kz = null;
      ix = invDet * (dart.notNull(this[_m4storage$][$_get](5)) * dart.notNull(this[_m4storage$][$_get](10)) - dart.notNull(this[_m4storage$][$_get](6)) * dart.notNull(this[_m4storage$][$_get](9)));
      iy = invDet * (dart.notNull(this[_m4storage$][$_get](2)) * dart.notNull(this[_m4storage$][$_get](9)) - dart.notNull(this[_m4storage$][$_get](1)) * dart.notNull(this[_m4storage$][$_get](10)));
      iz = invDet * (dart.notNull(this[_m4storage$][$_get](1)) * dart.notNull(this[_m4storage$][$_get](6)) - dart.notNull(this[_m4storage$][$_get](2)) * dart.notNull(this[_m4storage$][$_get](5)));
      jx = invDet * (dart.notNull(this[_m4storage$][$_get](6)) * dart.notNull(this[_m4storage$][$_get](8)) - dart.notNull(this[_m4storage$][$_get](4)) * dart.notNull(this[_m4storage$][$_get](10)));
      jy = invDet * (dart.notNull(this[_m4storage$][$_get](0)) * dart.notNull(this[_m4storage$][$_get](10)) - dart.notNull(this[_m4storage$][$_get](2)) * dart.notNull(this[_m4storage$][$_get](8)));
      jz = invDet * (dart.notNull(this[_m4storage$][$_get](2)) * dart.notNull(this[_m4storage$][$_get](4)) - dart.notNull(this[_m4storage$][$_get](0)) * dart.notNull(this[_m4storage$][$_get](6)));
      kx = invDet * (dart.notNull(this[_m4storage$][$_get](4)) * dart.notNull(this[_m4storage$][$_get](9)) - dart.notNull(this[_m4storage$][$_get](5)) * dart.notNull(this[_m4storage$][$_get](8)));
      ky = invDet * (dart.notNull(this[_m4storage$][$_get](1)) * dart.notNull(this[_m4storage$][$_get](8)) - dart.notNull(this[_m4storage$][$_get](0)) * dart.notNull(this[_m4storage$][$_get](9)));
      kz = invDet * (dart.notNull(this[_m4storage$][$_get](0)) * dart.notNull(this[_m4storage$][$_get](5)) - dart.notNull(this[_m4storage$][$_get](1)) * dart.notNull(this[_m4storage$][$_get](4)));
      this[_m4storage$][$_set](0, ix);
      this[_m4storage$][$_set](1, iy);
      this[_m4storage$][$_set](2, iz);
      this[_m4storage$][$_set](4, jx);
      this[_m4storage$][$_set](5, jy);
      this[_m4storage$][$_set](6, jz);
      this[_m4storage$][$_set](8, kx);
      this[_m4storage$][$_set](9, ky);
      this[_m4storage$][$_set](10, kz);
      return det;
    }
    setRotationX(radians) {
      let c = math.cos(radians);
      let s = math.sin(radians);
      this[_m4storage$][$_set](0, 1.0);
      this[_m4storage$][$_set](1, 0.0);
      this[_m4storage$][$_set](2, 0.0);
      this[_m4storage$][$_set](4, 0.0);
      this[_m4storage$][$_set](5, c);
      this[_m4storage$][$_set](6, s);
      this[_m4storage$][$_set](8, 0.0);
      this[_m4storage$][$_set](9, -s);
      this[_m4storage$][$_set](10, c);
      this[_m4storage$][$_set](3, 0.0);
      this[_m4storage$][$_set](7, 0.0);
      this[_m4storage$][$_set](11, 0.0);
    }
    setRotationY(radians) {
      let c = math.cos(radians);
      let s = math.sin(radians);
      this[_m4storage$][$_set](0, c);
      this[_m4storage$][$_set](1, 0.0);
      this[_m4storage$][$_set](2, -s);
      this[_m4storage$][$_set](4, 0.0);
      this[_m4storage$][$_set](5, 1.0);
      this[_m4storage$][$_set](6, 0.0);
      this[_m4storage$][$_set](8, s);
      this[_m4storage$][$_set](9, 0.0);
      this[_m4storage$][$_set](10, c);
      this[_m4storage$][$_set](3, 0.0);
      this[_m4storage$][$_set](7, 0.0);
      this[_m4storage$][$_set](11, 0.0);
    }
    setRotationZ(radians) {
      let c = math.cos(radians);
      let s = math.sin(radians);
      this[_m4storage$][$_set](0, c);
      this[_m4storage$][$_set](1, s);
      this[_m4storage$][$_set](2, 0.0);
      this[_m4storage$][$_set](4, -s);
      this[_m4storage$][$_set](5, c);
      this[_m4storage$][$_set](6, 0.0);
      this[_m4storage$][$_set](8, 0.0);
      this[_m4storage$][$_set](9, 0.0);
      this[_m4storage$][$_set](10, 1.0);
      this[_m4storage$][$_set](3, 0.0);
      this[_m4storage$][$_set](7, 0.0);
      this[_m4storage$][$_set](11, 0.0);
    }
    multiply(arg) {
      let m00 = this[_m4storage$][$_get](0);
      let m01 = this[_m4storage$][$_get](4);
      let m02 = this[_m4storage$][$_get](8);
      let m03 = this[_m4storage$][$_get](12);
      let m10 = this[_m4storage$][$_get](1);
      let m11 = this[_m4storage$][$_get](5);
      let m12 = this[_m4storage$][$_get](9);
      let m13 = this[_m4storage$][$_get](13);
      let m20 = this[_m4storage$][$_get](2);
      let m21 = this[_m4storage$][$_get](6);
      let m22 = this[_m4storage$][$_get](10);
      let m23 = this[_m4storage$][$_get](14);
      let m30 = this[_m4storage$][$_get](3);
      let m31 = this[_m4storage$][$_get](7);
      let m32 = this[_m4storage$][$_get](11);
      let m33 = this[_m4storage$][$_get](15);
      let argStorage = arg[_m4storage$];
      let n00 = argStorage[$_get](0);
      let n01 = argStorage[$_get](4);
      let n02 = argStorage[$_get](8);
      let n03 = argStorage[$_get](12);
      let n10 = argStorage[$_get](1);
      let n11 = argStorage[$_get](5);
      let n12 = argStorage[$_get](9);
      let n13 = argStorage[$_get](13);
      let n20 = argStorage[$_get](2);
      let n21 = argStorage[$_get](6);
      let n22 = argStorage[$_get](10);
      let n23 = argStorage[$_get](14);
      let n30 = argStorage[$_get](3);
      let n31 = argStorage[$_get](7);
      let n32 = argStorage[$_get](11);
      let n33 = argStorage[$_get](15);
      this[_m4storage$][$_set](0, dart.notNull(m00) * dart.notNull(n00) + dart.notNull(m01) * dart.notNull(n10) + dart.notNull(m02) * dart.notNull(n20) + dart.notNull(m03) * dart.notNull(n30));
      this[_m4storage$][$_set](4, dart.notNull(m00) * dart.notNull(n01) + dart.notNull(m01) * dart.notNull(n11) + dart.notNull(m02) * dart.notNull(n21) + dart.notNull(m03) * dart.notNull(n31));
      this[_m4storage$][$_set](8, dart.notNull(m00) * dart.notNull(n02) + dart.notNull(m01) * dart.notNull(n12) + dart.notNull(m02) * dart.notNull(n22) + dart.notNull(m03) * dart.notNull(n32));
      this[_m4storage$][$_set](12, dart.notNull(m00) * dart.notNull(n03) + dart.notNull(m01) * dart.notNull(n13) + dart.notNull(m02) * dart.notNull(n23) + dart.notNull(m03) * dart.notNull(n33));
      this[_m4storage$][$_set](1, dart.notNull(m10) * dart.notNull(n00) + dart.notNull(m11) * dart.notNull(n10) + dart.notNull(m12) * dart.notNull(n20) + dart.notNull(m13) * dart.notNull(n30));
      this[_m4storage$][$_set](5, dart.notNull(m10) * dart.notNull(n01) + dart.notNull(m11) * dart.notNull(n11) + dart.notNull(m12) * dart.notNull(n21) + dart.notNull(m13) * dart.notNull(n31));
      this[_m4storage$][$_set](9, dart.notNull(m10) * dart.notNull(n02) + dart.notNull(m11) * dart.notNull(n12) + dart.notNull(m12) * dart.notNull(n22) + dart.notNull(m13) * dart.notNull(n32));
      this[_m4storage$][$_set](13, dart.notNull(m10) * dart.notNull(n03) + dart.notNull(m11) * dart.notNull(n13) + dart.notNull(m12) * dart.notNull(n23) + dart.notNull(m13) * dart.notNull(n33));
      this[_m4storage$][$_set](2, dart.notNull(m20) * dart.notNull(n00) + dart.notNull(m21) * dart.notNull(n10) + dart.notNull(m22) * dart.notNull(n20) + dart.notNull(m23) * dart.notNull(n30));
      this[_m4storage$][$_set](6, dart.notNull(m20) * dart.notNull(n01) + dart.notNull(m21) * dart.notNull(n11) + dart.notNull(m22) * dart.notNull(n21) + dart.notNull(m23) * dart.notNull(n31));
      this[_m4storage$][$_set](10, dart.notNull(m20) * dart.notNull(n02) + dart.notNull(m21) * dart.notNull(n12) + dart.notNull(m22) * dart.notNull(n22) + dart.notNull(m23) * dart.notNull(n32));
      this[_m4storage$][$_set](14, dart.notNull(m20) * dart.notNull(n03) + dart.notNull(m21) * dart.notNull(n13) + dart.notNull(m22) * dart.notNull(n23) + dart.notNull(m23) * dart.notNull(n33));
      this[_m4storage$][$_set](3, dart.notNull(m30) * dart.notNull(n00) + dart.notNull(m31) * dart.notNull(n10) + dart.notNull(m32) * dart.notNull(n20) + dart.notNull(m33) * dart.notNull(n30));
      this[_m4storage$][$_set](7, dart.notNull(m30) * dart.notNull(n01) + dart.notNull(m31) * dart.notNull(n11) + dart.notNull(m32) * dart.notNull(n21) + dart.notNull(m33) * dart.notNull(n31));
      this[_m4storage$][$_set](11, dart.notNull(m30) * dart.notNull(n02) + dart.notNull(m31) * dart.notNull(n12) + dart.notNull(m32) * dart.notNull(n22) + dart.notNull(m33) * dart.notNull(n32));
      this[_m4storage$][$_set](15, dart.notNull(m30) * dart.notNull(n03) + dart.notNull(m31) * dart.notNull(n13) + dart.notNull(m32) * dart.notNull(n23) + dart.notNull(m33) * dart.notNull(n33));
    }
    multiplied(arg) {
      let t4;
      t4 = this.clone();
      t4.multiply(arg);
      return t4;
    }
    transposeMultiply(arg) {
      let m00 = this[_m4storage$][$_get](0);
      let m01 = this[_m4storage$][$_get](1);
      let m02 = this[_m4storage$][$_get](2);
      let m03 = this[_m4storage$][$_get](3);
      let m10 = this[_m4storage$][$_get](4);
      let m11 = this[_m4storage$][$_get](5);
      let m12 = this[_m4storage$][$_get](6);
      let m13 = this[_m4storage$][$_get](7);
      let m20 = this[_m4storage$][$_get](8);
      let m21 = this[_m4storage$][$_get](9);
      let m22 = this[_m4storage$][$_get](10);
      let m23 = this[_m4storage$][$_get](11);
      let m30 = this[_m4storage$][$_get](12);
      let m31 = this[_m4storage$][$_get](13);
      let m32 = this[_m4storage$][$_get](14);
      let m33 = this[_m4storage$][$_get](15);
      let argStorage = arg[_m4storage$];
      this[_m4storage$][$_set](0, dart.notNull(m00) * dart.notNull(argStorage[$_get](0)) + dart.notNull(m01) * dart.notNull(argStorage[$_get](1)) + dart.notNull(m02) * dart.notNull(argStorage[$_get](2)) + dart.notNull(m03) * dart.notNull(argStorage[$_get](3)));
      this[_m4storage$][$_set](4, dart.notNull(m00) * dart.notNull(argStorage[$_get](4)) + dart.notNull(m01) * dart.notNull(argStorage[$_get](5)) + dart.notNull(m02) * dart.notNull(argStorage[$_get](6)) + dart.notNull(m03) * dart.notNull(argStorage[$_get](7)));
      this[_m4storage$][$_set](8, dart.notNull(m00) * dart.notNull(argStorage[$_get](8)) + dart.notNull(m01) * dart.notNull(argStorage[$_get](9)) + dart.notNull(m02) * dart.notNull(argStorage[$_get](10)) + dart.notNull(m03) * dart.notNull(argStorage[$_get](11)));
      this[_m4storage$][$_set](12, dart.notNull(m00) * dart.notNull(argStorage[$_get](12)) + dart.notNull(m01) * dart.notNull(argStorage[$_get](13)) + dart.notNull(m02) * dart.notNull(argStorage[$_get](14)) + dart.notNull(m03) * dart.notNull(argStorage[$_get](15)));
      this[_m4storage$][$_set](1, dart.notNull(m10) * dart.notNull(argStorage[$_get](0)) + dart.notNull(m11) * dart.notNull(argStorage[$_get](1)) + dart.notNull(m12) * dart.notNull(argStorage[$_get](2)) + dart.notNull(m13) * dart.notNull(argStorage[$_get](3)));
      this[_m4storage$][$_set](5, dart.notNull(m10) * dart.notNull(argStorage[$_get](4)) + dart.notNull(m11) * dart.notNull(argStorage[$_get](5)) + dart.notNull(m12) * dart.notNull(argStorage[$_get](6)) + dart.notNull(m13) * dart.notNull(argStorage[$_get](7)));
      this[_m4storage$][$_set](9, dart.notNull(m10) * dart.notNull(argStorage[$_get](8)) + dart.notNull(m11) * dart.notNull(argStorage[$_get](9)) + dart.notNull(m12) * dart.notNull(argStorage[$_get](10)) + dart.notNull(m13) * dart.notNull(argStorage[$_get](11)));
      this[_m4storage$][$_set](13, dart.notNull(m10) * dart.notNull(argStorage[$_get](12)) + dart.notNull(m11) * dart.notNull(argStorage[$_get](13)) + dart.notNull(m12) * dart.notNull(argStorage[$_get](14)) + dart.notNull(m13) * dart.notNull(argStorage[$_get](15)));
      this[_m4storage$][$_set](2, dart.notNull(m20) * dart.notNull(argStorage[$_get](0)) + dart.notNull(m21) * dart.notNull(argStorage[$_get](1)) + dart.notNull(m22) * dart.notNull(argStorage[$_get](2)) + dart.notNull(m23) * dart.notNull(argStorage[$_get](3)));
      this[_m4storage$][$_set](6, dart.notNull(m20) * dart.notNull(argStorage[$_get](4)) + dart.notNull(m21) * dart.notNull(argStorage[$_get](5)) + dart.notNull(m22) * dart.notNull(argStorage[$_get](6)) + dart.notNull(m23) * dart.notNull(argStorage[$_get](7)));
      this[_m4storage$][$_set](10, dart.notNull(m20) * dart.notNull(argStorage[$_get](8)) + dart.notNull(m21) * dart.notNull(argStorage[$_get](9)) + dart.notNull(m22) * dart.notNull(argStorage[$_get](10)) + dart.notNull(m23) * dart.notNull(argStorage[$_get](11)));
      this[_m4storage$][$_set](14, dart.notNull(m20) * dart.notNull(argStorage[$_get](12)) + dart.notNull(m21) * dart.notNull(argStorage[$_get](13)) + dart.notNull(m22) * dart.notNull(argStorage[$_get](14)) + dart.notNull(m23) * dart.notNull(argStorage[$_get](15)));
      this[_m4storage$][$_set](3, dart.notNull(m30) * dart.notNull(argStorage[$_get](0)) + dart.notNull(m31) * dart.notNull(argStorage[$_get](1)) + dart.notNull(m32) * dart.notNull(argStorage[$_get](2)) + dart.notNull(m33) * dart.notNull(argStorage[$_get](3)));
      this[_m4storage$][$_set](7, dart.notNull(m30) * dart.notNull(argStorage[$_get](4)) + dart.notNull(m31) * dart.notNull(argStorage[$_get](5)) + dart.notNull(m32) * dart.notNull(argStorage[$_get](6)) + dart.notNull(m33) * dart.notNull(argStorage[$_get](7)));
      this[_m4storage$][$_set](11, dart.notNull(m30) * dart.notNull(argStorage[$_get](8)) + dart.notNull(m31) * dart.notNull(argStorage[$_get](9)) + dart.notNull(m32) * dart.notNull(argStorage[$_get](10)) + dart.notNull(m33) * dart.notNull(argStorage[$_get](11)));
      this[_m4storage$][$_set](15, dart.notNull(m30) * dart.notNull(argStorage[$_get](12)) + dart.notNull(m31) * dart.notNull(argStorage[$_get](13)) + dart.notNull(m32) * dart.notNull(argStorage[$_get](14)) + dart.notNull(m33) * dart.notNull(argStorage[$_get](15)));
    }
    multiplyTranspose(arg) {
      let m00 = this[_m4storage$][$_get](0);
      let m01 = this[_m4storage$][$_get](4);
      let m02 = this[_m4storage$][$_get](8);
      let m03 = this[_m4storage$][$_get](12);
      let m10 = this[_m4storage$][$_get](1);
      let m11 = this[_m4storage$][$_get](5);
      let m12 = this[_m4storage$][$_get](9);
      let m13 = this[_m4storage$][$_get](13);
      let m20 = this[_m4storage$][$_get](2);
      let m21 = this[_m4storage$][$_get](6);
      let m22 = this[_m4storage$][$_get](10);
      let m23 = this[_m4storage$][$_get](14);
      let m30 = this[_m4storage$][$_get](3);
      let m31 = this[_m4storage$][$_get](7);
      let m32 = this[_m4storage$][$_get](11);
      let m33 = this[_m4storage$][$_get](15);
      let argStorage = arg[_m4storage$];
      this[_m4storage$][$_set](0, dart.notNull(m00) * dart.notNull(argStorage[$_get](0)) + dart.notNull(m01) * dart.notNull(argStorage[$_get](4)) + dart.notNull(m02) * dart.notNull(argStorage[$_get](8)) + dart.notNull(m03) * dart.notNull(argStorage[$_get](12)));
      this[_m4storage$][$_set](4, dart.notNull(m00) * dart.notNull(argStorage[$_get](1)) + dart.notNull(m01) * dart.notNull(argStorage[$_get](5)) + dart.notNull(m02) * dart.notNull(argStorage[$_get](9)) + dart.notNull(m03) * dart.notNull(argStorage[$_get](13)));
      this[_m4storage$][$_set](8, dart.notNull(m00) * dart.notNull(argStorage[$_get](2)) + dart.notNull(m01) * dart.notNull(argStorage[$_get](6)) + dart.notNull(m02) * dart.notNull(argStorage[$_get](10)) + dart.notNull(m03) * dart.notNull(argStorage[$_get](14)));
      this[_m4storage$][$_set](12, dart.notNull(m00) * dart.notNull(argStorage[$_get](3)) + dart.notNull(m01) * dart.notNull(argStorage[$_get](7)) + dart.notNull(m02) * dart.notNull(argStorage[$_get](11)) + dart.notNull(m03) * dart.notNull(argStorage[$_get](15)));
      this[_m4storage$][$_set](1, dart.notNull(m10) * dart.notNull(argStorage[$_get](0)) + dart.notNull(m11) * dart.notNull(argStorage[$_get](4)) + dart.notNull(m12) * dart.notNull(argStorage[$_get](8)) + dart.notNull(m13) * dart.notNull(argStorage[$_get](12)));
      this[_m4storage$][$_set](5, dart.notNull(m10) * dart.notNull(argStorage[$_get](1)) + dart.notNull(m11) * dart.notNull(argStorage[$_get](5)) + dart.notNull(m12) * dart.notNull(argStorage[$_get](9)) + dart.notNull(m13) * dart.notNull(argStorage[$_get](13)));
      this[_m4storage$][$_set](9, dart.notNull(m10) * dart.notNull(argStorage[$_get](2)) + dart.notNull(m11) * dart.notNull(argStorage[$_get](6)) + dart.notNull(m12) * dart.notNull(argStorage[$_get](10)) + dart.notNull(m13) * dart.notNull(argStorage[$_get](14)));
      this[_m4storage$][$_set](13, dart.notNull(m10) * dart.notNull(argStorage[$_get](3)) + dart.notNull(m11) * dart.notNull(argStorage[$_get](7)) + dart.notNull(m12) * dart.notNull(argStorage[$_get](11)) + dart.notNull(m13) * dart.notNull(argStorage[$_get](15)));
      this[_m4storage$][$_set](2, dart.notNull(m20) * dart.notNull(argStorage[$_get](0)) + dart.notNull(m21) * dart.notNull(argStorage[$_get](4)) + dart.notNull(m22) * dart.notNull(argStorage[$_get](8)) + dart.notNull(m23) * dart.notNull(argStorage[$_get](12)));
      this[_m4storage$][$_set](6, dart.notNull(m20) * dart.notNull(argStorage[$_get](1)) + dart.notNull(m21) * dart.notNull(argStorage[$_get](5)) + dart.notNull(m22) * dart.notNull(argStorage[$_get](9)) + dart.notNull(m23) * dart.notNull(argStorage[$_get](13)));
      this[_m4storage$][$_set](10, dart.notNull(m20) * dart.notNull(argStorage[$_get](2)) + dart.notNull(m21) * dart.notNull(argStorage[$_get](6)) + dart.notNull(m22) * dart.notNull(argStorage[$_get](10)) + dart.notNull(m23) * dart.notNull(argStorage[$_get](14)));
      this[_m4storage$][$_set](14, dart.notNull(m20) * dart.notNull(argStorage[$_get](3)) + dart.notNull(m21) * dart.notNull(argStorage[$_get](7)) + dart.notNull(m22) * dart.notNull(argStorage[$_get](11)) + dart.notNull(m23) * dart.notNull(argStorage[$_get](15)));
      this[_m4storage$][$_set](3, dart.notNull(m30) * dart.notNull(argStorage[$_get](0)) + dart.notNull(m31) * dart.notNull(argStorage[$_get](4)) + dart.notNull(m32) * dart.notNull(argStorage[$_get](8)) + dart.notNull(m33) * dart.notNull(argStorage[$_get](12)));
      this[_m4storage$][$_set](7, dart.notNull(m30) * dart.notNull(argStorage[$_get](1)) + dart.notNull(m31) * dart.notNull(argStorage[$_get](5)) + dart.notNull(m32) * dart.notNull(argStorage[$_get](9)) + dart.notNull(m33) * dart.notNull(argStorage[$_get](13)));
      this[_m4storage$][$_set](11, dart.notNull(m30) * dart.notNull(argStorage[$_get](2)) + dart.notNull(m31) * dart.notNull(argStorage[$_get](6)) + dart.notNull(m32) * dart.notNull(argStorage[$_get](10)) + dart.notNull(m33) * dart.notNull(argStorage[$_get](14)));
      this[_m4storage$][$_set](15, dart.notNull(m30) * dart.notNull(argStorage[$_get](3)) + dart.notNull(m31) * dart.notNull(argStorage[$_get](7)) + dart.notNull(m32) * dart.notNull(argStorage[$_get](11)) + dart.notNull(m33) * dart.notNull(argStorage[$_get](15)));
    }
    rotate3(arg) {
      let argStorage = arg[_v3storage$];
      let x_ = dart.notNull(this[_m4storage$][$_get](0)) * dart.notNull(argStorage[$_get](0)) + dart.notNull(this[_m4storage$][$_get](4)) * dart.notNull(argStorage[$_get](1)) + dart.notNull(this[_m4storage$][$_get](8)) * dart.notNull(argStorage[$_get](2));
      let y_ = dart.notNull(this[_m4storage$][$_get](1)) * dart.notNull(argStorage[$_get](0)) + dart.notNull(this[_m4storage$][$_get](5)) * dart.notNull(argStorage[$_get](1)) + dart.notNull(this[_m4storage$][$_get](9)) * dart.notNull(argStorage[$_get](2));
      let z_ = dart.notNull(this[_m4storage$][$_get](2)) * dart.notNull(argStorage[$_get](0)) + dart.notNull(this[_m4storage$][$_get](6)) * dart.notNull(argStorage[$_get](1)) + dart.notNull(this[_m4storage$][$_get](10)) * dart.notNull(argStorage[$_get](2));
      argStorage[$_set](0, x_);
      argStorage[$_set](1, y_);
      argStorage[$_set](2, z_);
      return arg;
    }
    rotated3(arg, out) {
      if (out === void 0) out = null;
      if (out == null) {
        out = src__engine.Vector3.copy(arg);
      } else {
        out.setFrom(arg);
      }
      return this.rotate3(out);
    }
    transform3(arg) {
      let argStorage = arg[_v3storage$];
      let x_ = dart.notNull(this[_m4storage$][$_get](0)) * dart.notNull(argStorage[$_get](0)) + dart.notNull(this[_m4storage$][$_get](4)) * dart.notNull(argStorage[$_get](1)) + dart.notNull(this[_m4storage$][$_get](8)) * dart.notNull(argStorage[$_get](2)) + dart.notNull(this[_m4storage$][$_get](12));
      let y_ = dart.notNull(this[_m4storage$][$_get](1)) * dart.notNull(argStorage[$_get](0)) + dart.notNull(this[_m4storage$][$_get](5)) * dart.notNull(argStorage[$_get](1)) + dart.notNull(this[_m4storage$][$_get](9)) * dart.notNull(argStorage[$_get](2)) + dart.notNull(this[_m4storage$][$_get](13));
      let z_ = dart.notNull(this[_m4storage$][$_get](2)) * dart.notNull(argStorage[$_get](0)) + dart.notNull(this[_m4storage$][$_get](6)) * dart.notNull(argStorage[$_get](1)) + dart.notNull(this[_m4storage$][$_get](10)) * dart.notNull(argStorage[$_get](2)) + dart.notNull(this[_m4storage$][$_get](14));
      argStorage[$_set](0, x_);
      argStorage[$_set](1, y_);
      argStorage[$_set](2, z_);
      return arg;
    }
    transformed3(arg, out) {
      if (out === void 0) out = null;
      if (out == null) {
        out = src__engine.Vector3.copy(arg);
      } else {
        out.setFrom(arg);
      }
      return this.transform3(out);
    }
    copyIntoArray(array, offset) {
      if (offset === void 0) offset = 0;
      let i = offset;
      array[$_set](dart.notNull(i) + 15, this[_m4storage$][$_get](15));
      array[$_set](dart.notNull(i) + 14, this[_m4storage$][$_get](14));
      array[$_set](dart.notNull(i) + 13, this[_m4storage$][$_get](13));
      array[$_set](dart.notNull(i) + 12, this[_m4storage$][$_get](12));
      array[$_set](dart.notNull(i) + 11, this[_m4storage$][$_get](11));
      array[$_set](dart.notNull(i) + 10, this[_m4storage$][$_get](10));
      array[$_set](dart.notNull(i) + 9, this[_m4storage$][$_get](9));
      array[$_set](dart.notNull(i) + 8, this[_m4storage$][$_get](8));
      array[$_set](dart.notNull(i) + 7, this[_m4storage$][$_get](7));
      array[$_set](dart.notNull(i) + 6, this[_m4storage$][$_get](6));
      array[$_set](dart.notNull(i) + 5, this[_m4storage$][$_get](5));
      array[$_set](dart.notNull(i) + 4, this[_m4storage$][$_get](4));
      array[$_set](dart.notNull(i) + 3, this[_m4storage$][$_get](3));
      array[$_set](dart.notNull(i) + 2, this[_m4storage$][$_get](2));
      array[$_set](dart.notNull(i) + 1, this[_m4storage$][$_get](1));
      array[$_set](dart.notNull(i) + 0, this[_m4storage$][$_get](0));
    }
    copyFromArray(array, offset) {
      if (offset === void 0) offset = 0;
      let i = offset;
      this[_m4storage$][$_set](15, array[$_get](dart.notNull(i) + 15));
      this[_m4storage$][$_set](14, array[$_get](dart.notNull(i) + 14));
      this[_m4storage$][$_set](13, array[$_get](dart.notNull(i) + 13));
      this[_m4storage$][$_set](12, array[$_get](dart.notNull(i) + 12));
      this[_m4storage$][$_set](11, array[$_get](dart.notNull(i) + 11));
      this[_m4storage$][$_set](10, array[$_get](dart.notNull(i) + 10));
      this[_m4storage$][$_set](9, array[$_get](dart.notNull(i) + 9));
      this[_m4storage$][$_set](8, array[$_get](dart.notNull(i) + 8));
      this[_m4storage$][$_set](7, array[$_get](dart.notNull(i) + 7));
      this[_m4storage$][$_set](6, array[$_get](dart.notNull(i) + 6));
      this[_m4storage$][$_set](5, array[$_get](dart.notNull(i) + 5));
      this[_m4storage$][$_set](4, array[$_get](dart.notNull(i) + 4));
      this[_m4storage$][$_set](3, array[$_get](dart.notNull(i) + 3));
      this[_m4storage$][$_set](2, array[$_get](dart.notNull(i) + 2));
      this[_m4storage$][$_set](1, array[$_get](dart.notNull(i) + 1));
      this[_m4storage$][$_set](0, array[$_get](dart.notNull(i) + 0));
    }
  };
  (src__engine.Matrix4.zero = function() {
    this[_m4storage$] = _native_typed_data.NativeFloat64List.new(16);
    ;
  }).prototype = src__engine.Matrix4.prototype;
  (src__engine.Matrix4.fromFloat64List = function(_m4storage) {
    this[_m4storage$] = _m4storage;
    ;
  }).prototype = src__engine.Matrix4.prototype;
  (src__engine.Matrix4.fromBuffer = function(buffer, offset) {
    this[_m4storage$] = typed_data.Float64List.view(buffer, offset, 16);
    ;
  }).prototype = src__engine.Matrix4.prototype;
  dart.addTypeTests(src__engine.Matrix4);
  dart.setMethodSignature(src__engine.Matrix4, () => ({
    __proto__: dart.getMethods(src__engine.Matrix4.__proto__),
    index: dart.fnType(core.int, [core.int, core.int]),
    entry: dart.fnType(core.double, [core.int, core.int]),
    setEntry: dart.fnType(dart.void, [core.int, core.int, core.double]),
    setValues: dart.fnType(dart.void, [core.double, core.double, core.double, core.double, core.double, core.double, core.double, core.double, core.double, core.double, core.double, core.double, core.double, core.double, core.double, core.double]),
    setFrom: dart.fnType(dart.void, [src__engine.Matrix4]),
    _get: dart.fnType(core.double, [core.int]),
    _set: dart.fnType(dart.void, [core.int, core.double]),
    clone: dart.fnType(src__engine.Matrix4, []),
    copyInto: dart.fnType(src__engine.Matrix4, [src__engine.Matrix4]),
    translate: dart.fnType(dart.void, [dart.dynamic], [core.double, core.double]),
    scale: dart.fnType(dart.void, [dart.dynamic], [core.double, core.double]),
    scaled: dart.fnType(src__engine.Matrix4, [dart.dynamic], [core.double, core.double]),
    setZero: dart.fnType(dart.void, []),
    setIdentity: dart.fnType(dart.void, []),
    transposed: dart.fnType(src__engine.Matrix4, []),
    transpose: dart.fnType(dart.void, []),
    determinant: dart.fnType(core.double, []),
    '*': dart.fnType(dart.dynamic, [dart.dynamic]),
    perspectiveTransform: dart.fnType(src__engine.Vector3, [src__engine.Vector3]),
    isIdentity: dart.fnType(core.bool, []),
    getTranslation: dart.fnType(src__engine.Vector3, []),
    rotate: dart.fnType(dart.void, [src__engine.Vector3, core.double]),
    rotateZ: dart.fnType(dart.void, [core.double]),
    setTranslation: dart.fnType(dart.void, [src__engine.Vector3]),
    setTranslationRaw: dart.fnType(dart.void, [core.double, core.double, core.double]),
    transposeRotation: dart.fnType(dart.void, []),
    invert: dart.fnType(core.double, []),
    copyInverse: dart.fnType(core.double, [src__engine.Matrix4]),
    invertRotation: dart.fnType(core.double, []),
    setRotationX: dart.fnType(dart.void, [core.double]),
    setRotationY: dart.fnType(dart.void, [core.double]),
    setRotationZ: dart.fnType(dart.void, [core.double]),
    multiply: dart.fnType(dart.void, [src__engine.Matrix4]),
    multiplied: dart.fnType(src__engine.Matrix4, [src__engine.Matrix4]),
    transposeMultiply: dart.fnType(dart.void, [src__engine.Matrix4]),
    multiplyTranspose: dart.fnType(dart.void, [src__engine.Matrix4]),
    rotate3: dart.fnType(src__engine.Vector3, [src__engine.Vector3]),
    rotated3: dart.fnType(src__engine.Vector3, [src__engine.Vector3], [src__engine.Vector3]),
    transform3: dart.fnType(src__engine.Vector3, [src__engine.Vector3]),
    transformed3: dart.fnType(src__engine.Vector3, [src__engine.Vector3], [src__engine.Vector3]),
    copyIntoArray: dart.fnType(dart.void, [core.List$(core.num)], [core.int]),
    copyFromArray: dart.fnType(dart.void, [core.List$(core.double)], [core.int])
  }));
  dart.setGetterSignature(src__engine.Matrix4, () => ({
    __proto__: dart.getGetters(src__engine.Matrix4.__proto__),
    storage: typed_data.Float64List,
    dimension: core.int
  }));
  dart.setFieldSignature(src__engine.Matrix4, () => ({
    __proto__: dart.getFields(src__engine.Matrix4.__proto__),
    [_m4storage$]: dart.finalFieldType(typed_data.Float64List)
  }));
  src__engine.Vector3 = class Vector3 extends core.Object {
    get storage() {
      return this[_v3storage$];
    }
    static min(a, b, result) {
      let t4;
      t4 = result;
      t4.x = math.min(core.double, a.x, b.x);
      t4.y = math.min(core.double, a.y, b.y);
      t4.z = math.min(core.double, a.z, b.z);
      t4;
    }
    static max(a, b, result) {
      let t4;
      t4 = result;
      t4.x = math.max(core.double, a.x, b.x);
      t4.y = math.max(core.double, a.y, b.y);
      t4.z = math.max(core.double, a.z, b.z);
      t4;
    }
    static mix(min, max, a, result) {
      let t4;
      t4 = result;
      t4.x = dart.notNull(min.x) + dart.notNull(a) * (dart.notNull(max.x) - dart.notNull(min.x));
      t4.y = dart.notNull(min.y) + dart.notNull(a) * (dart.notNull(max.y) - dart.notNull(min.y));
      t4.z = dart.notNull(min.z) + dart.notNull(a) * (dart.notNull(max.z) - dart.notNull(min.z));
      t4;
    }
    static new(x, y, z) {
      let t4;
      t4 = new src__engine.Vector3.zero();
      t4.setValues(x, y, z);
      return t4;
    }
    static all(value) {
      let t4;
      t4 = new src__engine.Vector3.zero();
      t4.splat(value);
      return t4;
    }
    static copy(other) {
      let t4;
      t4 = new src__engine.Vector3.zero();
      t4.setFrom(other);
      return t4;
    }
    static random(rng) {
      if (rng === void 0) rng = null;
      rng == null ? rng = math.Random.new() : null;
      return src__engine.Vector3.new(rng.nextDouble(), rng.nextDouble(), rng.nextDouble());
    }
    setValues(x_, y_, z_) {
      this[_v3storage$][$_set](0, x_);
      this[_v3storage$][$_set](1, y_);
      this[_v3storage$][$_set](2, z_);
    }
    setZero() {
      this[_v3storage$][$_set](2, 0.0);
      this[_v3storage$][$_set](1, 0.0);
      this[_v3storage$][$_set](0, 0.0);
    }
    setFrom(other) {
      let otherStorage = other[_v3storage$];
      this[_v3storage$][$_set](0, otherStorage[$_get](0));
      this[_v3storage$][$_set](1, otherStorage[$_get](1));
      this[_v3storage$][$_set](2, otherStorage[$_get](2));
    }
    splat(arg) {
      this[_v3storage$][$_set](2, arg);
      this[_v3storage$][$_set](1, arg);
      this[_v3storage$][$_set](0, arg);
    }
    _get(i) {
      return this[_v3storage$][$_get](i);
    }
    _set(i, v$) {
      let v = v$;
      this[_v3storage$][$_set](i, v);
      return v$;
    }
    set length(value) {
      let t5, t4, t5$, t4$, t5$0, t4$0;
      if (value === 0.0) {
        this.setZero();
      } else {
        let l = this.length;
        if (l === 0.0) {
          return;
        }
        l = dart.notNull(value) / dart.notNull(l);
        t4 = this[_v3storage$];
        t5 = 0;
        t4[$_set](t5, dart.notNull(t4[$_get](t5)) * dart.notNull(l));
        t4$ = this[_v3storage$];
        t5$ = 1;
        t4$[$_set](t5$, dart.notNull(t4$[$_get](t5$)) * dart.notNull(l));
        t4$0 = this[_v3storage$];
        t5$0 = 2;
        t4$0[$_set](t5$0, dart.notNull(t4$0[$_get](t5$0)) * dart.notNull(l));
      }
    }
    get length() {
      return math.sqrt(this.length2);
    }
    get length2() {
      let sum = null;
      sum = dart.notNull(this[_v3storage$][$_get](0)) * dart.notNull(this[_v3storage$][$_get](0));
      sum = dart.notNull(sum) + dart.notNull(this[_v3storage$][$_get](1)) * dart.notNull(this[_v3storage$][$_get](1));
      sum = dart.notNull(sum) + dart.notNull(this[_v3storage$][$_get](2)) * dart.notNull(this[_v3storage$][$_get](2));
      return sum;
    }
    normalize() {
      let t5, t4, t5$, t4$, t5$0, t4$0;
      let l = this.length;
      if (l === 0.0) {
        return 0.0;
      }
      let d = 1.0 / dart.notNull(l);
      t4 = this[_v3storage$];
      t5 = 0;
      t4[$_set](t5, dart.notNull(t4[$_get](t5)) * d);
      t4$ = this[_v3storage$];
      t5$ = 1;
      t4$[$_set](t5$, dart.notNull(t4$[$_get](t5$)) * d);
      t4$0 = this[_v3storage$];
      t5$0 = 2;
      t4$0[$_set](t5$0, dart.notNull(t4$0[$_get](t5$0)) * d);
      return l;
    }
    normalized() {
      let t4;
      t4 = src__engine.Vector3.copy(this);
      t4.normalize();
      return t4;
    }
    normalizeInto(out) {
      let t4;
      t4 = out;
      t4.setFrom(this);
      t4.normalize();
      t4;
      return out;
    }
    distanceTo(arg) {
      return math.sqrt(this.distanceToSquared(arg));
    }
    distanceToSquared(arg) {
      let argStorage = arg[_v3storage$];
      let dx = dart.notNull(this[_v3storage$][$_get](0)) - dart.notNull(argStorage[$_get](0));
      let dy = dart.notNull(this[_v3storage$][$_get](1)) - dart.notNull(argStorage[$_get](1));
      let dz = dart.notNull(this[_v3storage$][$_get](2)) - dart.notNull(argStorage[$_get](2));
      return dx * dx + dy * dy + dz * dz;
    }
    angleTo(other) {
      let otherStorage = other[_v3storage$];
      if (this[_v3storage$][$_get](0) == otherStorage[$_get](0) && this[_v3storage$][$_get](1) == otherStorage[$_get](1) && this[_v3storage$][$_get](2) == otherStorage[$_get](2)) {
        return 0.0;
      }
      let d = dart.notNull(this.dot(other)) / (dart.notNull(this.length) * dart.notNull(other.length));
      return math.acos(d[$clamp](-1.0, 1.0));
    }
    dot(other) {
      let otherStorage = other[_v3storage$];
      let sum = null;
      sum = dart.notNull(this[_v3storage$][$_get](0)) * dart.notNull(otherStorage[$_get](0));
      sum = dart.notNull(sum) + dart.notNull(this[_v3storage$][$_get](1)) * dart.notNull(otherStorage[$_get](1));
      sum = dart.notNull(sum) + dart.notNull(this[_v3storage$][$_get](2)) * dart.notNull(otherStorage[$_get](2));
      return sum;
    }
    applyProjection(arg) {
      let argStorage = arg.storage;
      let x = this[_v3storage$][$_get](0);
      let y = this[_v3storage$][$_get](1);
      let z = this[_v3storage$][$_get](2);
      let d = 1.0 / (dart.notNull(argStorage[$_get](3)) * dart.notNull(x) + dart.notNull(argStorage[$_get](7)) * dart.notNull(y) + dart.notNull(argStorage[$_get](11)) * dart.notNull(z) + dart.notNull(argStorage[$_get](15)));
      this[_v3storage$][$_set](0, (dart.notNull(argStorage[$_get](0)) * dart.notNull(x) + dart.notNull(argStorage[$_get](4)) * dart.notNull(y) + dart.notNull(argStorage[$_get](8)) * dart.notNull(z) + dart.notNull(argStorage[$_get](12))) * d);
      this[_v3storage$][$_set](1, (dart.notNull(argStorage[$_get](1)) * dart.notNull(x) + dart.notNull(argStorage[$_get](5)) * dart.notNull(y) + dart.notNull(argStorage[$_get](9)) * dart.notNull(z) + dart.notNull(argStorage[$_get](13))) * d);
      this[_v3storage$][$_set](2, (dart.notNull(argStorage[$_get](2)) * dart.notNull(x) + dart.notNull(argStorage[$_get](6)) * dart.notNull(y) + dart.notNull(argStorage[$_get](10)) * dart.notNull(z) + dart.notNull(argStorage[$_get](14))) * d);
    }
    get isInfinite() {
      let is_infinite = false;
      is_infinite = is_infinite || this[_v3storage$][$_get](0)[$isInfinite];
      is_infinite = is_infinite || this[_v3storage$][$_get](1)[$isInfinite];
      is_infinite = is_infinite || this[_v3storage$][$_get](2)[$isInfinite];
      return is_infinite;
    }
    get isNaN() {
      let is_nan = false;
      is_nan = is_nan || this[_v3storage$][$_get](0)[$isNaN];
      is_nan = is_nan || this[_v3storage$][$_get](1)[$isNaN];
      is_nan = is_nan || this[_v3storage$][$_get](2)[$isNaN];
      return is_nan;
    }
    add(arg) {
      let argStorage = arg[_v3storage$];
      this[_v3storage$][$_set](0, dart.notNull(this[_v3storage$][$_get](0)) + dart.notNull(argStorage[$_get](0)));
      this[_v3storage$][$_set](1, dart.notNull(this[_v3storage$][$_get](1)) + dart.notNull(argStorage[$_get](1)));
      this[_v3storage$][$_set](2, dart.notNull(this[_v3storage$][$_get](2)) + dart.notNull(argStorage[$_get](2)));
    }
    addScaled(arg, factor) {
      let argStorage = arg[_v3storage$];
      this[_v3storage$][$_set](0, dart.notNull(this[_v3storage$][$_get](0)) + dart.notNull(argStorage[$_get](0)) * dart.notNull(factor));
      this[_v3storage$][$_set](1, dart.notNull(this[_v3storage$][$_get](1)) + dart.notNull(argStorage[$_get](1)) * dart.notNull(factor));
      this[_v3storage$][$_set](2, dart.notNull(this[_v3storage$][$_get](2)) + dart.notNull(argStorage[$_get](2)) * dart.notNull(factor));
    }
    sub(arg) {
      let argStorage = arg[_v3storage$];
      this[_v3storage$][$_set](0, dart.notNull(this[_v3storage$][$_get](0)) - dart.notNull(argStorage[$_get](0)));
      this[_v3storage$][$_set](1, dart.notNull(this[_v3storage$][$_get](1)) - dart.notNull(argStorage[$_get](1)));
      this[_v3storage$][$_set](2, dart.notNull(this[_v3storage$][$_get](2)) - dart.notNull(argStorage[$_get](2)));
    }
    multiply(arg) {
      let argStorage = arg[_v3storage$];
      this[_v3storage$][$_set](0, dart.notNull(this[_v3storage$][$_get](0)) * dart.notNull(argStorage[$_get](0)));
      this[_v3storage$][$_set](1, dart.notNull(this[_v3storage$][$_get](1)) * dart.notNull(argStorage[$_get](1)));
      this[_v3storage$][$_set](2, dart.notNull(this[_v3storage$][$_get](2)) * dart.notNull(argStorage[$_get](2)));
    }
    divide(arg) {
      let argStorage = arg[_v3storage$];
      this[_v3storage$][$_set](0, dart.notNull(this[_v3storage$][$_get](0)) / dart.notNull(argStorage[$_get](0)));
      this[_v3storage$][$_set](1, dart.notNull(this[_v3storage$][$_get](1)) / dart.notNull(argStorage[$_get](1)));
      this[_v3storage$][$_set](2, dart.notNull(this[_v3storage$][$_get](2)) / dart.notNull(argStorage[$_get](2)));
    }
    scale(arg) {
      this[_v3storage$][$_set](2, dart.notNull(this[_v3storage$][$_get](2)) * dart.notNull(arg));
      this[_v3storage$][$_set](1, dart.notNull(this[_v3storage$][$_get](1)) * dart.notNull(arg));
      this[_v3storage$][$_set](0, dart.notNull(this[_v3storage$][$_get](0)) * dart.notNull(arg));
    }
    scaled(arg) {
      let t4;
      t4 = this.clone();
      t4.scale(arg);
      return t4;
    }
    clone() {
      return src__engine.Vector3.copy(this);
    }
    copyInto(arg) {
      let argStorage = arg[_v3storage$];
      argStorage[$_set](0, this[_v3storage$][$_get](0));
      argStorage[$_set](1, this[_v3storage$][$_get](1));
      argStorage[$_set](2, this[_v3storage$][$_get](2));
      return arg;
    }
    copyIntoArray(array, offset) {
      if (offset === void 0) offset = 0;
      array[$_set](dart.notNull(offset) + 2, this[_v3storage$][$_get](2));
      array[$_set](dart.notNull(offset) + 1, this[_v3storage$][$_get](1));
      array[$_set](dart.notNull(offset) + 0, this[_v3storage$][$_get](0));
    }
    set x(arg) {
      let t6, t5, t4;
      t4 = this[_v3storage$];
      t5 = 0;
      t6 = arg;
      t4[$_set](t5, t6);
      return t6;
    }
    set y(arg) {
      let t6, t5, t4;
      t4 = this[_v3storage$];
      t5 = 1;
      t6 = arg;
      t4[$_set](t5, t6);
      return t6;
    }
    set z(arg) {
      let t6, t5, t4;
      t4 = this[_v3storage$];
      t5 = 2;
      t6 = arg;
      t4[$_set](t5, t6);
      return t6;
    }
    get x() {
      return this[_v3storage$][$_get](0);
    }
    get y() {
      return this[_v3storage$][$_get](1);
    }
    get z() {
      return this[_v3storage$][$_get](2);
    }
  };
  (src__engine.Vector3.zero = function() {
    this[_v3storage$] = _native_typed_data.NativeFloat64List.new(3);
    ;
  }).prototype = src__engine.Vector3.prototype;
  (src__engine.Vector3.fromFloat64List = function(_v3storage) {
    this[_v3storage$] = _v3storage;
    ;
  }).prototype = src__engine.Vector3.prototype;
  (src__engine.Vector3.fromBuffer = function(buffer, offset) {
    this[_v3storage$] = typed_data.Float64List.view(buffer, offset, 3);
    ;
  }).prototype = src__engine.Vector3.prototype;
  dart.addTypeTests(src__engine.Vector3);
  dart.setMethodSignature(src__engine.Vector3, () => ({
    __proto__: dart.getMethods(src__engine.Vector3.__proto__),
    setValues: dart.fnType(dart.void, [core.double, core.double, core.double]),
    setZero: dart.fnType(dart.void, []),
    setFrom: dart.fnType(dart.void, [src__engine.Vector3]),
    splat: dart.fnType(dart.void, [core.double]),
    _get: dart.fnType(core.double, [core.int]),
    _set: dart.fnType(dart.void, [core.int, core.double]),
    normalize: dart.fnType(core.double, []),
    normalized: dart.fnType(src__engine.Vector3, []),
    normalizeInto: dart.fnType(src__engine.Vector3, [src__engine.Vector3]),
    distanceTo: dart.fnType(core.double, [src__engine.Vector3]),
    distanceToSquared: dart.fnType(core.double, [src__engine.Vector3]),
    angleTo: dart.fnType(core.double, [src__engine.Vector3]),
    dot: dart.fnType(core.double, [src__engine.Vector3]),
    applyProjection: dart.fnType(dart.void, [src__engine.Matrix4]),
    add: dart.fnType(dart.void, [src__engine.Vector3]),
    addScaled: dart.fnType(dart.void, [src__engine.Vector3, core.double]),
    sub: dart.fnType(dart.void, [src__engine.Vector3]),
    multiply: dart.fnType(dart.void, [src__engine.Vector3]),
    divide: dart.fnType(dart.void, [src__engine.Vector3]),
    scale: dart.fnType(dart.void, [core.double]),
    scaled: dart.fnType(src__engine.Vector3, [core.double]),
    clone: dart.fnType(src__engine.Vector3, []),
    copyInto: dart.fnType(src__engine.Vector3, [src__engine.Vector3]),
    copyIntoArray: dart.fnType(dart.void, [core.List$(core.double)], [core.int])
  }));
  dart.setGetterSignature(src__engine.Vector3, () => ({
    __proto__: dart.getGetters(src__engine.Vector3.__proto__),
    storage: typed_data.Float64List,
    length: core.double,
    length2: core.double,
    isInfinite: core.bool,
    isNaN: core.bool,
    x: core.double,
    y: core.double,
    z: core.double
  }));
  dart.setSetterSignature(src__engine.Vector3, () => ({
    __proto__: dart.getSetters(src__engine.Vector3.__proto__),
    length: core.double,
    x: core.double,
    y: core.double,
    z: core.double
  }));
  dart.setFieldSignature(src__engine.Vector3, () => ({
    __proto__: dart.getFields(src__engine.Vector3.__proto__),
    [_v3storage$]: dart.finalFieldType(typed_data.Float64List)
  }));
  src__engine.registerHotRestartListener = function(listener) {
    src__engine._hotRestartListeners[$add](listener);
  };
  src__engine.webOnlyInitializeEngine = function() {
    if (dart.test(src__engine._engineInitialized)) {
      return;
    }
    developer.registerExtension("ext.flutter.disassemble", dart.fn((_, __) => {
      for (let listener of src__engine._hotRestartListeners) {
        listener();
      }
      return FutureOfServiceExtensionResponse().value(new developer.ServiceExtensionResponse.result("OK"));
    }, StringAndMapOfString$StringToFutureOfServiceExtensionResponse()));
    src__engine._engineInitialized = true;
    src__engine.domRenderer;
    let waitingForAnimation = false;
    ui.window.webOnlyScheduleFrameCallback = dart.fn(() => {
      if (!waitingForAnimation) {
        waitingForAnimation = true;
        html.window[$requestAnimationFrame](dart.fn(highResTime => {
          waitingForAnimation = false;
          let highResTimeMicroseconds = (1000 * dart.notNull(highResTime))[$toInt]();
          if (ui.window.onBeginFrame != null) {
            ui.window.onBeginFrame(new core.Duration.new({microseconds: highResTimeMicroseconds}));
          }
          if (ui.window.onDrawFrame != null) {
            ui.window.onDrawFrame();
          }
        }, numToNull()));
      }
    }, VoidToNull());
    src__engine.Keyboard.initialize();
  };
  src__engine._stringForBlendMode = function(blendMode) {
    if (blendMode == null) return null;
    switch (blendMode) {
      case ui.BlendMode.srcOver:
      {
        return "source-over";
      }
      case ui.BlendMode.srcIn:
      {
        return "source-in";
      }
      case ui.BlendMode.srcOut:
      {
        return "source-out";
      }
      case ui.BlendMode.srcATop:
      {
        return "source-atop";
      }
      case ui.BlendMode.dstOver:
      {
        return "destination-over";
      }
      case ui.BlendMode.dstIn:
      {
        return "destination-in";
      }
      case ui.BlendMode.dstOut:
      {
        return "destination-out";
      }
      case ui.BlendMode.dstATop:
      {
        return "destination-atop";
      }
      case ui.BlendMode.plus:
      {
        return "lighten";
      }
      case ui.BlendMode.src:
      {
        return "copy";
      }
      case ui.BlendMode.xor:
      {
        return "xor";
      }
      case ui.BlendMode.multiply:
      case ui.BlendMode.modulate:
      {
        return "multiply";
      }
      case ui.BlendMode.screen:
      {
        return "screen";
      }
      case ui.BlendMode.overlay:
      {
        return "overlay";
      }
      case ui.BlendMode.darken:
      {
        return "darken";
      }
      case ui.BlendMode.lighten:
      {
        return "lighten";
      }
      case ui.BlendMode.colorDodge:
      {
        return "color-dodge";
      }
      case ui.BlendMode.colorBurn:
      {
        return "color-burn";
      }
      case ui.BlendMode.hardLight:
      {
        return "hard-light";
      }
      case ui.BlendMode.softLight:
      {
        return "soft-light";
      }
      case ui.BlendMode.difference:
      {
        return "difference";
      }
      case ui.BlendMode.exclusion:
      {
        return "exclusion";
      }
      case ui.BlendMode.hue:
      {
        return "hue";
      }
      case ui.BlendMode.saturation:
      {
        return "saturation";
      }
      case ui.BlendMode.color:
      {
        return "color";
      }
      case ui.BlendMode.luminosity:
      {
        return "luminosity";
      }
      default:
      {
        dart.throw(new core.UnimplementedError.new("Flutter Web does not support the blend mode: " + dart.str(blendMode)));
      }
    }
  };
  src__engine._stringForStrokeCap = function(strokeCap) {
    if (strokeCap == null) return null;
    switch (strokeCap) {
      case ui.StrokeCap.butt:
      {
        return "butt";
      }
      case ui.StrokeCap.round:
      {
        return "round";
      }
      case ui.StrokeCap.square:
      default:
      {
        return "square";
      }
    }
  };
  src__engine._stringForStrokeJoin = function(strokeJoin) {
    if (!(strokeJoin != null)) dart.assertFailed();
    switch (strokeJoin) {
      case ui.StrokeJoin.round:
      {
        return "round";
      }
      case ui.StrokeJoin.bevel:
      {
        return "bevel";
      }
      case ui.StrokeJoin.miter:
      default:
      {
        return "miter";
      }
    }
  };
  src__engine._clipContent = function(clipStack, content, offset, currentTransform) {
    let t4, t4$, t4$0, t4$1, t5, t4$2, t4$3;
    let root = null;
    let curElement = null;
    let clipDefs = JSArrayOfElement().of([]);
    for (let clipIndex = 0, len = clipStack[$length]; clipIndex < dart.notNull(len); clipIndex = clipIndex + 1) {
      let entry = clipStack[$_get](clipIndex);
      let newElement = html.DivElement.new();
      if (root == null) {
        root = newElement;
      } else {
        src__engine.domRenderer.append(curElement, newElement);
      }
      curElement = newElement;
      let rect = entry.rect;
      let newClipTransform = entry.currentTransform;
      if (rect != null) {
        let clipOffsetX = rect.left;
        let clipOffsetY = rect.top;
        newClipTransform = (t4 = newClipTransform.clone(), t4.translate(clipOffsetX, clipOffsetY), t4);
        t4$ = curElement.style;
        t4$[$overflow] = "hidden";
        t4$[$transform] = src__engine.matrix4ToCssTransform(newClipTransform);
        t4$[$transformOrigin] = "0 0 0";
        t4$[$width] = dart.str(dart.notNull(rect.right) - dart.notNull(clipOffsetX)) + "px";
        t4$[$height] = dart.str(dart.notNull(rect.bottom) - dart.notNull(clipOffsetY)) + "px";
        t4$;
      } else if (entry.rrect != null) {
        let roundRect = entry.rrect;
        let borderRadius = dart.str(roundRect.tlRadiusX) + "px " + dart.str(roundRect.trRadiusX) + "px " + dart.str(roundRect.brRadiusX) + "px " + dart.str(roundRect.blRadiusX) + "px";
        let clipOffsetX = roundRect.left;
        let clipOffsetY = roundRect.top;
        newClipTransform = (t4$0 = newClipTransform.clone(), t4$0.translate(clipOffsetX, clipOffsetY), t4$0);
        t4$1 = curElement.style;
        t4$1[$borderRadius] = borderRadius;
        t4$1[$overflow] = "hidden";
        t4$1[$transform] = src__engine.matrix4ToCssTransform(newClipTransform);
        t4$1[$transformOrigin] = "0 0 0";
        t4$1[$width] = dart.str(dart.notNull(roundRect.right) - dart.notNull(clipOffsetX)) + "px";
        t4$1[$height] = dart.str(dart.notNull(roundRect.bottom) - dart.notNull(clipOffsetY)) + "px";
        t4$1;
      } else if (entry.path != null) {
        curElement.style[$transform] = src__engine.matrix4ToCssTransform(newClipTransform);
        let svgClipPath = src__engine._pathToSvgClipPath(entry.path);
        let clipElement = html.Element.html(svgClipPath, {treeSanitizer: new src__engine._NullTreeSanitizer.new()});
        src__engine.domRenderer.setElementStyle(curElement, "clip-path", "url(#svgClipText" + dart.str(src__engine._clipTextCounter) + ")");
        src__engine.domRenderer.setElementStyle(curElement, "-webkit-clip-path", "url(#svgClipText" + dart.str(src__engine._clipTextCounter) + ")");
        clipDefs[$add](clipElement);
      }
      let reverseTransformDiv = html.DivElement.new();
      t4$2 = reverseTransformDiv.style;
      t4$2[$transform] = src__engine._cssTransformAtOffset((t5 = newClipTransform.clone(), t5.invert(), t5), 0.0, 0.0);
      t4$2[$transformOrigin] = "0 0 0";
      t4$2;
      curElement[$append](reverseTransformDiv);
      curElement = reverseTransformDiv;
    }
    root.style[$position] = "absolute";
    src__engine.domRenderer.append(curElement, content);
    content.style[$transform] = src__engine._cssTransformAtOffset(currentTransform, offset.dx, offset.dy);
    t4$3 = JSArrayOfElement().of([root]);
    t4$3[$addAll](clipDefs);
    return t4$3;
  };
  src__engine._cssTransformAtOffset = function(transform, offsetX, offsetY) {
    return src__engine.matrix4ToCssTransform(src__engine.transformWithOffset(transform, new ui.Offset.new(offsetX, offsetY)));
  };
  src__engine._pathToSvgClipPath = function(path, opts) {
    let offsetX = opts && 'offsetX' in opts ? opts.offsetX : 0.0;
    let offsetY = opts && 'offsetY' in opts ? opts.offsetY : 0.0;
    let bounds = path.getBounds();
    let sb = new core.StringBuffer.new();
    sb.write("<svg width=\"" + dart.str(bounds.right) + "\" height=\"" + dart.str(bounds.bottom) + "\" " + "style=\"position:absolute\">");
    sb.write("<defs>");
    let clipId = "svgClipText" + dart.str(src__engine._clipTextCounter = dart.notNull(src__engine._clipTextCounter) + 1);
    sb.write("<clipPath id=" + clipId + ">");
    sb.write("<path fill=\"#FFFFFF\" d=\"");
    src__engine.pathToSvg(path, sb, {offsetX: offsetX, offsetY: offsetY});
    sb.write("\"></path></clipPath></defs></svg");
    return sb.toString();
  };
  src__engine._detectBrowserEngine = function() {
    let vendor = html.window.navigator.vendor;
    if (vendor === "Google Inc.") {
      return src__engine.BrowserEngine.blink;
    } else if (vendor === "Apple Computer, Inc.") {
      return src__engine.BrowserEngine.webkit;
    }
    core.print("WARNING: failed to detect current browser engine.");
    return src__engine.BrowserEngine.unknown;
  };
  src__engine.transformWithOffset = function(transform, offset) {
    if (dart.equals(offset, ui.Offset.zero)) {
      return transform;
    }
    let effectiveTransform = transform.clone();
    effectiveTransform.translate(offset.dx, offset.dy, 0.0);
    return effectiveTransform;
  };
  src__engine._isOriginEntry = function(state) {
    return core.Map.is(state) && dart.equals(state[$_get]("origin"), true);
  };
  src__engine._isFlutterEntry = function(state) {
    return core.Map.is(state) && dart.equals(state[$_get]("flutter"), true);
  };
  src__engine._noopCallback = function(data) {
  };
  src__engine.printOnScreen = function(object) {
    let t4;
    if (src__engine._logElement == null) {
      src__engine._initialize();
    }
    let message = dart.str(object);
    if (dart.test(src__engine._logBuffer[$isNotEmpty]) && src__engine._logBuffer[$last].message === message) {
      t4 = src__engine._logBuffer[$last];
      t4.duplicateCount = dart.notNull(t4.duplicateCount) + 1;
    } else {
      src__engine._logBuffer[$add](new src__engine._LogMessage.new(message));
    }
    if (dart.notNull(src__engine._logBuffer[$length]) > 80) {
      src__engine._logBuffer = src__engine._logBuffer[$sublist](dart.notNull(src__engine._logBuffer[$length]) - 50);
    }
    src__engine._logContainer[$text] = src__engine._logBuffer[$join]("\n");
    core.print(message);
  };
  src__engine._initialize = function() {
    let t4, t4$;
    src__engine._logElement = html.Element.tag("flt-onscreen-log");
    src__engine._logElement[$setAttribute]("aria-hidden", "true");
    t4 = src__engine._logElement.style;
    t4[$position] = "fixed";
    t4[$left] = "0";
    t4[$right] = "0";
    t4[$bottom] = "0";
    t4[$height] = "25%";
    t4[$backgroundColor] = "rgba(0, 0, 0, 0.85)";
    t4[$color] = "white";
    t4[$fontSize] = "8px";
    t4[$whiteSpace] = "pre-wrap";
    t4[$overflow] = "hidden";
    t4[$zIndex] = "1000";
    t4;
    src__engine._logContainer = html.Element.tag("flt-log-container");
    src__engine._logContainer[$setAttribute]("aria-hidden", "true");
    t4$ = src__engine._logContainer.style;
    t4$[$position] = "absolute";
    t4$[$bottom] = "0";
    t4$;
    src__engine._logElement[$append](src__engine._logContainer);
    html.document.body[$append](src__engine._logElement);
  };
  src__engine.pathToSvg = function(path, sb, opts) {
    let offsetX = opts && 'offsetX' in opts ? opts.offsetX : 0.0;
    let offsetY = opts && 'offsetY' in opts ? opts.offsetY : 0.0;
    for (let subPath of path.subpaths) {
      for (let command of subPath.commands) {
        switch (command.type) {
          case src__engine.PathCommandTypes.moveTo:
          {
            let moveTo = src__engine.MoveTo._check(command);
            sb.write("M " + dart.str(dart.notNull(moveTo.x) + dart.notNull(offsetX)) + " " + dart.str(dart.notNull(moveTo.y) + dart.notNull(offsetY)));
            break;
          }
          case src__engine.PathCommandTypes.lineTo:
          {
            let lineTo = src__engine.LineTo._check(command);
            sb.write("L " + dart.str(dart.notNull(lineTo.x) + dart.notNull(offsetX)) + " " + dart.str(dart.notNull(lineTo.y) + dart.notNull(offsetY)));
            break;
          }
          case src__engine.PathCommandTypes.bezierCurveTo:
          {
            let curve = src__engine.BezierCurveTo._check(command);
            sb.write("C " + dart.str(dart.notNull(curve.x1) + dart.notNull(offsetX)) + " " + dart.str(dart.notNull(curve.y1) + dart.notNull(offsetY)) + " " + dart.str(dart.notNull(curve.x2) + dart.notNull(offsetX)) + " " + dart.str(dart.notNull(curve.y2) + dart.notNull(offsetY)) + " " + dart.str(dart.notNull(curve.x3) + dart.notNull(offsetX)) + " " + dart.str(dart.notNull(curve.y3) + dart.notNull(offsetY)));
            break;
          }
          case src__engine.PathCommandTypes.quadraticCurveTo:
          {
            let quadraticCurveTo = src__engine.QuadraticCurveTo._check(command);
            sb.write("Q " + dart.str(dart.notNull(quadraticCurveTo.x1) + dart.notNull(offsetX)) + " " + dart.str(dart.notNull(quadraticCurveTo.y1) + dart.notNull(offsetY)) + " " + dart.str(dart.notNull(quadraticCurveTo.x2) + dart.notNull(offsetX)) + " " + dart.str(dart.notNull(quadraticCurveTo.y2) + dart.notNull(offsetY)));
            break;
          }
          case src__engine.PathCommandTypes.close:
          {
            sb.write("Z");
            break;
          }
          case src__engine.PathCommandTypes.ellipse:
          {
            let ellipse = src__engine.Ellipse._check(command);
            if ((dart.notNull(ellipse.endAngle) - dart.notNull(ellipse.startAngle))[$modulo](2 * dart.notNull(math.pi)) === 0.0) {
              src__engine._writeEllipse(sb, dart.notNull(ellipse.x) + dart.notNull(offsetX), dart.notNull(ellipse.y) + dart.notNull(offsetY), ellipse.radiusX, ellipse.radiusY, ellipse.rotation, -dart.notNull(math.pi), 0.0, ellipse.anticlockwise, {moveToStartPoint: true});
              src__engine._writeEllipse(sb, dart.notNull(ellipse.x) + dart.notNull(offsetX), dart.notNull(ellipse.y) + dart.notNull(offsetY), ellipse.radiusX, ellipse.radiusY, ellipse.rotation, 0.0, math.pi, ellipse.anticlockwise);
            } else {
              src__engine._writeEllipse(sb, dart.notNull(ellipse.x) + dart.notNull(offsetX), dart.notNull(ellipse.y) + dart.notNull(offsetY), ellipse.radiusX, ellipse.radiusY, ellipse.rotation, ellipse.startAngle, ellipse.endAngle, ellipse.anticlockwise);
            }
            break;
          }
          case src__engine.PathCommandTypes.rRect:
          {
            let rrectCommand = src__engine.RRectCommand._check(command);
            let rrect = rrectCommand.rrect;
            let left = dart.notNull(rrect.left) + dart.notNull(offsetX);
            let right = dart.notNull(rrect.right) + dart.notNull(offsetX);
            let top = dart.notNull(rrect.top) + dart.notNull(offsetY);
            let bottom = dart.notNull(rrect.bottom) + dart.notNull(offsetY);
            if (left > right) {
              left = right;
              right = dart.notNull(rrect.left) + dart.notNull(offsetX);
            }
            if (top > bottom) {
              top = bottom;
              bottom = dart.notNull(rrect.top) + dart.notNull(offsetY);
            }
            let trRadiusX = rrect.trRadiusX[$abs]();
            let tlRadiusX = rrect.tlRadiusX[$abs]();
            let trRadiusY = rrect.trRadiusY[$abs]();
            let tlRadiusY = rrect.tlRadiusY[$abs]();
            let blRadiusX = rrect.blRadiusX[$abs]();
            let brRadiusX = rrect.brRadiusX[$abs]();
            let blRadiusY = rrect.blRadiusY[$abs]();
            let brRadiusY = rrect.brRadiusY[$abs]();
            sb.write("L " + dart.str(left + trRadiusX) + " " + dart.str(top) + " ");
            sb.write("M " + dart.str(right - trRadiusX) + " " + dart.str(top) + " ");
            src__engine._writeEllipse(sb, right - trRadiusX, top + trRadiusY, trRadiusX, trRadiusY, 0.0, 1.5 * dart.notNull(math.pi), 2.0 * dart.notNull(math.pi), false);
            sb.write("L " + dart.str(right) + " " + dart.str(bottom - brRadiusY) + " ");
            src__engine._writeEllipse(sb, right - brRadiusX, bottom - brRadiusY, brRadiusX, brRadiusY, 0.0, 0.0, 0.5 * dart.notNull(math.pi), false);
            sb.write("L " + dart.str(left + blRadiusX) + " " + dart.str(bottom) + " ");
            src__engine._writeEllipse(sb, left + blRadiusX, bottom - blRadiusY, blRadiusX, blRadiusY, 0.0, 0.5 * dart.notNull(math.pi), math.pi, false);
            sb.write("L " + dart.str(left) + " " + dart.str(top + tlRadiusY) + " ");
            src__engine._writeEllipse(sb, left + tlRadiusX, top + tlRadiusY, tlRadiusX, tlRadiusY, 0.0, math.pi, 1.5 * dart.notNull(math.pi), false);
            break;
          }
          case src__engine.PathCommandTypes.rect:
          {
            let rectCommand = src__engine.RectCommand._check(command);
            let horizontalSwap = dart.notNull(rectCommand.width) < 0;
            let left = dart.notNull(offsetX) + dart.notNull(horizontalSwap ? dart.notNull(rectCommand.x) - dart.notNull(rectCommand.width) : rectCommand.x);
            let width = horizontalSwap ? -dart.notNull(rectCommand.width) : rectCommand.width;
            let verticalSwap = dart.notNull(rectCommand.height) < 0;
            let top = dart.notNull(offsetY) + dart.notNull(verticalSwap ? dart.notNull(rectCommand.y) - dart.notNull(rectCommand.height) : rectCommand.y);
            let height = verticalSwap ? -dart.notNull(rectCommand.height) : rectCommand.height;
            sb.write("M " + dart.str(left) + " " + dart.str(top) + " ");
            sb.write("L " + dart.str(left + dart.notNull(width)) + " " + dart.str(top) + " ");
            sb.write("L " + dart.str(left + dart.notNull(width)) + " " + dart.str(top + dart.notNull(height)) + " ");
            sb.write("L " + dart.str(left) + " " + dart.str(top + dart.notNull(height)) + " ");
            sb.write("L " + dart.str(left) + " " + dart.str(top) + " ");
            break;
          }
          default:
          {
            dart.throw(new core.UnimplementedError.new("Unknown path command " + dart.str(command)));
          }
        }
      }
    }
  };
  src__engine._writeEllipse = function(sb, cx, cy, radiusX, radiusY, rotation, startAngle, endAngle, antiClockwise, opts) {
    let moveToStartPoint = opts && 'moveToStartPoint' in opts ? opts.moveToStartPoint : false;
    let cosRotation = math.cos(rotation);
    let sinRotation = math.sin(rotation);
    let x = math.cos(startAngle) * dart.notNull(radiusX);
    let y = math.sin(startAngle) * dart.notNull(radiusY);
    let startPx = dart.notNull(cx) + (cosRotation * x - sinRotation * y);
    let startPy = dart.notNull(cy) + (sinRotation * x + cosRotation * y);
    let xe = math.cos(endAngle) * dart.notNull(radiusX);
    let ye = math.sin(endAngle) * dart.notNull(radiusY);
    let endPx = dart.notNull(cx) + (cosRotation * xe - sinRotation * ye);
    let endPy = dart.notNull(cy) + (sinRotation * xe + cosRotation * ye);
    let delta = dart.notNull(endAngle) - dart.notNull(startAngle);
    let largeArc = delta[$abs]() > dart.notNull(math.pi);
    let rotationDeg = dart.notNull(rotation) / dart.notNull(math.pi) * 180.0;
    if (dart.test(moveToStartPoint)) {
      sb.write("M " + dart.str(startPx) + " " + dart.str(startPy) + " ");
    }
    sb.write("A " + dart.str(radiusX) + " " + dart.str(radiusY) + " " + dart.str(rotationDeg) + " " + dart.str(largeArc ? 1 : 0) + " " + dart.str(dart.test(antiClockwise) ? 0 : 1) + " " + dart.str(endPx) + " " + dart.str(endPy));
  };
  src__engine._pointerButtonFromHtmlEvent = function(event) {
    if (html.PointerEvent.is(event)) {
      let pointerEvent = event;
      return pointerEvent.button === 2 ? src__engine._kSecondaryMouseButton : src__engine._kPrimaryMouseButton;
    } else if (html.MouseEvent.is(event)) {
      let mouseEvent = event;
      return mouseEvent.button === 2 ? src__engine._kSecondaryMouseButton : src__engine._kPrimaryMouseButton;
    }
    return src__engine._kPrimaryMouseButton;
  };
  src__engine._eventTimeStampToDuration = function(milliseconds) {
    let ms = milliseconds[$toInt]();
    let micro = ((dart.notNull(milliseconds) - ms) * dart.notNull(core.Duration.microsecondsPerMillisecond))[$toInt]();
    return new core.Duration.new({milliseconds: ms, microseconds: micro});
  };
  src__engine._convertWheelEventToPointerData = function(event) {
    let domDeltaPixel = 0;
    let domDeltaLine = 1;
    let domDeltaPage = 2;
    let deltaX = event[$deltaX];
    let deltaY = event[$deltaY];
    switch (event[$deltaMode]) {
      case domDeltaLine:
      {
        deltaX = dart.notNull(deltaX) * 32.0;
        deltaY = dart.notNull(deltaY) * 32.0;
        break;
      }
      case domDeltaPage:
      {
        deltaX = dart.notNull(deltaX) * dart.notNull(ui.window.physicalSize.width);
        deltaY = dart.notNull(deltaY) * dart.notNull(ui.window.physicalSize.height);
        break;
      }
      case domDeltaPixel:
      default:
      {
        break;
      }
    }
    let data = JSArrayOfPointerData().of([]);
    if (!dart.test(src__engine._isWheelDeviceAdded)) {
      src__engine._isWheelDeviceAdded = true;
      data[$add](new ui.PointerData.new({change: ui.PointerChange.add, timeStamp: src__engine._eventTimeStampToDuration(event.timeStamp), kind: ui.PointerDeviceKind.mouse, signalKind: ui.PointerSignalKind.none, device: src__engine._mouseDeviceId, physicalX: event[$client].x, physicalY: event[$client].y, buttons: event.buttons, pressure: 1.0, pressureMin: 0.0, pressureMax: 1.0, scrollDeltaX: deltaX, scrollDeltaY: deltaY}));
    }
    data[$add](new ui.PointerData.new({change: ui.PointerChange.hover, timeStamp: src__engine._eventTimeStampToDuration(event.timeStamp), kind: ui.PointerDeviceKind.mouse, signalKind: ui.PointerSignalKind.scroll, device: src__engine._mouseDeviceId, physicalX: event[$client].x, physicalY: event[$client].y, buttons: event.buttons, pressure: 1.0, pressureMin: 0.0, pressureMax: 1.0, scrollDeltaX: deltaX, scrollDeltaY: deltaY}));
    return data;
  };
  src__engine._addWheelEventListener = function(listener) {
    let eventOptions = js_util.newObject();
    js_util.setProperty(eventOptions, "passive", false);
    js_util.callMethod(src__engine.PointerBinding.instance.domRenderer.glassPaneElement, "addEventListener", ["wheel", js.allowInterop(dynamicTovoid(), dart.fn(event => listener(html.WheelEvent._check(event)), dynamicTovoid())), eventOptions]);
  };
  src__engine._serializePaintToCssPaint = function(paint) {
    let t4, t4$, t4$0, t4$1, t4$2, t4$3, t4$4;
    return [(t4 = paint.blendMode, t4 == null ? null : t4.index), (t4$ = paint.style, t4$ == null ? null : t4$.index), paint.strokeWidth, (t4$0 = paint.strokeCap, t4$0 == null ? null : t4$0.index), paint.isAntiAlias, paint.color.toCssString(), (t4$1 = paint.shader, t4$1 == null ? null : t4$1.webOnlySerializeToCssPaint()), (t4$2 = paint.maskFilter, t4$2 == null ? null : t4$2.webOnlySerializeToCssPaint()), (t4$3 = paint.filterQuality, t4$3 == null ? null : t4$3.index), (t4$4 = paint.colorFilter, t4$4 == null ? null : t4$4.webOnlySerializeToCssPaint())];
  };
  src__engine._serializeRectToCssPaint = function(rect) {
    return [rect.left, rect.top, rect.right, rect.bottom];
  };
  src__engine._serializeRRectToCssPaint = function(rrect) {
    return [rrect.left, rrect.top, rrect.right, rrect.bottom, rrect.tlRadiusX, rrect.tlRadiusY, rrect.trRadiusX, rrect.trRadiusY, rrect.brRadiusX, rrect.brRadiusY, rrect.blRadiusX, rrect.blRadiusY];
  };
  src__engine.longestIncreasingSubsequence = function(list) {
    let len = list[$length];
    let predecessors = JSArrayOfint().of([]);
    let mins = JSArrayOfint().of([0]);
    let longest = 0;
    for (let i = 0; i < dart.notNull(len); i = i + 1) {
      let elem = list[$_get](i);
      let lo = 1;
      let hi = longest;
      while (lo <= hi) {
        let mid = ((lo + hi) / 2)[$truncate]();
        if (dart.notNull(list[$_get](mins[$_get](mid))) < dart.notNull(elem)) {
          lo = mid + 1;
        } else {
          hi = mid - 1;
        }
      }
      let expansionIndex = lo;
      predecessors[$add](mins[$_get](expansionIndex - 1));
      if (expansionIndex >= dart.notNull(mins[$length])) {
        mins[$add](i);
      } else {
        mins[$_set](expansionIndex, i);
      }
      if (expansionIndex > longest) {
        longest = expansionIndex;
      }
    }
    let seq = ListOfint().new(longest);
    let k = mins[$_get](longest);
    for (let i = longest - 1; i >= 0; i = i - 1) {
      seq[$_set](i, k);
      k = predecessors[$_get](k);
    }
    return seq;
  };
  src__engine.getCharProperty = function(text, index) {
    if (dart.notNull(index) < 0 || dart.notNull(index) >= text.length) {
      return null;
    }
    return src__engine.lookup.find(text[$codeUnitAt](index));
  };
  src__engine._emptyCallback = function(_) {
  };
  src__engine._styleEditingElement = function(domElement) {
    let t4, t4$, t4$0;
    t4 = domElement.style;
    t4[$position] = "fixed";
    t4[$whiteSpace] = "pre";
    t4;
    if (dart.test(src__engine._debugVisibleTextEditing)) {
      t4$ = domElement.style;
      t4$[$bottom] = "0";
      t4$[$right] = "0";
      t4$[$font] = "24px sans-serif";
      t4$[$color] = "purple";
      t4$[$backgroundColor] = "pink";
      t4$;
    } else {
      t4$0 = domElement.style;
      t4$0[$overflow] = "hidden";
      t4$0[$transform] = "translate(-99999px, -99999px)";
      t4$0[$width] = "1px";
      t4$0[$height] = "1px";
      t4$0;
    }
    if (dart.equals(src__engine.browserEngine, src__engine.BrowserEngine.webkit)) {
      html.window[$animationFrame].then(dart.dynamic, dart.fn(_ => {
        let t4;
        t4 = domElement.style;
        t4[$position] = "absolute";
        t4[$bottom] = "0";
        t4[$right] = "0";
        t4;
      }, numToNull()));
    }
  };
  src__engine._createInputElement = function() {
    let input = html.InputElement.new();
    src__engine._styleEditingElement(input);
    return input;
  };
  src__engine._createTextAreaElement = function() {
    let textarea = html.TextAreaElement.new();
    src__engine._styleEditingElement(textarea);
    return textarea;
  };
  src__engine._getInputTypeFromString = function(inputType) {
    switch (inputType) {
      case "TextInputType.multiline":
      {
        return src__engine.InputType.multiline;
      }
      case "TextInputType.text":
      default:
      {
        return src__engine.InputType.text;
      }
    }
  };
  src__engine._getTypeFromElement = function(domElement) {
    if (html.InputElement.is(domElement)) {
      return src__engine.ElementType.input;
    }
    if (html.TextAreaElement.is(domElement)) {
      return src__engine.ElementType.textarea;
    }
    let contentEditable = domElement.contentEditable;
    if (contentEditable != null && contentEditable[$isNotEmpty] && contentEditable !== "inherit") {
      return src__engine.ElementType.contentEditable;
    }
    return null;
  };
  src__engine.futurize = function(T, callbacker) {
    let completer = async.Completer$(T).sync();
    let error = callbacker(dart.fn(t => {
      if (t == null) {
        completer.completeError(core.Exception.new("operation failed"));
      } else {
        completer.complete(t);
      }
    }, dart.fnType(core.Null, [T])));
    if (error != null) dart.throw(core.Exception.new(error));
    return completer.future;
  };
  src__engine.matrix4ToCssTransform = function(matrix) {
    return src__engine.float64ListToCssTransform(matrix.storage);
  };
  src__engine.isIdentityFloat64ListTransform = function(matrix) {
    if (!(matrix[$length] === 16)) dart.assertFailed();
    let m = matrix;
    return m[$_get](0) === 1.0 && m[$_get](1) === 0.0 && m[$_get](2) === 0.0 && m[$_get](3) === 0.0 && m[$_get](4) === 0.0 && m[$_get](5) === 1.0 && m[$_get](6) === 0.0 && m[$_get](7) === 0.0 && m[$_get](8) === 0.0 && m[$_get](9) === 0.0 && m[$_get](10) === 1.0 && m[$_get](11) === 0.0 && m[$_get](12) === 0.0 && m[$_get](13) === 0.0 && m[$_get](14) === 0.0 && m[$_get](15) === 1.0;
  };
  src__engine.float64ListToCssTransform = function(matrix) {
    if (!(matrix[$length] === 16)) dart.assertFailed();
    let m = matrix;
    if (m[$_get](0) === 1.0 && m[$_get](1) === 0.0 && m[$_get](2) === 0.0 && m[$_get](3) === 0.0 && m[$_get](4) === 0.0 && m[$_get](5) === 1.0 && m[$_get](6) === 0.0 && m[$_get](7) === 0.0 && m[$_get](8) === 0.0 && m[$_get](9) === 0.0 && m[$_get](10) === 1.0 && m[$_get](11) === 0.0 && m[$_get](14) === 0.0 && m[$_get](15) === 1.0) {
      let tx = m[$_get](12);
      let ty = m[$_get](13);
      return "translate(" + dart.str(tx) + "px, " + dart.str(ty) + "px)";
    } else {
      return "matrix3d(" + dart.str(m[$_get](0)) + "," + dart.str(m[$_get](1)) + "," + dart.str(m[$_get](2)) + "," + dart.str(m[$_get](3)) + "," + dart.str(m[$_get](4)) + "," + dart.str(m[$_get](5)) + "," + dart.str(m[$_get](6)) + "," + dart.str(m[$_get](7)) + "," + dart.str(m[$_get](8)) + "," + dart.str(m[$_get](9)) + "," + dart.str(m[$_get](10)) + "," + dart.str(m[$_get](11)) + "," + dart.str(m[$_get](12)) + "," + dart.str(m[$_get](13)) + "," + dart.str(m[$_get](14)) + "," + dart.str(m[$_get](15)) + ")";
    }
  };
  src__engine.localClipRectToGlobalClip = function(opts) {
    let localClip = opts && 'localClip' in opts ? opts.localClip : null;
    let transform = opts && 'transform' in opts ? opts.transform : null;
    return src__engine.localClipToGlobalClip({localLeft: localClip.left, localTop: localClip.top, localRight: localClip.right, localBottom: localClip.bottom, transform: transform});
  };
  src__engine.localClipToGlobalClip = function(opts) {
    let localLeft = opts && 'localLeft' in opts ? opts.localLeft : null;
    let localTop = opts && 'localTop' in opts ? opts.localTop : null;
    let localRight = opts && 'localRight' in opts ? opts.localRight : null;
    let localBottom = opts && 'localBottom' in opts ? opts.localBottom : null;
    let transform = opts && 'transform' in opts ? opts.transform : null;
    if (!(localLeft != null)) dart.assertFailed();
    if (!(localTop != null)) dart.assertFailed();
    if (!(localRight != null)) dart.assertFailed();
    if (!(localBottom != null)) dart.assertFailed();
    let pointData = _native_typed_data.NativeFloat64List.new(16);
    pointData[$_set](0, localLeft);
    pointData[$_set](4, localTop);
    pointData[$_set](12, 1.0);
    pointData[$_set](1, localRight);
    pointData[$_set](5, localTop);
    pointData[$_set](13, 1.0);
    pointData[$_set](2, localLeft);
    pointData[$_set](6, localBottom);
    pointData[$_set](14, 1.0);
    pointData[$_set](3, localRight);
    pointData[$_set](7, localBottom);
    pointData[$_set](15, 1.0);
    let pointMatrix = new src__engine.Matrix4.fromFloat64List(pointData);
    pointMatrix.multiplyTranspose(transform);
    return new ui.Rect.fromLTRB(math.min(core.double, math.min(core.double, math.min(core.double, pointData[$_get](0), pointData[$_get](1)), pointData[$_get](2)), pointData[$_get](3)), math.min(core.double, math.min(core.double, math.min(core.double, pointData[$_get](4), pointData[$_get](5)), pointData[$_get](6)), pointData[$_get](7)), math.max(core.double, math.max(core.double, math.max(core.double, pointData[$_get](0), pointData[$_get](1)), pointData[$_get](2)), pointData[$_get](3)), math.max(core.double, math.max(core.double, math.max(core.double, pointData[$_get](4), pointData[$_get](5)), pointData[$_get](6)), pointData[$_get](7)));
  };
  src__engine.rectContainsOther = function(rect, other) {
    return dart.notNull(rect.left) <= dart.notNull(other.left) && dart.notNull(rect.top) <= dart.notNull(other.top) && dart.notNull(rect.right) >= dart.notNull(other.right) && dart.notNull(rect.bottom) >= dart.notNull(other.bottom);
  };
  src__engine.rectIsValid = function(rect) {
    if (!(rect != null)) dart.assertFailed("Rect argument was null.");
    if (!!(rect.left[$isNaN] || rect.right[$isNaN] || rect.top[$isNaN] || rect.bottom[$isNaN])) dart.assertFailed("Rect argument contained a NaN value.");
    return true;
  };
  src__engine.rrectIsValid = function(rrect) {
    if (!(rrect != null)) dart.assertFailed("RRect argument was null.");
    if (!!(rrect.left[$isNaN] || rrect.right[$isNaN] || rrect.top[$isNaN] || rrect.bottom[$isNaN])) dart.assertFailed("RRect argument contained a NaN value.");
    return true;
  };
  src__engine.offsetIsValid = function(offset) {
    if (!(offset != null)) dart.assertFailed("Offset argument was null.");
    if (!(!offset.dx[$isNaN] && !offset.dy[$isNaN])) dart.assertFailed("Offset argument contained a NaN value.");
    return true;
  };
  src__engine.matrix4IsValid = function(matrix4) {
    if (!(matrix4 != null)) dart.assertFailed("Matrix4 argument was null.");
    if (!(matrix4[$length] === 16)) dart.assertFailed("Matrix4 must have 16 entries.");
    return true;
  };
  src__engine.radiusIsValid = function(radius) {
    if (!(radius != null)) dart.assertFailed("Radius argument was null.");
    if (!(!radius.x[$isNaN] && !radius.y[$isNaN])) dart.assertFailed("Radius argument contained a NaN value.");
    return true;
  };
  dart.copyProperties(src__engine, {
    get browserEngine() {
      if (src__engine._browserEngine == null) {
        src__engine._browserEngine = src__engine._detectBrowserEngine();
      }
      return src__engine._browserEngine;
    },
    get assertionsEnabled() {
      let k = false;
      if (!(k = true)) dart.assertFailed();
      return k;
    }
  });
  dart.defineLazy(src__engine, {
    /*src__engine._engineInitialized*/get _engineInitialized() {
      return false;
    },
    set _engineInitialized(_) {},
    /*src__engine._hotRestartListeners*/get _hotRestartListeners() {
      return JSArrayOfVoidTovoid().of([]);
    },
    /*src__engine._clipTextCounter*/get _clipTextCounter() {
      return 0;
    },
    set _clipTextCounter(_) {},
    /*src__engine._browserEngine*/get _browserEngine() {
      return null;
    },
    set _browserEngine(_) {},
    /*src__engine.assetChannel*/get assetChannel() {
      return "flutter/assets";
    },
    /*src__engine.domRenderer*/get domRenderer() {
      return new src__engine.DomRenderer.new();
    },
    /*src__engine._popRouteMethodCall*/get _popRouteMethodCall() {
      return new src__engine.MethodCall.new("popRoute");
    },
    set _popRouteMethodCall(_) {},
    /*src__engine._originState*/get _originState() {
      return new (IdentityMapOfString$bool()).from(["origin", true]);
    },
    set _originState(_) {},
    /*src__engine._flutterState*/get _flutterState() {
      return new (IdentityMapOfString$bool()).from(["flutter", true]);
    },
    set _flutterState(_) {},
    /*src__engine._logElement*/get _logElement() {
      return null;
    },
    set _logElement(_) {},
    /*src__engine._logContainer*/get _logContainer() {
      return null;
    },
    set _logContainer(_) {},
    /*src__engine._logBuffer*/get _logBuffer() {
      return JSArrayOf_LogMessage().of([]);
    },
    set _logBuffer(_) {},
    /*src__engine._debugLogPointerEvents*/get _debugLogPointerEvents() {
      return false;
    },
    /*src__engine._kPrimaryMouseButton*/get _kPrimaryMouseButton() {
      return 1;
    },
    /*src__engine._kSecondaryMouseButton*/get _kSecondaryMouseButton() {
      return 2;
    },
    /*src__engine._mouseDeviceId*/get _mouseDeviceId() {
      return -1;
    },
    /*src__engine._isWheelDeviceAdded*/get _isWheelDeviceAdded() {
      return false;
    },
    set _isWheelDeviceAdded(_) {},
    /*src__engine._debugDumpPaintCommands*/get _debugDumpPaintCommands() {
      return false;
    },
    /*src__engine._debugShowSemanticsNodes*/get _debugShowSemanticsNodes() {
      return false;
    },
    /*src__engine._roleFactories*/get _roleFactories() {
      return new (LinkedMapOfRole$SemanticsObjectToRoleManager()).from([src__engine.Role.incrementable, dart.fn(object => new src__engine.Incrementable.new(object), SemanticsObjectToIncrementable()), src__engine.Role.scrollable, dart.fn(object => new src__engine.Scrollable.new(object), SemanticsObjectToScrollable()), src__engine.Role.labelAndValue, dart.fn(object => new src__engine.LabelAndValue.new(object), SemanticsObjectToLabelAndValue()), src__engine.Role.tappable, dart.fn(object => new src__engine.Tappable.new(object), SemanticsObjectToTappable()), src__engine.Role.textField, dart.fn(object => new src__engine.TextField.new(object), SemanticsObjectToTextField()), src__engine.Role.checkable, dart.fn(object => new src__engine.Checkable.new(object), SemanticsObjectToCheckable())]);
    },
    /*src__engine._testFontFamily*/get _testFontFamily() {
      return "Ahem";
    },
    /*src__engine._testFontUrl*/get _testFontUrl() {
      return "packages/flutter_web/assets/Ahem.ttf";
    },
    /*src__engine._robotoFontUrl*/get _robotoFontUrl() {
      return "packages/flutter_web_ui/assets/Roboto-Regular.ttf";
    },
    /*src__engine.supportsFontLoadingApi*/get supportsFontLoadingApi() {
      return html.document.fonts != null;
    },
    /*src__engine.lookup*/get lookup() {
      return dart.const(new (UnicodePropertyLookupOfCharProperty()).new(dart.constList([dart.const(new (UnicodeRangeOfCharProperty()).new(10, 10, src__engine.CharProperty.LF)), dart.const(new (UnicodeRangeOfCharProperty()).new(11, 12, src__engine.CharProperty.Newline)), dart.const(new (UnicodeRangeOfCharProperty()).new(13, 13, src__engine.CharProperty.CR)), dart.const(new (UnicodeRangeOfCharProperty()).new(32, 32, src__engine.CharProperty.WSegSpace)), dart.const(new (UnicodeRangeOfCharProperty()).new(34, 34, src__engine.CharProperty.DoubleQuote)), dart.const(new (UnicodeRangeOfCharProperty()).new(39, 39, src__engine.CharProperty.SingleQuote)), dart.const(new (UnicodeRangeOfCharProperty()).new(44, 44, src__engine.CharProperty.MidNum)), dart.const(new (UnicodeRangeOfCharProperty()).new(46, 46, src__engine.CharProperty.MidNumLet)), dart.const(new (UnicodeRangeOfCharProperty()).new(48, 57, src__engine.CharProperty.Numeric)), dart.const(new (UnicodeRangeOfCharProperty()).new(58, 58, src__engine.CharProperty.MidLetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(59, 59, src__engine.CharProperty.MidNum)), dart.const(new (UnicodeRangeOfCharProperty()).new(65, 90, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(95, 95, src__engine.CharProperty.ExtendNumLet)), dart.const(new (UnicodeRangeOfCharProperty()).new(97, 122, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(133, 133, src__engine.CharProperty.Newline)), dart.const(new (UnicodeRangeOfCharProperty()).new(170, 170, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(173, 173, src__engine.CharProperty.Format)), dart.const(new (UnicodeRangeOfCharProperty()).new(181, 181, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(183, 183, src__engine.CharProperty.MidLetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(186, 186, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(192, 214, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(216, 246, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(248, 727, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(734, 740, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(748, 767, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(768, 879, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(880, 884, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(886, 887, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(890, 893, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(894, 894, src__engine.CharProperty.MidNum)), dart.const(new (UnicodeRangeOfCharProperty()).new(895, 895, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(902, 902, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(903, 903, src__engine.CharProperty.MidLetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(904, 906, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(908, 908, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(910, 929, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(931, 1013, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(1015, 1153, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(1155, 1161, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(1162, 1327, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(1329, 1366, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(1369, 1369, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(1371, 1372, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(1374, 1374, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(1376, 1416, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(1417, 1417, src__engine.CharProperty.MidNum)), dart.const(new (UnicodeRangeOfCharProperty()).new(1425, 1469, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(1471, 1471, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(1473, 1474, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(1476, 1477, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(1479, 1479, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(1488, 1514, src__engine.CharProperty.HebrewLetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(1519, 1522, src__engine.CharProperty.HebrewLetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(1523, 1523, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(1524, 1524, src__engine.CharProperty.MidLetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(1536, 1541, src__engine.CharProperty.Format)), dart.const(new (UnicodeRangeOfCharProperty()).new(1548, 1549, src__engine.CharProperty.MidNum)), dart.const(new (UnicodeRangeOfCharProperty()).new(1552, 1562, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(1564, 1564, src__engine.CharProperty.Format)), dart.const(new (UnicodeRangeOfCharProperty()).new(1568, 1610, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(1611, 1631, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(1632, 1641, src__engine.CharProperty.Numeric)), dart.const(new (UnicodeRangeOfCharProperty()).new(1643, 1643, src__engine.CharProperty.Numeric)), dart.const(new (UnicodeRangeOfCharProperty()).new(1644, 1644, src__engine.CharProperty.MidNum)), dart.const(new (UnicodeRangeOfCharProperty()).new(1646, 1647, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(1648, 1648, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(1649, 1747, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(1749, 1749, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(1750, 1756, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(1757, 1757, src__engine.CharProperty.Format)), dart.const(new (UnicodeRangeOfCharProperty()).new(1759, 1764, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(1765, 1766, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(1767, 1768, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(1770, 1773, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(1774, 1775, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(1776, 1785, src__engine.CharProperty.Numeric)), dart.const(new (UnicodeRangeOfCharProperty()).new(1786, 1788, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(1791, 1791, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(1807, 1807, src__engine.CharProperty.Format)), dart.const(new (UnicodeRangeOfCharProperty()).new(1808, 1808, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(1809, 1809, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(1810, 1839, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(1840, 1866, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(1869, 1957, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(1958, 1968, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(1969, 1969, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(1984, 1993, src__engine.CharProperty.Numeric)), dart.const(new (UnicodeRangeOfCharProperty()).new(1994, 2026, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(2027, 2035, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(2036, 2037, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(2040, 2040, src__engine.CharProperty.MidNum)), dart.const(new (UnicodeRangeOfCharProperty()).new(2042, 2042, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(2045, 2045, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(2048, 2069, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(2070, 2073, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(2074, 2074, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(2075, 2083, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(2084, 2084, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(2085, 2087, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(2088, 2088, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(2089, 2093, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(2112, 2136, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(2137, 2139, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(2144, 2154, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(2208, 2228, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(2230, 2237, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(2259, 2273, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(2274, 2274, src__engine.CharProperty.Format)), dart.const(new (UnicodeRangeOfCharProperty()).new(2275, 2307, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(2308, 2361, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(2362, 2364, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(2365, 2365, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(2366, 2383, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(2384, 2384, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(2385, 2391, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(2392, 2401, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(2402, 2403, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(2406, 2415, src__engine.CharProperty.Numeric)), dart.const(new (UnicodeRangeOfCharProperty()).new(2417, 2432, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(2433, 2435, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(2437, 2444, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(2447, 2448, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(2451, 2472, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(2474, 2480, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(2482, 2482, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(2486, 2489, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(2492, 2492, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(2493, 2493, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(2494, 2500, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(2503, 2504, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(2507, 2509, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(2510, 2510, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(2519, 2519, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(2524, 2525, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(2527, 2529, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(2530, 2531, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(2534, 2543, src__engine.CharProperty.Numeric)), dart.const(new (UnicodeRangeOfCharProperty()).new(2544, 2545, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(2556, 2556, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(2558, 2558, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(2561, 2563, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(2565, 2570, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(2575, 2576, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(2579, 2600, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(2602, 2608, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(2610, 2611, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(2613, 2614, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(2616, 2617, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(2620, 2620, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(2622, 2626, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(2631, 2632, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(2635, 2637, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(2641, 2641, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(2649, 2652, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(2654, 2654, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(2662, 2671, src__engine.CharProperty.Numeric)), dart.const(new (UnicodeRangeOfCharProperty()).new(2672, 2673, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(2674, 2676, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(2677, 2677, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(2689, 2691, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(2693, 2701, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(2703, 2705, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(2707, 2728, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(2730, 2736, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(2738, 2739, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(2741, 2745, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(2748, 2748, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(2749, 2749, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(2750, 2757, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(2759, 2761, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(2763, 2765, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(2768, 2768, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(2784, 2785, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(2786, 2787, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(2790, 2799, src__engine.CharProperty.Numeric)), dart.const(new (UnicodeRangeOfCharProperty()).new(2809, 2809, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(2810, 2815, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(2817, 2819, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(2821, 2828, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(2831, 2832, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(2835, 2856, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(2858, 2864, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(2866, 2867, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(2869, 2873, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(2876, 2876, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(2877, 2877, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(2878, 2884, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(2887, 2888, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(2891, 2893, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(2902, 2903, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(2908, 2909, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(2911, 2913, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(2914, 2915, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(2918, 2927, src__engine.CharProperty.Numeric)), dart.const(new (UnicodeRangeOfCharProperty()).new(2929, 2929, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(2946, 2946, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(2947, 2947, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(2949, 2954, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(2958, 2960, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(2962, 2965, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(2969, 2970, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(2972, 2972, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(2974, 2975, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(2979, 2980, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(2984, 2986, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(2990, 3001, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(3006, 3010, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(3014, 3016, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(3018, 3021, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(3024, 3024, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(3031, 3031, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(3046, 3055, src__engine.CharProperty.Numeric)), dart.const(new (UnicodeRangeOfCharProperty()).new(3072, 3076, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(3077, 3084, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(3086, 3088, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(3090, 3112, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(3114, 3129, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(3133, 3133, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(3134, 3140, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(3142, 3144, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(3146, 3149, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(3157, 3158, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(3160, 3162, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(3168, 3169, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(3170, 3171, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(3174, 3183, src__engine.CharProperty.Numeric)), dart.const(new (UnicodeRangeOfCharProperty()).new(3200, 3200, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(3201, 3203, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(3205, 3212, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(3214, 3216, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(3218, 3240, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(3242, 3251, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(3253, 3257, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(3260, 3260, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(3261, 3261, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(3262, 3268, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(3270, 3272, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(3274, 3277, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(3285, 3286, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(3294, 3294, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(3296, 3297, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(3298, 3299, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(3302, 3311, src__engine.CharProperty.Numeric)), dart.const(new (UnicodeRangeOfCharProperty()).new(3313, 3314, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(3328, 3331, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(3333, 3340, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(3342, 3344, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(3346, 3386, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(3387, 3388, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(3389, 3389, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(3390, 3396, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(3398, 3400, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(3402, 3405, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(3406, 3406, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(3412, 3414, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(3415, 3415, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(3423, 3425, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(3426, 3427, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(3430, 3439, src__engine.CharProperty.Numeric)), dart.const(new (UnicodeRangeOfCharProperty()).new(3450, 3455, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(3458, 3459, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(3461, 3478, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(3482, 3505, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(3507, 3515, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(3517, 3517, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(3520, 3526, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(3530, 3530, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(3535, 3540, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(3542, 3542, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(3544, 3551, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(3558, 3567, src__engine.CharProperty.Numeric)), dart.const(new (UnicodeRangeOfCharProperty()).new(3570, 3571, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(3633, 3633, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(3636, 3642, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(3655, 3662, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(3664, 3673, src__engine.CharProperty.Numeric)), dart.const(new (UnicodeRangeOfCharProperty()).new(3761, 3761, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(3764, 3769, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(3771, 3772, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(3784, 3789, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(3792, 3801, src__engine.CharProperty.Numeric)), dart.const(new (UnicodeRangeOfCharProperty()).new(3840, 3840, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(3864, 3865, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(3872, 3881, src__engine.CharProperty.Numeric)), dart.const(new (UnicodeRangeOfCharProperty()).new(3893, 3893, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(3895, 3895, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(3897, 3897, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(3902, 3903, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(3904, 3911, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(3913, 3948, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(3953, 3972, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(3974, 3975, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(3976, 3980, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(3981, 3991, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(3993, 4028, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(4038, 4038, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(4139, 4158, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(4160, 4169, src__engine.CharProperty.Numeric)), dart.const(new (UnicodeRangeOfCharProperty()).new(4182, 4185, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(4190, 4192, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(4194, 4196, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(4199, 4205, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(4209, 4212, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(4226, 4237, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(4239, 4239, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(4240, 4249, src__engine.CharProperty.Numeric)), dart.const(new (UnicodeRangeOfCharProperty()).new(4250, 4253, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(4256, 4293, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(4295, 4295, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(4301, 4301, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(4304, 4346, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(4348, 4680, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(4682, 4685, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(4688, 4694, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(4696, 4696, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(4698, 4701, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(4704, 4744, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(4746, 4749, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(4752, 4784, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(4786, 4789, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(4792, 4798, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(4800, 4800, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(4802, 4805, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(4808, 4822, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(4824, 4880, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(4882, 4885, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(4888, 4954, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(4957, 4959, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(4992, 5007, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(5024, 5109, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(5112, 5117, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(5121, 5740, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(5743, 5759, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(5760, 5760, src__engine.CharProperty.WSegSpace)), dart.const(new (UnicodeRangeOfCharProperty()).new(5761, 5786, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(5792, 5866, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(5870, 5880, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(5888, 5900, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(5902, 5905, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(5906, 5908, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(5920, 5937, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(5938, 5940, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(5952, 5969, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(5970, 5971, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(5984, 5996, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(5998, 6000, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(6002, 6003, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(6068, 6099, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(6109, 6109, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(6112, 6121, src__engine.CharProperty.Numeric)), dart.const(new (UnicodeRangeOfCharProperty()).new(6155, 6157, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(6158, 6158, src__engine.CharProperty.Format)), dart.const(new (UnicodeRangeOfCharProperty()).new(6160, 6169, src__engine.CharProperty.Numeric)), dart.const(new (UnicodeRangeOfCharProperty()).new(6176, 6264, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(6272, 6276, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(6277, 6278, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(6279, 6312, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(6313, 6313, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(6314, 6314, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(6320, 6389, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(6400, 6430, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(6432, 6443, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(6448, 6459, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(6470, 6479, src__engine.CharProperty.Numeric)), dart.const(new (UnicodeRangeOfCharProperty()).new(6608, 6617, src__engine.CharProperty.Numeric)), dart.const(new (UnicodeRangeOfCharProperty()).new(6656, 6678, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(6679, 6683, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(6741, 6750, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(6752, 6780, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(6783, 6783, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(6784, 6793, src__engine.CharProperty.Numeric)), dart.const(new (UnicodeRangeOfCharProperty()).new(6800, 6809, src__engine.CharProperty.Numeric)), dart.const(new (UnicodeRangeOfCharProperty()).new(6832, 6846, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(6912, 6916, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(6917, 6963, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(6964, 6980, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(6981, 6987, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(6992, 7001, src__engine.CharProperty.Numeric)), dart.const(new (UnicodeRangeOfCharProperty()).new(7019, 7027, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(7040, 7042, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(7043, 7072, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(7073, 7085, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(7086, 7087, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(7088, 7097, src__engine.CharProperty.Numeric)), dart.const(new (UnicodeRangeOfCharProperty()).new(7098, 7141, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(7142, 7155, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(7168, 7203, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(7204, 7223, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(7232, 7241, src__engine.CharProperty.Numeric)), dart.const(new (UnicodeRangeOfCharProperty()).new(7245, 7247, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(7248, 7257, src__engine.CharProperty.Numeric)), dart.const(new (UnicodeRangeOfCharProperty()).new(7258, 7293, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(7296, 7304, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(7312, 7354, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(7357, 7359, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(7376, 7378, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(7380, 7400, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(7401, 7404, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(7405, 7405, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(7406, 7409, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(7410, 7412, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(7413, 7414, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(7415, 7417, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(7424, 7615, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(7616, 7673, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(7675, 7679, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(7680, 7957, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(7960, 7965, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(7968, 8005, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(8008, 8013, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(8016, 8023, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(8025, 8025, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(8027, 8027, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(8029, 8029, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(8031, 8061, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(8064, 8116, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(8118, 8124, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(8126, 8126, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(8130, 8132, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(8134, 8140, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(8144, 8147, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(8150, 8155, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(8160, 8172, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(8178, 8180, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(8182, 8188, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(8192, 8198, src__engine.CharProperty.WSegSpace)), dart.const(new (UnicodeRangeOfCharProperty()).new(8200, 8202, src__engine.CharProperty.WSegSpace)), dart.const(new (UnicodeRangeOfCharProperty()).new(8204, 8204, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(8205, 8205, src__engine.CharProperty.ZWJ)), dart.const(new (UnicodeRangeOfCharProperty()).new(8206, 8207, src__engine.CharProperty.Format)), dart.const(new (UnicodeRangeOfCharProperty()).new(8216, 8217, src__engine.CharProperty.MidNumLet)), dart.const(new (UnicodeRangeOfCharProperty()).new(8228, 8228, src__engine.CharProperty.MidNumLet)), dart.const(new (UnicodeRangeOfCharProperty()).new(8231, 8231, src__engine.CharProperty.MidLetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(8232, 8233, src__engine.CharProperty.Newline)), dart.const(new (UnicodeRangeOfCharProperty()).new(8234, 8238, src__engine.CharProperty.Format)), dart.const(new (UnicodeRangeOfCharProperty()).new(8239, 8239, src__engine.CharProperty.ExtendNumLet)), dart.const(new (UnicodeRangeOfCharProperty()).new(8255, 8256, src__engine.CharProperty.ExtendNumLet)), dart.const(new (UnicodeRangeOfCharProperty()).new(8260, 8260, src__engine.CharProperty.MidNum)), dart.const(new (UnicodeRangeOfCharProperty()).new(8276, 8276, src__engine.CharProperty.ExtendNumLet)), dart.const(new (UnicodeRangeOfCharProperty()).new(8287, 8287, src__engine.CharProperty.WSegSpace)), dart.const(new (UnicodeRangeOfCharProperty()).new(8288, 8292, src__engine.CharProperty.Format)), dart.const(new (UnicodeRangeOfCharProperty()).new(8294, 8303, src__engine.CharProperty.Format)), dart.const(new (UnicodeRangeOfCharProperty()).new(8305, 8305, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(8319, 8319, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(8336, 8348, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(8400, 8432, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(8450, 8450, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(8455, 8455, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(8458, 8467, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(8469, 8469, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(8473, 8477, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(8484, 8484, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(8486, 8486, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(8488, 8488, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(8490, 8493, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(8495, 8505, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(8508, 8511, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(8517, 8521, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(8526, 8526, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(8544, 8584, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(9398, 9449, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(11264, 11310, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(11312, 11358, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(11360, 11492, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(11499, 11502, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(11503, 11505, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(11506, 11507, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(11520, 11557, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(11559, 11559, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(11565, 11565, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(11568, 11623, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(11631, 11631, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(11647, 11647, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(11648, 11670, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(11680, 11686, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(11688, 11694, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(11696, 11702, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(11704, 11710, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(11712, 11718, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(11720, 11726, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(11728, 11734, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(11736, 11742, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(11744, 11775, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(11823, 11823, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(12288, 12288, src__engine.CharProperty.WSegSpace)), dart.const(new (UnicodeRangeOfCharProperty()).new(12293, 12293, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(12330, 12335, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(12337, 12341, src__engine.CharProperty.Katakana)), dart.const(new (UnicodeRangeOfCharProperty()).new(12347, 12348, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(12441, 12442, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(12443, 12444, src__engine.CharProperty.Katakana)), dart.const(new (UnicodeRangeOfCharProperty()).new(12448, 12538, src__engine.CharProperty.Katakana)), dart.const(new (UnicodeRangeOfCharProperty()).new(12540, 12543, src__engine.CharProperty.Katakana)), dart.const(new (UnicodeRangeOfCharProperty()).new(12549, 12591, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(12593, 12686, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(12704, 12730, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(12784, 12799, src__engine.CharProperty.Katakana)), dart.const(new (UnicodeRangeOfCharProperty()).new(13008, 13054, src__engine.CharProperty.Katakana)), dart.const(new (UnicodeRangeOfCharProperty()).new(13056, 13143, src__engine.CharProperty.Katakana)), dart.const(new (UnicodeRangeOfCharProperty()).new(40960, 42124, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(42192, 42237, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(42240, 42508, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(42512, 42527, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(42528, 42537, src__engine.CharProperty.Numeric)), dart.const(new (UnicodeRangeOfCharProperty()).new(42538, 42539, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(42560, 42606, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(42607, 42610, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(42612, 42621, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(42623, 42653, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(42654, 42655, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(42656, 42735, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(42736, 42737, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(42775, 42937, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(42999, 43009, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(43010, 43010, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(43011, 43013, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(43014, 43014, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(43015, 43018, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(43019, 43019, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(43020, 43042, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(43043, 43047, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(43072, 43123, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(43136, 43137, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(43138, 43187, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(43188, 43205, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(43216, 43225, src__engine.CharProperty.Numeric)), dart.const(new (UnicodeRangeOfCharProperty()).new(43232, 43249, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(43250, 43255, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(43259, 43259, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(43261, 43262, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(43263, 43263, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(43264, 43273, src__engine.CharProperty.Numeric)), dart.const(new (UnicodeRangeOfCharProperty()).new(43274, 43301, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(43302, 43309, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(43312, 43334, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(43335, 43347, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(43360, 43388, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(43392, 43395, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(43396, 43442, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(43443, 43456, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(43471, 43471, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(43472, 43481, src__engine.CharProperty.Numeric)), dart.const(new (UnicodeRangeOfCharProperty()).new(43493, 43493, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(43504, 43513, src__engine.CharProperty.Numeric)), dart.const(new (UnicodeRangeOfCharProperty()).new(43520, 43560, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(43561, 43574, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(43584, 43586, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(43587, 43587, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(43588, 43595, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(43596, 43597, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(43600, 43609, src__engine.CharProperty.Numeric)), dart.const(new (UnicodeRangeOfCharProperty()).new(43643, 43645, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(43696, 43696, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(43698, 43700, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(43703, 43704, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(43710, 43711, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(43713, 43713, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(43744, 43754, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(43755, 43759, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(43762, 43764, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(43765, 43766, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(43777, 43782, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(43785, 43790, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(43793, 43798, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(43808, 43814, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(43816, 43822, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(43824, 43877, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(43888, 44002, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(44003, 44010, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(44012, 44013, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(44016, 44025, src__engine.CharProperty.Numeric)), dart.const(new (UnicodeRangeOfCharProperty()).new(44032, 55203, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(55216, 55238, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(55243, 55291, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(64256, 64262, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(64275, 64279, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(64285, 64285, src__engine.CharProperty.HebrewLetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(64286, 64286, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(64287, 64296, src__engine.CharProperty.HebrewLetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(64298, 64310, src__engine.CharProperty.HebrewLetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(64312, 64316, src__engine.CharProperty.HebrewLetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(64318, 64318, src__engine.CharProperty.HebrewLetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(64320, 64321, src__engine.CharProperty.HebrewLetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(64323, 64324, src__engine.CharProperty.HebrewLetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(64326, 64335, src__engine.CharProperty.HebrewLetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(64336, 64433, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(64467, 64829, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(64848, 64911, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(64914, 64967, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(65008, 65019, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(65024, 65039, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(65040, 65040, src__engine.CharProperty.MidNum)), dart.const(new (UnicodeRangeOfCharProperty()).new(65043, 65043, src__engine.CharProperty.MidLetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(65044, 65044, src__engine.CharProperty.MidNum)), dart.const(new (UnicodeRangeOfCharProperty()).new(65056, 65071, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(65075, 65076, src__engine.CharProperty.ExtendNumLet)), dart.const(new (UnicodeRangeOfCharProperty()).new(65101, 65103, src__engine.CharProperty.ExtendNumLet)), dart.const(new (UnicodeRangeOfCharProperty()).new(65104, 65104, src__engine.CharProperty.MidNum)), dart.const(new (UnicodeRangeOfCharProperty()).new(65106, 65106, src__engine.CharProperty.MidNumLet)), dart.const(new (UnicodeRangeOfCharProperty()).new(65108, 65108, src__engine.CharProperty.MidNum)), dart.const(new (UnicodeRangeOfCharProperty()).new(65109, 65109, src__engine.CharProperty.MidLetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(65136, 65140, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(65142, 65276, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(65279, 65279, src__engine.CharProperty.Format)), dart.const(new (UnicodeRangeOfCharProperty()).new(65287, 65287, src__engine.CharProperty.MidNumLet)), dart.const(new (UnicodeRangeOfCharProperty()).new(65292, 65292, src__engine.CharProperty.MidNum)), dart.const(new (UnicodeRangeOfCharProperty()).new(65294, 65294, src__engine.CharProperty.MidNumLet)), dart.const(new (UnicodeRangeOfCharProperty()).new(65306, 65306, src__engine.CharProperty.MidLetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(65307, 65307, src__engine.CharProperty.MidNum)), dart.const(new (UnicodeRangeOfCharProperty()).new(65313, 65338, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(65343, 65343, src__engine.CharProperty.ExtendNumLet)), dart.const(new (UnicodeRangeOfCharProperty()).new(65345, 65370, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(65382, 65437, src__engine.CharProperty.Katakana)), dart.const(new (UnicodeRangeOfCharProperty()).new(65438, 65439, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(65440, 65470, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(65474, 65479, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(65482, 65487, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(65490, 65495, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(65498, 65500, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(65529, 65531, src__engine.CharProperty.Format)), dart.const(new (UnicodeRangeOfCharProperty()).new(65536, 65547, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(65549, 65574, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(65576, 65594, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(65596, 65597, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(65599, 65613, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(65616, 65629, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(65664, 65786, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(65856, 65908, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(66045, 66045, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(66176, 66204, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(66208, 66256, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(66272, 66272, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(66304, 66335, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(66349, 66378, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(66384, 66421, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(66422, 66426, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(66432, 66461, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(66464, 66499, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(66504, 66511, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(66513, 66517, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(66560, 66717, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(66720, 66729, src__engine.CharProperty.Numeric)), dart.const(new (UnicodeRangeOfCharProperty()).new(66736, 66771, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(66776, 66811, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(66816, 66855, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(66864, 66915, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(67072, 67382, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(67392, 67413, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(67424, 67431, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(67584, 67589, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(67592, 67592, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(67594, 67637, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(67639, 67640, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(67644, 67644, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(67647, 67669, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(67680, 67702, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(67712, 67742, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(67808, 67826, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(67828, 67829, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(67840, 67861, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(67872, 67897, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(67968, 68023, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(68030, 68031, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(68096, 68096, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(68097, 68099, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(68101, 68102, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(68108, 68111, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(68112, 68115, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(68117, 68119, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(68121, 68149, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(68152, 68154, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(68159, 68159, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(68192, 68220, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(68224, 68252, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(68288, 68295, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(68297, 68324, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(68325, 68326, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(68352, 68405, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(68416, 68437, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(68448, 68466, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(68480, 68497, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(68608, 68680, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(68736, 68786, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(68800, 68850, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(68864, 68899, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(68900, 68903, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(68912, 68921, src__engine.CharProperty.Numeric)), dart.const(new (UnicodeRangeOfCharProperty()).new(69376, 69404, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(69415, 69415, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(69424, 69445, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(69446, 69456, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(69632, 69634, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(69635, 69687, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(69688, 69702, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(69734, 69743, src__engine.CharProperty.Numeric)), dart.const(new (UnicodeRangeOfCharProperty()).new(69759, 69762, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(69763, 69807, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(69808, 69818, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(69821, 69821, src__engine.CharProperty.Format)), dart.const(new (UnicodeRangeOfCharProperty()).new(69837, 69837, src__engine.CharProperty.Format)), dart.const(new (UnicodeRangeOfCharProperty()).new(69840, 69864, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(69872, 69881, src__engine.CharProperty.Numeric)), dart.const(new (UnicodeRangeOfCharProperty()).new(69888, 69890, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(69891, 69926, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(69927, 69940, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(69942, 69951, src__engine.CharProperty.Numeric)), dart.const(new (UnicodeRangeOfCharProperty()).new(69956, 69956, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(69957, 69958, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(69968, 70002, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(70003, 70003, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(70006, 70006, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(70016, 70018, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(70019, 70066, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(70067, 70080, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(70081, 70084, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(70089, 70092, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(70096, 70105, src__engine.CharProperty.Numeric)), dart.const(new (UnicodeRangeOfCharProperty()).new(70106, 70106, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(70108, 70108, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(70144, 70161, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(70163, 70187, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(70188, 70199, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(70206, 70206, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(70272, 70278, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(70280, 70280, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(70282, 70285, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(70287, 70301, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(70303, 70312, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(70320, 70366, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(70367, 70378, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(70384, 70393, src__engine.CharProperty.Numeric)), dart.const(new (UnicodeRangeOfCharProperty()).new(70400, 70403, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(70405, 70412, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(70415, 70416, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(70419, 70440, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(70442, 70448, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(70450, 70451, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(70453, 70457, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(70459, 70460, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(70461, 70461, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(70462, 70468, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(70471, 70472, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(70475, 70477, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(70480, 70480, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(70487, 70487, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(70493, 70497, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(70498, 70499, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(70502, 70508, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(70512, 70516, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(70656, 70708, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(70709, 70726, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(70727, 70730, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(70736, 70745, src__engine.CharProperty.Numeric)), dart.const(new (UnicodeRangeOfCharProperty()).new(70750, 70750, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(70784, 70831, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(70832, 70851, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(70852, 70853, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(70855, 70855, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(70864, 70873, src__engine.CharProperty.Numeric)), dart.const(new (UnicodeRangeOfCharProperty()).new(71040, 71086, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(71087, 71093, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(71096, 71104, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(71128, 71131, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(71132, 71133, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(71168, 71215, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(71216, 71232, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(71236, 71236, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(71248, 71257, src__engine.CharProperty.Numeric)), dart.const(new (UnicodeRangeOfCharProperty()).new(71296, 71338, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(71339, 71351, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(71360, 71369, src__engine.CharProperty.Numeric)), dart.const(new (UnicodeRangeOfCharProperty()).new(71453, 71467, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(71472, 71481, src__engine.CharProperty.Numeric)), dart.const(new (UnicodeRangeOfCharProperty()).new(71680, 71723, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(71724, 71738, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(71840, 71903, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(71904, 71913, src__engine.CharProperty.Numeric)), dart.const(new (UnicodeRangeOfCharProperty()).new(71935, 71935, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(72192, 72192, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(72193, 72202, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(72203, 72242, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(72243, 72249, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(72250, 72250, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(72251, 72254, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(72263, 72263, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(72272, 72272, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(72273, 72283, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(72284, 72323, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(72326, 72329, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(72330, 72345, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(72349, 72349, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(72384, 72440, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(72704, 72712, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(72714, 72750, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(72751, 72758, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(72760, 72767, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(72768, 72768, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(72784, 72793, src__engine.CharProperty.Numeric)), dart.const(new (UnicodeRangeOfCharProperty()).new(72818, 72847, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(72850, 72871, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(72873, 72886, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(72960, 72966, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(72968, 72969, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(72971, 73008, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(73009, 73014, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(73018, 73018, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(73020, 73021, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(73023, 73029, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(73030, 73030, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(73031, 73031, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(73040, 73049, src__engine.CharProperty.Numeric)), dart.const(new (UnicodeRangeOfCharProperty()).new(73056, 73061, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(73063, 73064, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(73066, 73097, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(73098, 73102, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(73104, 73105, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(73107, 73111, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(73112, 73112, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(73120, 73129, src__engine.CharProperty.Numeric)), dart.const(new (UnicodeRangeOfCharProperty()).new(73440, 73458, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(73459, 73462, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(73728, 74649, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(74752, 74862, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(74880, 75075, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(77824, 78894, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(82944, 83526, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(92160, 92728, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(92736, 92766, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(92768, 92777, src__engine.CharProperty.Numeric)), dart.const(new (UnicodeRangeOfCharProperty()).new(92880, 92909, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(92912, 92916, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(92928, 92975, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(92976, 92982, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(92992, 92995, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(93008, 93017, src__engine.CharProperty.Numeric)), dart.const(new (UnicodeRangeOfCharProperty()).new(93027, 93047, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(93053, 93071, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(93760, 93823, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(93952, 94020, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(94032, 94032, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(94033, 94078, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(94095, 94098, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(94099, 94111, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(94176, 94177, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(110592, 110592, src__engine.CharProperty.Katakana)), dart.const(new (UnicodeRangeOfCharProperty()).new(113664, 113770, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(113776, 113788, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(113792, 113800, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(113808, 113817, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(113821, 113822, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(113824, 113827, src__engine.CharProperty.Format)), dart.const(new (UnicodeRangeOfCharProperty()).new(119141, 119145, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(119149, 119154, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(119155, 119162, src__engine.CharProperty.Format)), dart.const(new (UnicodeRangeOfCharProperty()).new(119163, 119170, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(119173, 119179, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(119210, 119213, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(119362, 119364, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(119808, 119892, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(119894, 119964, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(119966, 119967, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(119970, 119970, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(119973, 119974, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(119977, 119980, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(119982, 119993, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(119995, 119995, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(119997, 120003, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(120005, 120069, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(120071, 120074, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(120077, 120084, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(120086, 120092, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(120094, 120121, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(120123, 120126, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(120128, 120132, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(120134, 120134, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(120138, 120144, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(120146, 120485, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(120488, 120512, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(120514, 120538, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(120540, 120570, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(120572, 120596, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(120598, 120628, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(120630, 120654, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(120656, 120686, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(120688, 120712, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(120714, 120744, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(120746, 120770, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(120772, 120779, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(120782, 120831, src__engine.CharProperty.Numeric)), dart.const(new (UnicodeRangeOfCharProperty()).new(121344, 121398, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(121403, 121452, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(121461, 121461, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(121476, 121476, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(121499, 121503, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(121505, 121519, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(122880, 122886, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(122888, 122904, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(122907, 122913, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(122915, 122916, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(122918, 122922, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(124928, 125124, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(125136, 125142, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(125184, 125251, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(125252, 125258, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(125264, 125273, src__engine.CharProperty.Numeric)), dart.const(new (UnicodeRangeOfCharProperty()).new(126464, 126467, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(126469, 126495, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(126497, 126498, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(126500, 126500, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(126503, 126503, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(126505, 126514, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(126516, 126519, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(126521, 126521, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(126523, 126523, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(126530, 126530, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(126535, 126535, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(126537, 126537, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(126539, 126539, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(126541, 126543, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(126545, 126546, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(126548, 126548, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(126551, 126551, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(126553, 126553, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(126555, 126555, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(126557, 126557, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(126559, 126559, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(126561, 126562, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(126564, 126564, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(126567, 126570, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(126572, 126578, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(126580, 126583, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(126585, 126588, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(126590, 126590, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(126592, 126601, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(126603, 126619, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(126625, 126627, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(126629, 126633, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(126635, 126651, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(127280, 127305, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(127312, 127337, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(127344, 127369, src__engine.CharProperty.ALetter)), dart.const(new (UnicodeRangeOfCharProperty()).new(127462, 127487, src__engine.CharProperty.RegionalIndicator)), dart.const(new (UnicodeRangeOfCharProperty()).new(127995, 127999, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(917505, 917505, src__engine.CharProperty.Format)), dart.const(new (UnicodeRangeOfCharProperty()).new(917536, 917631, src__engine.CharProperty.Extend)), dart.const(new (UnicodeRangeOfCharProperty()).new(917760, 917999, src__engine.CharProperty.Extend))], UnicodeRangeOfCharProperty())));
    },
    /*src__engine._debugVisibleTextEditing*/get _debugVisibleTextEditing() {
      return false;
    },
    /*src__engine.textEditing*/get textEditing() {
      return new src__engine.HybridTextEditing.new();
    }
  });
  const _name$0 = dart.privateName(ui, "_name");
  ui.PointMode = class PointMode extends core.Object {
    toString() {
      return this[_name$0];
    }
  };
  (ui.PointMode.new = function(index, _name) {
    this.index = index;
    this[_name$0] = _name;
    ;
  }).prototype = ui.PointMode.prototype;
  dart.addTypeTests(ui.PointMode);
  dart.setFieldSignature(ui.PointMode, () => ({
    __proto__: dart.getFields(ui.PointMode.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$0]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(ui.PointMode, ['toString']);
  ui.PointMode.points = dart.const(new ui.PointMode.new(0, "PointMode.points"));
  ui.PointMode.lines = dart.const(new ui.PointMode.new(1, "PointMode.lines"));
  ui.PointMode.polygon = dart.const(new ui.PointMode.new(2, "PointMode.polygon"));
  ui.PointMode.values = dart.constList([ui.PointMode.points, ui.PointMode.lines, ui.PointMode.polygon], ui.PointMode);
  ui.ClipOp = class ClipOp extends core.Object {
    toString() {
      return this[_name$0];
    }
  };
  (ui.ClipOp.new = function(index, _name) {
    this.index = index;
    this[_name$0] = _name;
    ;
  }).prototype = ui.ClipOp.prototype;
  dart.addTypeTests(ui.ClipOp);
  dart.setFieldSignature(ui.ClipOp, () => ({
    __proto__: dart.getFields(ui.ClipOp.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$0]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(ui.ClipOp, ['toString']);
  ui.ClipOp.difference = dart.const(new ui.ClipOp.new(0, "ClipOp.difference"));
  ui.ClipOp.intersect = dart.const(new ui.ClipOp.new(1, "ClipOp.intersect"));
  ui.ClipOp.values = dart.constList([ui.ClipOp.difference, ui.ClipOp.intersect], ui.ClipOp);
  ui.Vertices = class Vertices extends core.Object {};
  (ui.Vertices.new = function() {
    ;
  }).prototype = ui.Vertices.prototype;
  dart.addTypeTests(ui.Vertices);
  const _canvas$ = dart.privateName(ui, "_canvas");
  const _isRecording = dart.privateName(ui, "_isRecording");
  ui.PictureRecorder = class PictureRecorder extends core.Object {
    get cullRect() {
      return this[cullRect];
    }
    set cullRect(value) {
      this[cullRect] = value;
    }
    beginRecording(bounds) {
      if (!!dart.test(this[_isRecording])) dart.assertFailed();
      this.cullRect = bounds;
      this[_isRecording] = true;
      this[_canvas$] = new src__engine.RecordingCanvas.new(this.cullRect);
      return this[_canvas$];
    }
    get isRecording() {
      return this[_isRecording];
    }
    endRecording() {
      if (!dart.test(this[_isRecording])) {
        return null;
      }
      this[_isRecording] = false;
      return new ui.Picture.__(this[_canvas$], this.cullRect);
    }
  };
  (ui.PictureRecorder.new = function() {
    this[_canvas$] = null;
    this[cullRect] = null;
    this[_isRecording] = false;
    ;
  }).prototype = ui.PictureRecorder.prototype;
  dart.addTypeTests(ui.PictureRecorder);
  const cullRect = Symbol("PictureRecorder.cullRect");
  dart.setMethodSignature(ui.PictureRecorder, () => ({
    __proto__: dart.getMethods(ui.PictureRecorder.__proto__),
    beginRecording: dart.fnType(src__engine.RecordingCanvas, [ui.Rect]),
    endRecording: dart.fnType(ui.Picture, [])
  }));
  dart.setGetterSignature(ui.PictureRecorder, () => ({
    __proto__: dart.getGetters(ui.PictureRecorder.__proto__),
    isRecording: core.bool
  }));
  dart.setFieldSignature(ui.PictureRecorder, () => ({
    __proto__: dart.getFields(ui.PictureRecorder.__proto__),
    [_canvas$]: dart.fieldType(src__engine.RecordingCanvas),
    cullRect: dart.fieldType(ui.Rect),
    [_isRecording]: dart.fieldType(core.bool)
  }));
  const _saveLayerWithoutBounds = dart.privateName(ui, "_saveLayerWithoutBounds");
  const _saveLayer = dart.privateName(ui, "_saveLayer");
  const _scale = dart.privateName(ui, "_scale");
  const _transform = dart.privateName(ui, "_transform");
  const _clipRect = dart.privateName(ui, "_clipRect");
  const _clipRRect = dart.privateName(ui, "_clipRRect");
  const _clipPath = dart.privateName(ui, "_clipPath");
  const _drawColor = dart.privateName(ui, "_drawColor");
  const _drawLine = dart.privateName(ui, "_drawLine");
  const _drawPaint = dart.privateName(ui, "_drawPaint");
  const _drawRect = dart.privateName(ui, "_drawRect");
  const _drawRRect = dart.privateName(ui, "_drawRRect");
  const _drawDRRect = dart.privateName(ui, "_drawDRRect");
  const _drawOval = dart.privateName(ui, "_drawOval");
  const _drawCircle = dart.privateName(ui, "_drawCircle");
  const _drawPath = dart.privateName(ui, "_drawPath");
  const _drawImage = dart.privateName(ui, "_drawImage");
  const _drawImageRect = dart.privateName(ui, "_drawImageRect");
  const _drawParagraph = dart.privateName(ui, "_drawParagraph");
  ui.Canvas = class Canvas extends core.Object {
    save() {
      this[_canvas$].save();
    }
    saveLayer(bounds, paint) {
      if (!(paint != null)) dart.assertFailed();
      if (bounds == null) {
        this[_saveLayerWithoutBounds](paint);
      } else {
        if (!dart.test(src__engine.rectIsValid(bounds))) dart.assertFailed();
        this[_saveLayer](bounds, paint);
      }
    }
    [_saveLayerWithoutBounds](paint) {
      this[_canvas$].saveLayerWithoutBounds(paint);
    }
    [_saveLayer](bounds, paint) {
      this[_canvas$].saveLayer(bounds, paint);
    }
    restore() {
      this[_canvas$].restore();
    }
    getSaveCount() {
      return this[_canvas$].saveCount;
    }
    translate(dx, dy) {
      this[_canvas$].translate(dx, dy);
    }
    scale(sx, sy) {
      let t4;
      if (sy === void 0) sy = null;
      return this[_scale](sx, (t4 = sy, t4 == null ? sx : t4));
    }
    [_scale](sx, sy) {
      this[_canvas$].scale(sx, sy);
    }
    rotate(radians) {
      this[_canvas$].rotate(radians);
    }
    skew(sx, sy) {
      this[_canvas$].skew(sx, sy);
    }
    transform(matrix4) {
      if (!(matrix4 != null)) dart.assertFailed();
      if (matrix4[$length] !== 16) dart.throw(new core.ArgumentError.new("\"matrix4\" must have 16 entries."));
      this[_transform](matrix4);
    }
    [_transform](matrix4) {
      this[_canvas$].transform(matrix4);
    }
    clipRect(rect, opts) {
      let clipOp = opts && 'clipOp' in opts ? opts.clipOp : ui.ClipOp.intersect;
      let doAntiAlias = opts && 'doAntiAlias' in opts ? opts.doAntiAlias : true;
      if (!dart.test(src__engine.rectIsValid(rect))) dart.assertFailed();
      if (!(clipOp != null)) dart.assertFailed();
      if (!(doAntiAlias != null)) dart.assertFailed();
      this[_clipRect](rect, clipOp, doAntiAlias);
    }
    [_clipRect](rect, clipOp, doAntiAlias) {
      this[_canvas$].clipRect(rect);
    }
    clipRRect(rrect, opts) {
      let doAntiAlias = opts && 'doAntiAlias' in opts ? opts.doAntiAlias : true;
      if (!dart.test(src__engine.rrectIsValid(rrect))) dart.assertFailed();
      if (!(doAntiAlias != null)) dart.assertFailed();
      this[_clipRRect](rrect, doAntiAlias);
    }
    [_clipRRect](rrect, doAntiAlias) {
      this[_canvas$].clipRRect(rrect);
    }
    clipPath(path, opts) {
      let doAntiAlias = opts && 'doAntiAlias' in opts ? opts.doAntiAlias : true;
      if (!(path != null)) dart.assertFailed();
      if (!(doAntiAlias != null)) dart.assertFailed();
      this[_clipPath](path, doAntiAlias);
    }
    [_clipPath](path, doAntiAlias) {
      this[_canvas$].clipPath(path);
    }
    drawColor(color, blendMode) {
      if (!(color != null)) dart.assertFailed();
      if (!(blendMode != null)) dart.assertFailed();
      this[_drawColor](color, blendMode);
    }
    [_drawColor](color, blendMode) {
      this[_canvas$].drawColor(color, blendMode);
    }
    drawLine(p1, p2, paint) {
      if (!dart.test(src__engine.offsetIsValid(p1))) dart.assertFailed();
      if (!dart.test(src__engine.offsetIsValid(p2))) dart.assertFailed();
      if (!(paint != null)) dart.assertFailed();
      this[_drawLine](p1, p2, paint);
    }
    [_drawLine](p1, p2, paint) {
      this[_canvas$].drawLine(p1, p2, paint);
    }
    drawPaint(paint) {
      if (!(paint != null)) dart.assertFailed();
      this[_drawPaint](paint);
    }
    [_drawPaint](paint) {
      this[_canvas$].drawPaint(paint);
    }
    drawRect(rect, paint) {
      if (!dart.test(src__engine.rectIsValid(rect))) dart.assertFailed();
      if (!(paint != null)) dart.assertFailed();
      this[_drawRect](rect, paint);
    }
    [_drawRect](rect, paint) {
      this[_canvas$].drawRect(rect, paint);
    }
    drawRRect(rrect, paint) {
      if (!dart.test(src__engine.rrectIsValid(rrect))) dart.assertFailed();
      if (!(paint != null)) dart.assertFailed();
      this[_drawRRect](rrect, paint);
    }
    [_drawRRect](rrect, paint) {
      this[_canvas$].drawRRect(rrect, paint);
    }
    drawDRRect(outer, inner, paint) {
      if (!dart.test(src__engine.rrectIsValid(outer))) dart.assertFailed();
      if (!dart.test(src__engine.rrectIsValid(inner))) dart.assertFailed();
      if (!(paint != null)) dart.assertFailed();
      this[_drawDRRect](outer, inner, paint);
    }
    [_drawDRRect](outer, inner, paint) {
      this[_canvas$].drawDRRect(outer, inner, paint);
    }
    drawOval(rect, paint) {
      if (!dart.test(src__engine.rectIsValid(rect))) dart.assertFailed();
      if (!(paint != null)) dart.assertFailed();
      this[_drawOval](rect, paint);
    }
    [_drawOval](rect, paint) {
      this[_canvas$].drawOval(rect, paint);
    }
    drawCircle(c, radius, paint) {
      if (!dart.test(src__engine.offsetIsValid(c))) dart.assertFailed();
      if (!(paint != null)) dart.assertFailed();
      this[_drawCircle](c, radius, paint);
    }
    [_drawCircle](c, radius, paint) {
      this[_canvas$].drawCircle(c, radius, paint);
    }
    drawArc(rect, startAngle, sweepAngle, useCenter, paint) {
      if (!dart.test(src__engine.rectIsValid(rect))) dart.assertFailed();
      if (!(paint != null)) dart.assertFailed();
      let pi = math.pi;
      let pi2 = 2.0 * dart.notNull(pi);
      let path = new ui.Path.new();
      if (dart.test(useCenter)) {
        path.moveTo((dart.notNull(rect.left) + dart.notNull(rect.right)) / 2.0, (dart.notNull(rect.top) + dart.notNull(rect.bottom)) / 2.0);
      }
      let forceMoveTo = !dart.test(useCenter);
      if (dart.notNull(sweepAngle) <= -pi2) {
        path.arcTo(rect, startAngle, -dart.notNull(pi), forceMoveTo);
        startAngle = dart.notNull(startAngle) - dart.notNull(pi);
        path.arcTo(rect, startAngle, -dart.notNull(pi), false);
        startAngle = dart.notNull(startAngle) - dart.notNull(pi);
        forceMoveTo = false;
        sweepAngle = dart.notNull(sweepAngle) + pi2;
      }
      while (dart.notNull(sweepAngle) >= pi2) {
        path.arcTo(rect, startAngle, pi, forceMoveTo);
        startAngle = dart.notNull(startAngle) + dart.notNull(pi);
        path.arcTo(rect, startAngle, pi, false);
        startAngle = dart.notNull(startAngle) + dart.notNull(pi);
        forceMoveTo = false;
        sweepAngle = dart.notNull(sweepAngle) - pi2;
      }
      path.arcTo(rect, startAngle, sweepAngle, forceMoveTo);
      if (dart.test(useCenter)) {
        path.close();
      }
      this[_canvas$].drawPath(path, paint);
    }
    drawPath(path, paint) {
      if (!(path != null)) dart.assertFailed();
      if (!(paint != null)) dart.assertFailed();
      this[_drawPath](path, paint);
    }
    [_drawPath](path, paint) {
      this[_canvas$].drawPath(path, paint);
    }
    drawImage(image, p, paint) {
      if (!(image != null)) dart.assertFailed();
      if (!dart.test(src__engine.offsetIsValid(p))) dart.assertFailed();
      if (!(paint != null)) dart.assertFailed();
      this[_drawImage](image, p, paint);
    }
    [_drawImage](image, p, paint) {
      this[_canvas$].drawImage(image, p, paint);
    }
    drawImageRect(image, src, dst, paint) {
      if (!(image != null)) dart.assertFailed();
      if (!dart.test(src__engine.rectIsValid(src))) dart.assertFailed();
      if (!dart.test(src__engine.rectIsValid(dst))) dart.assertFailed();
      if (!(paint != null)) dart.assertFailed();
      this[_drawImageRect](image, src, dst, paint);
    }
    [_drawImageRect](image, src, dst, paint) {
      this[_canvas$].drawImageRect(image, src, dst, paint);
    }
    drawImageNine(image, center, dst, paint) {
      if (!(image != null)) dart.assertFailed();
      if (!dart.test(src__engine.rectIsValid(center))) dart.assertFailed();
      if (!dart.test(src__engine.rectIsValid(dst))) dart.assertFailed();
      if (!(paint != null)) dart.assertFailed();
      if (!(dart.notNull(image.width) - dart.notNull(center.width) >= dart.notNull(dst.width))) dart.assertFailed();
      if (!(dart.notNull(image.height) - dart.notNull(center.height) >= dart.notNull(dst.height))) dart.assertFailed();
      let srcTopLeft = new ui.Rect.fromLTWH(0.0, 0.0, center.left, center.top);
      let srcTopRight = new ui.Rect.fromLTWH(center.right, 0.0, dart.notNull(image.width) - dart.notNull(center.right), center.top);
      let srcBottomLeft = new ui.Rect.fromLTWH(0.0, center.bottom, center.left, dart.notNull(image.height) - dart.notNull(center.bottom));
      let srcBottomRight = new ui.Rect.fromLTWH(center.right, center.bottom, dart.notNull(image.width) - dart.notNull(center.right), dart.notNull(image.height) - dart.notNull(center.bottom));
      let dstTopLeft = srcTopLeft.shift(dst.topLeft);
      let dstCenter = new ui.Rect.fromLTWH(dstTopLeft.right, dstTopLeft.bottom, dart.notNull(dst.width) - (dart.notNull(srcTopLeft.width) + dart.notNull(srcTopRight.width)), dart.notNull(dst.height) - (dart.notNull(srcTopLeft.height) + dart.notNull(srcBottomLeft.height)));
      this.drawImageRect(image, srcTopLeft, dstTopLeft, paint);
      let dstTopRight = new ui.Rect.fromLTWH(dstCenter.right, dst.top, srcTopRight.width, srcTopRight.height);
      this.drawImageRect(image, srcTopRight, dstTopRight, paint);
      let dstBottomLeft = new ui.Rect.fromLTWH(dst.left, dstCenter.bottom, srcBottomLeft.width, srcBottomLeft.height);
      this.drawImageRect(image, srcBottomLeft, dstBottomLeft, paint);
      let dstBottomRight = new ui.Rect.fromLTWH(dstCenter.right, dstCenter.bottom, srcBottomRight.width, srcBottomRight.height);
      this.drawImageRect(image, srcBottomRight, dstBottomRight, paint);
      this.drawImageRect(image, new ui.Rect.fromLTRB(srcTopLeft.right, srcTopLeft.top, srcTopRight.left, srcTopRight.bottom), new ui.Rect.fromLTRB(dstTopLeft.right, dstTopLeft.top, dstTopRight.left, dstTopRight.bottom), paint);
      this.drawImageRect(image, new ui.Rect.fromLTRB(srcTopLeft.left, srcTopLeft.bottom, srcBottomLeft.right, srcBottomLeft.top), new ui.Rect.fromLTRB(dstTopLeft.left, dstTopLeft.bottom, dstBottomLeft.right, dstBottomLeft.top), paint);
      this.drawImageRect(image, center, dstCenter, paint);
      this.drawImageRect(image, new ui.Rect.fromLTRB(srcTopRight.left, srcTopRight.bottom, srcBottomRight.right, srcBottomRight.top), new ui.Rect.fromLTRB(dstTopRight.left, dstTopRight.bottom, dstBottomRight.right, dstBottomRight.top), paint);
      this.drawImageRect(image, new ui.Rect.fromLTRB(srcBottomLeft.right, srcBottomLeft.top, srcBottomRight.left, srcBottomRight.bottom), new ui.Rect.fromLTRB(dstBottomLeft.right, dstBottomLeft.top, dstBottomRight.left, dstBottomRight.bottom), paint);
    }
    drawPicture(picture) {
      if (!(picture != null)) dart.assertFailed();
      dart.throw(new core.UnimplementedError.new());
    }
    drawParagraph(paragraph, offset) {
      if (!(paragraph != null)) dart.assertFailed();
      if (!dart.test(src__engine.offsetIsValid(offset))) dart.assertFailed();
      this[_drawParagraph](paragraph, offset);
    }
    [_drawParagraph](paragraph, offset) {
      this[_canvas$].drawParagraph(paragraph, offset);
    }
    drawPoints(pointMode, points, paint) {
      if (!(pointMode != null)) dart.assertFailed();
      if (!(points != null)) dart.assertFailed();
      if (!(paint != null)) dart.assertFailed();
      dart.throw(new core.UnimplementedError.new());
    }
    drawRawPoints(pointMode, points, paint) {
      if (!(pointMode != null)) dart.assertFailed();
      if (!(points != null)) dart.assertFailed();
      if (!(paint != null)) dart.assertFailed();
      if (points[$length][$modulo](2) !== 0) dart.throw(new core.ArgumentError.new("\"points\" must have an even number of values."));
      dart.throw(new core.UnimplementedError.new());
    }
    drawVertices(vertices, blendMode, paint) {
      if (!(vertices != null)) dart.assertFailed();
      if (!(paint != null)) dart.assertFailed();
      if (!(blendMode != null)) dart.assertFailed();
      dart.throw(new core.UnimplementedError.new());
    }
    drawAtlas(atlas, transforms, rects, colors, blendMode, cullRect, paint) {
      if (!(atlas != null)) dart.assertFailed();
      if (!(transforms != null)) dart.assertFailed();
      if (!(rects != null)) dart.assertFailed();
      if (!(colors != null)) dart.assertFailed();
      if (!(blendMode != null)) dart.assertFailed();
      if (!(paint != null)) dart.assertFailed();
      let rectCount = rects[$length];
      if (transforms[$length] != rectCount) dart.throw(new core.ArgumentError.new("\"transforms\" and \"rects\" lengths must match."));
      if (dart.test(colors[$isNotEmpty]) && colors[$length] != rectCount) dart.throw(new core.ArgumentError.new("If non-null, \"colors\" length must match that of \"transforms\" and \"rects\"."));
      dart.throw(new core.UnimplementedError.new());
    }
    drawRawAtlas(atlas, rstTransforms, rects, colors, blendMode, cullRect, paint) {
      if (!(atlas != null)) dart.assertFailed();
      if (!(rstTransforms != null)) dart.assertFailed();
      if (!(rects != null)) dart.assertFailed();
      if (!(colors != null)) dart.assertFailed();
      if (!(blendMode != null)) dart.assertFailed();
      if (!(paint != null)) dart.assertFailed();
      let rectCount = rects[$length];
      if (rstTransforms[$length] != rectCount) dart.throw(new core.ArgumentError.new("\"rstTransforms\" and \"rects\" lengths must match."));
      if (rectCount[$modulo](4) !== 0) dart.throw(new core.ArgumentError.new("\"rstTransforms\" and \"rects\" lengths must be a multiple of four."));
      if (colors != null && dart.notNull(colors[$length]) * 4 !== rectCount) dart.throw(new core.ArgumentError.new("If non-null, \"colors\" length must be one fourth the length of \"rstTransforms\" and \"rects\"."));
      dart.throw(new core.UnimplementedError.new());
    }
    drawShadow(path, color, elevation, transparentOccluder) {
      if (!(path != null)) dart.assertFailed();
      if (!(color != null)) dart.assertFailed();
      if (!(transparentOccluder != null)) dart.assertFailed();
      this[_canvas$].drawShadow(path, color, elevation, transparentOccluder);
    }
  };
  (ui.Canvas.new = function(recorder, cullRect) {
    if (cullRect === void 0) cullRect = null;
    this[_canvas$] = null;
    if (!(recorder != null)) dart.assertFailed();
    if (dart.test(recorder.isRecording)) dart.throw(new core.ArgumentError.new("\"recorder\" must not already be associated with another Canvas."));
    cullRect == null ? cullRect = ui.Rect.largest : null;
    this[_canvas$] = recorder.beginRecording(cullRect);
  }).prototype = ui.Canvas.prototype;
  dart.addTypeTests(ui.Canvas);
  dart.setMethodSignature(ui.Canvas, () => ({
    __proto__: dart.getMethods(ui.Canvas.__proto__),
    save: dart.fnType(dart.void, []),
    saveLayer: dart.fnType(dart.void, [ui.Rect, ui.Paint]),
    [_saveLayerWithoutBounds]: dart.fnType(dart.void, [ui.Paint]),
    [_saveLayer]: dart.fnType(dart.void, [ui.Rect, ui.Paint]),
    restore: dart.fnType(dart.void, []),
    getSaveCount: dart.fnType(core.int, []),
    translate: dart.fnType(dart.void, [core.double, core.double]),
    scale: dart.fnType(dart.void, [core.double], [core.double]),
    [_scale]: dart.fnType(dart.void, [core.double, core.double]),
    rotate: dart.fnType(dart.void, [core.double]),
    skew: dart.fnType(dart.void, [core.double, core.double]),
    transform: dart.fnType(dart.void, [typed_data.Float64List]),
    [_transform]: dart.fnType(dart.void, [typed_data.Float64List]),
    clipRect: dart.fnType(dart.void, [ui.Rect], {clipOp: ui.ClipOp, doAntiAlias: core.bool}),
    [_clipRect]: dart.fnType(dart.void, [ui.Rect, ui.ClipOp, core.bool]),
    clipRRect: dart.fnType(dart.void, [ui.RRect], {doAntiAlias: core.bool}),
    [_clipRRect]: dart.fnType(dart.void, [ui.RRect, core.bool]),
    clipPath: dart.fnType(dart.void, [ui.Path], {doAntiAlias: core.bool}),
    [_clipPath]: dart.fnType(dart.void, [ui.Path, core.bool]),
    drawColor: dart.fnType(dart.void, [ui.Color, ui.BlendMode]),
    [_drawColor]: dart.fnType(dart.void, [ui.Color, ui.BlendMode]),
    drawLine: dart.fnType(dart.void, [ui.Offset, ui.Offset, ui.Paint]),
    [_drawLine]: dart.fnType(dart.void, [ui.Offset, ui.Offset, ui.Paint]),
    drawPaint: dart.fnType(dart.void, [ui.Paint]),
    [_drawPaint]: dart.fnType(dart.void, [ui.Paint]),
    drawRect: dart.fnType(dart.void, [ui.Rect, ui.Paint]),
    [_drawRect]: dart.fnType(dart.void, [ui.Rect, ui.Paint]),
    drawRRect: dart.fnType(dart.void, [ui.RRect, ui.Paint]),
    [_drawRRect]: dart.fnType(dart.void, [ui.RRect, ui.Paint]),
    drawDRRect: dart.fnType(dart.void, [ui.RRect, ui.RRect, ui.Paint]),
    [_drawDRRect]: dart.fnType(dart.void, [ui.RRect, ui.RRect, ui.Paint]),
    drawOval: dart.fnType(dart.void, [ui.Rect, ui.Paint]),
    [_drawOval]: dart.fnType(dart.void, [ui.Rect, ui.Paint]),
    drawCircle: dart.fnType(dart.void, [ui.Offset, core.double, ui.Paint]),
    [_drawCircle]: dart.fnType(dart.void, [ui.Offset, core.double, ui.Paint]),
    drawArc: dart.fnType(dart.void, [ui.Rect, core.double, core.double, core.bool, ui.Paint]),
    drawPath: dart.fnType(dart.void, [ui.Path, ui.Paint]),
    [_drawPath]: dart.fnType(dart.void, [ui.Path, ui.Paint]),
    drawImage: dart.fnType(dart.void, [ui.Image, ui.Offset, ui.Paint]),
    [_drawImage]: dart.fnType(dart.void, [ui.Image, ui.Offset, ui.Paint]),
    drawImageRect: dart.fnType(dart.void, [ui.Image, ui.Rect, ui.Rect, ui.Paint]),
    [_drawImageRect]: dart.fnType(dart.void, [ui.Image, ui.Rect, ui.Rect, ui.Paint]),
    drawImageNine: dart.fnType(dart.void, [ui.Image, ui.Rect, ui.Rect, ui.Paint]),
    drawPicture: dart.fnType(dart.void, [ui.Picture]),
    drawParagraph: dart.fnType(dart.void, [ui.Paragraph, ui.Offset]),
    [_drawParagraph]: dart.fnType(dart.void, [ui.Paragraph, ui.Offset]),
    drawPoints: dart.fnType(dart.void, [ui.PointMode, core.List$(ui.Offset), ui.Paint]),
    drawRawPoints: dart.fnType(dart.void, [ui.PointMode, typed_data.Float32List, ui.Paint]),
    drawVertices: dart.fnType(dart.void, [ui.Vertices, ui.BlendMode, ui.Paint]),
    drawAtlas: dart.fnType(dart.void, [ui.Image, core.List$(ui.RSTransform), core.List$(ui.Rect), core.List$(ui.Color), ui.BlendMode, ui.Rect, ui.Paint]),
    drawRawAtlas: dart.fnType(dart.void, [ui.Image, typed_data.Float32List, typed_data.Float32List, typed_data.Int32List, ui.BlendMode, ui.Rect, ui.Paint]),
    drawShadow: dart.fnType(dart.void, [ui.Path, ui.Color, core.double, core.bool])
  }));
  dart.setFieldSignature(ui.Canvas, () => ({
    __proto__: dart.getFields(ui.Canvas.__proto__),
    [_canvas$]: dart.fieldType(src__engine.RecordingCanvas)
  }));
  ui.Picture = class Picture extends core.Object {
    get recordingCanvas() {
      return this[recordingCanvas$];
    }
    set recordingCanvas(value) {
      super.recordingCanvas = value;
    }
    get cullRect() {
      return this[cullRect$];
    }
    set cullRect(value) {
      super.cullRect = value;
    }
    toImage(width, height) {
      return null;
    }
    dispose() {
    }
    get approximateBytesUsed() {
      return 0;
    }
  };
  (ui.Picture.__ = function(recordingCanvas, cullRect) {
    this[recordingCanvas$] = recordingCanvas;
    this[cullRect$] = cullRect;
    ;
  }).prototype = ui.Picture.prototype;
  dart.addTypeTests(ui.Picture);
  const recordingCanvas$ = Symbol("Picture.recordingCanvas");
  const cullRect$ = Symbol("Picture.cullRect");
  dart.setMethodSignature(ui.Picture, () => ({
    __proto__: dart.getMethods(ui.Picture.__proto__),
    toImage: dart.fnType(ui.Image, [core.int, core.int]),
    dispose: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(ui.Picture, () => ({
    __proto__: dart.getGetters(ui.Picture.__proto__),
    approximateBytesUsed: core.int
  }));
  dart.setFieldSignature(ui.Picture, () => ({
    __proto__: dart.getFields(ui.Picture.__proto__),
    recordingCanvas: dart.finalFieldType(src__engine.RecordingCanvas),
    cullRect: dart.finalFieldType(ui.Rect)
  }));
  ui.PathFillType = class PathFillType extends core.Object {
    toString() {
      return this[_name$0];
    }
  };
  (ui.PathFillType.new = function(index, _name) {
    this.index = index;
    this[_name$0] = _name;
    ;
  }).prototype = ui.PathFillType.prototype;
  dart.addTypeTests(ui.PathFillType);
  dart.setFieldSignature(ui.PathFillType, () => ({
    __proto__: dart.getFields(ui.PathFillType.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$0]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(ui.PathFillType, ['toString']);
  ui.PathFillType.nonZero = dart.const(new ui.PathFillType.new(0, "PathFillType.nonZero"));
  ui.PathFillType.evenOdd = dart.const(new ui.PathFillType.new(1, "PathFillType.evenOdd"));
  ui.PathFillType.values = dart.constList([ui.PathFillType.nonZero, ui.PathFillType.evenOdd], ui.PathFillType);
  ui.PathOperation = class PathOperation extends core.Object {
    toString() {
      return this[_name$0];
    }
  };
  (ui.PathOperation.new = function(index, _name) {
    this.index = index;
    this[_name$0] = _name;
    ;
  }).prototype = ui.PathOperation.prototype;
  dart.addTypeTests(ui.PathOperation);
  dart.setFieldSignature(ui.PathOperation, () => ({
    __proto__: dart.getFields(ui.PathOperation.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$0]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(ui.PathOperation, ['toString']);
  ui.PathOperation.difference = dart.const(new ui.PathOperation.new(0, "PathOperation.difference"));
  ui.PathOperation.intersect = dart.const(new ui.PathOperation.new(1, "PathOperation.intersect"));
  ui.PathOperation.union = dart.const(new ui.PathOperation.new(2, "PathOperation.union"));
  ui.PathOperation.xor = dart.const(new ui.PathOperation.new(3, "PathOperation.xor"));
  ui.PathOperation.reverseDifference = dart.const(new ui.PathOperation.new(4, "PathOperation.reverseDifference"));
  ui.PathOperation.values = dart.constList([ui.PathOperation.difference, ui.PathOperation.intersect, ui.PathOperation.union, ui.PathOperation.xor, ui.PathOperation.reverseDifference], ui.PathOperation);
  const _currentSubpath = dart.privateName(ui, "_currentSubpath");
  const _commands$ = dart.privateName(ui, "_commands");
  const _currentX = dart.privateName(ui, "_currentX");
  const _currentY = dart.privateName(ui, "_currentY");
  const _setCurrentPoint = dart.privateName(ui, "_setCurrentPoint");
  const _openNewSubpath = dart.privateName(ui, "_openNewSubpath");
  const _ensurePathStarted = dart.privateName(ui, "_ensurePathStarted");
  const _addPathWithMatrix = dart.privateName(ui, "_addPathWithMatrix");
  const _addPath = dart.privateName(ui, "_addPath");
  const _extendWithPathAndMatrix = dart.privateName(ui, "_extendWithPathAndMatrix");
  const _extendWithPath = dart.privateName(ui, "_extendWithPath");
  ui.Path = class Path extends core.Object {
    get subpaths() {
      return this[subpaths$];
    }
    set subpaths(value) {
      super.subpaths = value;
    }
    get fillType() {
      return this[fillType$];
    }
    set fillType(value) {
      this[fillType$] = value;
    }
    get [_currentSubpath]() {
      return dart.test(this.subpaths[$isEmpty]) ? null : this.subpaths[$last];
    }
    get [_commands$]() {
      let t4;
      t4 = this[_currentSubpath];
      return t4 == null ? null : t4.commands;
    }
    get [_currentX]() {
      let t4, t4$;
      t4$ = (t4 = this[_currentSubpath], t4 == null ? null : t4.currentX);
      return t4$ == null ? 0.0 : t4$;
    }
    get [_currentY]() {
      let t4, t4$;
      t4$ = (t4 = this[_currentSubpath], t4 == null ? null : t4.currentY);
      return t4$ == null ? 0.0 : t4$;
    }
    [_openNewSubpath](x, y) {
      this.subpaths[$add](new src__engine.Subpath.new(x, y));
      this[_setCurrentPoint](x, y);
    }
    [_setCurrentPoint](x, y) {
      this[_currentSubpath].currentX = x;
      this[_currentSubpath].currentY = y;
    }
    moveTo(x, y) {
      this[_openNewSubpath](x, y);
      this[_commands$][$add](new src__engine.MoveTo.new(x, y));
    }
    relativeMoveTo(dx, dy) {
      let newX = dart.notNull(this[_currentX]) + dart.notNull(dx);
      let newY = dart.notNull(this[_currentY]) + dart.notNull(dy);
      this[_openNewSubpath](newX, newY);
      this[_commands$][$add](new src__engine.MoveTo.new(newX, newY));
    }
    lineTo(x, y) {
      this[_commands$][$add](new src__engine.LineTo.new(x, y));
      this[_setCurrentPoint](x, y);
    }
    relativeLineTo(dx, dy) {
      let newX = dart.notNull(this[_currentX]) + dart.notNull(dx);
      let newY = dart.notNull(this[_currentY]) + dart.notNull(dy);
      this[_ensurePathStarted]();
      this[_commands$][$add](new src__engine.LineTo.new(newX, newY));
      this[_setCurrentPoint](newX, newY);
    }
    [_ensurePathStarted]() {
      if (dart.test(this.subpaths[$isEmpty])) this.subpaths[$add](new src__engine.Subpath.new(0.0, 0.0));
    }
    quadraticBezierTo(x1, y1, x2, y2) {
      this[_ensurePathStarted]();
      this[_commands$][$add](new src__engine.QuadraticCurveTo.new(x1, y1, x2, y2));
      this[_setCurrentPoint](x2, y2);
    }
    relativeQuadraticBezierTo(x1, y1, x2, y2) {
      this[_ensurePathStarted]();
      this[_commands$][$add](new src__engine.QuadraticCurveTo.new(dart.notNull(x1) + dart.notNull(this[_currentX]), dart.notNull(y1) + dart.notNull(this[_currentY]), dart.notNull(x2) + dart.notNull(this[_currentX]), dart.notNull(y2) + dart.notNull(this[_currentY])));
      this[_setCurrentPoint](dart.notNull(x2) + dart.notNull(this[_currentX]), dart.notNull(y2) + dart.notNull(this[_currentY]));
    }
    cubicTo(x1, y1, x2, y2, x3, y3) {
      this[_ensurePathStarted]();
      this[_commands$][$add](new src__engine.BezierCurveTo.new(x1, y1, x2, y2, x3, y3));
      this[_setCurrentPoint](x3, y3);
    }
    relativeCubicTo(x1, y1, x2, y2, x3, y3) {
      this[_ensurePathStarted]();
      this[_commands$][$add](new src__engine.BezierCurveTo.new(dart.notNull(x1) + dart.notNull(this[_currentX]), dart.notNull(y1) + dart.notNull(this[_currentY]), dart.notNull(x2) + dart.notNull(this[_currentX]), dart.notNull(y2) + dart.notNull(this[_currentY]), dart.notNull(x3) + dart.notNull(this[_currentX]), dart.notNull(y3) + dart.notNull(this[_currentY])));
      this[_setCurrentPoint](dart.notNull(x3) + dart.notNull(this[_currentX]), dart.notNull(y3) + dart.notNull(this[_currentY]));
    }
    conicTo(x1, y1, x2, y2, w) {
      let quads = new src__engine.Conic.new(this[_currentX], this[_currentY], x1, y1, x2, y2, w).toQuads();
      for (let i = 1, len = quads[$length]; i < dart.notNull(len); i = i + 2) {
        this.quadraticBezierTo(quads[$_get](i).dx, quads[$_get](i).dy, quads[$_get](i + 1).dx, quads[$_get](i + 1).dy);
      }
    }
    relativeConicTo(x1, y1, x2, y2, w) {
      this.conicTo(dart.notNull(this[_currentX]) + dart.notNull(x1), dart.notNull(this[_currentY]) + dart.notNull(y1), dart.notNull(this[_currentX]) + dart.notNull(x2), dart.notNull(this[_currentY]) + dart.notNull(y2), w);
    }
    arcTo(rect, startAngle, sweepAngle, forceMoveTo) {
      if (!dart.test(src__engine.rectIsValid(rect))) dart.assertFailed();
      let center = rect.center;
      let radiusX = dart.notNull(rect.width) / 2;
      let radiusY = dart.notNull(rect.height) / 2;
      let startX = radiusX * math.cos(startAngle) + dart.notNull(center.dx);
      let startY = radiusY * math.sin(startAngle) + dart.notNull(center.dy);
      if (dart.test(forceMoveTo)) {
        this[_openNewSubpath](startX, startY);
      } else {
        this.lineTo(startX, startY);
      }
      this[_commands$][$add](new src__engine.Ellipse.new(center.dx, center.dy, radiusX, radiusY, 0.0, startAngle, dart.notNull(startAngle) + dart.notNull(sweepAngle), sweepAngle[$isNegative]));
      this[_setCurrentPoint](radiusX * math.cos(dart.notNull(startAngle) + dart.notNull(sweepAngle)) + dart.notNull(center.dx), radiusY * math.sin(dart.notNull(startAngle) + dart.notNull(sweepAngle)) + dart.notNull(center.dy));
    }
    arcToPoint(arcEnd, opts) {
      let radius = opts && 'radius' in opts ? opts.radius : ui.Radius.zero;
      let rotation = opts && 'rotation' in opts ? opts.rotation : 0.0;
      let largeArc = opts && 'largeArc' in opts ? opts.largeArc : false;
      let clockwise = opts && 'clockwise' in opts ? opts.clockwise : true;
      if (!dart.test(src__engine.offsetIsValid(arcEnd))) dart.assertFailed();
      if (!dart.test(src__engine.radiusIsValid(radius))) dart.assertFailed();
      let rx = radius.x[$abs]();
      let ry = radius.y[$abs]();
      let isSamePoint = this[_currentX] == arcEnd.dx && this[_currentY] == arcEnd.dy;
      if (isSamePoint || rx[$toInt]() === 0 || ry[$toInt]() === 0) {
        this[_commands$][$add](new src__engine.LineTo.new(arcEnd.dx, arcEnd.dy));
        this[_setCurrentPoint](arcEnd.dx, arcEnd.dy);
        return;
      }
      let midPointX = (dart.notNull(this[_currentX]) - dart.notNull(arcEnd.dx)) / 2.0;
      let midPointY = (dart.notNull(this[_currentY]) - dart.notNull(arcEnd.dy)) / 2.0;
      let xAxisRotation = dart.notNull(math.pi) * dart.notNull(rotation) / 180.0;
      let cosXAxisRotation = math.cos(xAxisRotation);
      let sinXAxisRotation = math.sin(xAxisRotation);
      let xPrime = cosXAxisRotation * midPointX + sinXAxisRotation * midPointY;
      let yPrime = -sinXAxisRotation * midPointX + cosXAxisRotation * midPointY;
      let rxSquare = rx * rx;
      let rySquare = ry * ry;
      let xPrimeSquare = xPrime * xPrime;
      let yPrimeSquare = yPrime * yPrime;
      let radiiScale = xPrimeSquare / rxSquare + yPrimeSquare / rySquare;
      if (radiiScale > 1) {
        radiiScale = math.sqrt(radiiScale);
        rx = rx * radiiScale;
        ry = ry * radiiScale;
        rxSquare = rx * rx;
        rySquare = ry * ry;
      }
      let distanceSquare = rxSquare * yPrimeSquare + rySquare * xPrimeSquare;
      let cNumerator = rxSquare * rySquare - distanceSquare;
      let scaleFactor = math.sqrt(math.max(core.num, cNumerator / distanceSquare, 0.0));
      if (dart.equals(largeArc, clockwise)) scaleFactor = -scaleFactor;
      let cxPrime = scaleFactor * (rx * yPrime / ry);
      let cyPrime = scaleFactor * (-(ry * xPrime) / rx);
      let cx = cosXAxisRotation * cxPrime - sinXAxisRotation * cyPrime + (dart.notNull(this[_currentX]) + dart.notNull(arcEnd.dx)) / 2.0;
      let cy = sinXAxisRotation * cxPrime + cosXAxisRotation * cyPrime + (dart.notNull(this[_currentY]) + dart.notNull(arcEnd.dy)) / 2.0;
      let startVectorX = (xPrime - cxPrime) / rx;
      let startVectorY = (yPrime - cyPrime) / ry;
      let startAngle = math.atan2(startVectorY, startVectorX);
      let endVectorX = (-xPrime - cxPrime) / rx;
      let endVectorY = (-yPrime - cyPrime) / ry;
      let sweepAngle = math.atan2(endVectorY, endVectorX) - startAngle;
      if (dart.test(clockwise) && sweepAngle < 0) {
        sweepAngle = sweepAngle + dart.notNull(math.pi) * 2.0;
      } else if (!dart.test(clockwise) && sweepAngle > 0) {
        sweepAngle = sweepAngle - dart.notNull(math.pi) * 2.0;
      }
      this[_commands$][$add](new src__engine.Ellipse.new(cx, cy, rx, ry, xAxisRotation, startAngle, startAngle + sweepAngle, sweepAngle[$isNegative]));
      this[_setCurrentPoint](arcEnd.dx, arcEnd.dy);
    }
    relativeArcToPoint(arcEndDelta, opts) {
      let radius = opts && 'radius' in opts ? opts.radius : ui.Radius.zero;
      let rotation = opts && 'rotation' in opts ? opts.rotation : 0.0;
      let largeArc = opts && 'largeArc' in opts ? opts.largeArc : false;
      let clockwise = opts && 'clockwise' in opts ? opts.clockwise : true;
      if (!dart.test(src__engine.offsetIsValid(arcEndDelta))) dart.assertFailed();
      if (!dart.test(src__engine.radiusIsValid(radius))) dart.assertFailed();
      this.arcToPoint(new ui.Offset.new(dart.notNull(this[_currentX]) + dart.notNull(arcEndDelta.dx), dart.notNull(this[_currentY]) + dart.notNull(arcEndDelta.dy)), {radius: radius, rotation: rotation, largeArc: largeArc, clockwise: clockwise});
    }
    addRect(rect) {
      if (!dart.test(src__engine.rectIsValid(rect))) dart.assertFailed();
      this[_openNewSubpath](rect.left, rect.top);
      this[_commands$][$add](new src__engine.RectCommand.new(rect.left, rect.top, rect.width, rect.height));
    }
    addOval(oval) {
      if (!dart.test(src__engine.rectIsValid(oval))) dart.assertFailed();
      let center = oval.center;
      let radiusX = dart.notNull(oval.width) / 2;
      let radiusY = dart.notNull(oval.height) / 2;
      this[_openNewSubpath](dart.notNull(center.dx) + radiusX, center.dy);
      this[_commands$][$add](new src__engine.Ellipse.new(center.dx, center.dy, radiusX, radiusY, 0.0, 0.0, 2 * dart.notNull(math.pi), false));
    }
    addArc(oval, startAngle, sweepAngle) {
      if (!dart.test(src__engine.rectIsValid(oval))) dart.assertFailed();
      let center = oval.center;
      let radiusX = dart.notNull(oval.width) / 2;
      let radiusY = dart.notNull(oval.height) / 2;
      this[_openNewSubpath](radiusX * math.cos(startAngle) + dart.notNull(center.dx), radiusY * math.sin(startAngle) + dart.notNull(center.dy));
      this[_commands$][$add](new src__engine.Ellipse.new(center.dx, center.dy, radiusX, radiusY, 0.0, startAngle, dart.notNull(startAngle) + dart.notNull(sweepAngle), sweepAngle[$isNegative]));
      this[_setCurrentPoint](radiusX * math.cos(dart.notNull(startAngle) + dart.notNull(sweepAngle)) + dart.notNull(center.dx), radiusY * math.sin(dart.notNull(startAngle) + dart.notNull(sweepAngle)) + dart.notNull(center.dy));
    }
    addPolygon(points, close) {
      if (!(points != null)) dart.assertFailed();
      if (dart.test(points[$isEmpty])) return;
      this.moveTo(points[$first].dx, points[$first].dy);
      for (let i = 1; i < dart.notNull(points[$length]); i = i + 1) {
        let point = points[$_get](i);
        this.lineTo(point.dx, point.dy);
      }
      if (dart.test(close)) {
        this.close();
      } else {
        this[_setCurrentPoint](points[$last].dx, points[$last].dy);
      }
    }
    addRRect(rrect) {
      if (!dart.test(src__engine.rrectIsValid(rrect))) dart.assertFailed();
      this[_openNewSubpath](rrect.tallMiddleRect.left, rrect.top);
      this[_commands$][$add](new src__engine.RRectCommand.new(rrect));
    }
    addPath(path, offset, opts) {
      let matrix4 = opts && 'matrix4' in opts ? opts.matrix4 : null;
      if (!(path != null)) dart.assertFailed();
      if (!dart.test(src__engine.offsetIsValid(offset))) dart.assertFailed();
      if (matrix4 != null) {
        if (!dart.test(src__engine.matrix4IsValid(matrix4))) dart.assertFailed();
        this[_addPathWithMatrix](path, offset.dx, offset.dy, matrix4);
      } else {
        this[_addPath](path, offset.dx, offset.dy);
      }
    }
    [_addPath](path, dx, dy) {
      if (dx === 0.0 && dy === 0.0) {
        this.subpaths[$addAll](path.subpaths);
      } else {
        dart.throw(new core.UnimplementedError.new("Cannot add path with non-zero offset"));
      }
    }
    [_addPathWithMatrix](path, dx, dy, matrix) {
      dart.throw(new core.UnimplementedError.new("Cannot add path with transform matrix"));
    }
    extendWithPath(path, offset, opts) {
      let matrix4 = opts && 'matrix4' in opts ? opts.matrix4 : null;
      if (!(path != null)) dart.assertFailed();
      if (!dart.test(src__engine.offsetIsValid(offset))) dart.assertFailed();
      if (matrix4 != null) {
        if (!dart.test(src__engine.matrix4IsValid(matrix4))) dart.assertFailed();
        this[_extendWithPathAndMatrix](path, offset.dx, offset.dy, matrix4);
      } else {
        this[_extendWithPath](path, offset.dx, offset.dy);
      }
    }
    [_extendWithPath](path, dx, dy) {
      if (dx === 0.0 && dy === 0.0) {
        if (!(path.subpaths[$length] === 1)) dart.assertFailed();
        this[_ensurePathStarted]();
        this[_commands$][$addAll](path.subpaths[$single].commands);
        this[_setCurrentPoint](path.subpaths[$single].currentX, path.subpaths[$single].currentY);
      } else {
        dart.throw(new core.UnimplementedError.new("Cannot extend path with non-zero offset"));
      }
    }
    [_extendWithPathAndMatrix](path, dx, dy, matrix) {
      dart.throw(new core.UnimplementedError.new("Cannot extend path with transform matrix"));
    }
    close() {
      this[_ensurePathStarted]();
      this[_commands$][$add](new src__engine.CloseCommand.new());
      this[_setCurrentPoint](this[_currentSubpath].startX, this[_currentSubpath].startY);
    }
    reset() {
      this.subpaths[$clear]();
    }
    contains(point) {
      let t4;
      if (!dart.test(src__engine.offsetIsValid(point))) dart.assertFailed();
      let subPathCount = this.subpaths[$length];
      if (subPathCount === 0) return false;
      let pointX = point.dx;
      let pointY = point.dy;
      if (subPathCount === 1) {
        let subPath = this.subpaths[$_get](0);
        if (subPath.commands[$length] === 1) {
          let cmd = subPath.commands[$_get](0);
          if (src__engine.RectCommand.is(cmd)) {
            if (dart.notNull(pointY) < dart.notNull(cmd.y) || dart.notNull(pointY) > dart.notNull(cmd.y) + dart.notNull(cmd.height)) return false;
            if (dart.notNull(pointX) < dart.notNull(cmd.x) || dart.notNull(pointX) > dart.notNull(cmd.x) + dart.notNull(cmd.width)) return false;
            return true;
          } else if (src__engine.RRectCommand.is(cmd)) {
            let rRect = cmd.rrect;
            if (dart.notNull(pointY) < dart.notNull(rRect.top) || dart.notNull(pointY) > dart.notNull(rRect.bottom)) return false;
            if (dart.notNull(pointX) < dart.notNull(rRect.left) || dart.notNull(pointX) > dart.notNull(rRect.right)) return false;
            if (dart.notNull(pointX) < dart.notNull(rRect.left) + dart.notNull(rRect.tlRadiusX) && dart.notNull(pointY) < dart.notNull(rRect.top) + dart.notNull(rRect.tlRadiusY)) {
              return ui._ellipseContains(pointX, pointY, dart.notNull(rRect.left) + dart.notNull(rRect.tlRadiusX), dart.notNull(rRect.top) + dart.notNull(rRect.tlRadiusY), rRect.tlRadiusX, rRect.tlRadiusY);
            } else if (dart.notNull(pointX) >= dart.notNull(rRect.right) - dart.notNull(rRect.trRadiusX) && dart.notNull(pointY) < dart.notNull(rRect.top) + dart.notNull(rRect.trRadiusY)) {
              return ui._ellipseContains(pointX, pointY, dart.notNull(rRect.right) - dart.notNull(rRect.trRadiusX), dart.notNull(rRect.top) + dart.notNull(rRect.trRadiusY), rRect.trRadiusX, rRect.trRadiusY);
            } else if (dart.notNull(pointX) >= dart.notNull(rRect.right) - dart.notNull(rRect.brRadiusX) && dart.notNull(pointY) >= dart.notNull(rRect.bottom) - dart.notNull(rRect.brRadiusY)) {
              return ui._ellipseContains(pointX, pointY, dart.notNull(rRect.right) - dart.notNull(rRect.brRadiusX), dart.notNull(rRect.bottom) - dart.notNull(rRect.brRadiusY), rRect.trRadiusX, rRect.trRadiusY);
            } else if (dart.notNull(pointX) < dart.notNull(rRect.left) + dart.notNull(rRect.blRadiusX) && dart.notNull(pointY) >= dart.notNull(rRect.bottom) - dart.notNull(rRect.blRadiusY)) {
              return ui._ellipseContains(pointX, pointY, dart.notNull(rRect.left) + dart.notNull(rRect.blRadiusX), dart.notNull(rRect.bottom) - dart.notNull(rRect.blRadiusY), rRect.trRadiusX, rRect.trRadiusY);
            }
            return true;
          }
        }
      }
      let size = ui.window.physicalSize['/'](ui.window.devicePixelRatio);
      ui.Path._rawRecorder == null ? ui.Path._rawRecorder = new ui.RawRecordingCanvas.new(size) : null;
      ui.Path._rawRecorder.translate(-src__engine.BitmapCanvas.paddingPixels[$toDouble](), -src__engine.BitmapCanvas.paddingPixels[$toDouble]());
      ui.Path._rawRecorder.drawPath(this, (t4 = new ui.Paint.new(), t4.color = new ui.Color.new(4278190080), t4).webOnlyPaintData);
      let result = ui.Path._rawRecorder.ctx.isPointInPath(pointX, pointY);
      ui.Path._rawRecorder.dispose();
      return result;
    }
    shift(offset) {
      if (!dart.test(src__engine.offsetIsValid(offset))) dart.assertFailed();
      let shiftedSubpaths = JSArrayOfSubpath().of([]);
      for (let subpath of this.subpaths) {
        shiftedSubpaths[$add](subpath.shift(offset));
      }
      return new ui.Path._clone(shiftedSubpaths, this.fillType);
    }
    transform(matrix4) {
      if (!dart.test(src__engine.matrix4IsValid(matrix4))) dart.assertFailed();
      dart.throw(new core.UnimplementedError.new());
    }
    getBounds() {
      let epsilon = 1e-9;
      let ltrbInitialized = false;
      let left = 0.0;
      let top = 0.0;
      let right = 0.0;
      let bottom = 0.0;
      let curX = 0.0;
      let curY = 0.0;
      let minX = 0.0;
      let maxX = 0.0;
      let minY = 0.0;
      let maxY = 0.0;
      for (let subpath of this.subpaths) {
        for (let op of subpath.commands) {
          let skipBounds = false;
          switch (op.type) {
            case src__engine.PathCommandTypes.moveTo:
            {
              let cmd = src__engine.MoveTo._check(op);
              curX = minX = maxX = cmd.x;
              curY = minY = maxY = cmd.y;
              break;
            }
            case src__engine.PathCommandTypes.lineTo:
            {
              let cmd = src__engine.LineTo._check(op);
              curX = minX = maxX = cmd.x;
              curY = minY = maxY = cmd.y;
              break;
            }
            case src__engine.PathCommandTypes.ellipse:
            {
              let cmd = src__engine.Ellipse._check(op);
              let rx = cmd.radiusX;
              let ry = cmd.radiusY;
              let cosVal = math.cos(cmd.rotation);
              let sinVal = math.sin(cmd.rotation);
              let rxCos = dart.notNull(rx) * cosVal;
              let ryCos = dart.notNull(ry) * cosVal;
              let rxSin = dart.notNull(rx) * sinVal;
              let rySin = dart.notNull(ry) * sinVal;
              let leftDeltaX = rxCos - rySin;
              let rightDeltaX = -rxCos - rySin;
              let topDeltaY = ryCos + rxSin;
              let bottomDeltaY = ryCos - rxSin;
              let centerX = cmd.x;
              let centerY = cmd.y;
              let rotatedX = dart.notNull(centerX) + leftDeltaX;
              let rotatedY = dart.notNull(centerY) + topDeltaY;
              minX = maxX = rotatedX;
              minY = maxY = rotatedY;
              rotatedX = dart.notNull(centerX) + rightDeltaX;
              rotatedY = dart.notNull(centerY) + bottomDeltaY;
              minX = math.min(core.double, minX, rotatedX);
              maxX = math.max(core.double, maxX, rotatedX);
              minY = math.min(core.double, minY, rotatedY);
              maxY = math.max(core.double, maxY, rotatedY);
              rotatedX = dart.notNull(centerX) - leftDeltaX;
              rotatedY = dart.notNull(centerY) - topDeltaY;
              minX = math.min(core.double, minX, rotatedX);
              maxX = math.max(core.double, maxX, rotatedX);
              minY = math.min(core.double, minY, rotatedY);
              maxY = math.max(core.double, maxY, rotatedY);
              rotatedX = dart.notNull(centerX) - rightDeltaX;
              rotatedY = dart.notNull(centerY) - bottomDeltaY;
              minX = math.min(core.double, minX, rotatedX);
              maxX = math.max(core.double, maxX, rotatedX);
              minY = math.min(core.double, minY, rotatedY);
              maxY = math.max(core.double, maxY, rotatedY);
              curX = dart.notNull(centerX) + dart.notNull(cmd.radiusX);
              curY = centerY;
              break;
            }
            case src__engine.PathCommandTypes.quadraticCurveTo:
            {
              let cmd = src__engine.QuadraticCurveTo._check(op);
              let x1 = curX;
              let y1 = curY;
              let cpX = cmd.x1;
              let cpY = cmd.y1;
              let x2 = cmd.x2;
              let y2 = cmd.y2;
              minX = math.min(core.double, x1, x2);
              minY = math.min(core.double, y1, y2);
              maxX = math.max(core.double, x1, x2);
              maxY = math.max(core.double, y1, y2);
              let denom = dart.notNull(x1) - 2 * dart.notNull(cpX) + dart.notNull(x2);
              if (denom[$abs]() > epsilon) {
                let t1 = (dart.notNull(x1) - dart.notNull(cpX)) / denom;
                if (t1 >= 0 && t1 <= 1.0) {
                  let tprime = 1.0 - t1;
                  let extremaX = tprime * tprime * dart.notNull(x1) + 2 * t1 * tprime * dart.notNull(cpX) + t1 * t1 * dart.notNull(x2);
                  let extremaY = tprime * tprime * dart.notNull(y1) + 2 * t1 * tprime * dart.notNull(cpY) + t1 * t1 * dart.notNull(y2);
                  minX = math.min(core.double, minX, extremaX);
                  maxX = math.max(core.double, maxX, extremaX);
                  minY = math.min(core.double, minY, extremaY);
                  maxY = math.max(core.double, maxY, extremaY);
                }
              }
              denom = dart.notNull(y1) - 2 * dart.notNull(cpY) + dart.notNull(y2);
              if (denom[$abs]() > epsilon) {
                let t2 = (dart.notNull(y1) - dart.notNull(cpY)) / denom;
                if (t2 >= 0 && t2 <= 1.0) {
                  let tprime2 = 1.0 - t2;
                  let extrema2X = tprime2 * tprime2 * dart.notNull(x1) + 2 * t2 * tprime2 * dart.notNull(cpX) + t2 * t2 * dart.notNull(x2);
                  let extrema2Y = tprime2 * tprime2 * dart.notNull(y1) + 2 * t2 * tprime2 * dart.notNull(cpY) + t2 * t2 * dart.notNull(y2);
                  minX = math.min(core.double, minX, extrema2X);
                  maxX = math.max(core.double, maxX, extrema2X);
                  minY = math.min(core.double, minY, extrema2Y);
                  maxY = math.max(core.double, maxY, extrema2Y);
                }
              }
              curX = x2;
              curY = y2;
              break;
            }
            case src__engine.PathCommandTypes.bezierCurveTo:
            {
              let cmd = src__engine.BezierCurveTo._check(op);
              let startX = curX;
              let startY = curY;
              let cpX1 = cmd.x1;
              let cpY1 = cmd.y1;
              let cpX2 = cmd.x2;
              let cpY2 = cmd.y2;
              let endX = cmd.x3;
              let endY = cmd.y3;
              minX = math.min(core.double, startX, endX);
              minY = math.min(core.double, startY, endY);
              maxX = math.max(core.double, startX, endX);
              maxY = math.max(core.double, startY, endY);
              let extremaX = null;
              let extremaY = null;
              let a = null;
              let b = null;
              let c = null;
              if (!(dart.notNull(startX) < dart.notNull(cpX1) && dart.notNull(cpX1) < dart.notNull(cpX2) && dart.notNull(cpX2) < dart.notNull(endX) || dart.notNull(startX) > dart.notNull(cpX1) && dart.notNull(cpX1) > dart.notNull(cpX2) && dart.notNull(cpX2) > dart.notNull(endX))) {
                a = -dart.notNull(startX) + 3 * (dart.notNull(cpX1) - dart.notNull(cpX2)) + dart.notNull(endX);
                b = 2 * (dart.notNull(startX) - 2 * dart.notNull(cpX1) + dart.notNull(cpX2));
                c = -dart.notNull(startX) + dart.notNull(cpX1);
                let s = dart.notNull(b) * dart.notNull(b) - 4 * dart.notNull(a) * dart.notNull(c);
                if (s >= 0.0 && a[$abs]() > epsilon) {
                  if (s === 0.0) {
                    let t = -dart.notNull(b) / (2 * dart.notNull(a));
                    let tprime = 1.0 - t;
                    if (t >= 0.0 && t <= 1.0) {
                      extremaX = tprime * tprime * tprime * dart.notNull(startX) + 3 * tprime * tprime * t * dart.notNull(cpX1) + 3 * tprime * t * t * dart.notNull(cpX2) + t * t * t * dart.notNull(endX);
                      minX = math.min(core.double, extremaX, minX);
                      maxX = math.max(core.double, extremaX, maxX);
                    }
                  } else {
                    s = math.sqrt(s);
                    let t = (-dart.notNull(b) - s) / (2 * dart.notNull(a));
                    let tprime = 1.0 - t;
                    if (t >= 0.0 && t <= 1.0) {
                      extremaX = tprime * tprime * tprime * dart.notNull(startX) + 3 * tprime * tprime * t * dart.notNull(cpX1) + 3 * tprime * t * t * dart.notNull(cpX2) + t * t * t * dart.notNull(endX);
                      minX = math.min(core.double, extremaX, minX);
                      maxX = math.max(core.double, extremaX, maxX);
                    }
                    t = (-dart.notNull(b) + s) / (2 * dart.notNull(a));
                    tprime = 1.0 - t;
                    if (t >= 0.0 && t <= 1.0) {
                      extremaX = tprime * tprime * tprime * dart.notNull(startX) + 3 * tprime * tprime * t * dart.notNull(cpX1) + 3 * tprime * t * t * dart.notNull(cpX2) + t * t * t * dart.notNull(endX);
                      minX = math.min(core.double, extremaX, minX);
                      maxX = math.max(core.double, extremaX, maxX);
                    }
                  }
                }
              }
              if (!(dart.notNull(startY) < dart.notNull(cpY1) && dart.notNull(cpY1) < dart.notNull(cpY2) && dart.notNull(cpY2) < dart.notNull(endY) || dart.notNull(startY) > dart.notNull(cpY1) && dart.notNull(cpY1) > dart.notNull(cpY2) && dart.notNull(cpY2) > dart.notNull(endY))) {
                a = -dart.notNull(startY) + 3 * (dart.notNull(cpY1) - dart.notNull(cpY2)) + dart.notNull(endY);
                b = 2 * (dart.notNull(startY) - 2 * dart.notNull(cpY1) + dart.notNull(cpY2));
                c = -dart.notNull(startY) + dart.notNull(cpY1);
                let s = dart.notNull(b) * dart.notNull(b) - 4 * dart.notNull(a) * dart.notNull(c);
                if (s >= 0.0 && a[$abs]() > epsilon) {
                  if (s === 0.0) {
                    let t = -dart.notNull(b) / (2 * dart.notNull(a));
                    let tprime = 1.0 - t;
                    if (t >= 0.0 && t <= 1.0) {
                      extremaY = tprime * tprime * tprime * dart.notNull(startY) + 3 * tprime * tprime * t * dart.notNull(cpY1) + 3 * tprime * t * t * dart.notNull(cpY2) + t * t * t * dart.notNull(endY);
                      minY = math.min(core.double, extremaY, minY);
                      maxY = math.max(core.double, extremaY, maxY);
                    }
                  } else {
                    s = math.sqrt(s);
                    let t = (-dart.notNull(b) - s) / (2 * dart.notNull(a));
                    let tprime = 1.0 - t;
                    if (t >= 0.0 && t <= 1.0) {
                      extremaY = tprime * tprime * tprime * dart.notNull(startY) + 3 * tprime * tprime * t * dart.notNull(cpY1) + 3 * tprime * t * t * dart.notNull(cpY2) + t * t * t * dart.notNull(endY);
                      minY = math.min(core.double, extremaY, minY);
                      maxY = math.max(core.double, extremaY, maxY);
                    }
                    t = (-dart.notNull(b) + s) / (2 * dart.notNull(a));
                    tprime = 1.0 - t;
                    if (t >= 0.0 && t <= 1.0) {
                      extremaY = tprime * tprime * tprime * dart.notNull(startY) + 3 * tprime * tprime * t * dart.notNull(cpY1) + 3 * tprime * t * t * dart.notNull(cpY2) + t * t * t * dart.notNull(endY);
                      minY = math.min(core.double, extremaY, minY);
                      maxY = math.max(core.double, extremaY, maxY);
                    }
                  }
                }
              }
              break;
            }
            case src__engine.PathCommandTypes.rect:
            {
              let cmd = src__engine.RectCommand._check(op);
              let left = cmd.x;
              let width = cmd.width;
              if (dart.notNull(cmd.width) < 0) {
                left = dart.notNull(left) - dart.notNull(width);
                width = -dart.notNull(width);
              }
              let top = cmd.y;
              let height = cmd.height;
              if (dart.notNull(cmd.height) < 0) {
                top = dart.notNull(top) - dart.notNull(height);
                height = -dart.notNull(height);
              }
              curX = minX = left;
              maxX = dart.notNull(left) + dart.notNull(width);
              curY = minY = top;
              maxY = dart.notNull(top) + dart.notNull(height);
              break;
            }
            case src__engine.PathCommandTypes.rRect:
            {
              let cmd = src__engine.RRectCommand._check(op);
              let rRect = cmd.rrect;
              curX = minX = rRect.left;
              maxX = dart.notNull(rRect.left) + dart.notNull(rRect.width);
              curY = minY = rRect.top;
              maxY = dart.notNull(rRect.top) + dart.notNull(rRect.height);
              break;
            }
            case src__engine.PathCommandTypes.close:
            default:
            {
              skipBounds = false;
              break;
            }
          }
          if (!skipBounds) {
            if (!ltrbInitialized) {
              left = minX;
              right = maxX;
              top = minY;
              bottom = maxY;
              ltrbInitialized = true;
            } else {
              left = math.min(core.double, left, minX);
              right = math.max(core.double, right, maxX);
              top = math.min(core.double, top, minY);
              bottom = math.max(core.double, bottom, maxY);
            }
          }
        }
      }
      return ltrbInitialized ? new ui.Rect.fromLTRB(left, top, right, bottom) : ui.Rect.zero;
    }
    static combine(operation, path1, path2) {
      if (!(path1 != null)) dart.assertFailed();
      if (!(path2 != null)) dart.assertFailed();
      dart.throw(new core.UnimplementedError.new());
    }
    computeMetrics(opts) {
      let forceClosed = opts && 'forceClosed' in opts ? opts.forceClosed : false;
      return new ui.PathMetrics.__(this, forceClosed);
    }
    get webOnlyPathAsRoundedRect() {
      if (this.subpaths[$length] !== 1) return null;
      let subPath = this.subpaths[$_get](0);
      if (subPath.commands[$length] !== 1) return null;
      let command = subPath.commands[$_get](0);
      return src__engine.RRectCommand.is(command) ? command.rrect : null;
    }
    get webOnlyPathAsRect() {
      if (this.subpaths[$length] !== 1) return null;
      let subPath = this.subpaths[$_get](0);
      if (subPath.commands[$length] !== 1) return null;
      let command = subPath.commands[$_get](0);
      return src__engine.RectCommand.is(command) ? new ui.Rect.fromLTWH(command.x, command.y, command.width, command.height) : null;
    }
    get webOnlyPathAsCircle() {
      if (this.subpaths[$length] !== 1) return null;
      let subPath = this.subpaths[$_get](0);
      if (subPath.commands[$length] !== 1) return null;
      let command = subPath.commands[$_get](0);
      if (src__engine.Ellipse.is(command)) {
        let ellipse = command;
        if ((dart.notNull(ellipse.endAngle) - dart.notNull(ellipse.startAngle))[$modulo](2 * dart.notNull(math.pi)) === 0.0) {
          return ellipse;
        }
      }
      return null;
    }
    webOnlySerializeToCssPaint() {
      let serializedSubpaths = [];
      for (let i = 0; i < dart.notNull(this.subpaths[$length]); i = i + 1) {
        serializedSubpaths[$add](this.subpaths[$_get](i).serializeToCssPaint());
      }
      return serializedSubpaths;
    }
    toString() {
      if (dart.test(src__engine.assertionsEnabled)) {
        return "Path(" + dart.str(this.subpaths[$join](", ")) + ")";
      } else {
        return super[$toString]();
      }
    }
  };
  (ui.Path.new = function() {
    this[fillType$] = ui.PathFillType.nonZero;
    this[subpaths$] = JSArrayOfSubpath().of([]);
    ;
  }).prototype = ui.Path.prototype;
  (ui.Path.from = function(source) {
    this[fillType$] = ui.PathFillType.nonZero;
    this[subpaths$] = ListOfSubpath().from(source.subpaths);
    ;
  }).prototype = ui.Path.prototype;
  (ui.Path._clone = function(subpaths, fillType) {
    this[subpaths$] = subpaths;
    this[fillType$] = fillType;
    ;
  }).prototype = ui.Path.prototype;
  dart.addTypeTests(ui.Path);
  const subpaths$ = Symbol("Path.subpaths");
  const fillType$ = Symbol("Path.fillType");
  dart.setMethodSignature(ui.Path, () => ({
    __proto__: dart.getMethods(ui.Path.__proto__),
    [_openNewSubpath]: dart.fnType(dart.void, [core.double, core.double]),
    [_setCurrentPoint]: dart.fnType(dart.void, [core.double, core.double]),
    moveTo: dart.fnType(dart.void, [core.double, core.double]),
    relativeMoveTo: dart.fnType(dart.void, [core.double, core.double]),
    lineTo: dart.fnType(dart.void, [core.double, core.double]),
    relativeLineTo: dart.fnType(dart.void, [core.double, core.double]),
    [_ensurePathStarted]: dart.fnType(dart.void, []),
    quadraticBezierTo: dart.fnType(dart.void, [core.double, core.double, core.double, core.double]),
    relativeQuadraticBezierTo: dart.fnType(dart.void, [core.double, core.double, core.double, core.double]),
    cubicTo: dart.fnType(dart.void, [core.double, core.double, core.double, core.double, core.double, core.double]),
    relativeCubicTo: dart.fnType(dart.void, [core.double, core.double, core.double, core.double, core.double, core.double]),
    conicTo: dart.fnType(dart.void, [core.double, core.double, core.double, core.double, core.double]),
    relativeConicTo: dart.fnType(dart.void, [core.double, core.double, core.double, core.double, core.double]),
    arcTo: dart.fnType(dart.void, [ui.Rect, core.double, core.double, core.bool]),
    arcToPoint: dart.fnType(dart.void, [ui.Offset], {clockwise: core.bool, largeArc: core.bool, radius: ui.Radius, rotation: core.double}),
    relativeArcToPoint: dart.fnType(dart.void, [ui.Offset], {clockwise: core.bool, largeArc: core.bool, radius: ui.Radius, rotation: core.double}),
    addRect: dart.fnType(dart.void, [ui.Rect]),
    addOval: dart.fnType(dart.void, [ui.Rect]),
    addArc: dart.fnType(dart.void, [ui.Rect, core.double, core.double]),
    addPolygon: dart.fnType(dart.void, [core.List$(ui.Offset), core.bool]),
    addRRect: dart.fnType(dart.void, [ui.RRect]),
    addPath: dart.fnType(dart.void, [ui.Path, ui.Offset], {matrix4: typed_data.Float64List}),
    [_addPath]: dart.fnType(dart.void, [ui.Path, core.double, core.double]),
    [_addPathWithMatrix]: dart.fnType(dart.void, [ui.Path, core.double, core.double, typed_data.Float64List]),
    extendWithPath: dart.fnType(dart.void, [ui.Path, ui.Offset], {matrix4: typed_data.Float64List}),
    [_extendWithPath]: dart.fnType(dart.void, [ui.Path, core.double, core.double]),
    [_extendWithPathAndMatrix]: dart.fnType(dart.void, [ui.Path, core.double, core.double, typed_data.Float64List]),
    close: dart.fnType(dart.void, []),
    reset: dart.fnType(dart.void, []),
    contains: dart.fnType(core.bool, [ui.Offset]),
    shift: dart.fnType(ui.Path, [ui.Offset]),
    transform: dart.fnType(ui.Path, [typed_data.Float64List]),
    getBounds: dart.fnType(ui.Rect, []),
    computeMetrics: dart.fnType(ui.PathMetrics, [], {forceClosed: core.bool}),
    webOnlySerializeToCssPaint: dart.fnType(core.List, [])
  }));
  dart.setGetterSignature(ui.Path, () => ({
    __proto__: dart.getGetters(ui.Path.__proto__),
    [_currentSubpath]: src__engine.Subpath,
    [_commands$]: core.List$(src__engine.PathCommand),
    [_currentX]: core.double,
    [_currentY]: core.double,
    webOnlyPathAsRoundedRect: ui.RRect,
    webOnlyPathAsRect: ui.Rect,
    webOnlyPathAsCircle: src__engine.Ellipse
  }));
  dart.setFieldSignature(ui.Path, () => ({
    __proto__: dart.getFields(ui.Path.__proto__),
    subpaths: dart.finalFieldType(core.List$(src__engine.Subpath)),
    fillType: dart.fieldType(ui.PathFillType)
  }));
  dart.defineExtensionMethods(ui.Path, ['toString']);
  dart.defineLazy(ui.Path, {
    /*ui.Path._rawRecorder*/get _rawRecorder() {
      return null;
    },
    set _rawRecorder(_) {}
  });
  const _iterator = dart.privateName(ui, "_iterator");
  const _getPosTan = dart.privateName(ui, "_getPosTan");
  const _moveNext = dart.privateName(ui, "_moveNext");
  ui.PathMetric = class PathMetric extends core.Object {
    get path() {
      return this[path$2];
    }
    set path(value) {
      super.path = value;
    }
    get forceClosed() {
      return this[forceClosed$];
    }
    set forceClosed(value) {
      super.forceClosed = value;
    }
    get length() {
      return dart.throw(new core.UnimplementedError.new());
    }
    getTangentForOffset(distance) {
      let posTan = this[_getPosTan](distance);
      if (posTan[$_get](0) === 0.0) {
        return null;
      } else {
        return new ui.Tangent.new(new ui.Offset.new(posTan[$_get](1), posTan[$_get](2)), new ui.Offset.new(posTan[$_get](3), posTan[$_get](4)));
      }
    }
    [_getPosTan](distance) {
      return dart.throw(new core.UnimplementedError.new());
    }
    extractPath(start, end, opts) {
      let startWithMoveTo = opts && 'startWithMoveTo' in opts ? opts.startWithMoveTo : true;
      return dart.throw(new core.UnimplementedError.new());
    }
    get isClosed() {
      return dart.throw(new core.UnimplementedError.new());
    }
    [_moveNext]() {
      return dart.throw(new core.UnimplementedError.new());
    }
  };
  (ui.PathMetric.__ = function(path, forceClosed) {
    this[path$2] = path;
    this[forceClosed$] = forceClosed;
    ;
  }).prototype = ui.PathMetric.prototype;
  dart.addTypeTests(ui.PathMetric);
  const path$2 = Symbol("PathMetric.path");
  const forceClosed$ = Symbol("PathMetric.forceClosed");
  dart.setMethodSignature(ui.PathMetric, () => ({
    __proto__: dart.getMethods(ui.PathMetric.__proto__),
    getTangentForOffset: dart.fnType(ui.Tangent, [core.double]),
    [_getPosTan]: dart.fnType(typed_data.Float32List, [core.double]),
    extractPath: dart.fnType(ui.Path, [core.double, core.double], {startWithMoveTo: core.bool}),
    [_moveNext]: dart.fnType(core.bool, [])
  }));
  dart.setGetterSignature(ui.PathMetric, () => ({
    __proto__: dart.getGetters(ui.PathMetric.__proto__),
    length: core.double,
    isClosed: core.bool
  }));
  dart.setFieldSignature(ui.PathMetric, () => ({
    __proto__: dart.getFields(ui.PathMetric.__proto__),
    path: dart.finalFieldType(ui.Path),
    forceClosed: dart.finalFieldType(core.bool)
  }));
  ui.PathMetrics = class PathMetrics extends collection.IterableBase$(ui.PathMetric) {
    get iterator() {
      return this[_iterator];
    }
  };
  (ui.PathMetrics.__ = function(path, forceClosed) {
    this[_iterator] = new ui.PathMetricIterator.__(new ui.PathMetric.__(path, forceClosed));
    ui.PathMetrics.__proto__.new.call(this);
    ;
  }).prototype = ui.PathMetrics.prototype;
  dart.addTypeTests(ui.PathMetrics);
  dart.setGetterSignature(ui.PathMetrics, () => ({
    __proto__: dart.getGetters(ui.PathMetrics.__proto__),
    iterator: core.Iterator$(ui.PathMetric),
    [$iterator]: core.Iterator$(ui.PathMetric)
  }));
  dart.setFieldSignature(ui.PathMetrics, () => ({
    __proto__: dart.getFields(ui.PathMetrics.__proto__),
    [_iterator]: dart.finalFieldType(core.Iterator$(ui.PathMetric))
  }));
  dart.defineExtensionAccessors(ui.PathMetrics, ['iterator']);
  const _firstTime = dart.privateName(ui, "_firstTime");
  const _pathMetric$ = dart.privateName(ui, "_pathMetric");
  ui.PathMetricIterator = class PathMetricIterator extends core.Object {
    get current() {
      return dart.test(this[_firstTime]) ? null : this[_pathMetric$];
    }
    moveNext() {
      let t4;
      if (dart.equals(this[_firstTime], true)) {
        this[_firstTime] = false;
        return true;
      } else if (dart.equals((t4 = this[_pathMetric$], t4 == null ? null : t4[_moveNext]()), true)) {
        return true;
      }
      this[_pathMetric$] = null;
      return false;
    }
  };
  (ui.PathMetricIterator.__ = function(_pathMetric) {
    this[_firstTime] = true;
    this[_pathMetric$] = _pathMetric;
    ;
  }).prototype = ui.PathMetricIterator.prototype;
  dart.addTypeTests(ui.PathMetricIterator);
  ui.PathMetricIterator[dart.implements] = () => [core.Iterator$(ui.PathMetric)];
  dart.setMethodSignature(ui.PathMetricIterator, () => ({
    __proto__: dart.getMethods(ui.PathMetricIterator.__proto__),
    moveNext: dart.fnType(core.bool, [])
  }));
  dart.setGetterSignature(ui.PathMetricIterator, () => ({
    __proto__: dart.getGetters(ui.PathMetricIterator.__proto__),
    current: ui.PathMetric
  }));
  dart.setFieldSignature(ui.PathMetricIterator, () => ({
    __proto__: dart.getFields(ui.PathMetricIterator.__proto__),
    [_pathMetric$]: dart.fieldType(ui.PathMetric),
    [_firstTime]: dart.fieldType(core.bool)
  }));
  ui.Tangent = class Tangent extends core.Object {
    get position() {
      return this[position$];
    }
    set position(value) {
      super.position = value;
    }
    get vector() {
      return this[vector$];
    }
    set vector(value) {
      super.vector = value;
    }
    static fromAngle(position, angle) {
      return new ui.Tangent.new(position, new ui.Offset.new(math.cos(angle), math.sin(angle)));
    }
    get angle() {
      return -math.atan2(this.vector.dy, this.vector.dx);
    }
  };
  (ui.Tangent.new = function(position, vector) {
    this[position$] = position;
    this[vector$] = vector;
    if (!(position != null)) dart.assertFailed();
    if (!(vector != null)) dart.assertFailed();
    ;
  }).prototype = ui.Tangent.prototype;
  dart.addTypeTests(ui.Tangent);
  const position$ = Symbol("Tangent.position");
  const vector$ = Symbol("Tangent.vector");
  dart.setGetterSignature(ui.Tangent, () => ({
    __proto__: dart.getGetters(ui.Tangent.__proto__),
    angle: core.double
  }));
  dart.setFieldSignature(ui.Tangent, () => ({
    __proto__: dart.getFields(ui.Tangent.__proto__),
    position: dart.finalFieldType(ui.Offset),
    vector: dart.finalFieldType(ui.Offset)
  }));
  ui.RawRecordingCanvas = class RawRecordingCanvas extends src__engine.BitmapCanvas {
    get cullRect() {
      return this[cullRect$0];
    }
    set cullRect(value) {
      this[cullRect$0] = value;
    }
    dispose() {
      this.clear();
    }
    beginRecording(bounds) {
      return dart.throw(new core.UnsupportedError.new(""));
    }
    endRecording() {
      return dart.throw(new core.UnsupportedError.new(""));
    }
    get isRecording() {
      return true;
    }
  };
  (ui.RawRecordingCanvas.new = function(size) {
    this[_canvas$] = null;
    this[_isRecording] = true;
    this[cullRect$0] = null;
    ui.RawRecordingCanvas.__proto__.new.call(this, ui.Offset.zero['&'](size));
    ;
  }).prototype = ui.RawRecordingCanvas.prototype;
  dart.addTypeTests(ui.RawRecordingCanvas);
  const cullRect$0 = Symbol("RawRecordingCanvas.cullRect");
  ui.RawRecordingCanvas[dart.implements] = () => [ui.PictureRecorder];
  dart.setMethodSignature(ui.RawRecordingCanvas, () => ({
    __proto__: dart.getMethods(ui.RawRecordingCanvas.__proto__),
    beginRecording: dart.fnType(src__engine.RecordingCanvas, [ui.Rect]),
    endRecording: dart.fnType(ui.Picture, [])
  }));
  dart.setGetterSignature(ui.RawRecordingCanvas, () => ({
    __proto__: dart.getGetters(ui.RawRecordingCanvas.__proto__),
    isRecording: core.bool
  }));
  dart.setFieldSignature(ui.RawRecordingCanvas, () => ({
    __proto__: dart.getFields(ui.RawRecordingCanvas.__proto__),
    [_canvas$]: dart.fieldType(src__engine.RecordingCanvas),
    [_isRecording]: dart.fieldType(core.bool),
    cullRect: dart.fieldType(ui.Rect)
  }));
  ui.Scene = class Scene extends core.Object {
    get webOnlyRootElement() {
      return this[webOnlyRootElement$];
    }
    set webOnlyRootElement(value) {
      super.webOnlyRootElement = value;
    }
    toImage(width, height) {
      if (dart.notNull(width) <= 0 || dart.notNull(height) <= 0) dart.throw(core.Exception.new("Invalid image dimensions."));
      dart.throw(new core.UnsupportedError.new("toImage is not supported on the Web"));
    }
    dispose() {
    }
  };
  (ui.Scene.__ = function(webOnlyRootElement) {
    this[webOnlyRootElement$] = webOnlyRootElement;
    ;
  }).prototype = ui.Scene.prototype;
  dart.addTypeTests(ui.Scene);
  const webOnlyRootElement$ = Symbol("Scene.webOnlyRootElement");
  dart.setMethodSignature(ui.Scene, () => ({
    __proto__: dart.getMethods(ui.Scene.__proto__),
    toImage: dart.fnType(async.Future$(ui.Image), [core.int, core.int]),
    dispose: dart.fnType(dart.void, [])
  }));
  dart.setFieldSignature(ui.Scene, () => ({
    __proto__: dart.getFields(ui.Scene.__proto__),
    webOnlyRootElement: dart.finalFieldType(html.Element)
  }));
  ui.SceneBuilder = class SceneBuilder extends core.Object {
    static new() {
      if (dart.test(ui.SceneBuilder.webOnlyUseLayerSceneBuilder)) {
        return new src__engine.LayerSceneBuilder.new();
      } else {
        return new ui.SceneBuilder.__();
      }
    }
    get [_persistedScene$]() {
      if (!dart.test(dart.fn(() => {
        if (this[_surfaceStack$][$length] !== 1) {
          let surfacePrintout = this[_surfaceStack$][$map](core.Type, dart.fn(l => dart.runtimeType(l), PersistedContainerSurfaceToType()))[$toList]()[$join](", ");
          dart.throw(core.Exception.new("Incorrect sequence of push/pop operations while " + "building scene surfaces. After building the scene the persisted " + "surface stack must contain a single element which corresponds " + "to the scene itself (_PersistedScene). All other surfaces " + "should have been popped off the stack. Found the following " + "surfaces in the stack:\n" + dart.str(surfacePrintout)));
        }
        return true;
      }, VoidTobool())())) dart.assertFailed();
      return ui.PersistedScene._check(this[_surfaceStack$][$first]);
    }
    get [_currentSurface$]() {
      return this[_surfaceStack$][$last];
    }
    [_pushSurface$](surface) {
      this[_adoptSurface$](surface);
      this[_surfaceStack$][$add](surface);
      return surface;
    }
    [_addSurface$](surface) {
      this[_adoptSurface$](surface);
    }
    [_adoptSurface$](surface) {
      this[_currentSurface$].appendChild(surface);
    }
    pushOffset(dx, dy, opts) {
      let webOnlyPaintedBy = opts && 'webOnlyPaintedBy' in opts ? opts.webOnlyPaintedBy : null;
      return this[_pushSurface$](new ui.PersistedOffset.new(webOnlyPaintedBy, dx, dy));
    }
    pushTransform(matrix4, opts) {
      let webOnlyPaintedBy = opts && 'webOnlyPaintedBy' in opts ? opts.webOnlyPaintedBy : null;
      if (matrix4 == null) dart.throw(new core.ArgumentError.new("\"matrix4\" argument cannot be null"));
      if (matrix4[$length] !== 16) dart.throw(new core.ArgumentError.new("\"matrix4\" must have 16 entries."));
      return this[_pushSurface$](new ui.PersistedTransform.new(webOnlyPaintedBy, matrix4));
    }
    pushClipRect(rect, opts) {
      let clipBehavior = opts && 'clipBehavior' in opts ? opts.clipBehavior : ui.Clip.antiAlias;
      let webOnlyPaintedBy = opts && 'webOnlyPaintedBy' in opts ? opts.webOnlyPaintedBy : null;
      if (!(clipBehavior != null)) dart.assertFailed();
      if (!!dart.equals(clipBehavior, ui.Clip.none)) dart.assertFailed();
      return this[_pushSurface$](new ui.PersistedClipRect.new(webOnlyPaintedBy, rect));
    }
    pushClipRRect(rrect, opts) {
      let clipBehavior = opts && 'clipBehavior' in opts ? opts.clipBehavior : null;
      let webOnlyPaintedBy = opts && 'webOnlyPaintedBy' in opts ? opts.webOnlyPaintedBy : null;
      return this[_pushSurface$](new ui.PersistedClipRRect.new(webOnlyPaintedBy, rrect, clipBehavior));
    }
    pushClipPath(path, opts) {
      let clipBehavior = opts && 'clipBehavior' in opts ? opts.clipBehavior : ui.Clip.antiAlias;
      let webOnlyPaintedBy = opts && 'webOnlyPaintedBy' in opts ? opts.webOnlyPaintedBy : null;
      if (!(clipBehavior != null)) dart.assertFailed();
      if (!!dart.equals(clipBehavior, ui.Clip.none)) dart.assertFailed();
      return this[_pushSurface$](new ui._PersistedClipPath.new(webOnlyPaintedBy, path, clipBehavior));
    }
    pushOpacity(alpha, opts) {
      let webOnlyPaintedBy = opts && 'webOnlyPaintedBy' in opts ? opts.webOnlyPaintedBy : null;
      let offset = opts && 'offset' in opts ? opts.offset : ui.Offset.zero;
      return this[_pushSurface$](new ui.PersistedOpacity.new(webOnlyPaintedBy, alpha, offset));
    }
    pushColorFilter(color, blendMode, opts) {
      let webOnlyPaintedBy = opts && 'webOnlyPaintedBy' in opts ? opts.webOnlyPaintedBy : null;
      dart.throw(new core.UnimplementedError.new());
    }
    pushBackdropFilter(filter, opts) {
      let webOnlyPaintedBy = opts && 'webOnlyPaintedBy' in opts ? opts.webOnlyPaintedBy : null;
      dart.throw(new core.UnimplementedError.new());
    }
    pushShaderMask(shader, maskRect, blendMode, opts) {
      let webOnlyPaintedBy = opts && 'webOnlyPaintedBy' in opts ? opts.webOnlyPaintedBy : null;
      dart.throw(new core.UnimplementedError.new());
    }
    pushPhysicalShape(opts) {
      let t4, t4$;
      let path = opts && 'path' in opts ? opts.path : null;
      let elevation = opts && 'elevation' in opts ? opts.elevation : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let shadowColor = opts && 'shadowColor' in opts ? opts.shadowColor : null;
      let clipBehavior = opts && 'clipBehavior' in opts ? opts.clipBehavior : ui.Clip.none;
      let webOnlyPaintedBy = opts && 'webOnlyPaintedBy' in opts ? opts.webOnlyPaintedBy : null;
      return this[_pushSurface$](new ui.PersistedPhysicalShape.new(webOnlyPaintedBy, path, elevation, color.value, (t4$ = (t4 = shadowColor, t4 == null ? null : t4.value), t4$ == null ? 4278190080 : t4$), clipBehavior));
    }
    addRetained(retainedLayer) {
      let retainedSurface = ui.PersistedContainerSurface._check(retainedLayer);
      if (retainedSurface.rootElement != null) {
        retainedSurface.reuseStrategy = ui.PersistedSurfaceReuseStrategy.retain;
      }
      this[_adoptSurface$](retainedSurface);
    }
    pop() {
      if (!dart.test(this[_surfaceStack$][$isNotEmpty])) dart.assertFailed();
      this[_surfaceStack$][$removeLast]();
    }
    addPerformanceOverlay(enabledOptions, bounds, opts) {
      let webOnlyPaintedBy = opts && 'webOnlyPaintedBy' in opts ? opts.webOnlyPaintedBy : null;
      this[_addPerformanceOverlay$](enabledOptions, bounds.left, bounds.right, bounds.top, bounds.bottom, webOnlyPaintedBy);
    }
    [_addPerformanceOverlay$](enabledOptions, left, right, top, bottom, webOnlyPaintedBy) {
      if (!dart.test(ui._webOnlyDidWarnAboutPerformanceOverlay)) {
        ui._webOnlyDidWarnAboutPerformanceOverlay = true;
        html.window[$console].warn("The performance overlay isn't supported on the web");
      }
    }
    addPicture(offset, picture, opts) {
      let isComplexHint = opts && 'isComplexHint' in opts ? opts.isComplexHint : false;
      let willChangeHint = opts && 'willChangeHint' in opts ? opts.willChangeHint : false;
      let webOnlyPaintedBy = opts && 'webOnlyPaintedBy' in opts ? opts.webOnlyPaintedBy : null;
      let hints = 0;
      if (dart.test(isComplexHint)) hints = (hints | 1) >>> 0;
      if (dart.test(willChangeHint)) hints = (hints | 2) >>> 0;
      this[_addPicture$](offset.dx, offset.dy, picture, hints, {webOnlyPaintedBy: webOnlyPaintedBy});
    }
    [_addPicture$](dx, dy, picture, hints, opts) {
      let webOnlyPaintedBy = opts && 'webOnlyPaintedBy' in opts ? opts.webOnlyPaintedBy : null;
      this[_addSurface$](ui.persistedPictureFactory(webOnlyPaintedBy, dx, dy, picture, hints));
    }
    addTexture(textureId, opts) {
      let offset = opts && 'offset' in opts ? opts.offset : ui.Offset.zero;
      let width = opts && 'width' in opts ? opts.width : 0.0;
      let height = opts && 'height' in opts ? opts.height : 0.0;
      let freeze = opts && 'freeze' in opts ? opts.freeze : false;
      let webOnlyPaintedBy = opts && 'webOnlyPaintedBy' in opts ? opts.webOnlyPaintedBy : null;
      if (!(offset != null)) dart.assertFailed("Offset argument was null");
      this[_addTexture$](offset.dx, offset.dy, width, height, textureId, webOnlyPaintedBy);
    }
    [_addTexture$](dx, dy, width, height, textureId, webOnlyPaintedBy) {
      dart.throw(new core.UnimplementedError.new());
    }
    addPlatformView(viewId, opts) {
      let offset = opts && 'offset' in opts ? opts.offset : ui.Offset.zero;
      let width = opts && 'width' in opts ? opts.width : 0.0;
      let height = opts && 'height' in opts ? opts.height : 0.0;
      if (!(offset != null)) dart.assertFailed("Offset argument was null");
      this[_addPlatformView$](offset.dx, offset.dy, width, height, viewId);
    }
    [_addPlatformView$](dx, dy, width, height, viewId) {
      dart.throw(new core.UnimplementedError.new());
    }
    addChildScene(opts) {
      let offset = opts && 'offset' in opts ? opts.offset : ui.Offset.zero;
      let width = opts && 'width' in opts ? opts.width : 0.0;
      let height = opts && 'height' in opts ? opts.height : 0.0;
      let sceneHost = opts && 'sceneHost' in opts ? opts.sceneHost : null;
      let hitTestable = opts && 'hitTestable' in opts ? opts.hitTestable : true;
      this[_addChildScene$](offset.dx, offset.dy, width, height, sceneHost, hitTestable);
    }
    [_addChildScene$](dx, dy, width, height, sceneHost, hitTestable) {
      dart.throw(new core.UnimplementedError.new());
    }
    setRasterizerTracingThreshold(frameInterval) {
    }
    setCheckerboardRasterCacheImages(checkerboard) {
    }
    setCheckerboardOffscreenLayers(checkerboard) {
    }
    static get debugLastFrameScene() {
      let result = null;
      if (!dart.test(dart.fn(() => {
        result = ui.SceneBuilder._lastFrameScene;
        return true;
      }, VoidTobool())())) dart.assertFailed();
      return result;
    }
    static debugForgetFrameScene() {
      let t4, t4$;
      t4$ = (t4 = ui.SceneBuilder._lastFrameScene, t4 == null ? null : t4.rootElement);
      t4$ == null ? null : t4$[$remove]();
      ui.SceneBuilder._lastFrameScene = null;
      ui._clipCounter = 0;
      ui._recycledCanvases[$clear]();
    }
    build() {
      if (!dart.test(dart.fn(() => {
        ui.SceneBuilder._debugFrameNumber = dart.notNull(ui.SceneBuilder._debugFrameNumber) + 1;
        return true;
      }, VoidTobool())())) dart.assertFailed();
      if (ui.SceneBuilder._lastFrameScene == null) {
        this[_persistedScene$].build();
      } else {
        this[_persistedScene$].update(ui.SceneBuilder._lastFrameScene);
      }
      if (dart.test(ui._paintQueue[$isNotEmpty])) {
        if (dart.notNull(ui._paintQueue[$length]) > 1) {
          ui._paintQueue[$sort](dart.fn((a, b) => {
            let aSize = dart.notNull(a.canvasSize.height) * dart.notNull(a.canvasSize.width);
            let bSize = dart.notNull(b.canvasSize.height) * dart.notNull(b.canvasSize.width);
            return bSize[$compareTo](aSize);
          }, _PaintRequestAnd_PaintRequestToint()));
        }
        for (let request of ui._paintQueue) {
          request.paintCallback();
        }
        ui._paintQueue = JSArrayOf_PaintRequest().of([]);
      }
      if (dart.test(ui._retainedSurfaces[$isNotEmpty])) {
        for (let i = 0; i < dart.notNull(ui._retainedSurfaces[$length]); i = i + 1) {
          ui._retainedSurfaces[$_get](i).reuseStrategy = ui.PersistedSurfaceReuseStrategy.match;
        }
        ui._retainedSurfaces = JSArrayOfPersistedSurface().of([]);
      }
      if (dart.test(ui._debugExplainSurfaceStats)) {
        ui._debugPrintSurfaceStats(this[_persistedScene$], ui.SceneBuilder._debugFrameNumber);
        ui._debugRepaintSurfaceStatsOverlay(this[_persistedScene$]);
      }
      if (!dart.test(dart.fn(() => {
        let validationErrors = JSArrayOfString().of([]);
        this[_persistedScene$].debugValidate(validationErrors);
        if (dart.test(validationErrors[$isNotEmpty])) {
          core.print("ENGINE LAYER TREE INCONSISTENT:\n" + dart.str(validationErrors[$map](core.String, dart.fn(e => "  - " + dart.str(e) + "\n", StringToString()))[$join]()));
        }
        return true;
      }, VoidTobool())())) dart.assertFailed();
      ui.SceneBuilder._lastFrameScene = this[_persistedScene$];
      if (dart.test(ui._debugExplainSurfaceStats)) {
        ui._surfaceStats = new (LinkedMapOfPersistedSurface$_DebugSurfaceStats()).new();
      }
      return new ui.Scene.__(this[_persistedScene$].rootElement);
    }
  };
  (ui.SceneBuilder.__ = function() {
    this[_surfaceStack$] = JSArrayOfPersistedContainerSurface().of([]);
    this[_surfaceStack$][$add](new ui.PersistedScene.new());
  }).prototype = ui.SceneBuilder.prototype;
  dart.addTypeTests(ui.SceneBuilder);
  dart.setMethodSignature(ui.SceneBuilder, () => ({
    __proto__: dart.getMethods(ui.SceneBuilder.__proto__),
    [_pushSurface$]: dart.fnType(ui.EngineLayer, [ui.PersistedContainerSurface]),
    [_addSurface$]: dart.fnType(dart.void, [ui.PersistedSurface]),
    [_adoptSurface$]: dart.fnType(dart.void, [ui.PersistedSurface]),
    pushOffset: dart.fnType(ui.EngineLayer, [core.double, core.double], {webOnlyPaintedBy: core.Object}),
    pushTransform: dart.fnType(ui.EngineLayer, [typed_data.Float64List], {webOnlyPaintedBy: core.Object}),
    pushClipRect: dart.fnType(ui.EngineLayer, [ui.Rect], {clipBehavior: ui.Clip, webOnlyPaintedBy: core.Object}),
    pushClipRRect: dart.fnType(ui.EngineLayer, [ui.RRect], {clipBehavior: ui.Clip, webOnlyPaintedBy: core.Object}),
    pushClipPath: dart.fnType(ui.EngineLayer, [ui.Path], {clipBehavior: ui.Clip, webOnlyPaintedBy: core.Object}),
    pushOpacity: dart.fnType(ui.EngineLayer, [core.int], {offset: ui.Offset, webOnlyPaintedBy: core.Object}),
    pushColorFilter: dart.fnType(ui.EngineLayer, [ui.Color, ui.BlendMode], {webOnlyPaintedBy: core.Object}),
    pushBackdropFilter: dart.fnType(ui.EngineLayer, [ui.ImageFilter], {webOnlyPaintedBy: core.Object}),
    pushShaderMask: dart.fnType(ui.EngineLayer, [ui.Shader, ui.Rect, ui.BlendMode], {webOnlyPaintedBy: core.Object}),
    pushPhysicalShape: dart.fnType(ui.EngineLayer, [], {clipBehavior: ui.Clip, color: ui.Color, elevation: core.double, path: ui.Path, shadowColor: ui.Color, webOnlyPaintedBy: core.Object}),
    addRetained: dart.fnType(dart.void, [ui.EngineLayer]),
    pop: dart.fnType(dart.void, []),
    addPerformanceOverlay: dart.fnType(dart.void, [core.int, ui.Rect], {webOnlyPaintedBy: core.Object}),
    [_addPerformanceOverlay$]: dart.fnType(dart.void, [core.int, core.double, core.double, core.double, core.double, core.Object]),
    addPicture: dart.fnType(dart.void, [ui.Offset, ui.Picture], {isComplexHint: core.bool, webOnlyPaintedBy: core.Object, willChangeHint: core.bool}),
    [_addPicture$]: dart.fnType(dart.void, [core.double, core.double, ui.Picture, core.int], {webOnlyPaintedBy: core.Object}),
    addTexture: dart.fnType(dart.void, [core.int], {freeze: core.bool, height: core.double, offset: ui.Offset, webOnlyPaintedBy: core.Object, width: core.double}),
    [_addTexture$]: dart.fnType(dart.void, [core.double, core.double, core.double, core.double, core.int, core.Object]),
    addPlatformView: dart.fnType(dart.void, [core.int], {height: core.double, offset: ui.Offset, width: core.double}),
    [_addPlatformView$]: dart.fnType(dart.void, [core.double, core.double, core.double, core.double, core.int]),
    addChildScene: dart.fnType(dart.void, [], {height: core.double, hitTestable: core.bool, offset: ui.Offset, sceneHost: ui.SceneHost, width: core.double}),
    [_addChildScene$]: dart.fnType(dart.void, [core.double, core.double, core.double, core.double, ui.SceneHost, core.bool]),
    setRasterizerTracingThreshold: dart.fnType(dart.void, [core.int]),
    setCheckerboardRasterCacheImages: dart.fnType(dart.void, [core.bool]),
    setCheckerboardOffscreenLayers: dart.fnType(dart.void, [core.bool]),
    build: dart.fnType(ui.Scene, [])
  }));
  dart.setGetterSignature(ui.SceneBuilder, () => ({
    __proto__: dart.getGetters(ui.SceneBuilder.__proto__),
    [_persistedScene$]: ui.PersistedScene,
    [_currentSurface$]: ui.PersistedContainerSurface
  }));
  dart.setFieldSignature(ui.SceneBuilder, () => ({
    __proto__: dart.getFields(ui.SceneBuilder.__proto__),
    [_surfaceStack$]: dart.finalFieldType(core.List$(ui.PersistedContainerSurface))
  }));
  dart.defineLazy(ui.SceneBuilder, {
    /*ui.SceneBuilder.webOnlyUseLayerSceneBuilder*/get webOnlyUseLayerSceneBuilder() {
      return false;
    },
    /*ui.SceneBuilder._lastFrameScene*/get _lastFrameScene() {
      return null;
    },
    set _lastFrameScene(_) {},
    /*ui.SceneBuilder._debugFrameNumber*/get _debugFrameNumber() {
      return 0;
    },
    set _debugFrameNumber(_) {}
  });
  ui._DebugSurfaceStats = class _DebugSurfaceStats extends core.Object {
    aggregate(oneSurfaceStats) {
      this.retainSurfaceCount = dart.notNull(this.retainSurfaceCount) + dart.notNull(oneSurfaceStats.retainSurfaceCount);
      this.reuseElementCount = dart.notNull(this.reuseElementCount) + dart.notNull(oneSurfaceStats.reuseElementCount);
      this.paintCount = dart.notNull(this.paintCount) + dart.notNull(oneSurfaceStats.paintCount);
      this.paintPixelCount = dart.notNull(this.paintPixelCount) + dart.notNull(oneSurfaceStats.paintPixelCount);
      this.reuseCanvasCount = dart.notNull(this.reuseCanvasCount) + dart.notNull(oneSurfaceStats.reuseCanvasCount);
      this.allocateBitmapCanvasCount = dart.notNull(this.allocateBitmapCanvasCount) + dart.notNull(oneSurfaceStats.allocateBitmapCanvasCount);
      this.allocatedBitmapSizeInPixels = dart.notNull(this.allocatedBitmapSizeInPixels) + dart.notNull(oneSurfaceStats.allocatedBitmapSizeInPixels);
      this.allocatedDomNodeCount = dart.notNull(this.allocatedDomNodeCount) + dart.notNull(oneSurfaceStats.allocatedDomNodeCount);
    }
  };
  (ui._DebugSurfaceStats.new = function(surface) {
    this.retainSurfaceCount = 0;
    this.reuseElementCount = 0;
    this.paintCount = 0;
    this.paintPixelCount = 0;
    this.reuseCanvasCount = 0;
    this.allocateBitmapCanvasCount = 0;
    this.allocatedBitmapSizeInPixels = 0;
    this.allocatedDomNodeCount = 0;
    this.surface = surface;
    ;
  }).prototype = ui._DebugSurfaceStats.prototype;
  dart.addTypeTests(ui._DebugSurfaceStats);
  dart.setMethodSignature(ui._DebugSurfaceStats, () => ({
    __proto__: dart.getMethods(ui._DebugSurfaceStats.__proto__),
    aggregate: dart.fnType(dart.void, [ui._DebugSurfaceStats])
  }));
  dart.setFieldSignature(ui._DebugSurfaceStats, () => ({
    __proto__: dart.getFields(ui._DebugSurfaceStats.__proto__),
    surface: dart.finalFieldType(ui.PersistedSurface),
    retainSurfaceCount: dart.fieldType(core.int),
    reuseElementCount: dart.fieldType(core.int),
    paintCount: dart.fieldType(core.int),
    paintPixelCount: dart.fieldType(core.int),
    reuseCanvasCount: dart.fieldType(core.int),
    allocateBitmapCanvasCount: dart.fieldType(core.int),
    allocatedBitmapSizeInPixels: dart.fieldType(core.int),
    allocatedDomNodeCount: dart.fieldType(core.int)
  }));
  ui.SceneHost = class SceneHost extends core.Object {
    dispose() {
    }
  };
  (ui.SceneHost.new = function(exportTokenHandle) {
    ;
  }).prototype = ui.SceneHost.prototype;
  dart.addTypeTests(ui.SceneHost);
  dart.setMethodSignature(ui.SceneHost, () => ({
    __proto__: dart.getMethods(ui.SceneHost.__proto__),
    dispose: dart.fnType(dart.void, [])
  }));
  ui.PersistedSurfaceReuseStrategy = class PersistedSurfaceReuseStrategy extends core.Object {
    toString() {
      return this[_name$0];
    }
  };
  (ui.PersistedSurfaceReuseStrategy.new = function(index, _name) {
    this.index = index;
    this[_name$0] = _name;
    ;
  }).prototype = ui.PersistedSurfaceReuseStrategy.prototype;
  dart.addTypeTests(ui.PersistedSurfaceReuseStrategy);
  dart.setFieldSignature(ui.PersistedSurfaceReuseStrategy, () => ({
    __proto__: dart.getFields(ui.PersistedSurfaceReuseStrategy.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$0]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(ui.PersistedSurfaceReuseStrategy, ['toString']);
  ui.PersistedSurfaceReuseStrategy.match = dart.const(new ui.PersistedSurfaceReuseStrategy.new(0, "PersistedSurfaceReuseStrategy.match"));
  ui.PersistedSurfaceReuseStrategy.retain = dart.const(new ui.PersistedSurfaceReuseStrategy.new(1, "PersistedSurfaceReuseStrategy.retain"));
  ui.PersistedSurfaceReuseStrategy.values = dart.constList([ui.PersistedSurfaceReuseStrategy.match, ui.PersistedSurfaceReuseStrategy.retain], ui.PersistedSurfaceReuseStrategy);
  const _descendants = dart.privateName(ui, "_descendants");
  const _globalClip = dart.privateName(ui, "_globalClip");
  const _hasExactDescendants = dart.privateName(ui, "_hasExactDescendants");
  ui.PersistedSurface = class PersistedSurface extends core.Object {
    get reuseStrategy() {
      return this[reuseStrategy];
    }
    set reuseStrategy(value) {
      this[reuseStrategy] = value;
    }
    get rootElement() {
      return this[rootElement$2];
    }
    set rootElement(value) {
      this[rootElement$2] = value;
    }
    get parent() {
      return this[parent$];
    }
    set parent(value) {
      this[parent$] = value;
    }
    get paintedBy() {
      return this[paintedBy$];
    }
    set paintedBy(value) {
      super.paintedBy = value;
    }
    get childContainer() {
      return this.rootElement;
    }
    build() {
      let t4;
      if (!(this.rootElement == null)) dart.assertFailed();
      if (!!dart.equals(this.reuseStrategy, ui.PersistedSurfaceReuseStrategy.retain)) dart.assertFailed();
      this.recomputeTransformAndClip();
      this.rootElement = this.createElement();
      if (dart.test(ui._debugExplainSurfaceStats)) {
        t4 = ui._surfaceStatsFor(this);
        t4.allocatedDomNodeCount = dart.notNull(t4.allocatedDomNodeCount) + 1;
      }
      this.apply();
    }
    adoptElements(oldSurface) {
      let t4;
      ui.PersistedSurface._check(oldSurface);
      if (!(oldSurface.rootElement != null)) dart.assertFailed();
      this.rootElement = oldSurface.rootElement;
      if (dart.test(ui._debugExplainSurfaceStats)) {
        t4 = ui._surfaceStatsFor(this);
        t4.reuseElementCount = dart.notNull(t4.reuseElementCount) + 1;
      }
    }
    update(oldSurface) {
      ui.PersistedSurface._check(oldSurface);
      if (!(oldSurface != null)) dart.assertFailed();
      if (!(oldSurface !== this)) dart.assertFailed();
      if (!!dart.equals(this.reuseStrategy, ui.PersistedSurfaceReuseStrategy.retain)) dart.assertFailed();
      if (!!dart.equals(oldSurface.reuseStrategy, ui.PersistedSurfaceReuseStrategy.retain)) dart.assertFailed();
      if (!(dart.test(this.isTotalMatchFor(oldSurface)) || dart.test(this.isFuzzyMatchFor(oldSurface)))) dart.assertFailed();
      this.recomputeTransformAndClip();
      this.adoptElements(oldSurface);
      oldSurface.rootElement = null;
      if (!(this.rootElement != null)) dart.assertFailed();
    }
    retain() {
      let t4;
      if (!(this.rootElement != null)) dart.assertFailed();
      this.recomputeTransformAndClip();
      if (dart.test(ui._debugExplainSurfaceStats)) {
        t4 = ui._surfaceStatsFor(this);
        t4.retainSurfaceCount = dart.notNull(t4.retainSurfaceCount) + 1;
      }
    }
    recycle() {
      if (!!dart.equals(this.reuseStrategy, ui.PersistedSurfaceReuseStrategy.retain)) dart.assertFailed();
      this.rootElement[$remove]();
      this.rootElement = null;
    }
    debugValidate(validationErrors) {
      if (this.rootElement == null) {
        validationErrors[$add](dart.str(this[$runtimeType]) + " has null element.");
      }
      if (dart.equals(this.reuseStrategy, ui.PersistedSurfaceReuseStrategy.retain)) {
        validationErrors[$add](dart.str(this[$runtimeType]) + " is still scheduled to be retained at " + "the end of the frame.");
      }
    }
    isTotalMatchFor(other) {
      if (!(other != null)) dart.assertFailed();
      if (dart.equals(this.reuseStrategy, ui.PersistedSurfaceReuseStrategy.retain) || dart.equals(other.reuseStrategy, ui.PersistedSurfaceReuseStrategy.retain)) {
        return false;
      }
      return dart.equals(dart.runtimeType(other), this[$runtimeType]) && core.identical(other.paintedBy, this.paintedBy) && dart.test(this[_hasExactDescendants](other));
    }
    isFuzzyMatchFor(other) {
      if (!(other != null)) dart.assertFailed();
      if (dart.equals(this.reuseStrategy, ui.PersistedSurfaceReuseStrategy.retain) || dart.equals(other.reuseStrategy, ui.PersistedSurfaceReuseStrategy.retain)) {
        return false;
      }
      return dart.equals(dart.runtimeType(other), this[$runtimeType]);
    }
    [_hasExactDescendants](other) {
      if ((this[_descendants] == null || dart.test(this[_descendants][$isEmpty])) && (other[_descendants] == null || dart.test(other[_descendants][$isEmpty]))) {
        return true;
      } else if (this[_descendants] == null || other[_descendants] == null) {
        return false;
      }
      if (this[_descendants][$length] != other[_descendants][$length]) {
        return false;
      }
      return this[_descendants].containsAll(other[_descendants]);
    }
    defaultCreateElement(tagName) {
      let element = html.Element.tag(tagName);
      element.style[$position] = "absolute";
      if (dart.test(src__engine.assertionsEnabled)) {
        element[$setAttribute]("created-by", dart.str(dart.runtimeType(this.paintedBy)));
      }
      return element;
    }
    get transform() {
      return this[_transform];
    }
    get globalClip() {
      return this[_globalClip];
    }
    recomputeTransformAndClip() {
      this[_transform] = this.parent[_transform];
      this[_globalClip] = this.parent[_globalClip];
    }
    debugPrint(buffer, indent) {
      if (this.rootElement != null) {
        buffer.write("  "[$times](indent) + "<" + this.rootElement.tagName[$toLowerCase]() + " ");
      } else {
        buffer.write("  "[$times](indent) + "<" + dart.str(this[$runtimeType]) + " recycled ");
      }
      this.debugPrintAttributes(buffer);
      buffer.writeln(">");
      this.debugPrintChildren(buffer, indent);
      if (this.rootElement != null) {
        buffer.writeln("  "[$times](indent) + "</" + this.rootElement.tagName[$toLowerCase]() + ">");
      } else {
        buffer.writeln("  "[$times](indent) + "</" + dart.str(this[$runtimeType]) + ">");
      }
    }
    debugPrintAttributes(buffer) {
      if (this.rootElement != null) {
        buffer.write("@" + dart.str(dart.hashCode(this.rootElement)) + " ");
      }
      buffer.write("painted-by=\"" + dart.str(dart.runtimeType(this.paintedBy)) + "\"");
    }
    debugPrintChildren(buffer, indent) {
    }
    toString() {
      if (dart.test(src__engine.assertionsEnabled)) {
        let log = new core.StringBuffer.new();
        this.debugPrint(log, 0);
        return log.toString();
      } else {
        return super[$toString]();
      }
    }
  };
  (ui.PersistedSurface.new = function(paintedBy) {
    this[reuseStrategy] = ui.PersistedSurfaceReuseStrategy.match;
    this[rootElement$2] = null;
    this[parent$] = null;
    this[_descendants] = null;
    this[_transform] = null;
    this[_globalClip] = null;
    this[paintedBy$] = paintedBy;
    if (!(paintedBy != null)) dart.assertFailed();
    ;
  }).prototype = ui.PersistedSurface.prototype;
  dart.addTypeTests(ui.PersistedSurface);
  const reuseStrategy = Symbol("PersistedSurface.reuseStrategy");
  const rootElement$2 = Symbol("PersistedSurface.rootElement");
  const parent$ = Symbol("PersistedSurface.parent");
  const paintedBy$ = Symbol("PersistedSurface.paintedBy");
  ui.PersistedSurface[dart.implements] = () => [ui.EngineLayer];
  dart.setMethodSignature(ui.PersistedSurface, () => ({
    __proto__: dart.getMethods(ui.PersistedSurface.__proto__),
    build: dart.fnType(dart.void, []),
    adoptElements: dart.fnType(dart.void, [core.Object]),
    update: dart.fnType(dart.void, [core.Object]),
    retain: dart.fnType(dart.void, []),
    recycle: dart.fnType(dart.void, []),
    debugValidate: dart.fnType(dart.void, [core.List$(core.String)]),
    isTotalMatchFor: dart.fnType(core.bool, [ui.PersistedSurface]),
    isFuzzyMatchFor: dart.fnType(core.bool, [ui.PersistedSurface]),
    [_hasExactDescendants]: dart.fnType(core.bool, [ui.PersistedSurface]),
    defaultCreateElement: dart.fnType(html.Element, [core.String]),
    recomputeTransformAndClip: dart.fnType(dart.void, []),
    debugPrint: dart.fnType(dart.void, [core.StringBuffer, core.int]),
    debugPrintAttributes: dart.fnType(dart.void, [core.StringBuffer]),
    debugPrintChildren: dart.fnType(dart.void, [core.StringBuffer, core.int])
  }));
  dart.setGetterSignature(ui.PersistedSurface, () => ({
    __proto__: dart.getGetters(ui.PersistedSurface.__proto__),
    childContainer: html.Element,
    transform: src__engine.Matrix4,
    globalClip: ui.Rect
  }));
  dart.setFieldSignature(ui.PersistedSurface, () => ({
    __proto__: dart.getFields(ui.PersistedSurface.__proto__),
    reuseStrategy: dart.fieldType(ui.PersistedSurfaceReuseStrategy),
    rootElement: dart.fieldType(html.Element),
    parent: dart.fieldType(ui.PersistedContainerSurface),
    paintedBy: dart.finalFieldType(core.Object),
    [_descendants]: dart.fieldType(core.Set$(core.Object)),
    [_transform]: dart.fieldType(src__engine.Matrix4),
    [_globalClip]: dart.fieldType(ui.Rect)
  }));
  dart.defineExtensionMethods(ui.PersistedSurface, ['toString']);
  ui.PersistedLeafSurface = class PersistedLeafSurface extends ui.PersistedSurface {
    visitChildren(visitor) {
    }
  };
  (ui.PersistedLeafSurface.new = function(paintedBy) {
    ui.PersistedLeafSurface.__proto__.new.call(this, paintedBy);
    ;
  }).prototype = ui.PersistedLeafSurface.prototype;
  dart.addTypeTests(ui.PersistedLeafSurface);
  dart.setMethodSignature(ui.PersistedLeafSurface, () => ({
    __proto__: dart.getMethods(ui.PersistedLeafSurface.__proto__),
    visitChildren: dart.fnType(dart.void, [dart.fnType(dart.void, [ui.PersistedSurface])])
  }));
  const _children$ = dart.privateName(ui, "_children");
  const _updateChild = dart.privateName(ui, "_updateChild");
  ui.PersistedContainerSurface = class PersistedContainerSurface extends ui.PersistedSurface {
    visitChildren(visitor) {
      this[_children$][$forEach](visitor);
    }
    appendChild(child) {
      let t4;
      this[_children$][$add](child);
      child.parent = this;
      if (!core.identical(child.paintedBy, this.paintedBy)) {
        let container = this;
        while (container != null && core.identical(container.paintedBy, this.paintedBy)) {
          t4 = container;
          t4[_descendants] == null ? t4[_descendants] = new (_HashSetOfObject()).new() : null;
          container[_descendants].add(child.paintedBy);
          container = container.parent;
        }
      }
    }
    build() {
      super.build();
      let len = this[_children$][$length];
      let containerElement = this.childContainer;
      for (let i = 0; i < dart.notNull(len); i = i + 1) {
        let child = this[_children$][$_get](i);
        if (dart.equals(child.reuseStrategy, ui.PersistedSurfaceReuseStrategy.retain)) {
          if (!(child.rootElement != null)) dart.assertFailed();
          ui._retainSurface(child);
        } else {
          child.build();
        }
        containerElement[$append](child.rootElement);
      }
    }
    [_updateChild](newChild, oldChild) {
      if (!(newChild.rootElement == null)) dart.assertFailed();
      if (!(dart.test(oldChild.isTotalMatchFor(newChild)) || dart.test(oldChild.isFuzzyMatchFor(newChild)))) dart.assertFailed();
      let oldElement = oldChild.rootElement;
      if (!(oldElement != null)) dart.assertFailed();
      newChild.update(oldChild);
      if (!(oldChild.rootElement == null)) dart.assertFailed();
      if (!(newChild.rootElement == oldElement)) dart.assertFailed();
    }
    update(oldContainer) {
      ui.PersistedContainerSurface._check(oldContainer);
      if (!(dart.test(this.isTotalMatchFor(oldContainer)) || dart.test(this.isFuzzyMatchFor(oldContainer)))) dart.assertFailed();
      super.update(oldContainer);
      let bottomInNew = dart.notNull(this[_children$][$length]) - 1;
      let bottomInOld = dart.notNull(oldContainer[_children$][$length]) - 1;
      let containerElement = this.childContainer;
      let nextSibling = null;
      const insertDomNodeIfMoved = newChild => {
        let t4;
        if (!(newChild.rootElement != null)) dart.assertFailed();
        if (!dart.equals(newChild.parent, this)) dart.assertFailed();
        let reparented = !dart.equals(newChild.rootElement[$parent], containerElement);
        let moved = reparented || !dart.equals(newChild.rootElement.nextElementSibling, (t4 = nextSibling, t4 == null ? null : t4.rootElement));
        if (moved) {
          if (nextSibling == null) {
            containerElement[$append](newChild.rootElement);
          } else {
            containerElement.insertBefore(newChild.rootElement, nextSibling.rootElement);
          }
        }
      };
      dart.fn(insertDomNodeIfMoved, PersistedSurfaceTovoid());
      while (bottomInNew >= 0 && bottomInOld >= 0) {
        let newChild = this[_children$][$_get](bottomInNew);
        if (dart.equals(newChild.reuseStrategy, ui.PersistedSurfaceReuseStrategy.retain)) {
          insertDomNodeIfMoved(newChild);
          ui._retainSurface(newChild);
        } else {
          let oldChild = oldContainer[_children$][$_get](bottomInOld);
          let onlyChildren = this[_children$][$length] === 1 && oldContainer[_children$][$length] === 1;
          if (onlyChildren && dart.test(oldChild.isFuzzyMatchFor(newChild)) || dart.test(oldChild.isTotalMatchFor(newChild))) {
            this[_updateChild](newChild, oldChild);
            bottomInOld = bottomInOld - 1;
          } else {
            let searchPointer = bottomInOld - 1;
            let match = null;
            while (searchPointer >= 0) {
              let candidate = oldContainer[_children$][$_get](searchPointer);
              let isNotYetReused = candidate.rootElement != null;
              if (isNotYetReused && dart.test(candidate.isTotalMatchFor(newChild))) {
                match = candidate;
                break;
              }
              searchPointer = searchPointer - 1;
            }
            if (match != null) {
              this[_updateChild](newChild, match);
            } else {
              newChild.build();
            }
            insertDomNodeIfMoved(newChild);
          }
        }
        if (!(newChild.rootElement != null)) dart.assertFailed();
        bottomInNew = bottomInNew - 1;
        nextSibling = newChild;
      }
      while (bottomInNew >= 0) {
        if (!(bottomInOld === -1)) dart.assertFailed();
        let newChild = this[_children$][$_get](bottomInNew);
        if (dart.equals(newChild.reuseStrategy, ui.PersistedSurfaceReuseStrategy.retain)) {
          ui._retainSurface(newChild);
        } else {
          newChild.build();
        }
        insertDomNodeIfMoved(newChild);
        bottomInNew = bottomInNew - 1;
        if (!(newChild.rootElement != null)) dart.assertFailed();
        nextSibling = newChild;
      }
      let len = oldContainer[_children$][$length];
      for (let i = 0; i < dart.notNull(len); i = i + 1) {
        let oldChild = oldContainer[_children$][$_get](i);
        if (oldChild.rootElement != null && !dart.equals(oldChild.reuseStrategy, ui.PersistedSurfaceReuseStrategy.retain)) {
          oldChild.recycle();
        }
      }
      if (!dart.test(dart.fn(() => {
        for (let i = 0; i < dart.notNull(oldContainer[_children$][$length]); i = i + 1) {
          if (!dart.equals(oldContainer[_children$][$_get](i).reuseStrategy, ui.PersistedSurfaceReuseStrategy.retain)) {
            if (!(oldContainer[_children$][$_get](i).rootElement == null)) dart.assertFailed();
            if (!(oldContainer[_children$][$_get](i).childContainer == null)) dart.assertFailed();
          }
        }
        for (let i = 0; i < dart.notNull(this[_children$][$length]); i = i + 1) {
          if (!(this[_children$][$_get](i).rootElement != null)) dart.assertFailed();
          if (!dart.equals(this[_children$][$_get](i).rootElement[$parent], containerElement)) dart.assertFailed();
        }
        return true;
      }, VoidTobool())())) dart.assertFailed();
    }
    retain() {
      super.retain();
      let len = this[_children$][$length];
      for (let i = 0; i < dart.notNull(len); i = i + 1) {
        this[_children$][$_get](i).retain();
      }
    }
    recycle() {
      for (let i = 0; i < dart.notNull(this[_children$][$length]); i = i + 1) {
        let child = this[_children$][$_get](i);
        if (!dart.equals(child.reuseStrategy, ui.PersistedSurfaceReuseStrategy.retain)) {
          child.recycle();
        }
      }
      super.recycle();
    }
    debugValidate(validationErrors) {
      super.debugValidate(validationErrors);
      for (let i = 0; i < dart.notNull(this[_children$][$length]); i = i + 1) {
        this[_children$][$_get](i).debugValidate(validationErrors);
      }
    }
    debugPrintChildren(buffer, indent) {
      super.debugPrintChildren(buffer, indent);
      for (let i = 0; i < dart.notNull(this[_children$][$length]); i = i + 1) {
        this[_children$][$_get](i).debugPrint(buffer, dart.notNull(indent) + 1);
      }
    }
  };
  (ui.PersistedContainerSurface.new = function(paintedBy) {
    this[_children$] = JSArrayOfPersistedSurface().of([]);
    ui.PersistedContainerSurface.__proto__.new.call(this, paintedBy);
    ;
  }).prototype = ui.PersistedContainerSurface.prototype;
  dart.addTypeTests(ui.PersistedContainerSurface);
  dart.setMethodSignature(ui.PersistedContainerSurface, () => ({
    __proto__: dart.getMethods(ui.PersistedContainerSurface.__proto__),
    visitChildren: dart.fnType(dart.void, [dart.fnType(dart.void, [ui.PersistedSurface])]),
    appendChild: dart.fnType(dart.void, [ui.PersistedSurface]),
    [_updateChild]: dart.fnType(dart.void, [ui.PersistedSurface, ui.PersistedSurface])
  }));
  dart.setFieldSignature(ui.PersistedContainerSurface, () => ({
    __proto__: dart.getFields(ui.PersistedContainerSurface.__proto__),
    [_children$]: dart.finalFieldType(core.List$(ui.PersistedSurface))
  }));
  let const$41;
  ui.PersistedScene = class PersistedScene extends ui.PersistedContainerSurface {
    isTotalMatchFor(other) {
      if (!ui.PersistedScene.is(other)) dart.assertFailed();
      return true;
    }
    recomputeTransformAndClip() {
      let screenWidth = html.window.innerWidth[$toDouble]();
      let screenHeight = html.window.innerHeight[$toDouble]();
      this[_globalClip] = new ui.Rect.fromLTRB(0.0, 0.0, screenWidth, screenHeight);
    }
    createElement() {
      return this.defaultCreateElement("flt-scene");
    }
    apply() {
    }
  };
  (ui.PersistedScene.new = function() {
    ui.PersistedScene.__proto__.new.call(this, const$41 || (const$41 = dart.const(new core.Object.new())));
    this[_transform] = src__engine.Matrix4.identity();
  }).prototype = ui.PersistedScene.prototype;
  dart.addTypeTests(ui.PersistedScene);
  dart.setMethodSignature(ui.PersistedScene, () => ({
    __proto__: dart.getMethods(ui.PersistedScene.__proto__),
    createElement: dart.fnType(html.Element, []),
    apply: dart.fnType(dart.void, [])
  }));
  ui.PersistedTransform = class PersistedTransform extends ui.PersistedContainerSurface {
    get matrix4() {
      return this[matrix4$0];
    }
    set matrix4(value) {
      super.matrix4 = value;
    }
    recomputeTransformAndClip() {
      this[_transform] = this.parent[_transform].multiplied(new src__engine.Matrix4.fromFloat64List(this.matrix4));
      this[_globalClip] = this.parent[_globalClip];
    }
    createElement() {
      let t4;
      t4 = this.defaultCreateElement("flt-transform");
      t4.style[$transformOrigin] = "0 0 0";
      return t4;
    }
    apply() {
      this.rootElement.style[$transform] = src__engine.float64ListToCssTransform(this.matrix4);
    }
    update(oldSurface) {
      ui.PersistedTransform._check(oldSurface);
      super.update(oldSurface);
      if (oldSurface.matrix4 == this.matrix4) {
        return;
      }
      let matrixChanged = false;
      for (let i = 0; i < dart.notNull(this.matrix4[$length]); i = i + 1) {
        if (this.matrix4[$_get](i) != oldSurface.matrix4[$_get](i)) {
          matrixChanged = true;
          break;
        }
      }
      if (matrixChanged) {
        this.apply();
      }
    }
  };
  (ui.PersistedTransform.new = function(paintedBy, matrix4) {
    this[matrix4$0] = matrix4;
    ui.PersistedTransform.__proto__.new.call(this, paintedBy);
    ;
  }).prototype = ui.PersistedTransform.prototype;
  dart.addTypeTests(ui.PersistedTransform);
  const matrix4$0 = Symbol("PersistedTransform.matrix4");
  dart.setMethodSignature(ui.PersistedTransform, () => ({
    __proto__: dart.getMethods(ui.PersistedTransform.__proto__),
    createElement: dart.fnType(html.Element, []),
    apply: dart.fnType(dart.void, [])
  }));
  dart.setFieldSignature(ui.PersistedTransform, () => ({
    __proto__: dart.getFields(ui.PersistedTransform.__proto__),
    matrix4: dart.finalFieldType(typed_data.Float64List)
  }));
  ui.PersistedOffset = class PersistedOffset extends ui.PersistedContainerSurface {
    get dx() {
      return this[dx$0];
    }
    set dx(value) {
      super.dx = value;
    }
    get dy() {
      return this[dy$0];
    }
    set dy(value) {
      super.dy = value;
    }
    recomputeTransformAndClip() {
      this[_transform] = this.parent[_transform];
      if (this.dx !== 0.0 || this.dy !== 0.0) {
        this[_transform] = this[_transform].clone();
        this[_transform].translate(this.dx, this.dy);
      }
      this[_globalClip] = this.parent[_globalClip];
    }
    createElement() {
      let t4;
      t4 = this.defaultCreateElement("flt-offset");
      t4.style[$transformOrigin] = "0 0 0";
      return t4;
    }
    apply() {
      this.rootElement.style[$transform] = "translate(" + dart.str(this.dx) + "px, " + dart.str(this.dy) + "px)";
    }
    update(oldSurface) {
      ui.PersistedOffset._check(oldSurface);
      super.update(oldSurface);
      if (oldSurface.dx != this.dx || oldSurface.dy != this.dy) {
        this.apply();
      }
    }
  };
  (ui.PersistedOffset.new = function(paintedBy, dx, dy) {
    this[dx$0] = dx;
    this[dy$0] = dy;
    ui.PersistedOffset.__proto__.new.call(this, paintedBy);
    ;
  }).prototype = ui.PersistedOffset.prototype;
  dart.addTypeTests(ui.PersistedOffset);
  const dx$0 = Symbol("PersistedOffset.dx");
  const dy$0 = Symbol("PersistedOffset.dy");
  dart.setMethodSignature(ui.PersistedOffset, () => ({
    __proto__: dart.getMethods(ui.PersistedOffset.__proto__),
    createElement: dart.fnType(html.Element, []),
    apply: dart.fnType(dart.void, [])
  }));
  dart.setFieldSignature(ui.PersistedOffset, () => ({
    __proto__: dart.getFields(ui.PersistedOffset.__proto__),
    dx: dart.finalFieldType(core.double),
    dy: dart.finalFieldType(core.double)
  }));
  const _childContainer = dart.privateName(ui, "_childContainer");
  ui._DomClip = class _DomClip extends ui.PersistedContainerSurface {};
  ui._DomClip[dart.mixinOn] = PersistedContainerSurface => class _DomClip extends PersistedContainerSurface {
    get childContainer() {
      return this[_childContainer];
    }
    adoptElements(oldSurface) {
      ui._DomClip._check(oldSurface);
      super.adoptElements(oldSurface);
      this[_childContainer] = oldSurface[_childContainer];
      oldSurface[_childContainer] = null;
    }
    createElement() {
      let t4;
      let element = this.defaultCreateElement("flt-clip");
      if (!dart.test(ui.debugShowClipLayers)) {
        element.style[$overflow] = "hidden";
      } else {
        element.style[$boxShadow] = "inset 0 0 10px green";
      }
      this[_childContainer] = html.Element.tag("flt-clip-interior");
      if (dart.test(ui._debugExplainSurfaceStats)) {
        t4 = ui._surfaceStatsFor(this);
        t4.allocatedDomNodeCount = dart.notNull(t4.allocatedDomNodeCount) + 1;
      }
      this[_childContainer].style[$position] = "absolute";
      element[$append](this[_childContainer]);
      return element;
    }
    recycle() {
      super.recycle();
      this[_childContainer] = null;
    }
  };
  (ui._DomClip[dart.mixinNew] = function() {
    this[_childContainer] = null;
  }).prototype = ui._DomClip.prototype;
  dart.addTypeTests(ui._DomClip);
  ui._DomClip[dart.implements] = () => [ui.PersistedContainerSurface];
  dart.setMethodSignature(ui._DomClip, () => ({
    __proto__: dart.getMethods(ui._DomClip.__proto__),
    createElement: dart.fnType(html.Element, [])
  }));
  dart.setFieldSignature(ui._DomClip, () => ({
    __proto__: dart.getFields(ui._DomClip.__proto__),
    [_childContainer]: dart.fieldType(html.Element)
  }));
  const PersistedContainerSurface__DomClip$ = class PersistedContainerSurface__DomClip extends ui.PersistedContainerSurface {};
  (PersistedContainerSurface__DomClip$.new = function(paintedBy) {
    ui._DomClip[dart.mixinNew].call(this);
    PersistedContainerSurface__DomClip$.__proto__.new.call(this, paintedBy);
  }).prototype = PersistedContainerSurface__DomClip$.prototype;
  dart.applyMixin(PersistedContainerSurface__DomClip$, ui._DomClip);
  ui.PersistedClipRect = class PersistedClipRect extends PersistedContainerSurface__DomClip$ {
    get rect() {
      return this[rect$3];
    }
    set rect(value) {
      super.rect = value;
    }
    recomputeTransformAndClip() {
      this[_transform] = this.parent[_transform];
      this[_globalClip] = this.parent[_globalClip].intersect(src__engine.localClipRectToGlobalClip({localClip: this.rect, transform: this[_transform]}));
    }
    createElement() {
      let t4;
      t4 = super.createElement();
      t4[$setAttribute]("clip-type", "rect");
      return t4;
    }
    apply() {
      let t4;
      t4 = this.rootElement.style;
      t4[$transform] = "translate(" + dart.str(this.rect.left) + "px, " + dart.str(this.rect.top) + "px)";
      t4[$width] = dart.str(dart.notNull(this.rect.right) - dart.notNull(this.rect.left)) + "px";
      t4[$height] = dart.str(dart.notNull(this.rect.bottom) - dart.notNull(this.rect.top)) + "px";
      t4;
      this.childContainer.style[$transform] = "translate(" + dart.str(-dart.notNull(this.rect.left)) + "px, " + dart.str(-dart.notNull(this.rect.top)) + "px)";
    }
    update(oldSurface) {
      ui.PersistedClipRect._check(oldSurface);
      super.update(oldSurface);
      if (!dart.equals(this.rect, oldSurface.rect)) {
        this.apply();
      }
    }
  };
  (ui.PersistedClipRect.new = function(paintedBy, rect) {
    this[rect$3] = rect;
    ui.PersistedClipRect.__proto__.new.call(this, paintedBy);
    ;
  }).prototype = ui.PersistedClipRect.prototype;
  dart.addTypeTests(ui.PersistedClipRect);
  const rect$3 = Symbol("PersistedClipRect.rect");
  dart.setMethodSignature(ui.PersistedClipRect, () => ({
    __proto__: dart.getMethods(ui.PersistedClipRect.__proto__),
    apply: dart.fnType(dart.void, [])
  }));
  dart.setFieldSignature(ui.PersistedClipRect, () => ({
    __proto__: dart.getFields(ui.PersistedClipRect.__proto__),
    rect: dart.finalFieldType(ui.Rect)
  }));
  const PersistedContainerSurface__DomClip$$ = class PersistedContainerSurface__DomClip extends ui.PersistedContainerSurface {};
  (PersistedContainerSurface__DomClip$$.new = function(paintedBy) {
    ui._DomClip[dart.mixinNew].call(this);
    PersistedContainerSurface__DomClip$$.__proto__.new.call(this, paintedBy);
  }).prototype = PersistedContainerSurface__DomClip$$.prototype;
  dart.applyMixin(PersistedContainerSurface__DomClip$$, ui._DomClip);
  ui.PersistedClipRRect = class PersistedClipRRect extends PersistedContainerSurface__DomClip$$ {
    get rrect() {
      return this[rrect$2];
    }
    set rrect(value) {
      super.rrect = value;
    }
    get clipBehavior() {
      return this[clipBehavior$];
    }
    set clipBehavior(value) {
      super.clipBehavior = value;
    }
    recomputeTransformAndClip() {
      this[_transform] = this.parent[_transform];
      this[_globalClip] = this.parent[_globalClip].intersect(src__engine.localClipRectToGlobalClip({localClip: this.rrect.outerRect, transform: this[_transform]}));
    }
    createElement() {
      let t4;
      t4 = super.createElement();
      t4[$setAttribute]("clip-type", "rrect");
      return t4;
    }
    apply() {
      let t4;
      t4 = this.rootElement.style;
      t4[$transform] = "translate(" + dart.str(this.rrect.left) + "px, " + dart.str(this.rrect.top) + "px)";
      t4[$width] = dart.str(this.rrect.width) + "px";
      t4[$height] = dart.str(this.rrect.height) + "px";
      t4[$borderTopLeftRadius] = dart.str(this.rrect.tlRadiusX) + "px";
      t4[$borderTopRightRadius] = dart.str(this.rrect.trRadiusX) + "px";
      t4[$borderBottomRightRadius] = dart.str(this.rrect.brRadiusX) + "px";
      t4[$borderBottomLeftRadius] = dart.str(this.rrect.blRadiusX) + "px";
      t4;
      this.childContainer.style[$transform] = "translate(" + dart.str(-dart.notNull(this.rrect.left)) + "px, " + dart.str(-dart.notNull(this.rrect.top)) + "px)";
    }
    update(oldSurface) {
      ui.PersistedClipRRect._check(oldSurface);
      super.update(oldSurface);
      if (!dart.equals(this.rrect, oldSurface.rrect)) {
        this.apply();
      }
    }
  };
  (ui.PersistedClipRRect.new = function(paintedBy, rrect, clipBehavior) {
    this[rrect$2] = rrect;
    this[clipBehavior$] = clipBehavior;
    ui.PersistedClipRRect.__proto__.new.call(this, paintedBy);
    ;
  }).prototype = ui.PersistedClipRRect.prototype;
  dart.addTypeTests(ui.PersistedClipRRect);
  const rrect$2 = Symbol("PersistedClipRRect.rrect");
  const clipBehavior$ = Symbol("PersistedClipRRect.clipBehavior");
  dart.setMethodSignature(ui.PersistedClipRRect, () => ({
    __proto__: dart.getMethods(ui.PersistedClipRRect.__proto__),
    apply: dart.fnType(dart.void, [])
  }));
  dart.setFieldSignature(ui.PersistedClipRRect, () => ({
    __proto__: dart.getFields(ui.PersistedClipRRect.__proto__),
    rrect: dart.finalFieldType(ui.RRect),
    clipBehavior: dart.finalFieldType(ui.Clip)
  }));
  ui.PersistedOpacity = class PersistedOpacity extends ui.PersistedContainerSurface {
    get alpha() {
      return this[alpha$];
    }
    set alpha(value) {
      super.alpha = value;
    }
    get offset() {
      return this[offset$2];
    }
    set offset(value) {
      super.offset = value;
    }
    recomputeTransformAndClip() {
      this[_transform] = this.parent[_transform];
      let dx = this.offset.dx;
      let dy = this.offset.dy;
      if (dx !== 0.0 || dy !== 0.0) {
        this[_transform] = this[_transform].clone();
        this[_transform].translate(dx, dy);
      }
      this[_globalClip] = this.parent[_globalClip];
    }
    createElement() {
      let t4;
      t4 = this.defaultCreateElement("flt-opacity");
      t4.style[$transformOrigin] = "0 0 0";
      return t4;
    }
    apply() {
      this.rootElement.style[$opacity] = dart.str(dart.notNull(this.alpha) / 255);
      this.rootElement.style[$transform] = "translate(" + dart.str(this.offset.dx) + "px, " + dart.str(this.offset.dy) + "px)";
    }
    update(oldSurface) {
      ui.PersistedOpacity._check(oldSurface);
      super.update(oldSurface);
      if (this.alpha != oldSurface.alpha || !dart.equals(this.offset, oldSurface.offset)) {
        this.apply();
      }
    }
  };
  (ui.PersistedOpacity.new = function(paintedBy, alpha, offset) {
    this[alpha$] = alpha;
    this[offset$2] = offset;
    ui.PersistedOpacity.__proto__.new.call(this, paintedBy);
    ;
  }).prototype = ui.PersistedOpacity.prototype;
  dart.addTypeTests(ui.PersistedOpacity);
  const alpha$ = Symbol("PersistedOpacity.alpha");
  const offset$2 = Symbol("PersistedOpacity.offset");
  dart.setMethodSignature(ui.PersistedOpacity, () => ({
    __proto__: dart.getMethods(ui.PersistedOpacity.__proto__),
    createElement: dart.fnType(html.Element, []),
    apply: dart.fnType(dart.void, [])
  }));
  dart.setFieldSignature(ui.PersistedOpacity, () => ({
    __proto__: dart.getFields(ui.PersistedOpacity.__proto__),
    alpha: dart.finalFieldType(core.int),
    offset: dart.finalFieldType(ui.Offset)
  }));
  const _clipElement = dart.privateName(ui, "_clipElement");
  ui._PersistedClipPath = class _PersistedClipPath extends ui.PersistedContainerSurface {
    createElement() {
      return this.defaultCreateElement("flt-clippath");
    }
    apply() {
      let t4;
      if (this.clipPath == null) {
        if (this[_clipElement] != null) {
          src__engine.domRenderer.setElementStyle(this.childContainer, "clip-path", "");
          src__engine.domRenderer.setElementStyle(this.childContainer, "-webkit-clip-path", "");
          this[_clipElement][$remove]();
          this[_clipElement] = null;
        }
        return;
      }
      let svgClipPath = ui._pathToSvgClipPath(this.clipPath);
      t4 = this[_clipElement];
      t4 == null ? null : t4[$remove]();
      this[_clipElement] = html.Element.html(svgClipPath, {treeSanitizer: new ui._NullTreeSanitizer.new()});
      src__engine.domRenderer.append(this.childContainer, this[_clipElement]);
      src__engine.domRenderer.setElementStyle(this.childContainer, "clip-path", "url(#svgClip" + dart.str(ui._clipCounter) + ")");
      src__engine.domRenderer.setElementStyle(this.childContainer, "-webkit-clip-path", "url(#svgClip" + dart.str(ui._clipCounter) + ")");
    }
    update(oldSurface) {
      let t4;
      ui._PersistedClipPath._check(oldSurface);
      super.update(oldSurface);
      if (!dart.equals(oldSurface.clipPath, this.clipPath)) {
        t4 = oldSurface[_clipElement];
        t4 == null ? null : t4[$remove]();
        this.apply();
      } else {
        this[_clipElement] = oldSurface[_clipElement];
      }
      oldSurface[_clipElement] = null;
    }
    recycle() {
      let t4;
      t4 = this[_clipElement];
      t4 == null ? null : t4[$remove]();
      this[_clipElement] = null;
      super.recycle();
    }
  };
  (ui._PersistedClipPath.new = function(paintedBy, clipPath, clipBehavior) {
    this[_clipElement] = null;
    this.clipPath = clipPath;
    this.clipBehavior = clipBehavior;
    ui._PersistedClipPath.__proto__.new.call(this, paintedBy);
    ;
  }).prototype = ui._PersistedClipPath.prototype;
  dart.addTypeTests(ui._PersistedClipPath);
  dart.setMethodSignature(ui._PersistedClipPath, () => ({
    __proto__: dart.getMethods(ui._PersistedClipPath.__proto__),
    createElement: dart.fnType(html.Element, []),
    apply: dart.fnType(dart.void, [])
  }));
  dart.setFieldSignature(ui._PersistedClipPath, () => ({
    __proto__: dart.getFields(ui._PersistedClipPath.__proto__),
    clipPath: dart.finalFieldType(ui.Path),
    clipBehavior: dart.finalFieldType(ui.Clip),
    [_clipElement]: dart.fieldType(html.Element)
  }));
  ui._NullTreeSanitizer = class _NullTreeSanitizer extends core.Object {
    sanitizeTree(node) {
    }
  };
  (ui._NullTreeSanitizer.new = function() {
    ;
  }).prototype = ui._NullTreeSanitizer.prototype;
  dart.addTypeTests(ui._NullTreeSanitizer);
  ui._NullTreeSanitizer[dart.implements] = () => [html.NodeTreeSanitizer];
  dart.setMethodSignature(ui._NullTreeSanitizer, () => ({
    __proto__: dart.getMethods(ui._NullTreeSanitizer.__proto__),
    sanitizeTree: dart.fnType(dart.void, [html.Node])
  }));
  ui._PaintRequest = class _PaintRequest extends core.Object {};
  (ui._PaintRequest.new = function(opts) {
    let canvasSize = opts && 'canvasSize' in opts ? opts.canvasSize : null;
    let paintCallback = opts && 'paintCallback' in opts ? opts.paintCallback : null;
    this.canvasSize = canvasSize;
    this.paintCallback = paintCallback;
    if (!(canvasSize != null)) dart.assertFailed();
    if (!(paintCallback != null)) dart.assertFailed();
    ;
  }).prototype = ui._PaintRequest.prototype;
  dart.addTypeTests(ui._PaintRequest);
  dart.setFieldSignature(ui._PaintRequest, () => ({
    __proto__: dart.getFields(ui._PaintRequest.__proto__),
    canvasSize: dart.finalFieldType(ui.Size),
    paintCallback: dart.finalFieldType(dart.fnType(dart.void, []))
  }));
  const _localCullRect = dart.privateName(ui, "_localCullRect");
  const _globalCullRect = dart.privateName(ui, "_globalCullRect");
  const _recomputeCullRect = dart.privateName(ui, "_recomputeCullRect");
  const _applyPaint$ = dart.privateName(ui, "_applyPaint");
  const _applyTranslate = dart.privateName(ui, "_applyTranslate");
  ui.PersistedPicture = class PersistedPicture extends ui.PersistedLeafSurface {
    get dx() {
      return this[dx$1];
    }
    set dx(value) {
      super.dx = value;
    }
    get dy() {
      return this[dy$1];
    }
    set dy(value) {
      super.dy = value;
    }
    get picture() {
      return this[picture$0];
    }
    set picture(value) {
      super.picture = value;
    }
    get localPaintBounds() {
      return this[localPaintBounds];
    }
    set localPaintBounds(value) {
      super.localPaintBounds = value;
    }
    get hints() {
      return this[hints$];
    }
    set hints(value) {
      super.hints = value;
    }
    createElement() {
      return this.defaultCreateElement("flt-picture");
    }
    recomputeTransformAndClip() {
      this[_transform] = this.parent[_transform];
      if (this.dx !== 0.0 || this.dy !== 0.0) {
        this[_transform] = this[_transform].clone();
        this[_transform].translate(this.dx, this.dy);
      }
      this[_globalClip] = this.parent[_globalClip];
    }
    get localCullRect() {
      return this[_localCullRect];
    }
    get debugGlobalCullRect() {
      return this[_globalCullRect];
    }
    [_recomputeCullRect]() {
      if (!(this.transform != null)) dart.assertFailed();
      if (!(this.localPaintBounds != null)) dart.assertFailed();
      let globalPaintBounds = src__engine.localClipRectToGlobalClip({localClip: this.localPaintBounds, transform: this.transform});
      let tightGlobalCullRect = globalPaintBounds.intersect(this[_globalClip]);
      let tightLocalCullRect = null;
      if (dart.notNull(tightGlobalCullRect.width) <= 0 || dart.notNull(tightGlobalCullRect.height) <= 0) {
        tightGlobalCullRect = ui.Rect.zero;
        tightLocalCullRect = ui.Rect.zero;
      } else {
        let invertedTransform = new src__engine.Matrix4.fromFloat64List(_native_typed_data.NativeFloat64List.new(16));
        let det = invertedTransform.copyInverse(this.transform);
        if (det === 0) {
          tightGlobalCullRect = ui.Rect.zero;
          tightLocalCullRect = ui.Rect.zero;
        } else {
          tightLocalCullRect = src__engine.localClipRectToGlobalClip({localClip: tightGlobalCullRect, transform: invertedTransform});
        }
      }
      if (!(tightLocalCullRect != null)) dart.assertFailed();
      if (this[_localCullRect] == null) {
        this[_localCullRect] = tightLocalCullRect;
        this[_globalCullRect] = tightGlobalCullRect;
        return true;
      } else if (dart.equals(tightLocalCullRect, ui.Rect.zero)) {
        let wasZero = dart.equals(this[_localCullRect], ui.Rect.zero);
        this[_localCullRect] = ui.Rect.zero;
        this[_globalCullRect] = ui.Rect.zero;
        return !wasZero;
      } else if (dart.test(src__engine.rectContainsOther(this[_localCullRect], tightLocalCullRect))) {
        return false;
      } else {
        let kPredictedGrowthFactor = 3.0;
        let leftwardTrend = kPredictedGrowthFactor * math.max(core.num, dart.notNull(this[_localCullRect].left) - dart.notNull(tightLocalCullRect.left), 0);
        let upwardTrend = kPredictedGrowthFactor * math.max(core.num, dart.notNull(this[_localCullRect].top) - dart.notNull(tightLocalCullRect.top), 0);
        let rightwardTrend = kPredictedGrowthFactor * math.max(core.num, dart.notNull(tightLocalCullRect.right) - dart.notNull(this[_localCullRect].right), 0);
        let bottomwardTrend = kPredictedGrowthFactor * math.max(core.num, dart.notNull(tightLocalCullRect.bottom) - dart.notNull(this[_localCullRect].bottom), 0);
        let newLocalCullRect = new ui.Rect.fromLTRB(dart.notNull(this[_localCullRect].left) - leftwardTrend, dart.notNull(this[_localCullRect].top) - upwardTrend, dart.notNull(this[_localCullRect].right) + rightwardTrend, dart.notNull(this[_localCullRect].bottom) + bottomwardTrend).intersect(this.localPaintBounds);
        let localCullRectChanged = !dart.equals(this[_localCullRect], newLocalCullRect);
        this[_localCullRect] = newLocalCullRect;
        this[_globalCullRect] = tightGlobalCullRect;
        return localCullRectChanged;
      }
    }
    [_applyPaint$](oldCanvas) {
      let t4;
      if (!dart.test(this.picture.recordingCanvas.didDraw)) {
        ui._recycleCanvas(oldCanvas);
        src__engine.domRenderer.clearDom(this.rootElement);
        return;
      }
      if (dart.test(ui._debugExplainSurfaceStats)) {
        t4 = ui._surfaceStatsFor(this);
        t4.paintCount = dart.notNull(t4.paintCount) + 1;
      }
      this.applyPaint(oldCanvas);
    }
    [_applyTranslate]() {
      this.rootElement.style[$transform] = "translate(" + dart.str(this.dx) + "px, " + dart.str(this.dy) + "px)";
    }
    apply() {
      this[_recomputeCullRect]();
      this[_applyTranslate]();
      this[_applyPaint$](null);
    }
    update(oldSurface) {
      ui.PersistedPicture._check(oldSurface);
      super.update(oldSurface);
      if (this.dx != oldSurface.dx || this.dy != oldSurface.dy) {
        this[_applyTranslate]();
      }
      this[_localCullRect] = oldSurface[_localCullRect];
      this[_globalCullRect] = oldSurface[_globalCullRect];
      if (this.picture == oldSurface.picture) {
        if (dart.test(this[_recomputeCullRect]())) {
          this[_applyPaint$](oldSurface[_canvas$]);
        } else {
          this[_canvas$] = oldSurface[_canvas$];
        }
      } else {
        this[_recomputeCullRect]();
        this[_applyPaint$](oldSurface[_canvas$]);
      }
    }
    retain() {
      super.retain();
      if (dart.test(this[_recomputeCullRect]())) {
        this[_applyPaint$](this[_canvas$]);
      }
    }
    recycle() {
      ui._recycleCanvas(this[_canvas$]);
      super.recycle();
    }
    debugPrintChildren(buffer, indent) {
      super.debugPrintChildren(buffer, indent);
      if (this.rootElement != null && this.rootElement.firstChild != null) {
        let canvasTag = html.Element.as(this.rootElement.firstChild).tagName[$toLowerCase]();
        let canvasHash = dart.hashCode(this.rootElement.firstChild);
        buffer.writeln("  "[$times](dart.notNull(indent) + 1) + "<" + canvasTag + " @" + dart.str(canvasHash) + " />");
      } else if (this.rootElement != null) {
        buffer.writeln("  "[$times](dart.notNull(indent) + 1) + "<" + this.rootElement.tagName[$toLowerCase]() + " @" + dart.str(this[$hashCode]) + " />");
      } else {
        buffer.writeln("  "[$times](dart.notNull(indent) + 1) + "<canvas recycled />");
      }
    }
  };
  (ui.PersistedPicture.new = function(paintedBy, dx, dy, picture, hints) {
    this[_canvas$] = null;
    this[_localCullRect] = null;
    this[_globalCullRect] = null;
    this[dx$1] = dx;
    this[dy$1] = dy;
    this[picture$0] = picture;
    this[hints$] = hints;
    this[localPaintBounds] = picture.recordingCanvas.computePaintBounds();
    ui.PersistedPicture.__proto__.new.call(this, paintedBy);
    ;
  }).prototype = ui.PersistedPicture.prototype;
  dart.addTypeTests(ui.PersistedPicture);
  const dx$1 = Symbol("PersistedPicture.dx");
  const dy$1 = Symbol("PersistedPicture.dy");
  const picture$0 = Symbol("PersistedPicture.picture");
  const localPaintBounds = Symbol("PersistedPicture.localPaintBounds");
  const hints$ = Symbol("PersistedPicture.hints");
  dart.setMethodSignature(ui.PersistedPicture, () => ({
    __proto__: dart.getMethods(ui.PersistedPicture.__proto__),
    createElement: dart.fnType(html.Element, []),
    [_recomputeCullRect]: dart.fnType(core.bool, []),
    [_applyPaint$]: dart.fnType(dart.void, [src__engine.EngineCanvas]),
    [_applyTranslate]: dart.fnType(dart.void, []),
    apply: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(ui.PersistedPicture, () => ({
    __proto__: dart.getGetters(ui.PersistedPicture.__proto__),
    localCullRect: ui.Rect,
    debugGlobalCullRect: ui.Rect
  }));
  dart.setFieldSignature(ui.PersistedPicture, () => ({
    __proto__: dart.getFields(ui.PersistedPicture.__proto__),
    [_canvas$]: dart.fieldType(src__engine.EngineCanvas),
    dx: dart.finalFieldType(core.double),
    dy: dart.finalFieldType(core.double),
    picture: dart.finalFieldType(ui.Picture),
    localPaintBounds: dart.finalFieldType(ui.Rect),
    hints: dart.finalFieldType(core.int),
    [_localCullRect]: dart.fieldType(ui.Rect),
    [_globalCullRect]: dart.fieldType(ui.Rect)
  }));
  ui.PersistedHoudiniPicture = class PersistedHoudiniPicture extends ui.PersistedPicture {
    static _registerCssPainter() {
      ui.PersistedHoudiniPicture._cssPainterRegistered = true;
      let css = js_util.getProperty(html.window, "CSS");
      let paintWorklet = js_util.getProperty(css, "paintWorklet");
      if (paintWorklet == null) {
        html.window[$console].warn("WARNING: CSS.paintWorklet not available. Paint worklets are only " + "supported on sites served from https:// or http://localhost.");
        return;
      }
      js_util.callMethod(paintWorklet, "addModule", ["/packages/flutter_web/assets/houdini_painter.js"]);
    }
    get bitmapPixelCount() {
      return 0;
    }
    applyPaint(oldCanvas) {
      ui._recycleCanvas(oldCanvas);
      let canvas = new src__engine.HoudiniCanvas.new(this[_localCullRect]);
      this[_canvas$] = canvas;
      src__engine.domRenderer.clearDom(this.rootElement);
      this.rootElement[$append](this[_canvas$].rootElement);
      this.picture.recordingCanvas.apply(this[_canvas$]);
      canvas.commit();
    }
  };
  (ui.PersistedHoudiniPicture.new = function(paintedBy, dx, dy, picture, hints) {
    ui.PersistedHoudiniPicture.__proto__.new.call(this, paintedBy, dx, dy, picture, hints);
    if (!dart.test(ui.PersistedHoudiniPicture._cssPainterRegistered)) {
      ui.PersistedHoudiniPicture._registerCssPainter();
    }
  }).prototype = ui.PersistedHoudiniPicture.prototype;
  dart.addTypeTests(ui.PersistedHoudiniPicture);
  dart.setMethodSignature(ui.PersistedHoudiniPicture, () => ({
    __proto__: dart.getMethods(ui.PersistedHoudiniPicture.__proto__),
    applyPaint: dart.fnType(dart.void, [src__engine.EngineCanvas])
  }));
  dart.setGetterSignature(ui.PersistedHoudiniPicture, () => ({
    __proto__: dart.getGetters(ui.PersistedHoudiniPicture.__proto__),
    bitmapPixelCount: core.int
  }));
  dart.defineLazy(ui.PersistedHoudiniPicture, {
    /*ui.PersistedHoudiniPicture._cssPainterRegistered*/get _cssPainterRegistered() {
      return false;
    },
    set _cssPainterRegistered(_) {}
  });
  const _applyBitmapPaint = dart.privateName(ui, "_applyBitmapPaint");
  const _applyDomPaint = dart.privateName(ui, "_applyDomPaint");
  const _doesCanvasFitBounds = dart.privateName(ui, "_doesCanvasFitBounds");
  const _findOrCreateCanvas = dart.privateName(ui, "_findOrCreateCanvas");
  ui.PersistedStandardPicture = class PersistedStandardPicture extends ui.PersistedPicture {
    get bitmapPixelCount() {
      if (!src__engine.BitmapCanvas.is(this[_canvas$])) {
        return 0;
      }
      let bitmapCanvas = src__engine.BitmapCanvas._check(this[_canvas$]);
      return bitmapCanvas.bitmapPixelCount;
    }
    applyPaint(oldCanvas) {
      if (dart.test(this.picture.recordingCanvas.hasArbitraryPaint)) {
        this[_applyBitmapPaint](oldCanvas);
      } else {
        this[_applyDomPaint](oldCanvas);
      }
    }
    [_applyDomPaint](oldCanvas) {
      ui._recycleCanvas(oldCanvas);
      this[_canvas$] = new src__engine.DomCanvas.new();
      src__engine.domRenderer.clearDom(this.rootElement);
      this.rootElement[$append](this[_canvas$].rootElement);
      this.picture.recordingCanvas.apply(this[_canvas$]);
    }
    [_doesCanvasFitBounds](canvas, newBounds) {
      let canvasBounds = canvas.bounds;
      return dart.notNull(canvasBounds.width) >= dart.notNull(newBounds.width) && dart.notNull(canvasBounds.height) >= dart.notNull(newBounds.height);
    }
    [_applyBitmapPaint](oldCanvas) {
      let t4;
      if (src__engine.BitmapCanvas.is(oldCanvas) && dart.test(this[_doesCanvasFitBounds](oldCanvas, this[_localCullRect])) && dart.test(oldCanvas.isReusable())) {
        if (dart.test(ui._debugShowCanvasReuseStats)) {
          t4 = ui.DebugCanvasReuseOverlay.instance;
          t4.keptCount = dart.notNull(t4.keptCount) + 1;
        }
        oldCanvas.bounds = this[_localCullRect];
        this[_canvas$] = oldCanvas;
        this[_canvas$].clear();
        this.picture.recordingCanvas.apply(this[_canvas$]);
      } else {
        ui._recycleCanvas(oldCanvas);
        ui._paintQueue[$add](new ui._PaintRequest.new({canvasSize: this[_localCullRect].size, paintCallback: dart.fn(() => {
            let t4;
            this[_canvas$] = this[_findOrCreateCanvas](this[_localCullRect]);
            if (dart.test(ui._debugExplainSurfaceStats)) {
              t4 = ui._surfaceStatsFor(this);
              t4.paintPixelCount = dart.notNull(t4.paintPixelCount) + dart.notNull(src__engine.BitmapCanvas.as(this[_canvas$]).bitmapPixelCount);
            }
            src__engine.domRenderer.clearDom(this.rootElement);
            this.rootElement[$append](this[_canvas$].rootElement);
            this[_canvas$].clear();
            this.picture.recordingCanvas.apply(this[_canvas$]);
          }, VoidToNull())}));
      }
    }
    [_findOrCreateCanvas](bounds) {
      let t4, t4$, t4$0, t5, t4$1;
      let canvasSize = bounds.size;
      let bestRecycledCanvas = null;
      let lastPixelCount = core.double.infinity;
      for (let i = 0; i < dart.notNull(ui._recycledCanvases[$length]); i = i + 1) {
        let candidate = ui._recycledCanvases[$_get](i);
        if (!dart.test(candidate.isReusable())) {
          continue;
        }
        let candidateSize = candidate.size;
        let candidatePixelCount = dart.notNull(candidateSize.width) * dart.notNull(candidateSize.height);
        let fits = this[_doesCanvasFitBounds](candidate, bounds);
        let isSmaller = candidatePixelCount < dart.notNull(lastPixelCount);
        if (dart.test(fits) && isSmaller) {
          bestRecycledCanvas = candidate;
          lastPixelCount = candidatePixelCount;
          let fitsExactly = candidateSize.width == canvasSize.width && candidateSize.height == canvasSize.height;
          if (fitsExactly) {
            break;
          }
        }
      }
      if (bestRecycledCanvas != null) {
        if (dart.test(ui._debugExplainSurfaceStats)) {
          t4 = ui._surfaceStatsFor(this);
          t4.reuseCanvasCount = dart.notNull(t4.reuseCanvasCount) + 1;
        }
        ui._recycledCanvases[$remove](bestRecycledCanvas);
        if (dart.test(ui._debugShowCanvasReuseStats)) {
          ui.DebugCanvasReuseOverlay.instance.inRecycleCount = ui._recycledCanvases[$length];
        }
        if (dart.test(ui._debugShowCanvasReuseStats)) {
          t4$ = ui.DebugCanvasReuseOverlay.instance;
          t4$.reusedCount = dart.notNull(t4$.reusedCount) + 1;
        }
        bestRecycledCanvas.bounds = bounds;
        return bestRecycledCanvas;
      }
      if (dart.test(ui._debugShowCanvasReuseStats)) {
        t4$0 = ui.DebugCanvasReuseOverlay.instance;
        t4$0.createdCount = dart.notNull(t4$0.createdCount) + 1;
      }
      let canvas = new src__engine.BitmapCanvas.new(bounds);
      if (dart.test(ui._debugExplainSurfaceStats)) {
        t4$1 = ui._surfaceStatsFor(this);
        t5 = t4$1;
        t5.allocateBitmapCanvasCount = dart.notNull(t5.allocateBitmapCanvasCount) + 1;
        t4$1.allocatedBitmapSizeInPixels = dart.notNull(canvas.widthInBitmapPixels) * dart.notNull(canvas.heightInBitmapPixels);
        t4$1;
      }
      return canvas;
    }
  };
  (ui.PersistedStandardPicture.new = function(paintedBy, dx, dy, picture, hints) {
    ui.PersistedStandardPicture.__proto__.new.call(this, paintedBy, dx, dy, picture, hints);
    ;
  }).prototype = ui.PersistedStandardPicture.prototype;
  dart.addTypeTests(ui.PersistedStandardPicture);
  dart.setMethodSignature(ui.PersistedStandardPicture, () => ({
    __proto__: dart.getMethods(ui.PersistedStandardPicture.__proto__),
    applyPaint: dart.fnType(dart.void, [src__engine.EngineCanvas]),
    [_applyDomPaint]: dart.fnType(dart.void, [src__engine.EngineCanvas]),
    [_doesCanvasFitBounds]: dart.fnType(core.bool, [src__engine.BitmapCanvas, ui.Rect]),
    [_applyBitmapPaint]: dart.fnType(dart.void, [src__engine.EngineCanvas]),
    [_findOrCreateCanvas]: dart.fnType(src__engine.BitmapCanvas, [ui.Rect])
  }));
  dart.setGetterSignature(ui.PersistedStandardPicture, () => ({
    __proto__: dart.getGetters(ui.PersistedStandardPicture.__proto__),
    bitmapPixelCount: core.int
  }));
  const _applyColor = dart.privateName(ui, "_applyColor");
  const _applyShadow = dart.privateName(ui, "_applyShadow");
  const _applyShape = dart.privateName(ui, "_applyShape");
  const PersistedContainerSurface__DomClip$$0 = class PersistedContainerSurface__DomClip extends ui.PersistedContainerSurface {};
  (PersistedContainerSurface__DomClip$$0.new = function(paintedBy) {
    ui._DomClip[dart.mixinNew].call(this);
    PersistedContainerSurface__DomClip$$0.__proto__.new.call(this, paintedBy);
  }).prototype = PersistedContainerSurface__DomClip$$0.prototype;
  dart.applyMixin(PersistedContainerSurface__DomClip$$0, ui._DomClip);
  ui.PersistedPhysicalShape = class PersistedPhysicalShape extends PersistedContainerSurface__DomClip$$0 {
    get path() {
      return this[path$3];
    }
    set path(value) {
      super.path = value;
    }
    get elevation() {
      return this[elevation$1];
    }
    set elevation(value) {
      super.elevation = value;
    }
    get color() {
      return this[color$2];
    }
    set color(value) {
      super.color = value;
    }
    get shadowColor() {
      return this[shadowColor$];
    }
    set shadowColor(value) {
      super.shadowColor = value;
    }
    get clipBehavior() {
      return this[clipBehavior$0];
    }
    set clipBehavior(value) {
      super.clipBehavior = value;
    }
    recomputeTransformAndClip() {
      this[_transform] = this.parent[_transform];
      let roundRect = this.path.webOnlyPathAsRoundedRect;
      if (roundRect != null) {
        this[_globalClip] = this.parent[_globalClip].intersect(src__engine.localClipRectToGlobalClip({localClip: roundRect.outerRect, transform: this.transform}));
      } else {
        let rect = this.path.webOnlyPathAsRect;
        if (rect != null) {
          this[_globalClip] = this.parent[_globalClip].intersect(src__engine.localClipRectToGlobalClip({localClip: rect, transform: this.transform}));
        } else {
          this[_globalClip] = this.parent[_globalClip];
        }
      }
    }
    [_applyColor]() {
      this.rootElement.style[$backgroundColor] = this.color.toCssString();
    }
    [_applyShadow]() {
      src__engine.ElevationShadow.applyShadow(this.rootElement.style, this.elevation, this.shadowColor);
    }
    createElement() {
      let t4;
      t4 = super.createElement();
      t4[$setAttribute]("clip-type", "physical-shape");
      return t4;
    }
    apply() {
      this[_applyColor]();
      this[_applyShadow]();
      this[_applyShape]();
    }
    [_applyShape]() {
      let t4, t4$, t4$0, t4$1;
      if (this.path == null) return;
      let roundRect = this.path.webOnlyPathAsRoundedRect;
      if (roundRect != null) {
        let borderRadius = dart.str(roundRect.tlRadiusX) + "px " + dart.str(roundRect.trRadiusX) + "px " + dart.str(roundRect.brRadiusX) + "px " + dart.str(roundRect.blRadiusX) + "px";
        let style = this.rootElement.style;
        t4 = style;
        t4[$transform] = "translate(" + dart.str(roundRect.left) + "px, " + dart.str(roundRect.top) + "px)";
        t4[$width] = dart.str(roundRect.width) + "px";
        t4[$height] = dart.str(roundRect.height) + "px";
        t4[$borderRadius] = borderRadius;
        t4;
        this.childContainer.style[$transform] = "translate(" + dart.str(-dart.notNull(roundRect.left)) + "px, " + dart.str(-dart.notNull(roundRect.top)) + "px)";
        if (!dart.equals(this.clipBehavior, ui.Clip.none)) {
          style[$overflow] = "hidden";
        }
        return;
      } else {
        let rect = this.path.webOnlyPathAsRect;
        if (rect != null) {
          let style = this.rootElement.style;
          t4$ = style;
          t4$[$transform] = "translate(" + dart.str(rect.left) + "px, " + dart.str(rect.top) + "px)";
          t4$[$width] = dart.str(rect.width) + "px";
          t4$[$height] = dart.str(rect.height) + "px";
          t4$[$borderRadius] = "";
          t4$;
          this.childContainer.style[$transform] = "translate(" + dart.str(-dart.notNull(rect.left)) + "px, " + dart.str(-dart.notNull(rect.top)) + "px)";
          if (!dart.equals(this.clipBehavior, ui.Clip.none)) {
            style[$overflow] = "hidden";
          }
          return;
        } else {
          let ellipse = this.path.webOnlyPathAsCircle;
          if (ellipse != null) {
            let rx = ellipse.radiusX;
            let ry = ellipse.radiusY;
            let borderRadius = rx == ry ? dart.str(rx) + "px " : dart.str(rx) + "px " + dart.str(ry) + "px ";
            let style = this.rootElement.style;
            let left = dart.notNull(ellipse.x) - dart.notNull(rx);
            let top = dart.notNull(ellipse.y) - dart.notNull(ry);
            t4$0 = style;
            t4$0[$transform] = "translate(" + dart.str(left) + "px, " + dart.str(top) + "px)";
            t4$0[$width] = dart.str(dart.notNull(rx) * 2) + "px";
            t4$0[$height] = dart.str(dart.notNull(ry) * 2) + "px";
            t4$0[$borderRadius] = borderRadius;
            t4$0;
            this.childContainer.style[$transform] = "translate(" + dart.str(-left) + "px, " + dart.str(-top) + "px)";
            if (!dart.equals(this.clipBehavior, ui.Clip.none)) {
              style[$overflow] = "hidden";
            }
            return;
          }
        }
      }
      let bounds = this.path.getBounds();
      let svgClipPath = ui._pathToSvgClipPath(this.path, {offsetX: -dart.notNull(bounds.left), offsetY: -dart.notNull(bounds.top)});
      if (!(this[_clipElement] == null)) dart.assertFailed();
      this[_clipElement] = html.Element.html(svgClipPath, {treeSanitizer: new ui._NullTreeSanitizer.new()});
      src__engine.domRenderer.append(this.rootElement, this[_clipElement]);
      src__engine.domRenderer.setElementStyle(this.rootElement, "clip-path", "url(#svgClip" + dart.str(ui._clipCounter) + ")");
      src__engine.domRenderer.setElementStyle(this.rootElement, "-webkit-clip-path", "url(#svgClip" + dart.str(ui._clipCounter) + ")");
      let rootElementStyle = this.rootElement.style;
      t4$1 = rootElementStyle;
      t4$1[$overflow] = "";
      t4$1[$transform] = "translate(" + dart.str(bounds.left) + "px, " + dart.str(bounds.top) + "px)";
      t4$1[$width] = dart.str(bounds.width) + "px";
      t4$1[$height] = dart.str(bounds.height) + "px";
      t4$1[$borderRadius] = "";
      t4$1;
      this.childContainer.style[$transform] = "translate(" + dart.str(-dart.notNull(bounds.left)) + "px, " + dart.str(-dart.notNull(bounds.top)) + "px)";
    }
    update(oldSurface) {
      let t4;
      ui.PersistedPhysicalShape._check(oldSurface);
      super.update(oldSurface);
      if (!dart.equals(oldSurface.color, this.color)) {
        this[_applyColor]();
      }
      if (oldSurface.elevation != this.elevation || !dart.equals(oldSurface.shadowColor, this.shadowColor)) {
        this[_applyShadow]();
      }
      if (!dart.equals(oldSurface.path, this.path)) {
        t4 = oldSurface[_clipElement];
        t4 == null ? null : t4[$remove]();
        let style = this.rootElement.style;
        style[$transform] = "";
        style[$borderRadius] = "";
        src__engine.domRenderer.setElementStyle(this.rootElement, "clip-path", "");
        src__engine.domRenderer.setElementStyle(this.rootElement, "-webkit-clip-path", "");
        this[_applyShape]();
      } else {
        this[_clipElement] = oldSurface[_clipElement];
      }
      oldSurface[_clipElement] = null;
    }
  };
  (ui.PersistedPhysicalShape.new = function(paintedBy, path, elevation, color, shadowColor, clipBehavior) {
    this[_clipElement] = null;
    this[path$3] = path;
    this[elevation$1] = elevation;
    this[clipBehavior$0] = clipBehavior;
    this[color$2] = new ui.Color.new(color);
    this[shadowColor$] = new ui.Color.new(shadowColor);
    ui.PersistedPhysicalShape.__proto__.new.call(this, paintedBy);
    ;
  }).prototype = ui.PersistedPhysicalShape.prototype;
  dart.addTypeTests(ui.PersistedPhysicalShape);
  const path$3 = Symbol("PersistedPhysicalShape.path");
  const elevation$1 = Symbol("PersistedPhysicalShape.elevation");
  const color$2 = Symbol("PersistedPhysicalShape.color");
  const shadowColor$ = Symbol("PersistedPhysicalShape.shadowColor");
  const clipBehavior$0 = Symbol("PersistedPhysicalShape.clipBehavior");
  dart.setMethodSignature(ui.PersistedPhysicalShape, () => ({
    __proto__: dart.getMethods(ui.PersistedPhysicalShape.__proto__),
    [_applyColor]: dart.fnType(dart.void, []),
    [_applyShadow]: dart.fnType(dart.void, []),
    apply: dart.fnType(dart.void, []),
    [_applyShape]: dart.fnType(dart.void, [])
  }));
  dart.setFieldSignature(ui.PersistedPhysicalShape, () => ({
    __proto__: dart.getFields(ui.PersistedPhysicalShape.__proto__),
    path: dart.finalFieldType(ui.Path),
    elevation: dart.finalFieldType(core.double),
    color: dart.finalFieldType(ui.Color),
    shadowColor: dart.finalFieldType(ui.Color),
    clipBehavior: dart.finalFieldType(ui.Clip),
    [_clipElement]: dart.fieldType(html.Element)
  }));
  const _created = dart.privateName(ui, "_created");
  const _kept = dart.privateName(ui, "_kept");
  const _reused = dart.privateName(ui, "_reused");
  const _disposed = dart.privateName(ui, "_disposed");
  const _inRecycle = dart.privateName(ui, "_inRecycle");
  const _createdCount = dart.privateName(ui, "_createdCount");
  const _keptCount = dart.privateName(ui, "_keptCount");
  const _reusedCount = dart.privateName(ui, "_reusedCount");
  const _disposedCount = dart.privateName(ui, "_disposedCount");
  const _inRecycleCount = dart.privateName(ui, "_inRecycleCount");
  const _reset = dart.privateName(ui, "_reset");
  const _update = dart.privateName(ui, "_update");
  ui.DebugCanvasReuseOverlay = class DebugCanvasReuseOverlay extends core.Object {
    static get instance() {
      if (ui.DebugCanvasReuseOverlay._instance == null) {
        if (dart.test(src__engine.assertionsEnabled)) {
          ui.DebugCanvasReuseOverlay._instance = new ui.DebugCanvasReuseOverlay.__();
        }
      }
      return ui.DebugCanvasReuseOverlay._instance;
    }
    get createdCount() {
      return this[_createdCount];
    }
    set createdCount(createdCount) {
      this[_createdCount] = createdCount;
      this[_update]();
    }
    get keptCount() {
      return this[_keptCount];
    }
    set keptCount(keptCount) {
      this[_keptCount] = keptCount;
      this[_update]();
    }
    get reusedCount() {
      return this[_reusedCount];
    }
    set reusedCount(reusedCount) {
      this[_reusedCount] = reusedCount;
      this[_update]();
    }
    get disposedCount() {
      return this[_disposedCount];
    }
    set disposedCount(disposedCount) {
      this[_disposedCount] = disposedCount;
      this[_update]();
    }
    get inRecycleCount() {
      return this[_inRecycleCount];
    }
    set inRecycleCount(inRecycleCount) {
      this[_inRecycleCount] = inRecycleCount;
      this[_update]();
    }
    [_update]() {
      this[_created][$text] = dart.str(this[_createdCount]);
      this[_kept][$text] = dart.str(this[_keptCount]);
      this[_reused][$text] = dart.str(this[_reusedCount]);
      this[_disposed][$text] = dart.str(this[_disposedCount]);
      this[_inRecycle][$text] = dart.str(this[_inRecycleCount]);
    }
    [_reset]() {
      this[_createdCount] = this[_keptCount] = this[_reusedCount] = this[_disposedCount] = this[_inRecycleCount] = 0;
      this[_update]();
    }
  };
  (ui.DebugCanvasReuseOverlay.__ = function() {
    let t4, t5, t5$, t5$0, t5$1, t5$2, t6, t5$3, t4$;
    this[_created] = html.Text.new("0");
    this[_kept] = html.Text.new("0");
    this[_reused] = html.Text.new("0");
    this[_disposed] = html.Text.new("0");
    this[_inRecycle] = html.Text.new("0");
    this[_createdCount] = 0;
    this[_keptCount] = 0;
    this[_reusedCount] = 0;
    this[_disposedCount] = 0;
    this[_inRecycleCount] = 0;
    let container = ui._createContainer();
    let title = html.DivElement.new();
    t4 = title.style;
    t4[$fontWeight] = "bold";
    t4[$textDecoration] = "underline";
    t4;
    title[$text] = "Canvas Reuse";
    html.document.body[$append]((t4$ = container, t4$[$append](title), t4$[$append]((t5 = html.DivElement.new(), t5[$appendText]("Created: "), t5[$append](this[_created]), t5)), t4$[$append]((t5$ = html.DivElement.new(), t5$[$appendText]("Kept: "), t5$[$append](this[_kept]), t5$)), t4$[$append]((t5$0 = html.DivElement.new(), t5$0[$appendText]("Reused: "), t5$0[$append](this[_reused]), t5$0)), t4$[$append]((t5$1 = html.DivElement.new(), t5$1[$appendText]("Disposed: "), t5$1[$append](this[_disposed]), t5$1)), t4$[$append]((t5$2 = html.DivElement.new(), t5$2[$appendText]("In Recycle List: "), t5$2[$append](this[_inRecycle]), t5$2)), t4$[$append]((t5$3 = html.DivElement.new(), t5$3[$append]((t6 = html.ButtonElement.new(), t6[$text] = "Reset", t6[$addEventListener]("click", dart.fn(_ => this[_reset](), EventTovoid())), t6)), t5$3)), t4$));
  }).prototype = ui.DebugCanvasReuseOverlay.prototype;
  dart.addTypeTests(ui.DebugCanvasReuseOverlay);
  dart.setMethodSignature(ui.DebugCanvasReuseOverlay, () => ({
    __proto__: dart.getMethods(ui.DebugCanvasReuseOverlay.__proto__),
    [_update]: dart.fnType(dart.void, []),
    [_reset]: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(ui.DebugCanvasReuseOverlay, () => ({
    __proto__: dart.getGetters(ui.DebugCanvasReuseOverlay.__proto__),
    createdCount: core.int,
    keptCount: core.int,
    reusedCount: core.int,
    disposedCount: core.int,
    inRecycleCount: core.int
  }));
  dart.setSetterSignature(ui.DebugCanvasReuseOverlay, () => ({
    __proto__: dart.getSetters(ui.DebugCanvasReuseOverlay.__proto__),
    createdCount: core.int,
    keptCount: core.int,
    reusedCount: core.int,
    disposedCount: core.int,
    inRecycleCount: core.int
  }));
  dart.setFieldSignature(ui.DebugCanvasReuseOverlay, () => ({
    __proto__: dart.getFields(ui.DebugCanvasReuseOverlay.__proto__),
    [_created]: dart.finalFieldType(html.Text),
    [_kept]: dart.finalFieldType(html.Text),
    [_reused]: dart.finalFieldType(html.Text),
    [_disposed]: dart.finalFieldType(html.Text),
    [_inRecycle]: dart.finalFieldType(html.Text),
    [_createdCount]: dart.fieldType(core.int),
    [_keptCount]: dart.fieldType(core.int),
    [_reusedCount]: dart.fieldType(core.int),
    [_disposedCount]: dart.fieldType(core.int),
    [_inRecycleCount]: dart.fieldType(core.int)
  }));
  dart.defineLazy(ui.DebugCanvasReuseOverlay, {
    /*ui.DebugCanvasReuseOverlay._instance*/get _instance() {
      return null;
    },
    set _instance(_) {}
  });
  const _dx$ = dart.privateName(ui, "_dx");
  const _dy$ = dart.privateName(ui, "_dy");
  ui.OffsetBase = class OffsetBase extends core.Object {
    get isInfinite() {
      return dart.notNull(this[_dx$]) >= dart.notNull(core.double.infinity) || dart.notNull(this[_dy$]) >= dart.notNull(core.double.infinity);
    }
    get isFinite() {
      return this[_dx$][$isFinite] && this[_dy$][$isFinite];
    }
    ['<'](other) {
      return dart.notNull(this[_dx$]) < dart.notNull(other[_dx$]) && dart.notNull(this[_dy$]) < dart.notNull(other[_dy$]);
    }
    ['<='](other) {
      return dart.notNull(this[_dx$]) <= dart.notNull(other[_dx$]) && dart.notNull(this[_dy$]) <= dart.notNull(other[_dy$]);
    }
    ['>'](other) {
      return dart.notNull(this[_dx$]) > dart.notNull(other[_dx$]) && dart.notNull(this[_dy$]) > dart.notNull(other[_dy$]);
    }
    ['>='](other) {
      return dart.notNull(this[_dx$]) > dart.notNull(other[_dx$]) && dart.notNull(this[_dy$]) >= dart.notNull(other[_dy$]);
    }
    _equals(other) {
      if (other == null) return false;
      if (!ui.OffsetBase.is(other)) return false;
      let typedOther = ui.OffsetBase._check(other);
      return this[_dx$] == typedOther[_dx$] && this[_dy$] == typedOther[_dy$];
    }
    get hashCode() {
      return ui.hashValues(this[_dx$], this[_dy$]);
    }
    toString() {
      let t4, t4$;
      return dart.str(this[$runtimeType]) + "(" + dart.str((t4 = this[_dx$], t4 == null ? null : t4[$toStringAsFixed](1))) + ", " + dart.str((t4$ = this[_dy$], t4$ == null ? null : t4$[$toStringAsFixed](1))) + ")";
    }
  };
  (ui.OffsetBase.new = function(_dx, _dy) {
    this[_dx$] = _dx;
    this[_dy$] = _dy;
    ;
  }).prototype = ui.OffsetBase.prototype;
  dart.addTypeTests(ui.OffsetBase);
  dart.setMethodSignature(ui.OffsetBase, () => ({
    __proto__: dart.getMethods(ui.OffsetBase.__proto__),
    '<': dart.fnType(core.bool, [ui.OffsetBase]),
    '<=': dart.fnType(core.bool, [ui.OffsetBase]),
    '>': dart.fnType(core.bool, [ui.OffsetBase]),
    '>=': dart.fnType(core.bool, [ui.OffsetBase])
  }));
  dart.setGetterSignature(ui.OffsetBase, () => ({
    __proto__: dart.getGetters(ui.OffsetBase.__proto__),
    isInfinite: core.bool,
    isFinite: core.bool
  }));
  dart.setFieldSignature(ui.OffsetBase, () => ({
    __proto__: dart.getFields(ui.OffsetBase.__proto__),
    [_dx$]: dart.finalFieldType(core.double),
    [_dy$]: dart.finalFieldType(core.double)
  }));
  dart.defineExtensionMethods(ui.OffsetBase, ['_equals', 'toString']);
  dart.defineExtensionAccessors(ui.OffsetBase, ['hashCode']);
  ui.Offset = class Offset extends ui.OffsetBase {
    static fromDirection(direction, distance) {
      if (distance === void 0) distance = 1.0;
      return new ui.Offset.new(dart.notNull(distance) * math.cos(direction), dart.notNull(distance) * math.sin(direction));
    }
    get dx() {
      return this[_dx$];
    }
    get dy() {
      return this[_dy$];
    }
    get distance() {
      return math.sqrt(dart.notNull(this.dx) * dart.notNull(this.dx) + dart.notNull(this.dy) * dart.notNull(this.dy));
    }
    get distanceSquared() {
      return dart.notNull(this.dx) * dart.notNull(this.dx) + dart.notNull(this.dy) * dart.notNull(this.dy);
    }
    get direction() {
      return math.atan2(this.dy, this.dx);
    }
    scale(scaleX, scaleY) {
      return new ui.Offset.new(dart.notNull(this.dx) * dart.notNull(scaleX), dart.notNull(this.dy) * dart.notNull(scaleY));
    }
    translate(translateX, translateY) {
      return new ui.Offset.new(dart.notNull(this.dx) + dart.notNull(translateX), dart.notNull(this.dy) + dart.notNull(translateY));
    }
    _negate() {
      return new ui.Offset.new(-dart.notNull(this.dx), -dart.notNull(this.dy));
    }
    ['-'](other) {
      return new ui.Offset.new(dart.notNull(this.dx) - dart.notNull(other.dx), dart.notNull(this.dy) - dart.notNull(other.dy));
    }
    ['+'](other) {
      return new ui.Offset.new(dart.notNull(this.dx) + dart.notNull(other.dx), dart.notNull(this.dy) + dart.notNull(other.dy));
    }
    ['*'](operand) {
      return new ui.Offset.new(dart.notNull(this.dx) * dart.notNull(operand), dart.notNull(this.dy) * dart.notNull(operand));
    }
    ['/'](operand) {
      return new ui.Offset.new(dart.notNull(this.dx) / dart.notNull(operand), dart.notNull(this.dy) / dart.notNull(operand));
    }
    ['~/'](operand) {
      return new ui.Offset.new((dart.notNull(this.dx) / dart.notNull(operand))[$truncate]()[$toDouble](), (dart.notNull(this.dy) / dart.notNull(operand))[$truncate]()[$toDouble]());
    }
    ['%'](operand) {
      return new ui.Offset.new(this.dx[$modulo](operand), this.dy[$modulo](operand));
    }
    ['&'](other) {
      return new ui.Rect.fromLTWH(this.dx, this.dy, other.width, other.height);
    }
    static lerp(a, b, t) {
      if (!(t != null)) dart.assertFailed();
      if (a == null && b == null) return null;
      if (a == null) return b['*'](t);
      if (b == null) return a['*'](1.0 - dart.notNull(t));
      return new ui.Offset.new(ui.lerpDouble(a.dx, b.dx, t), ui.lerpDouble(a.dy, b.dy, t));
    }
    _equals(other) {
      if (other == null) return false;
      if (!ui.Offset.is(other)) return false;
      let typedOther = ui.Offset._check(other);
      return this.dx == typedOther.dx && this.dy == typedOther.dy;
    }
    get hashCode() {
      return ui.hashValues(this.dx, this.dy);
    }
    toString() {
      let t4, t4$;
      return "Offset(" + dart.str((t4 = this.dx, t4 == null ? null : t4[$toStringAsFixed](1))) + ", " + dart.str((t4$ = this.dy, t4$ == null ? null : t4$[$toStringAsFixed](1))) + ")";
    }
  };
  (ui.Offset.new = function(dx, dy) {
    ui.Offset.__proto__.new.call(this, dx, dy);
    ;
  }).prototype = ui.Offset.prototype;
  dart.addTypeTests(ui.Offset);
  dart.setMethodSignature(ui.Offset, () => ({
    __proto__: dart.getMethods(ui.Offset.__proto__),
    scale: dart.fnType(ui.Offset, [core.double, core.double]),
    translate: dart.fnType(ui.Offset, [core.double, core.double]),
    _negate: dart.fnType(ui.Offset, []),
    '-': dart.fnType(ui.Offset, [ui.Offset]),
    '+': dart.fnType(ui.Offset, [ui.Offset]),
    '*': dart.fnType(ui.Offset, [core.double]),
    '/': dart.fnType(ui.Offset, [core.double]),
    '~/': dart.fnType(ui.Offset, [core.double]),
    '%': dart.fnType(ui.Offset, [core.double]),
    '&': dart.fnType(ui.Rect, [ui.Size])
  }));
  dart.setGetterSignature(ui.Offset, () => ({
    __proto__: dart.getGetters(ui.Offset.__proto__),
    dx: core.double,
    dy: core.double,
    distance: core.double,
    distanceSquared: core.double,
    direction: core.double
  }));
  dart.defineExtensionMethods(ui.Offset, ['_equals', 'toString']);
  dart.defineExtensionAccessors(ui.Offset, ['hashCode']);
  dart.defineLazy(ui.Offset, {
    /*ui.Offset.zero*/get zero() {
      return dart.const(new ui.Offset.new(0.0, 0.0));
    },
    /*ui.Offset.infinite*/get infinite() {
      return dart.const(new ui.Offset.new(core.double.infinity, core.double.infinity));
    }
  });
  ui.Size = class Size extends ui.OffsetBase {
    get width() {
      return this[_dx$];
    }
    get height() {
      return this[_dy$];
    }
    get aspectRatio() {
      if (this.height !== 0.0) return dart.notNull(this.width) / dart.notNull(this.height);
      if (dart.notNull(this.width) > 0.0) return core.double.infinity;
      if (dart.notNull(this.width) < 0.0) return core.double.negativeInfinity;
      return 0.0;
    }
    get isEmpty() {
      return dart.notNull(this.width) <= 0.0 || dart.notNull(this.height) <= 0.0;
    }
    ['-'](other) {
      if (ui.Size.is(other)) return new ui.Offset.new(dart.notNull(this.width) - dart.notNull(other.width), dart.notNull(this.height) - dart.notNull(other.height));
      if (ui.Offset.is(other)) return new ui.Size.new(dart.notNull(this.width) - dart.notNull(other.dx), dart.notNull(this.height) - dart.notNull(other.dy));
      dart.throw(new core.ArgumentError.new(other));
    }
    ['+'](other) {
      return new ui.Size.new(dart.notNull(this.width) + dart.notNull(other.dx), dart.notNull(this.height) + dart.notNull(other.dy));
    }
    ['*'](operand) {
      return new ui.Size.new(dart.notNull(this.width) * dart.notNull(operand), dart.notNull(this.height) * dart.notNull(operand));
    }
    ['/'](operand) {
      return new ui.Size.new(dart.notNull(this.width) / dart.notNull(operand), dart.notNull(this.height) / dart.notNull(operand));
    }
    ['~/'](operand) {
      return new ui.Size.new((dart.notNull(this.width) / dart.notNull(operand))[$truncate]()[$toDouble](), (dart.notNull(this.height) / dart.notNull(operand))[$truncate]()[$toDouble]());
    }
    ['%'](operand) {
      return new ui.Size.new(this.width[$modulo](operand), this.height[$modulo](operand));
    }
    get shortestSide() {
      return math.min(core.double, this.width[$abs](), this.height[$abs]());
    }
    get longestSide() {
      return math.max(core.double, this.width[$abs](), this.height[$abs]());
    }
    topLeft(origin) {
      return origin;
    }
    topCenter(origin) {
      return new ui.Offset.new(dart.notNull(origin.dx) + dart.notNull(this.width) / 2.0, origin.dy);
    }
    topRight(origin) {
      return new ui.Offset.new(dart.notNull(origin.dx) + dart.notNull(this.width), origin.dy);
    }
    centerLeft(origin) {
      return new ui.Offset.new(origin.dx, dart.notNull(origin.dy) + dart.notNull(this.height) / 2.0);
    }
    center(origin) {
      return new ui.Offset.new(dart.notNull(origin.dx) + dart.notNull(this.width) / 2.0, dart.notNull(origin.dy) + dart.notNull(this.height) / 2.0);
    }
    centerRight(origin) {
      return new ui.Offset.new(dart.notNull(origin.dx) + dart.notNull(this.width), dart.notNull(origin.dy) + dart.notNull(this.height) / 2.0);
    }
    bottomLeft(origin) {
      return new ui.Offset.new(origin.dx, dart.notNull(origin.dy) + dart.notNull(this.height));
    }
    bottomCenter(origin) {
      return new ui.Offset.new(dart.notNull(origin.dx) + dart.notNull(this.width) / 2.0, dart.notNull(origin.dy) + dart.notNull(this.height));
    }
    bottomRight(origin) {
      return new ui.Offset.new(dart.notNull(origin.dx) + dart.notNull(this.width), dart.notNull(origin.dy) + dart.notNull(this.height));
    }
    contains(offset) {
      return dart.notNull(offset.dx) >= 0.0 && dart.notNull(offset.dx) < dart.notNull(this.width) && dart.notNull(offset.dy) >= 0.0 && dart.notNull(offset.dy) < dart.notNull(this.height);
    }
    get flipped() {
      return new ui.Size.new(this.height, this.width);
    }
    static lerp(a, b, t) {
      if (!(t != null)) dart.assertFailed();
      if (a == null && b == null) return null;
      if (a == null) return b['*'](t);
      if (b == null) return a['*'](1.0 - dart.notNull(t));
      return new ui.Size.new(ui.lerpDouble(a.width, b.width, t), ui.lerpDouble(a.height, b.height, t));
    }
    _equals(other) {
      if (other == null) return false;
      if (!ui.Size.is(other)) return false;
      let typedOther = ui.Size._check(other);
      return this[_dx$] == typedOther[_dx$] && this[_dy$] == typedOther[_dy$];
    }
    get hashCode() {
      return ui.hashValues(this[_dx$], this[_dy$]);
    }
    toString() {
      let t4, t4$;
      return "Size(" + dart.str((t4 = this.width, t4 == null ? null : t4[$toStringAsFixed](1))) + ", " + dart.str((t4$ = this.height, t4$ == null ? null : t4$[$toStringAsFixed](1))) + ")";
    }
  };
  (ui.Size.new = function(width, height) {
    ui.Size.__proto__.new.call(this, width, height);
    ;
  }).prototype = ui.Size.prototype;
  (ui.Size.copy = function(source) {
    ui.Size.__proto__.new.call(this, source.width, source.height);
    ;
  }).prototype = ui.Size.prototype;
  (ui.Size.square = function(dimension) {
    ui.Size.__proto__.new.call(this, dimension, dimension);
    ;
  }).prototype = ui.Size.prototype;
  (ui.Size.fromWidth = function(width) {
    ui.Size.__proto__.new.call(this, width, core.double.infinity);
    ;
  }).prototype = ui.Size.prototype;
  (ui.Size.fromHeight = function(height) {
    ui.Size.__proto__.new.call(this, core.double.infinity, height);
    ;
  }).prototype = ui.Size.prototype;
  (ui.Size.fromRadius = function(radius) {
    ui.Size.__proto__.new.call(this, dart.notNull(radius) * 2.0, dart.notNull(radius) * 2.0);
    ;
  }).prototype = ui.Size.prototype;
  dart.addTypeTests(ui.Size);
  dart.setMethodSignature(ui.Size, () => ({
    __proto__: dart.getMethods(ui.Size.__proto__),
    '-': dart.fnType(ui.OffsetBase, [ui.OffsetBase]),
    '+': dart.fnType(ui.Size, [ui.Offset]),
    '*': dart.fnType(ui.Size, [core.double]),
    '/': dart.fnType(ui.Size, [core.double]),
    '~/': dart.fnType(ui.Size, [core.double]),
    '%': dart.fnType(ui.Size, [core.double]),
    topLeft: dart.fnType(ui.Offset, [ui.Offset]),
    topCenter: dart.fnType(ui.Offset, [ui.Offset]),
    topRight: dart.fnType(ui.Offset, [ui.Offset]),
    centerLeft: dart.fnType(ui.Offset, [ui.Offset]),
    center: dart.fnType(ui.Offset, [ui.Offset]),
    centerRight: dart.fnType(ui.Offset, [ui.Offset]),
    bottomLeft: dart.fnType(ui.Offset, [ui.Offset]),
    bottomCenter: dart.fnType(ui.Offset, [ui.Offset]),
    bottomRight: dart.fnType(ui.Offset, [ui.Offset]),
    contains: dart.fnType(core.bool, [ui.Offset])
  }));
  dart.setGetterSignature(ui.Size, () => ({
    __proto__: dart.getGetters(ui.Size.__proto__),
    width: core.double,
    height: core.double,
    aspectRatio: core.double,
    isEmpty: core.bool,
    shortestSide: core.double,
    longestSide: core.double,
    flipped: ui.Size
  }));
  dart.defineExtensionMethods(ui.Size, ['_equals', 'toString']);
  dart.defineExtensionAccessors(ui.Size, ['hashCode']);
  dart.defineLazy(ui.Size, {
    /*ui.Size.zero*/get zero() {
      return dart.const(new ui.Size.new(0.0, 0.0));
    },
    /*ui.Size.infinite*/get infinite() {
      return dart.const(new ui.Size.new(core.double.infinity, core.double.infinity));
    }
  });
  ui.Rect = class Rect extends core.Object {
    get left() {
      return this[left$];
    }
    set left(value) {
      super.left = value;
    }
    get top() {
      return this[top$];
    }
    set top(value) {
      super.top = value;
    }
    get right() {
      return this[right$];
    }
    set right(value) {
      super.right = value;
    }
    get bottom() {
      return this[bottom$];
    }
    set bottom(value) {
      super.bottom = value;
    }
    get width() {
      return dart.notNull(this.right) - dart.notNull(this.left);
    }
    get height() {
      return dart.notNull(this.bottom) - dart.notNull(this.top);
    }
    get size() {
      return new ui.Size.new(this.width, this.height);
    }
    get hasNaN() {
      return this.left[$isNaN] || this.top[$isNaN] || this.right[$isNaN] || this.bottom[$isNaN];
    }
    get isInfinite() {
      return dart.notNull(this.left) >= dart.notNull(core.double.infinity) || dart.notNull(this.top) >= dart.notNull(core.double.infinity) || dart.notNull(this.right) >= dart.notNull(core.double.infinity) || dart.notNull(this.bottom) >= dart.notNull(core.double.infinity);
    }
    get isFinite() {
      return this.left[$isFinite] && this.top[$isFinite] && this.right[$isFinite] && this.bottom[$isFinite];
    }
    get isEmpty() {
      return dart.notNull(this.left) >= dart.notNull(this.right) || dart.notNull(this.top) >= dart.notNull(this.bottom);
    }
    shift(offset) {
      return new ui.Rect.fromLTRB(dart.notNull(this.left) + dart.notNull(offset.dx), dart.notNull(this.top) + dart.notNull(offset.dy), dart.notNull(this.right) + dart.notNull(offset.dx), dart.notNull(this.bottom) + dart.notNull(offset.dy));
    }
    translate(translateX, translateY) {
      return new ui.Rect.fromLTRB(dart.notNull(this.left) + dart.notNull(translateX), dart.notNull(this.top) + dart.notNull(translateY), dart.notNull(this.right) + dart.notNull(translateX), dart.notNull(this.bottom) + dart.notNull(translateY));
    }
    inflate(delta) {
      return new ui.Rect.fromLTRB(dart.notNull(this.left) - dart.notNull(delta), dart.notNull(this.top) - dart.notNull(delta), dart.notNull(this.right) + dart.notNull(delta), dart.notNull(this.bottom) + dart.notNull(delta));
    }
    deflate(delta) {
      return this.inflate(-dart.notNull(delta));
    }
    intersect(other) {
      return new ui.Rect.fromLTRB(math.max(core.double, this.left, other.left), math.max(core.double, this.top, other.top), math.min(core.double, this.right, other.right), math.min(core.double, this.bottom, other.bottom));
    }
    expandToInclude(other) {
      return new ui.Rect.fromLTRB(math.min(core.double, this.left, other.left), math.min(core.double, this.top, other.top), math.max(core.double, this.right, other.right), math.max(core.double, this.bottom, other.bottom));
    }
    overlaps(other) {
      if (dart.notNull(this.right) <= dart.notNull(other.left) || dart.notNull(other.right) <= dart.notNull(this.left)) return false;
      if (dart.notNull(this.bottom) <= dart.notNull(other.top) || dart.notNull(other.bottom) <= dart.notNull(this.top)) return false;
      return true;
    }
    get shortestSide() {
      return math.min(core.double, this.width[$abs](), this.height[$abs]());
    }
    get longestSide() {
      return math.max(core.double, this.width[$abs](), this.height[$abs]());
    }
    get topLeft() {
      return new ui.Offset.new(this.left, this.top);
    }
    get topCenter() {
      return new ui.Offset.new(dart.notNull(this.left) + dart.notNull(this.width) / 2.0, this.top);
    }
    get topRight() {
      return new ui.Offset.new(this.right, this.top);
    }
    get centerLeft() {
      return new ui.Offset.new(this.left, dart.notNull(this.top) + dart.notNull(this.height) / 2.0);
    }
    get center() {
      return new ui.Offset.new(dart.notNull(this.left) + dart.notNull(this.width) / 2.0, dart.notNull(this.top) + dart.notNull(this.height) / 2.0);
    }
    get centerRight() {
      return new ui.Offset.new(this.right, dart.notNull(this.top) + dart.notNull(this.height) / 2.0);
    }
    get bottomLeft() {
      return new ui.Offset.new(this.left, this.bottom);
    }
    get bottomCenter() {
      return new ui.Offset.new(dart.notNull(this.left) + dart.notNull(this.width) / 2.0, this.bottom);
    }
    get bottomRight() {
      return new ui.Offset.new(this.right, this.bottom);
    }
    contains(offset) {
      return dart.notNull(offset.dx) >= dart.notNull(this.left) && dart.notNull(offset.dx) < dart.notNull(this.right) && dart.notNull(offset.dy) >= dart.notNull(this.top) && dart.notNull(offset.dy) < dart.notNull(this.bottom);
    }
    static lerp(a, b, t) {
      if (!(t != null)) dart.assertFailed();
      if (a == null && b == null) return null;
      if (a == null) return new ui.Rect.fromLTRB(dart.notNull(b.left) * dart.notNull(t), dart.notNull(b.top) * dart.notNull(t), dart.notNull(b.right) * dart.notNull(t), dart.notNull(b.bottom) * dart.notNull(t));
      if (b == null) {
        let k = 1.0 - dart.notNull(t);
        return new ui.Rect.fromLTRB(dart.notNull(a.left) * k, dart.notNull(a.top) * k, dart.notNull(a.right) * k, dart.notNull(a.bottom) * k);
      }
      return new ui.Rect.fromLTRB(ui.lerpDouble(a.left, b.left, t), ui.lerpDouble(a.top, b.top, t), ui.lerpDouble(a.right, b.right, t), ui.lerpDouble(a.bottom, b.bottom, t));
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) return true;
      if (!dart.equals(this[$runtimeType], dart.runtimeType(other))) return false;
      let typedOther = ui.Rect._check(other);
      return this.left == typedOther.left && this.top == typedOther.top && this.right == typedOther.right && this.bottom == typedOther.bottom;
    }
    get hashCode() {
      return ui.hashValues(this.left, this.top, this.right, this.bottom);
    }
    toString() {
      return "Rect.fromLTRB(" + this.left[$toStringAsFixed](1) + ", " + this.top[$toStringAsFixed](1) + ", " + this.right[$toStringAsFixed](1) + ", " + this.bottom[$toStringAsFixed](1) + ")";
    }
  };
  (ui.Rect.fromLTRB = function(left, top, right, bottom) {
    this[left$] = left;
    this[top$] = top;
    this[right$] = right;
    this[bottom$] = bottom;
    if (!(left != null)) dart.assertFailed();
    if (!(top != null)) dart.assertFailed();
    if (!(right != null)) dart.assertFailed();
    if (!(bottom != null)) dart.assertFailed();
    ;
  }).prototype = ui.Rect.prototype;
  (ui.Rect.fromLTWH = function(left, top, width, height) {
    ui.Rect.fromLTRB.call(this, left, top, dart.notNull(left) + dart.notNull(width), dart.notNull(top) + dart.notNull(height));
  }).prototype = ui.Rect.prototype;
  (ui.Rect.fromCircle = function(opts) {
    let center = opts && 'center' in opts ? opts.center : null;
    let radius = opts && 'radius' in opts ? opts.radius : null;
    ui.Rect.fromCenter.call(this, {center: center, width: dart.notNull(radius) * 2, height: dart.notNull(radius) * 2});
  }).prototype = ui.Rect.prototype;
  (ui.Rect.fromCenter = function(opts) {
    let center = opts && 'center' in opts ? opts.center : null;
    let width = opts && 'width' in opts ? opts.width : null;
    let height = opts && 'height' in opts ? opts.height : null;
    ui.Rect.fromLTRB.call(this, dart.notNull(center.dx) - dart.notNull(width) / 2, dart.notNull(center.dy) - dart.notNull(height) / 2, dart.notNull(center.dx) + dart.notNull(width) / 2, dart.notNull(center.dy) + dart.notNull(height) / 2);
  }).prototype = ui.Rect.prototype;
  (ui.Rect.fromPoints = function(a, b) {
    ui.Rect.fromLTRB.call(this, math.min(core.double, a.dx, b.dx), math.min(core.double, a.dy, b.dy), math.max(core.double, a.dx, b.dx), math.max(core.double, a.dy, b.dy));
  }).prototype = ui.Rect.prototype;
  dart.addTypeTests(ui.Rect);
  const left$ = Symbol("Rect.left");
  const top$ = Symbol("Rect.top");
  const right$ = Symbol("Rect.right");
  const bottom$ = Symbol("Rect.bottom");
  dart.setMethodSignature(ui.Rect, () => ({
    __proto__: dart.getMethods(ui.Rect.__proto__),
    shift: dart.fnType(ui.Rect, [ui.Offset]),
    translate: dart.fnType(ui.Rect, [core.double, core.double]),
    inflate: dart.fnType(ui.Rect, [core.double]),
    deflate: dart.fnType(ui.Rect, [core.double]),
    intersect: dart.fnType(ui.Rect, [ui.Rect]),
    expandToInclude: dart.fnType(ui.Rect, [ui.Rect]),
    overlaps: dart.fnType(core.bool, [ui.Rect]),
    contains: dart.fnType(core.bool, [ui.Offset])
  }));
  dart.setGetterSignature(ui.Rect, () => ({
    __proto__: dart.getGetters(ui.Rect.__proto__),
    width: core.double,
    height: core.double,
    size: ui.Size,
    hasNaN: core.bool,
    isInfinite: core.bool,
    isFinite: core.bool,
    isEmpty: core.bool,
    shortestSide: core.double,
    longestSide: core.double,
    topLeft: ui.Offset,
    topCenter: ui.Offset,
    topRight: ui.Offset,
    centerLeft: ui.Offset,
    center: ui.Offset,
    centerRight: ui.Offset,
    bottomLeft: ui.Offset,
    bottomCenter: ui.Offset,
    bottomRight: ui.Offset
  }));
  dart.setFieldSignature(ui.Rect, () => ({
    __proto__: dart.getFields(ui.Rect.__proto__),
    left: dart.finalFieldType(core.double),
    top: dart.finalFieldType(core.double),
    right: dart.finalFieldType(core.double),
    bottom: dart.finalFieldType(core.double)
  }));
  dart.defineExtensionMethods(ui.Rect, ['_equals', 'toString']);
  dart.defineExtensionAccessors(ui.Rect, ['hashCode']);
  dart.defineLazy(ui.Rect, {
    /*ui.Rect.zero*/get zero() {
      return dart.const(new ui.Rect.fromLTRB(0.0, 0.0, 0.0, 0.0));
    },
    /*ui.Rect._giantScalar*/get _giantScalar() {
      return 1000000000.0;
    },
    /*ui.Rect.largest*/get largest() {
      return dart.const(new ui.Rect.fromLTRB(-dart.notNull(ui.Rect._giantScalar), -dart.notNull(ui.Rect._giantScalar), ui.Rect._giantScalar, ui.Rect._giantScalar));
    }
  });
  ui.Radius = class Radius extends core.Object {
    get x() {
      return this[x$3];
    }
    set x(value) {
      super.x = value;
    }
    get y() {
      return this[y$3];
    }
    set y(value) {
      super.y = value;
    }
    _negate() {
      return new ui.Radius.elliptical(-dart.notNull(this.x), -dart.notNull(this.y));
    }
    ['-'](other) {
      return new ui.Radius.elliptical(dart.notNull(this.x) - dart.notNull(other.x), dart.notNull(this.y) - dart.notNull(other.y));
    }
    ['+'](other) {
      return new ui.Radius.elliptical(dart.notNull(this.x) + dart.notNull(other.x), dart.notNull(this.y) + dart.notNull(other.y));
    }
    ['*'](operand) {
      return new ui.Radius.elliptical(dart.notNull(this.x) * dart.notNull(operand), dart.notNull(this.y) * dart.notNull(operand));
    }
    ['/'](operand) {
      return new ui.Radius.elliptical(dart.notNull(this.x) / dart.notNull(operand), dart.notNull(this.y) / dart.notNull(operand));
    }
    ['~/'](operand) {
      return new ui.Radius.elliptical((dart.notNull(this.x) / dart.notNull(operand))[$truncate]()[$toDouble](), (dart.notNull(this.y) / dart.notNull(operand))[$truncate]()[$toDouble]());
    }
    ['%'](operand) {
      return new ui.Radius.elliptical(this.x[$modulo](operand), this.y[$modulo](operand));
    }
    static lerp(a, b, t) {
      if (!(t != null)) dart.assertFailed();
      if (a == null && b == null) return null;
      if (a == null) return new ui.Radius.elliptical(dart.notNull(b.x) * dart.notNull(t), dart.notNull(b.y) * dart.notNull(t));
      if (b == null) {
        let k = 1.0 - dart.notNull(t);
        return new ui.Radius.elliptical(dart.notNull(a.x) * k, dart.notNull(a.y) * k);
      }
      return new ui.Radius.elliptical(ui.lerpDouble(a.x, b.x, t), ui.lerpDouble(a.y, b.y, t));
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) return true;
      if (!dart.equals(this[$runtimeType], dart.runtimeType(other))) return false;
      let typedOther = ui.Radius._check(other);
      return typedOther.x == this.x && typedOther.y == this.y;
    }
    get hashCode() {
      return ui.hashValues(this.x, this.y);
    }
    toString() {
      return this.x == this.y ? "Radius.circular(" + this.x[$toStringAsFixed](1) + ")" : "Radius.elliptical(" + this.x[$toStringAsFixed](1) + ", " + this.y[$toStringAsFixed](1) + ")";
    }
  };
  (ui.Radius.circular = function(radius) {
    ui.Radius.elliptical.call(this, radius, radius);
  }).prototype = ui.Radius.prototype;
  (ui.Radius.elliptical = function(x, y) {
    this[x$3] = x;
    this[y$3] = y;
    ;
  }).prototype = ui.Radius.prototype;
  dart.addTypeTests(ui.Radius);
  const x$3 = Symbol("Radius.x");
  const y$3 = Symbol("Radius.y");
  dart.setMethodSignature(ui.Radius, () => ({
    __proto__: dart.getMethods(ui.Radius.__proto__),
    _negate: dart.fnType(ui.Radius, []),
    '-': dart.fnType(ui.Radius, [ui.Radius]),
    '+': dart.fnType(ui.Radius, [ui.Radius]),
    '*': dart.fnType(ui.Radius, [core.double]),
    '/': dart.fnType(ui.Radius, [core.double]),
    '~/': dart.fnType(ui.Radius, [core.double]),
    '%': dart.fnType(ui.Radius, [core.double])
  }));
  dart.setFieldSignature(ui.Radius, () => ({
    __proto__: dart.getFields(ui.Radius.__proto__),
    x: dart.finalFieldType(core.double),
    y: dart.finalFieldType(core.double)
  }));
  dart.defineExtensionMethods(ui.Radius, ['_equals', 'toString']);
  dart.defineExtensionAccessors(ui.Radius, ['hashCode']);
  dart.defineLazy(ui.Radius, {
    /*ui.Radius.zero*/get zero() {
      return dart.const(new ui.Radius.circular(0.0));
    }
  });
  const _getMin = dart.privateName(ui, "_getMin");
  const _scaleRadii = dart.privateName(ui, "_scaleRadii");
  ui.RRect = class RRect extends core.Object {
    get left() {
      return this[left$0];
    }
    set left(value) {
      super.left = value;
    }
    get top() {
      return this[top$0];
    }
    set top(value) {
      super.top = value;
    }
    get right() {
      return this[right$0];
    }
    set right(value) {
      super.right = value;
    }
    get bottom() {
      return this[bottom$0];
    }
    set bottom(value) {
      super.bottom = value;
    }
    get tlRadiusX() {
      return this[tlRadiusX$];
    }
    set tlRadiusX(value) {
      super.tlRadiusX = value;
    }
    get tlRadiusY() {
      return this[tlRadiusY$];
    }
    set tlRadiusY(value) {
      super.tlRadiusY = value;
    }
    get trRadiusX() {
      return this[trRadiusX$];
    }
    set trRadiusX(value) {
      super.trRadiusX = value;
    }
    get trRadiusY() {
      return this[trRadiusY$];
    }
    set trRadiusY(value) {
      super.trRadiusY = value;
    }
    get brRadiusX() {
      return this[brRadiusX$];
    }
    set brRadiusX(value) {
      super.brRadiusX = value;
    }
    get brRadiusY() {
      return this[brRadiusY$];
    }
    set brRadiusY(value) {
      super.brRadiusY = value;
    }
    get blRadiusX() {
      return this[blRadiusX$];
    }
    set blRadiusX(value) {
      super.blRadiusX = value;
    }
    get blRadiusY() {
      return this[blRadiusY$];
    }
    set blRadiusY(value) {
      super.blRadiusY = value;
    }
    get tlRadius() {
      return new ui.Radius.elliptical(this.tlRadiusX, this.tlRadiusY);
    }
    get trRadius() {
      return new ui.Radius.elliptical(this.trRadiusX, this.trRadiusY);
    }
    get brRadius() {
      return new ui.Radius.elliptical(this.brRadiusX, this.brRadiusY);
    }
    get blRadius() {
      return new ui.Radius.elliptical(this.blRadiusX, this.blRadiusY);
    }
    shift(offset) {
      return new ui.RRect._raw({left: dart.notNull(this.left) + dart.notNull(offset.dx), top: dart.notNull(this.top) + dart.notNull(offset.dy), right: dart.notNull(this.right) + dart.notNull(offset.dx), bottom: dart.notNull(this.bottom) + dart.notNull(offset.dy), tlRadiusX: this.tlRadiusX, tlRadiusY: this.tlRadiusY, trRadiusX: this.trRadiusX, trRadiusY: this.trRadiusY, blRadiusX: this.blRadiusX, blRadiusY: this.blRadiusY, brRadiusX: this.brRadiusX, brRadiusY: this.brRadiusY});
    }
    inflate(delta) {
      return new ui.RRect._raw({left: dart.notNull(this.left) - dart.notNull(delta), top: dart.notNull(this.top) - dart.notNull(delta), right: dart.notNull(this.right) + dart.notNull(delta), bottom: dart.notNull(this.bottom) + dart.notNull(delta), tlRadiusX: dart.notNull(this.tlRadiusX) + dart.notNull(delta), tlRadiusY: dart.notNull(this.tlRadiusY) + dart.notNull(delta), trRadiusX: dart.notNull(this.trRadiusX) + dart.notNull(delta), trRadiusY: dart.notNull(this.trRadiusY) + dart.notNull(delta), blRadiusX: dart.notNull(this.blRadiusX) + dart.notNull(delta), blRadiusY: dart.notNull(this.blRadiusY) + dart.notNull(delta), brRadiusX: dart.notNull(this.brRadiusX) + dart.notNull(delta), brRadiusY: dart.notNull(this.brRadiusY) + dart.notNull(delta)});
    }
    deflate(delta) {
      return this.inflate(-dart.notNull(delta));
    }
    get width() {
      return dart.notNull(this.right) - dart.notNull(this.left);
    }
    get height() {
      return dart.notNull(this.bottom) - dart.notNull(this.top);
    }
    get outerRect() {
      return new ui.Rect.fromLTRB(this.left, this.top, this.right, this.bottom);
    }
    get safeInnerRect() {
      let kInsetFactor = 0.29289321881;
      let leftRadius = math.max(core.double, this.blRadiusX, this.tlRadiusX);
      let topRadius = math.max(core.double, this.tlRadiusY, this.trRadiusY);
      let rightRadius = math.max(core.double, this.trRadiusX, this.brRadiusX);
      let bottomRadius = math.max(core.double, this.brRadiusY, this.blRadiusY);
      return new ui.Rect.fromLTRB(dart.notNull(this.left) + leftRadius * kInsetFactor, dart.notNull(this.top) + topRadius * kInsetFactor, dart.notNull(this.right) - rightRadius * kInsetFactor, dart.notNull(this.bottom) - bottomRadius * kInsetFactor);
    }
    get middleRect() {
      let leftRadius = math.max(core.double, this.blRadiusX, this.tlRadiusX);
      let topRadius = math.max(core.double, this.tlRadiusY, this.trRadiusY);
      let rightRadius = math.max(core.double, this.trRadiusX, this.brRadiusX);
      let bottomRadius = math.max(core.double, this.brRadiusY, this.blRadiusY);
      return new ui.Rect.fromLTRB(dart.notNull(this.left) + leftRadius, dart.notNull(this.top) + topRadius, dart.notNull(this.right) - rightRadius, dart.notNull(this.bottom) - bottomRadius);
    }
    get wideMiddleRect() {
      let topRadius = math.max(core.double, this.tlRadiusY, this.trRadiusY);
      let bottomRadius = math.max(core.double, this.brRadiusY, this.blRadiusY);
      return new ui.Rect.fromLTRB(this.left, dart.notNull(this.top) + topRadius, this.right, dart.notNull(this.bottom) - bottomRadius);
    }
    get tallMiddleRect() {
      let leftRadius = math.max(core.double, this.blRadiusX, this.tlRadiusX);
      let rightRadius = math.max(core.double, this.trRadiusX, this.brRadiusX);
      return new ui.Rect.fromLTRB(dart.notNull(this.left) + leftRadius, this.top, dart.notNull(this.right) - rightRadius, this.bottom);
    }
    get isEmpty() {
      return dart.notNull(this.left) >= dart.notNull(this.right) || dart.notNull(this.top) >= dart.notNull(this.bottom);
    }
    get isFinite() {
      return this.left[$isFinite] && this.top[$isFinite] && this.right[$isFinite] && this.bottom[$isFinite];
    }
    get isRect() {
      return (this.tlRadiusX === 0.0 || this.tlRadiusY === 0.0) && (this.trRadiusX === 0.0 || this.trRadiusY === 0.0) && (this.blRadiusX === 0.0 || this.blRadiusY === 0.0) && (this.brRadiusX === 0.0 || this.brRadiusY === 0.0);
    }
    get isStadium() {
      return dart.equals(this.tlRadius, this.trRadius) && dart.equals(this.trRadius, this.brRadius) && dart.equals(this.brRadius, this.blRadius) && (dart.notNull(this.width) <= 2.0 * dart.notNull(this.tlRadiusX) || dart.notNull(this.height) <= 2.0 * dart.notNull(this.tlRadiusY));
    }
    get isEllipse() {
      return dart.equals(this.tlRadius, this.trRadius) && dart.equals(this.trRadius, this.brRadius) && dart.equals(this.brRadius, this.blRadius) && dart.notNull(this.width) <= 2.0 * dart.notNull(this.tlRadiusX) && dart.notNull(this.height) <= 2.0 * dart.notNull(this.tlRadiusY);
    }
    get isCircle() {
      return this.width == this.height && dart.test(this.isEllipse);
    }
    get shortestSide() {
      return math.min(core.double, this.width[$abs](), this.height[$abs]());
    }
    get longestSide() {
      return math.max(core.double, this.width[$abs](), this.height[$abs]());
    }
    get hasNaN() {
      return this.left[$isNaN] || this.top[$isNaN] || this.right[$isNaN] || this.bottom[$isNaN] || this.trRadiusX[$isNaN] || this.trRadiusY[$isNaN] || this.tlRadiusX[$isNaN] || this.tlRadiusY[$isNaN] || this.brRadiusX[$isNaN] || this.brRadiusY[$isNaN] || this.blRadiusX[$isNaN] || this.blRadiusY[$isNaN];
    }
    get center() {
      return new ui.Offset.new(dart.notNull(this.left) + dart.notNull(this.width) / 2.0, dart.notNull(this.top) + dart.notNull(this.height) / 2.0);
    }
    [_getMin](min, radius1, radius2, limit) {
      let sum = dart.notNull(radius1) + dart.notNull(radius2);
      if (sum > dart.notNull(limit) && sum !== 0.0) return math.min(core.double, min, dart.notNull(limit) / sum);
      return min;
    }
    [_scaleRadii]() {
      let scale = 1.0;
      scale = this[_getMin](scale, this.blRadiusY, this.tlRadiusY, this.height);
      scale = this[_getMin](scale, this.tlRadiusX, this.trRadiusX, this.width);
      scale = this[_getMin](scale, this.trRadiusY, this.brRadiusY, this.height);
      scale = this[_getMin](scale, this.brRadiusX, this.blRadiusX, this.width);
      if (dart.notNull(scale) < 1.0) {
        return new ui.RRect._raw({top: this.top, left: this.left, right: this.right, bottom: this.bottom, tlRadiusX: dart.notNull(this.tlRadiusX) * dart.notNull(scale), tlRadiusY: dart.notNull(this.tlRadiusY) * dart.notNull(scale), trRadiusX: dart.notNull(this.trRadiusX) * dart.notNull(scale), trRadiusY: dart.notNull(this.trRadiusY) * dart.notNull(scale), blRadiusX: dart.notNull(this.blRadiusX) * dart.notNull(scale), blRadiusY: dart.notNull(this.blRadiusY) * dart.notNull(scale), brRadiusX: dart.notNull(this.brRadiusX) * dart.notNull(scale), brRadiusY: dart.notNull(this.brRadiusY) * dart.notNull(scale)});
      }
      return new ui.RRect._raw({top: this.top, left: this.left, right: this.right, bottom: this.bottom, tlRadiusX: this.tlRadiusX, tlRadiusY: this.tlRadiusY, trRadiusX: this.trRadiusX, trRadiusY: this.trRadiusY, blRadiusX: this.blRadiusX, blRadiusY: this.blRadiusY, brRadiusX: this.brRadiusX, brRadiusY: this.brRadiusY});
    }
    contains(point) {
      if (dart.notNull(point.dx) < dart.notNull(this.left) || dart.notNull(point.dx) >= dart.notNull(this.right) || dart.notNull(point.dy) < dart.notNull(this.top) || dart.notNull(point.dy) >= dart.notNull(this.bottom)) return false;
      let scaled = this[_scaleRadii]();
      let x = null;
      let y = null;
      let radiusX = null;
      let radiusY = null;
      if (dart.notNull(point.dx) < dart.notNull(this.left) + dart.notNull(scaled.tlRadiusX) && dart.notNull(point.dy) < dart.notNull(this.top) + dart.notNull(scaled.tlRadiusY)) {
        x = dart.notNull(point.dx) - dart.notNull(this.left) - dart.notNull(scaled.tlRadiusX);
        y = dart.notNull(point.dy) - dart.notNull(this.top) - dart.notNull(scaled.tlRadiusY);
        radiusX = scaled.tlRadiusX;
        radiusY = scaled.tlRadiusY;
      } else if (dart.notNull(point.dx) > dart.notNull(this.right) - dart.notNull(scaled.trRadiusX) && dart.notNull(point.dy) < dart.notNull(this.top) + dart.notNull(scaled.trRadiusY)) {
        x = dart.notNull(point.dx) - dart.notNull(this.right) + dart.notNull(scaled.trRadiusX);
        y = dart.notNull(point.dy) - dart.notNull(this.top) - dart.notNull(scaled.trRadiusY);
        radiusX = scaled.trRadiusX;
        radiusY = scaled.trRadiusY;
      } else if (dart.notNull(point.dx) > dart.notNull(this.right) - dart.notNull(scaled.brRadiusX) && dart.notNull(point.dy) > dart.notNull(this.bottom) - dart.notNull(scaled.brRadiusY)) {
        x = dart.notNull(point.dx) - dart.notNull(this.right) + dart.notNull(scaled.brRadiusX);
        y = dart.notNull(point.dy) - dart.notNull(this.bottom) + dart.notNull(scaled.brRadiusY);
        radiusX = scaled.brRadiusX;
        radiusY = scaled.brRadiusY;
      } else if (dart.notNull(point.dx) < dart.notNull(this.left) + dart.notNull(scaled.blRadiusX) && dart.notNull(point.dy) > dart.notNull(this.bottom) - dart.notNull(scaled.blRadiusY)) {
        x = dart.notNull(point.dx) - dart.notNull(this.left) - dart.notNull(scaled.blRadiusX);
        y = dart.notNull(point.dy) - dart.notNull(this.bottom) + dart.notNull(scaled.blRadiusY);
        radiusX = scaled.blRadiusX;
        radiusY = scaled.blRadiusY;
      } else {
        return true;
      }
      x = dart.notNull(x) / dart.notNull(radiusX);
      y = dart.notNull(y) / dart.notNull(radiusY);
      if (dart.notNull(x) * dart.notNull(x) + dart.notNull(y) * dart.notNull(y) > 1.0) return false;
      return true;
    }
    static lerp(a, b, t) {
      if (!(t != null)) dart.assertFailed();
      if (a == null && b == null) return null;
      if (a == null) {
        return new ui.RRect._raw({left: dart.notNull(b.left) * dart.notNull(t), top: dart.notNull(b.top) * dart.notNull(t), right: dart.notNull(b.right) * dart.notNull(t), bottom: dart.notNull(b.bottom) * dart.notNull(t), tlRadiusX: dart.notNull(b.tlRadiusX) * dart.notNull(t), tlRadiusY: dart.notNull(b.tlRadiusY) * dart.notNull(t), trRadiusX: dart.notNull(b.trRadiusX) * dart.notNull(t), trRadiusY: dart.notNull(b.trRadiusY) * dart.notNull(t), brRadiusX: dart.notNull(b.brRadiusX) * dart.notNull(t), brRadiusY: dart.notNull(b.brRadiusY) * dart.notNull(t), blRadiusX: dart.notNull(b.blRadiusX) * dart.notNull(t), blRadiusY: dart.notNull(b.blRadiusY) * dart.notNull(t)});
      }
      if (b == null) {
        let k = 1.0 - dart.notNull(t);
        return new ui.RRect._raw({left: dart.notNull(a.left) * k, top: dart.notNull(a.top) * k, right: dart.notNull(a.right) * k, bottom: dart.notNull(a.bottom) * k, tlRadiusX: dart.notNull(a.tlRadiusX) * k, tlRadiusY: dart.notNull(a.tlRadiusY) * k, trRadiusX: dart.notNull(a.trRadiusX) * k, trRadiusY: dart.notNull(a.trRadiusY) * k, brRadiusX: dart.notNull(a.brRadiusX) * k, brRadiusY: dart.notNull(a.brRadiusY) * k, blRadiusX: dart.notNull(a.blRadiusX) * k, blRadiusY: dart.notNull(a.blRadiusY) * k});
      }
      return new ui.RRect._raw({left: ui.lerpDouble(a.left, b.left, t), top: ui.lerpDouble(a.top, b.top, t), right: ui.lerpDouble(a.right, b.right, t), bottom: ui.lerpDouble(a.bottom, b.bottom, t), tlRadiusX: ui.lerpDouble(a.tlRadiusX, b.tlRadiusX, t), tlRadiusY: ui.lerpDouble(a.tlRadiusY, b.tlRadiusY, t), trRadiusX: ui.lerpDouble(a.trRadiusX, b.trRadiusX, t), trRadiusY: ui.lerpDouble(a.trRadiusY, b.trRadiusY, t), brRadiusX: ui.lerpDouble(a.brRadiusX, b.brRadiusX, t), brRadiusY: ui.lerpDouble(a.brRadiusY, b.brRadiusY, t), blRadiusX: ui.lerpDouble(a.blRadiusX, b.blRadiusX, t), blRadiusY: ui.lerpDouble(a.blRadiusY, b.blRadiusY, t)});
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) return true;
      if (!dart.equals(this[$runtimeType], dart.runtimeType(other))) return false;
      let typedOther = ui.RRect._check(other);
      return this.left == typedOther.left && this.top == typedOther.top && this.right == typedOther.right && this.bottom == typedOther.bottom && this.tlRadiusX == typedOther.tlRadiusX && this.tlRadiusY == typedOther.tlRadiusY && this.trRadiusX == typedOther.trRadiusX && this.trRadiusY == typedOther.trRadiusY && this.blRadiusX == typedOther.blRadiusX && this.blRadiusY == typedOther.blRadiusY && this.brRadiusX == typedOther.brRadiusX && this.brRadiusY == typedOther.brRadiusY;
    }
    get hashCode() {
      return ui.hashValues(this.left, this.top, this.right, this.bottom, this.tlRadiusX, this.tlRadiusY, this.trRadiusX, this.trRadiusY, this.blRadiusX, this.blRadiusY, this.brRadiusX, this.brRadiusY);
    }
    toString() {
      let rect = this.left[$toStringAsFixed](1) + ", " + this.top[$toStringAsFixed](1) + ", " + this.right[$toStringAsFixed](1) + ", " + this.bottom[$toStringAsFixed](1);
      if (dart.equals(this.tlRadius, this.trRadius) && dart.equals(this.trRadius, this.brRadius) && dart.equals(this.brRadius, this.blRadius)) {
        if (this.tlRadius.x == this.tlRadius.y) return "RRect.fromLTRBR(" + rect + ", " + this.tlRadius.x[$toStringAsFixed](1) + ")";
        return "RRect.fromLTRBXY(" + rect + ", " + this.tlRadius.x[$toStringAsFixed](1) + ", " + this.tlRadius.y[$toStringAsFixed](1) + ")";
      }
      return "RRect.fromLTRBAndCorners(" + rect + ", " + "topLeft: " + dart.str(this.tlRadius) + ", " + "topRight: " + dart.str(this.trRadius) + ", " + "bottomRight: " + dart.str(this.brRadius) + ", " + "bottomLeft: " + dart.str(this.blRadius) + ")";
    }
  };
  (ui.RRect.fromLTRBXY = function(left, top, right, bottom, radiusX, radiusY) {
    ui.RRect._raw.call(this, {top: top, left: left, right: right, bottom: bottom, tlRadiusX: radiusX, tlRadiusY: radiusY, trRadiusX: radiusX, trRadiusY: radiusY, blRadiusX: radiusX, blRadiusY: radiusY, brRadiusX: radiusX, brRadiusY: radiusY});
  }).prototype = ui.RRect.prototype;
  (ui.RRect.fromLTRBR = function(left, top, right, bottom, radius) {
    ui.RRect._raw.call(this, {top: top, left: left, right: right, bottom: bottom, tlRadiusX: radius.x, tlRadiusY: radius.y, trRadiusX: radius.x, trRadiusY: radius.y, blRadiusX: radius.x, blRadiusY: radius.y, brRadiusX: radius.x, brRadiusY: radius.y});
  }).prototype = ui.RRect.prototype;
  (ui.RRect.fromRectXY = function(rect, radiusX, radiusY) {
    ui.RRect._raw.call(this, {top: rect.top, left: rect.left, right: rect.right, bottom: rect.bottom, tlRadiusX: radiusX, tlRadiusY: radiusY, trRadiusX: radiusX, trRadiusY: radiusY, blRadiusX: radiusX, blRadiusY: radiusY, brRadiusX: radiusX, brRadiusY: radiusY});
  }).prototype = ui.RRect.prototype;
  (ui.RRect.fromRectAndRadius = function(rect, radius) {
    ui.RRect._raw.call(this, {top: rect.top, left: rect.left, right: rect.right, bottom: rect.bottom, tlRadiusX: radius.x, tlRadiusY: radius.y, trRadiusX: radius.x, trRadiusY: radius.y, blRadiusX: radius.x, blRadiusY: radius.y, brRadiusX: radius.x, brRadiusY: radius.y});
  }).prototype = ui.RRect.prototype;
  (ui.RRect.fromLTRBAndCorners = function(left, top, right, bottom, opts) {
    let topLeft = opts && 'topLeft' in opts ? opts.topLeft : ui.Radius.zero;
    let topRight = opts && 'topRight' in opts ? opts.topRight : ui.Radius.zero;
    let bottomRight = opts && 'bottomRight' in opts ? opts.bottomRight : ui.Radius.zero;
    let bottomLeft = opts && 'bottomLeft' in opts ? opts.bottomLeft : ui.Radius.zero;
    ui.RRect._raw.call(this, {top: top, left: left, right: right, bottom: bottom, tlRadiusX: topLeft.x, tlRadiusY: topLeft.y, trRadiusX: topRight.x, trRadiusY: topRight.y, blRadiusX: bottomLeft.x, blRadiusY: bottomLeft.y, brRadiusX: bottomRight.x, brRadiusY: bottomRight.y});
  }).prototype = ui.RRect.prototype;
  (ui.RRect.fromRectAndCorners = function(rect, opts) {
    let topLeft = opts && 'topLeft' in opts ? opts.topLeft : ui.Radius.zero;
    let topRight = opts && 'topRight' in opts ? opts.topRight : ui.Radius.zero;
    let bottomRight = opts && 'bottomRight' in opts ? opts.bottomRight : ui.Radius.zero;
    let bottomLeft = opts && 'bottomLeft' in opts ? opts.bottomLeft : ui.Radius.zero;
    ui.RRect._raw.call(this, {top: rect.top, left: rect.left, right: rect.right, bottom: rect.bottom, tlRadiusX: topLeft.x, tlRadiusY: topLeft.y, trRadiusX: topRight.x, trRadiusY: topRight.y, blRadiusX: bottomLeft.x, blRadiusY: bottomLeft.y, brRadiusX: bottomRight.x, brRadiusY: bottomRight.y});
  }).prototype = ui.RRect.prototype;
  (ui.RRect._raw = function(opts) {
    let left = opts && 'left' in opts ? opts.left : 0.0;
    let top = opts && 'top' in opts ? opts.top : 0.0;
    let right = opts && 'right' in opts ? opts.right : 0.0;
    let bottom = opts && 'bottom' in opts ? opts.bottom : 0.0;
    let tlRadiusX = opts && 'tlRadiusX' in opts ? opts.tlRadiusX : 0.0;
    let tlRadiusY = opts && 'tlRadiusY' in opts ? opts.tlRadiusY : 0.0;
    let trRadiusX = opts && 'trRadiusX' in opts ? opts.trRadiusX : 0.0;
    let trRadiusY = opts && 'trRadiusY' in opts ? opts.trRadiusY : 0.0;
    let brRadiusX = opts && 'brRadiusX' in opts ? opts.brRadiusX : 0.0;
    let brRadiusY = opts && 'brRadiusY' in opts ? opts.brRadiusY : 0.0;
    let blRadiusX = opts && 'blRadiusX' in opts ? opts.blRadiusX : 0.0;
    let blRadiusY = opts && 'blRadiusY' in opts ? opts.blRadiusY : 0.0;
    this[left$0] = left;
    this[top$0] = top;
    this[right$0] = right;
    this[bottom$0] = bottom;
    this[tlRadiusX$] = tlRadiusX;
    this[tlRadiusY$] = tlRadiusY;
    this[trRadiusX$] = trRadiusX;
    this[trRadiusY$] = trRadiusY;
    this[brRadiusX$] = brRadiusX;
    this[brRadiusY$] = brRadiusY;
    this[blRadiusX$] = blRadiusX;
    this[blRadiusY$] = blRadiusY;
    if (!(left != null)) dart.assertFailed();
    if (!(top != null)) dart.assertFailed();
    if (!(right != null)) dart.assertFailed();
    if (!(bottom != null)) dart.assertFailed();
    if (!(tlRadiusX != null)) dart.assertFailed();
    if (!(tlRadiusY != null)) dart.assertFailed();
    if (!(trRadiusX != null)) dart.assertFailed();
    if (!(trRadiusY != null)) dart.assertFailed();
    if (!(brRadiusX != null)) dart.assertFailed();
    if (!(brRadiusY != null)) dart.assertFailed();
    if (!(blRadiusX != null)) dart.assertFailed();
    if (!(blRadiusY != null)) dart.assertFailed();
    ;
  }).prototype = ui.RRect.prototype;
  dart.addTypeTests(ui.RRect);
  const left$0 = Symbol("RRect.left");
  const top$0 = Symbol("RRect.top");
  const right$0 = Symbol("RRect.right");
  const bottom$0 = Symbol("RRect.bottom");
  const tlRadiusX$ = Symbol("RRect.tlRadiusX");
  const tlRadiusY$ = Symbol("RRect.tlRadiusY");
  const trRadiusX$ = Symbol("RRect.trRadiusX");
  const trRadiusY$ = Symbol("RRect.trRadiusY");
  const brRadiusX$ = Symbol("RRect.brRadiusX");
  const brRadiusY$ = Symbol("RRect.brRadiusY");
  const blRadiusX$ = Symbol("RRect.blRadiusX");
  const blRadiusY$ = Symbol("RRect.blRadiusY");
  dart.setMethodSignature(ui.RRect, () => ({
    __proto__: dart.getMethods(ui.RRect.__proto__),
    shift: dart.fnType(ui.RRect, [ui.Offset]),
    inflate: dart.fnType(ui.RRect, [core.double]),
    deflate: dart.fnType(ui.RRect, [core.double]),
    [_getMin]: dart.fnType(core.double, [core.double, core.double, core.double, core.double]),
    [_scaleRadii]: dart.fnType(ui.RRect, []),
    contains: dart.fnType(core.bool, [ui.Offset])
  }));
  dart.setGetterSignature(ui.RRect, () => ({
    __proto__: dart.getGetters(ui.RRect.__proto__),
    tlRadius: ui.Radius,
    trRadius: ui.Radius,
    brRadius: ui.Radius,
    blRadius: ui.Radius,
    width: core.double,
    height: core.double,
    outerRect: ui.Rect,
    safeInnerRect: ui.Rect,
    middleRect: ui.Rect,
    wideMiddleRect: ui.Rect,
    tallMiddleRect: ui.Rect,
    isEmpty: core.bool,
    isFinite: core.bool,
    isRect: core.bool,
    isStadium: core.bool,
    isEllipse: core.bool,
    isCircle: core.bool,
    shortestSide: core.double,
    longestSide: core.double,
    hasNaN: core.bool,
    center: ui.Offset
  }));
  dart.setFieldSignature(ui.RRect, () => ({
    __proto__: dart.getFields(ui.RRect.__proto__),
    left: dart.finalFieldType(core.double),
    top: dart.finalFieldType(core.double),
    right: dart.finalFieldType(core.double),
    bottom: dart.finalFieldType(core.double),
    tlRadiusX: dart.finalFieldType(core.double),
    tlRadiusY: dart.finalFieldType(core.double),
    trRadiusX: dart.finalFieldType(core.double),
    trRadiusY: dart.finalFieldType(core.double),
    brRadiusX: dart.finalFieldType(core.double),
    brRadiusY: dart.finalFieldType(core.double),
    blRadiusX: dart.finalFieldType(core.double),
    blRadiusY: dart.finalFieldType(core.double)
  }));
  dart.defineExtensionMethods(ui.RRect, ['_equals', 'toString']);
  dart.defineExtensionAccessors(ui.RRect, ['hashCode']);
  dart.defineLazy(ui.RRect, {
    /*ui.RRect.zero*/get zero() {
      return dart.const(new ui.RRect._raw());
    }
  });
  const _value$ = dart.privateName(ui, "_value");
  ui.RSTransform = class RSTransform extends core.Object {
    static fromComponents(opts) {
      let rotation = opts && 'rotation' in opts ? opts.rotation : null;
      let scale = opts && 'scale' in opts ? opts.scale : null;
      let anchorX = opts && 'anchorX' in opts ? opts.anchorX : null;
      let anchorY = opts && 'anchorY' in opts ? opts.anchorY : null;
      let translateX = opts && 'translateX' in opts ? opts.translateX : null;
      let translateY = opts && 'translateY' in opts ? opts.translateY : null;
      let scos = math.cos(rotation) * dart.notNull(scale);
      let ssin = math.sin(rotation) * dart.notNull(scale);
      let tx = dart.notNull(translateX) + -scos * dart.notNull(anchorX) + ssin * dart.notNull(anchorY);
      let ty = dart.notNull(translateY) + -ssin * dart.notNull(anchorX) - scos * dart.notNull(anchorY);
      return new ui.RSTransform.new(scos, ssin, tx, ty);
    }
    get scos() {
      return this[_value$][$_get](0);
    }
    get ssin() {
      return this[_value$][$_get](1);
    }
    get tx() {
      return this[_value$][$_get](2);
    }
    get ty() {
      return this[_value$][$_get](3);
    }
  };
  (ui.RSTransform.new = function(scos, ssin, tx, ty) {
    let t4;
    this[_value$] = _native_typed_data.NativeFloat32List.new(4);
    t4 = this[_value$];
    t4[$_set](0, scos);
    t4[$_set](1, ssin);
    t4[$_set](2, tx);
    t4[$_set](3, ty);
    t4;
  }).prototype = ui.RSTransform.prototype;
  dart.addTypeTests(ui.RSTransform);
  dart.setGetterSignature(ui.RSTransform, () => ({
    __proto__: dart.getGetters(ui.RSTransform.__proto__),
    scos: core.double,
    ssin: core.double,
    tx: core.double,
    ty: core.double
  }));
  dart.setFieldSignature(ui.RSTransform, () => ({
    __proto__: dart.getFields(ui.RSTransform.__proto__),
    [_value$]: dart.finalFieldType(typed_data.Float32List)
  }));
  ui.Point = class Point extends core.Object {
    get x() {
      return this[x$4];
    }
    set x(value) {
      super.x = value;
    }
    get y() {
      return this[y$4];
    }
    set y(value) {
      super.y = value;
    }
    _negate() {
      return new ui.Point.new(-dart.notNull(this.x), -dart.notNull(this.y));
    }
    ['-'](other) {
      return new ui.Offset.new(dart.notNull(this.x) - dart.notNull(other.x), dart.notNull(this.y) - dart.notNull(other.y));
    }
    ['+'](other) {
      return new ui.Point.new(dart.notNull(this.x) + dart.notNull(other.dx), dart.notNull(this.y) + dart.notNull(other.dy));
    }
    ['&'](other) {
      return new ui.Rect.fromLTWH(this.x, this.y, other.width, other.height);
    }
    ['*'](operand) {
      return new ui.Point.new(dart.notNull(this.x) * dart.notNull(operand), dart.notNull(this.y) * dart.notNull(operand));
    }
    ['/'](operand) {
      return new ui.Point.new(dart.notNull(this.x) / dart.notNull(operand), dart.notNull(this.y) / dart.notNull(operand));
    }
    ['~/'](operand) {
      return new ui.Point.new((dart.notNull(this.x) / dart.notNull(operand))[$truncate]()[$toDouble](), (dart.notNull(this.y) / dart.notNull(operand))[$truncate]()[$toDouble]());
    }
    ['%'](operand) {
      return new ui.Point.new(this.x[$modulo](operand), this.y[$modulo](operand));
    }
    toOffset() {
      return new ui.Offset.new(this.x, this.y);
    }
    static lerp(a, b, t) {
      if (a == null && b == null) return null;
      if (a == null) return b['*'](t);
      if (b == null) return a['*'](1.0 - dart.notNull(t));
      return new ui.Point.new(ui.lerpDouble(a.x, b.x, t), ui.lerpDouble(a.y, b.y, t));
    }
    _equals(other) {
      if (other == null) return false;
      if (!ui.Point.is(other)) return false;
      let typedOther = ui.Point._check(other);
      return this.x == typedOther.x && this.y == typedOther.y;
    }
    get hashCode() {
      return ui.hashValues(this.x, this.y);
    }
    toString() {
      let t4, t4$;
      return "Point(" + dart.str((t4 = this.x, t4 == null ? null : t4[$toStringAsFixed](1))) + ", " + dart.str((t4$ = this.y, t4$ == null ? null : t4$[$toStringAsFixed](1))) + ")";
    }
  };
  (ui.Point.new = function(x, y) {
    this[x$4] = x;
    this[y$4] = y;
    ;
  }).prototype = ui.Point.prototype;
  dart.addTypeTests(ui.Point);
  const x$4 = Symbol("Point.x");
  const y$4 = Symbol("Point.y");
  dart.setMethodSignature(ui.Point, () => ({
    __proto__: dart.getMethods(ui.Point.__proto__),
    _negate: dart.fnType(ui.Point, []),
    '-': dart.fnType(ui.Offset, [ui.Point]),
    '+': dart.fnType(ui.Point, [ui.Offset]),
    '&': dart.fnType(ui.Rect, [ui.Size]),
    '*': dart.fnType(ui.Point, [core.double]),
    '/': dart.fnType(ui.Point, [core.double]),
    '~/': dart.fnType(ui.Point, [core.double]),
    '%': dart.fnType(ui.Point, [core.double]),
    toOffset: dart.fnType(ui.Offset, [])
  }));
  dart.setFieldSignature(ui.Point, () => ({
    __proto__: dart.getFields(ui.Point.__proto__),
    x: dart.finalFieldType(core.double),
    y: dart.finalFieldType(core.double)
  }));
  dart.defineExtensionMethods(ui.Point, ['_equals', 'toString']);
  dart.defineExtensionAccessors(ui.Point, ['hashCode']);
  dart.defineLazy(ui.Point, {
    /*ui.Point.origin*/get origin() {
      return dart.const(new ui.Point.new(0.0, 0.0));
    }
  });
  ui._HashEnd = class _HashEnd extends core.Object {};
  (ui._HashEnd.new = function() {
    ;
  }).prototype = ui._HashEnd.prototype;
  dart.addTypeTests(ui._HashEnd);
  ui.Color = class Color extends core.Object {
    get value() {
      return this[_value$];
    }
    get alpha() {
      return (4278190080 & dart.notNull(this[_value$])) >>> 24;
    }
    get opacity() {
      return dart.notNull(this.alpha) / 255;
    }
    get red() {
      return (16711680 & dart.notNull(this[_value$])) >> 16;
    }
    get green() {
      return (65280 & dart.notNull(this[_value$])) >> 8;
    }
    get blue() {
      return (255 & dart.notNull(this[_value$])) >> 0;
    }
    withAlpha(a) {
      return new ui.Color.fromARGB(a, this.red, this.green, this.blue);
    }
    withOpacity(opacity) {
      if (!(dart.notNull(opacity) >= 0.0 && dart.notNull(opacity) <= 1.0)) dart.assertFailed();
      return this.withAlpha((255.0 * dart.notNull(opacity))[$round]());
    }
    withRed(r) {
      return new ui.Color.fromARGB(this.alpha, r, this.green, this.blue);
    }
    withGreen(g) {
      return new ui.Color.fromARGB(this.alpha, this.red, g, this.blue);
    }
    withBlue(b) {
      return new ui.Color.fromARGB(this.alpha, this.red, this.green, b);
    }
    static _linearizeColorComponent(component) {
      if (dart.notNull(component) <= 0.03928) return dart.notNull(component) / 12.92;
      return math.pow((dart.notNull(component) + 0.055) / 1.055, 2.4);
    }
    computeLuminance() {
      let R = ui.Color._linearizeColorComponent(dart.notNull(this.red) / 255);
      let G = ui.Color._linearizeColorComponent(dart.notNull(this.green) / 255);
      let B = ui.Color._linearizeColorComponent(dart.notNull(this.blue) / 255);
      return 0.2126 * dart.notNull(R) + 0.7152 * dart.notNull(G) + 0.0722 * dart.notNull(B);
    }
    static lerp(a, b, t) {
      if (!(t != null)) dart.assertFailed();
      if (a == null && b == null) return null;
      if (a == null) return ui._scaleAlpha(b, t);
      if (b == null) return ui._scaleAlpha(a, 1.0 - dart.notNull(t));
      return new ui.Color.fromARGB(dart.asInt(ui.lerpDouble(a.alpha, b.alpha, t)[$toInt]()[$clamp](0, 255)), dart.asInt(ui.lerpDouble(a.red, b.red, t)[$toInt]()[$clamp](0, 255)), dart.asInt(ui.lerpDouble(a.green, b.green, t)[$toInt]()[$clamp](0, 255)), dart.asInt(ui.lerpDouble(a.blue, b.blue, t)[$toInt]()[$clamp](0, 255)));
    }
    static alphaBlend(foreground, background) {
      let alpha = foreground.alpha;
      if (alpha === 0) {
        return background;
      }
      let invAlpha = 255 - dart.notNull(alpha);
      let backAlpha = background.alpha;
      if (backAlpha === 255) {
        return new ui.Color.fromARGB(255, ((dart.notNull(alpha) * dart.notNull(foreground.red) + invAlpha * dart.notNull(background.red)) / 255)[$truncate](), ((dart.notNull(alpha) * dart.notNull(foreground.green) + invAlpha * dart.notNull(background.green)) / 255)[$truncate](), ((dart.notNull(alpha) * dart.notNull(foreground.blue) + invAlpha * dart.notNull(background.blue)) / 255)[$truncate]());
      } else {
        backAlpha = (dart.notNull(backAlpha) * invAlpha / 255)[$truncate]();
        let outAlpha = dart.notNull(alpha) + dart.notNull(backAlpha);
        if (!(outAlpha !== 0)) dart.assertFailed();
        return new ui.Color.fromARGB(outAlpha, ((dart.notNull(foreground.red) * dart.notNull(alpha) + dart.notNull(background.red) * dart.notNull(backAlpha)) / outAlpha)[$truncate](), ((dart.notNull(foreground.green) * dart.notNull(alpha) + dart.notNull(background.green) * dart.notNull(backAlpha)) / outAlpha)[$truncate](), ((dart.notNull(foreground.blue) * dart.notNull(alpha) + dart.notNull(background.blue) * dart.notNull(backAlpha)) / outAlpha)[$truncate]());
      }
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) return true;
      if (!dart.equals(dart.runtimeType(other), this[$runtimeType])) return false;
      let typedOther = ui.Color._check(other);
      return this.value == typedOther.value;
    }
    get hashCode() {
      return dart.hashCode(this[_value$]);
    }
    toCssString() {
      if ((4278190080 & dart.notNull(this[_value$])) >>> 0 === 4278190080) {
        return this.toCssStringRgbOnly();
      } else {
        let alpha = (this[_value$][$rightShift](24) & 255) / 255.0;
        let sb = new core.StringBuffer.new();
        sb.write("rgba(");
        sb.write((dart.notNull(this[_value$]) >> 16 & 255)[$toString]());
        sb.write(",");
        sb.write((dart.notNull(this[_value$]) >> 8 & 255)[$toString]());
        sb.write(",");
        sb.write((dart.notNull(this[_value$]) & 255)[$toString]());
        sb.write(",");
        sb.write(alpha[$toString]());
        sb.write(")");
        return sb.toString();
      }
    }
    toCssStringRgbOnly() {
      let paddedValue = "00000" + this[_value$][$toRadixString](16);
      return "#" + paddedValue[$substring](paddedValue.length - 6);
    }
    toString() {
      if (dart.test(src__engine.assertionsEnabled)) {
        return "Color(0x" + this.value[$toRadixString](16)[$padLeft](8, "0") + ")";
      } else {
        return super[$toString]();
      }
    }
  };
  (ui.Color.new = function(value) {
    this[_value$] = (dart.notNull(value) & 4294967295) >>> 0;
    ;
  }).prototype = ui.Color.prototype;
  (ui.Color.fromARGB = function(a, r, g, b) {
    this[_value$] = (((dart.notNull(a) & 255) << 24 | (dart.notNull(r) & 255) << 16 | (dart.notNull(g) & 255) << 8 | (dart.notNull(b) & 255) << 0) & 4294967295) >>> 0;
    ;
  }).prototype = ui.Color.prototype;
  (ui.Color.fromRGBO = function(r, g, b, opacity) {
    this[_value$] = ((((dart.notNull(opacity) * 255 / 1)[$truncate]() & 255) << 24 | (dart.notNull(r) & 255) << 16 | (dart.notNull(g) & 255) << 8 | (dart.notNull(b) & 255) << 0) & 4294967295) >>> 0;
    ;
  }).prototype = ui.Color.prototype;
  dart.addTypeTests(ui.Color);
  dart.setMethodSignature(ui.Color, () => ({
    __proto__: dart.getMethods(ui.Color.__proto__),
    withAlpha: dart.fnType(ui.Color, [core.int]),
    withOpacity: dart.fnType(ui.Color, [core.double]),
    withRed: dart.fnType(ui.Color, [core.int]),
    withGreen: dart.fnType(ui.Color, [core.int]),
    withBlue: dart.fnType(ui.Color, [core.int]),
    computeLuminance: dart.fnType(core.double, []),
    toCssString: dart.fnType(core.String, []),
    toCssStringRgbOnly: dart.fnType(core.String, [])
  }));
  dart.setGetterSignature(ui.Color, () => ({
    __proto__: dart.getGetters(ui.Color.__proto__),
    value: core.int,
    alpha: core.int,
    opacity: core.double,
    red: core.int,
    green: core.int,
    blue: core.int
  }));
  dart.setFieldSignature(ui.Color, () => ({
    __proto__: dart.getFields(ui.Color.__proto__),
    [_value$]: dart.finalFieldType(core.int)
  }));
  dart.defineExtensionMethods(ui.Color, ['_equals', 'toString']);
  dart.defineExtensionAccessors(ui.Color, ['hashCode']);
  ui.StrokeCap = class StrokeCap extends core.Object {
    toString() {
      return this[_name$0];
    }
  };
  (ui.StrokeCap.new = function(index, _name) {
    this.index = index;
    this[_name$0] = _name;
    ;
  }).prototype = ui.StrokeCap.prototype;
  dart.addTypeTests(ui.StrokeCap);
  dart.setFieldSignature(ui.StrokeCap, () => ({
    __proto__: dart.getFields(ui.StrokeCap.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$0]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(ui.StrokeCap, ['toString']);
  ui.StrokeCap.butt = dart.const(new ui.StrokeCap.new(0, "StrokeCap.butt"));
  ui.StrokeCap.round = dart.const(new ui.StrokeCap.new(1, "StrokeCap.round"));
  ui.StrokeCap.square = dart.const(new ui.StrokeCap.new(2, "StrokeCap.square"));
  ui.StrokeCap.values = dart.constList([ui.StrokeCap.butt, ui.StrokeCap.round, ui.StrokeCap.square], ui.StrokeCap);
  ui.StrokeJoin = class StrokeJoin extends core.Object {
    toString() {
      return this[_name$0];
    }
  };
  (ui.StrokeJoin.new = function(index, _name) {
    this.index = index;
    this[_name$0] = _name;
    ;
  }).prototype = ui.StrokeJoin.prototype;
  dart.addTypeTests(ui.StrokeJoin);
  dart.setFieldSignature(ui.StrokeJoin, () => ({
    __proto__: dart.getFields(ui.StrokeJoin.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$0]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(ui.StrokeJoin, ['toString']);
  ui.StrokeJoin.miter = dart.const(new ui.StrokeJoin.new(0, "StrokeJoin.miter"));
  ui.StrokeJoin.round = dart.const(new ui.StrokeJoin.new(1, "StrokeJoin.round"));
  ui.StrokeJoin.bevel = dart.const(new ui.StrokeJoin.new(2, "StrokeJoin.bevel"));
  ui.StrokeJoin.values = dart.constList([ui.StrokeJoin.miter, ui.StrokeJoin.round, ui.StrokeJoin.bevel], ui.StrokeJoin);
  ui.PaintingStyle = class PaintingStyle extends core.Object {
    toString() {
      return this[_name$0];
    }
  };
  (ui.PaintingStyle.new = function(index, _name) {
    this.index = index;
    this[_name$0] = _name;
    ;
  }).prototype = ui.PaintingStyle.prototype;
  dart.addTypeTests(ui.PaintingStyle);
  dart.setFieldSignature(ui.PaintingStyle, () => ({
    __proto__: dart.getFields(ui.PaintingStyle.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$0]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(ui.PaintingStyle, ['toString']);
  ui.PaintingStyle.fill = dart.const(new ui.PaintingStyle.new(0, "PaintingStyle.fill"));
  ui.PaintingStyle.stroke = dart.const(new ui.PaintingStyle.new(1, "PaintingStyle.stroke"));
  ui.PaintingStyle.values = dart.constList([ui.PaintingStyle.fill, ui.PaintingStyle.stroke], ui.PaintingStyle);
  ui.BlendMode = class BlendMode extends core.Object {
    toString() {
      return this[_name$0];
    }
  };
  (ui.BlendMode.new = function(index, _name) {
    this.index = index;
    this[_name$0] = _name;
    ;
  }).prototype = ui.BlendMode.prototype;
  dart.addTypeTests(ui.BlendMode);
  dart.setFieldSignature(ui.BlendMode, () => ({
    __proto__: dart.getFields(ui.BlendMode.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$0]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(ui.BlendMode, ['toString']);
  ui.BlendMode.clear = dart.const(new ui.BlendMode.new(0, "BlendMode.clear"));
  ui.BlendMode.src = dart.const(new ui.BlendMode.new(1, "BlendMode.src"));
  ui.BlendMode.dst = dart.const(new ui.BlendMode.new(2, "BlendMode.dst"));
  ui.BlendMode.srcOver = dart.const(new ui.BlendMode.new(3, "BlendMode.srcOver"));
  ui.BlendMode.dstOver = dart.const(new ui.BlendMode.new(4, "BlendMode.dstOver"));
  ui.BlendMode.srcIn = dart.const(new ui.BlendMode.new(5, "BlendMode.srcIn"));
  ui.BlendMode.dstIn = dart.const(new ui.BlendMode.new(6, "BlendMode.dstIn"));
  ui.BlendMode.srcOut = dart.const(new ui.BlendMode.new(7, "BlendMode.srcOut"));
  ui.BlendMode.dstOut = dart.const(new ui.BlendMode.new(8, "BlendMode.dstOut"));
  ui.BlendMode.srcATop = dart.const(new ui.BlendMode.new(9, "BlendMode.srcATop"));
  ui.BlendMode.dstATop = dart.const(new ui.BlendMode.new(10, "BlendMode.dstATop"));
  ui.BlendMode.xor = dart.const(new ui.BlendMode.new(11, "BlendMode.xor"));
  ui.BlendMode.plus = dart.const(new ui.BlendMode.new(12, "BlendMode.plus"));
  ui.BlendMode.modulate = dart.const(new ui.BlendMode.new(13, "BlendMode.modulate"));
  ui.BlendMode.screen = dart.const(new ui.BlendMode.new(14, "BlendMode.screen"));
  ui.BlendMode.overlay = dart.const(new ui.BlendMode.new(15, "BlendMode.overlay"));
  ui.BlendMode.darken = dart.const(new ui.BlendMode.new(16, "BlendMode.darken"));
  ui.BlendMode.lighten = dart.const(new ui.BlendMode.new(17, "BlendMode.lighten"));
  ui.BlendMode.colorDodge = dart.const(new ui.BlendMode.new(18, "BlendMode.colorDodge"));
  ui.BlendMode.colorBurn = dart.const(new ui.BlendMode.new(19, "BlendMode.colorBurn"));
  ui.BlendMode.hardLight = dart.const(new ui.BlendMode.new(20, "BlendMode.hardLight"));
  ui.BlendMode.softLight = dart.const(new ui.BlendMode.new(21, "BlendMode.softLight"));
  ui.BlendMode.difference = dart.const(new ui.BlendMode.new(22, "BlendMode.difference"));
  ui.BlendMode.exclusion = dart.const(new ui.BlendMode.new(23, "BlendMode.exclusion"));
  ui.BlendMode.multiply = dart.const(new ui.BlendMode.new(24, "BlendMode.multiply"));
  ui.BlendMode.hue = dart.const(new ui.BlendMode.new(25, "BlendMode.hue"));
  ui.BlendMode.saturation = dart.const(new ui.BlendMode.new(26, "BlendMode.saturation"));
  ui.BlendMode.color = dart.const(new ui.BlendMode.new(27, "BlendMode.color"));
  ui.BlendMode.luminosity = dart.const(new ui.BlendMode.new(28, "BlendMode.luminosity"));
  ui.BlendMode.values = dart.constList([ui.BlendMode.clear, ui.BlendMode.src, ui.BlendMode.dst, ui.BlendMode.srcOver, ui.BlendMode.dstOver, ui.BlendMode.srcIn, ui.BlendMode.dstIn, ui.BlendMode.srcOut, ui.BlendMode.dstOut, ui.BlendMode.srcATop, ui.BlendMode.dstATop, ui.BlendMode.xor, ui.BlendMode.plus, ui.BlendMode.modulate, ui.BlendMode.screen, ui.BlendMode.overlay, ui.BlendMode.darken, ui.BlendMode.lighten, ui.BlendMode.colorDodge, ui.BlendMode.colorBurn, ui.BlendMode.hardLight, ui.BlendMode.softLight, ui.BlendMode.difference, ui.BlendMode.exclusion, ui.BlendMode.multiply, ui.BlendMode.hue, ui.BlendMode.saturation, ui.BlendMode.color, ui.BlendMode.luminosity], ui.BlendMode);
  ui.Clip = class Clip extends core.Object {
    toString() {
      return this[_name$0];
    }
  };
  (ui.Clip.new = function(index, _name) {
    this.index = index;
    this[_name$0] = _name;
    ;
  }).prototype = ui.Clip.prototype;
  dart.addTypeTests(ui.Clip);
  dart.setFieldSignature(ui.Clip, () => ({
    __proto__: dart.getFields(ui.Clip.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$0]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(ui.Clip, ['toString']);
  ui.Clip.none = dart.const(new ui.Clip.new(0, "Clip.none"));
  ui.Clip.hardEdge = dart.const(new ui.Clip.new(1, "Clip.hardEdge"));
  ui.Clip.antiAlias = dart.const(new ui.Clip.new(2, "Clip.antiAlias"));
  ui.Clip.antiAliasWithSaveLayer = dart.const(new ui.Clip.new(3, "Clip.antiAliasWithSaveLayer"));
  ui.Clip.values = dart.constList([ui.Clip.none, ui.Clip.hardEdge, ui.Clip.antiAlias, ui.Clip.antiAliasWithSaveLayer], ui.Clip);
  ui.PaintData = class PaintData extends core.Object {
    get blendMode() {
      return this[blendMode];
    }
    set blendMode(value) {
      this[blendMode] = value;
    }
    get style() {
      return this[style];
    }
    set style(value) {
      this[style] = value;
    }
    get strokeWidth() {
      return this[strokeWidth];
    }
    set strokeWidth(value) {
      this[strokeWidth] = value;
    }
    get strokeCap() {
      return this[strokeCap];
    }
    set strokeCap(value) {
      this[strokeCap] = value;
    }
    get strokeJoin() {
      return this[strokeJoin];
    }
    set strokeJoin(value) {
      this[strokeJoin] = value;
    }
    get isAntiAlias() {
      return this[isAntiAlias];
    }
    set isAntiAlias(value) {
      this[isAntiAlias] = value;
    }
    get color() {
      return this[color];
    }
    set color(value) {
      this[color] = value;
    }
    get shader() {
      return this[shader];
    }
    set shader(value) {
      this[shader] = value;
    }
    get maskFilter() {
      return this[maskFilter];
    }
    set maskFilter(value) {
      this[maskFilter] = value;
    }
    get filterQuality() {
      return this[filterQuality];
    }
    set filterQuality(value) {
      this[filterQuality] = value;
    }
    get colorFilter() {
      return this[colorFilter];
    }
    set colorFilter(value) {
      this[colorFilter] = value;
    }
    clone() {
      let t4;
      t4 = new ui.PaintData.new();
      t4.blendMode = this.blendMode;
      t4.filterQuality = this.filterQuality;
      t4.maskFilter = this.maskFilter;
      t4.shader = this.shader;
      t4.isAntiAlias = this.isAntiAlias;
      t4.color = this.color;
      t4.colorFilter = this.colorFilter;
      t4.strokeWidth = this.strokeWidth;
      t4.style = this.style;
      t4.strokeJoin = this.strokeJoin;
      t4.strokeCap = this.strokeCap;
      return t4;
    }
  };
  (ui.PaintData.new = function() {
    this[blendMode] = null;
    this[style] = null;
    this[strokeWidth] = null;
    this[strokeCap] = null;
    this[strokeJoin] = null;
    this[isAntiAlias] = true;
    this[color] = null;
    this[shader] = null;
    this[maskFilter] = null;
    this[filterQuality] = null;
    this[colorFilter] = null;
    ;
  }).prototype = ui.PaintData.prototype;
  dart.addTypeTests(ui.PaintData);
  const blendMode = Symbol("PaintData.blendMode");
  const style = Symbol("PaintData.style");
  const strokeWidth = Symbol("PaintData.strokeWidth");
  const strokeCap = Symbol("PaintData.strokeCap");
  const strokeJoin = Symbol("PaintData.strokeJoin");
  const isAntiAlias = Symbol("PaintData.isAntiAlias");
  const color = Symbol("PaintData.color");
  const shader = Symbol("PaintData.shader");
  const maskFilter = Symbol("PaintData.maskFilter");
  const filterQuality = Symbol("PaintData.filterQuality");
  const colorFilter = Symbol("PaintData.colorFilter");
  dart.setMethodSignature(ui.PaintData, () => ({
    __proto__: dart.getMethods(ui.PaintData.__proto__),
    clone: dart.fnType(ui.PaintData, [])
  }));
  dart.setFieldSignature(ui.PaintData, () => ({
    __proto__: dart.getFields(ui.PaintData.__proto__),
    blendMode: dart.fieldType(ui.BlendMode),
    style: dart.fieldType(ui.PaintingStyle),
    strokeWidth: dart.fieldType(core.double),
    strokeCap: dart.fieldType(ui.StrokeCap),
    strokeJoin: dart.fieldType(ui.StrokeJoin),
    isAntiAlias: dart.fieldType(core.bool),
    color: dart.fieldType(ui.Color),
    shader: dart.fieldType(ui.Shader),
    maskFilter: dart.fieldType(ui.MaskFilter),
    filterQuality: dart.fieldType(ui.FilterQuality),
    colorFilter: dart.fieldType(ui.ColorFilter)
  }));
  const _paintData = dart.privateName(ui, "_paintData");
  const _blendMode = dart.privateName(ui, "_blendMode");
  const _color = dart.privateName(ui, "_color");
  const _frozen = dart.privateName(ui, "_frozen");
  ui.Paint = class Paint extends core.Object {
    get blendMode() {
      let t4;
      t4 = this[_paintData].blendMode;
      return t4 == null ? ui.BlendMode.srcOver : t4;
    }
    set blendMode(value) {
      if (dart.test(this[_frozen])) {
        this[_paintData] = this[_paintData].clone();
        this[_frozen] = false;
      }
      this[_paintData].blendMode = value;
    }
    get style() {
      let t4;
      t4 = this[_paintData].style;
      return t4 == null ? ui.PaintingStyle.fill : t4;
    }
    set style(value) {
      if (dart.test(this[_frozen])) {
        this[_paintData] = this[_paintData].clone();
        this[_frozen] = false;
      }
      this[_paintData].style = value;
    }
    get strokeWidth() {
      let t4;
      t4 = this[_paintData].strokeWidth;
      return t4 == null ? 0.0 : t4;
    }
    set strokeWidth(value) {
      if (dart.test(this[_frozen])) {
        this[_paintData] = this[_paintData].clone();
        this[_frozen] = false;
      }
      this[_paintData].strokeWidth = value;
    }
    get strokeCap() {
      return this[_paintData].strokeCap;
    }
    set strokeCap(value) {
      if (dart.test(this[_frozen])) {
        this[_paintData] = this[_paintData].clone();
        this[_frozen] = false;
      }
      this[_paintData].strokeCap = value;
    }
    get strokeJoin() {
      return this[_paintData].strokeJoin;
    }
    set strokeJoin(value) {
      if (dart.test(this[_frozen])) {
        this[_paintData] = this[_paintData].clone();
        this[_frozen] = false;
      }
      this[_paintData].strokeJoin = value;
    }
    get isAntiAlias() {
      return this[_paintData].isAntiAlias;
    }
    set isAntiAlias(value) {
      if (dart.test(this[_frozen])) {
        this[_paintData] = this[_paintData].clone();
        this[_frozen] = false;
      }
      this[_paintData].isAntiAlias = value;
    }
    get color() {
      return this[_paintData].color;
    }
    set color(value) {
      if (dart.test(this[_frozen])) {
        this[_paintData] = this[_paintData].clone();
        this[_frozen] = false;
      }
      this[_paintData].color = value;
    }
    get invertColors() {
      return false;
    }
    set invertColors(_) {
      if (dart.test(src__engine.assertionsEnabled)) {
        dart.throw(new core.UnsupportedError.new("Paint.invertColors is not supported."));
      }
    }
    get shader() {
      return this[_paintData].shader;
    }
    set shader(value) {
      if (dart.test(this[_frozen])) {
        this[_paintData] = this[_paintData].clone();
        this[_frozen] = false;
      }
      this[_paintData].shader = value;
    }
    get maskFilter() {
      return this[_paintData].maskFilter;
    }
    set maskFilter(value) {
      if (dart.test(this[_frozen])) {
        this[_paintData] = this[_paintData].clone();
        this[_frozen] = false;
      }
      this[_paintData].maskFilter = value;
    }
    get filterQuality() {
      return this[_paintData].filterQuality;
    }
    set filterQuality(value) {
      if (dart.test(this[_frozen])) {
        this[_paintData] = this[_paintData].clone();
        this[_frozen] = false;
      }
      this[_paintData].filterQuality = value;
    }
    get colorFilter() {
      return this[_paintData].colorFilter;
    }
    set colorFilter(value) {
      if (dart.test(this[_frozen])) {
        this[_paintData] = this[_paintData].clone();
        this[_frozen] = false;
      }
      this[_paintData].colorFilter = value;
    }
    get webOnlyPaintData() {
      this[_frozen] = true;
      return this[_paintData];
    }
    toString() {
      if (dart.test(src__engine.assertionsEnabled)) {
        let result = new core.StringBuffer.new();
        let semicolon = "";
        result.write("Paint(");
        if (dart.equals(this.style, ui.PaintingStyle.stroke)) {
          result.write(dart.str(this.style));
          if (this.strokeWidth != null && this.strokeWidth !== 0.0)
            result.write(" " + dart.str(this.strokeWidth));
          else
            result.write(" hairline");
          if (this.strokeCap != null && !dart.equals(this.strokeCap, ui.StrokeCap.butt)) result.write(" " + dart.str(this.strokeCap));
          semicolon = "; ";
        }
        if (!dart.equals(this.isAntiAlias, true)) {
          result.write(semicolon + "antialias off");
          semicolon = "; ";
        }
        if (!dart.equals(this.color, ui.Paint._defaultPaintColor)) {
          if (this.color != null)
            result.write(semicolon + dart.str(this.color));
          else
            result.write(semicolon + "no color");
          semicolon = "; ";
        }
        result.write(")");
        return result.toString();
      } else {
        return super[$toString]();
      }
    }
  };
  (ui.Paint.new = function() {
    this[_paintData] = new ui.PaintData.new();
    this[_blendMode] = null;
    this[_color] = ui.Paint._defaultPaintColor;
    this[_frozen] = false;
    ;
  }).prototype = ui.Paint.prototype;
  dart.addTypeTests(ui.Paint);
  dart.setGetterSignature(ui.Paint, () => ({
    __proto__: dart.getGetters(ui.Paint.__proto__),
    blendMode: ui.BlendMode,
    style: ui.PaintingStyle,
    strokeWidth: core.double,
    strokeCap: ui.StrokeCap,
    strokeJoin: ui.StrokeJoin,
    isAntiAlias: core.bool,
    color: ui.Color,
    invertColors: core.bool,
    shader: ui.Shader,
    maskFilter: ui.MaskFilter,
    filterQuality: ui.FilterQuality,
    colorFilter: ui.ColorFilter,
    webOnlyPaintData: ui.PaintData
  }));
  dart.setSetterSignature(ui.Paint, () => ({
    __proto__: dart.getSetters(ui.Paint.__proto__),
    blendMode: ui.BlendMode,
    style: ui.PaintingStyle,
    strokeWidth: core.double,
    strokeCap: ui.StrokeCap,
    strokeJoin: ui.StrokeJoin,
    isAntiAlias: core.bool,
    color: ui.Color,
    invertColors: core.bool,
    shader: ui.Shader,
    maskFilter: ui.MaskFilter,
    filterQuality: ui.FilterQuality,
    colorFilter: ui.ColorFilter
  }));
  dart.setFieldSignature(ui.Paint, () => ({
    __proto__: dart.getFields(ui.Paint.__proto__),
    [_paintData]: dart.fieldType(ui.PaintData),
    [_blendMode]: dart.fieldType(ui.BlendMode),
    [_color]: dart.fieldType(ui.Color),
    [_frozen]: dart.fieldType(core.bool)
  }));
  dart.defineExtensionMethods(ui.Paint, ['toString']);
  dart.defineLazy(ui.Paint, {
    /*ui.Paint._defaultPaintColor*/get _defaultPaintColor() {
      return dart.const(new ui.Color.new(4278190080));
    }
  });
  ui.Shader = class Shader extends core.Object {
    webOnlySerializeToCssPaint() {
      dart.throw(new core.UnsupportedError.new("CSS paint not implemented for this shader type"));
    }
  };
  (ui.Shader.__ = function() {
    ;
  }).prototype = ui.Shader.prototype;
  dart.addTypeTests(ui.Shader);
  dart.setMethodSignature(ui.Shader, () => ({
    __proto__: dart.getMethods(ui.Shader.__proto__),
    webOnlySerializeToCssPaint: dart.fnType(core.List, [])
  }));
  ui.Gradient = class Gradient extends ui.Shader {
    static linear(from, to, colors, colorStops, tileMode) {
      if (colorStops === void 0) colorStops = null;
      if (tileMode === void 0) tileMode = ui.TileMode.clamp;
      return new ui._GradientLinear.new(from, to, colors, colorStops, tileMode);
    }
    static radial(center, radius, colors, colorStops, tileMode, matrix4, focal, focalRadius) {
      if (colorStops === void 0) colorStops = null;
      if (tileMode === void 0) tileMode = ui.TileMode.clamp;
      if (matrix4 === void 0) matrix4 = null;
      if (focal === void 0) focal = null;
      if (focalRadius === void 0) focalRadius = 0.0;
      focalRadius == null ? focalRadius = 0.0 : null;
      ui._validateColorStops(colors, colorStops);
      if (focal == null || dart.equals(focal, center) && focalRadius === 0.0) {
        return new ui._GradientRadial.new(center, radius, colors, colorStops, tileMode, matrix4);
      } else {
        if (!(!dart.equals(center, ui.Offset.zero) || !dart.equals(focal, ui.Offset.zero))) dart.assertFailed();
        return new ui._GradientConical.new(focal, focalRadius, center, radius, colors, colorStops, tileMode, matrix4);
      }
    }
    static sweep(center, colors, colorStops, tileMode, startAngle, endAngle, matrix4) {
      if (colorStops === void 0) colorStops = null;
      if (tileMode === void 0) tileMode = ui.TileMode.clamp;
      if (startAngle === void 0) startAngle = 0.0;
      if (endAngle === void 0) endAngle = dart.notNull(math.pi) * 2;
      if (matrix4 === void 0) matrix4 = null;
      return new ui._GradientSweep.new(center, colors, colorStops, tileMode, startAngle, endAngle, matrix4);
    }
  };
  (ui.Gradient.__ = function() {
    ui.Gradient.__proto__.__.call(this);
    ;
  }).prototype = ui.Gradient.prototype;
  dart.addTypeTests(ui.Gradient);
  ui._GradientSweep = class _GradientSweep extends ui.Gradient {
    createPaintStyle(_) {
      dart.throw(new core.UnimplementedError.new());
    }
  };
  (ui._GradientSweep.new = function(center, colors, colorStops, tileMode, startAngle, endAngle, matrix4) {
    this.center = center;
    this.colors = colors;
    this.colorStops = colorStops;
    this.tileMode = tileMode;
    this.startAngle = startAngle;
    this.endAngle = endAngle;
    this.matrix4 = matrix4;
    if (!dart.test(ui._offsetIsValid(center))) dart.assertFailed();
    if (!(colors != null)) dart.assertFailed();
    if (!(tileMode != null)) dart.assertFailed();
    if (!(startAngle != null)) dart.assertFailed();
    if (!(endAngle != null)) dart.assertFailed();
    if (!(dart.notNull(startAngle) < dart.notNull(endAngle))) dart.assertFailed();
    if (!(matrix4 == null || dart.test(ui._matrix4IsValid(matrix4)))) dart.assertFailed();
    ui._GradientSweep.__proto__.__.call(this);
    ui._validateColorStops(this.colors, this.colorStops);
  }).prototype = ui._GradientSweep.prototype;
  dart.addTypeTests(ui._GradientSweep);
  dart.setMethodSignature(ui._GradientSweep, () => ({
    __proto__: dart.getMethods(ui._GradientSweep.__proto__),
    createPaintStyle: dart.fnType(core.Object, [html.CanvasRenderingContext2D])
  }));
  dart.setFieldSignature(ui._GradientSweep, () => ({
    __proto__: dart.getFields(ui._GradientSweep.__proto__),
    center: dart.finalFieldType(ui.Offset),
    colors: dart.finalFieldType(core.List$(ui.Color)),
    colorStops: dart.finalFieldType(core.List$(core.double)),
    tileMode: dart.finalFieldType(ui.TileMode),
    startAngle: dart.finalFieldType(core.double),
    endAngle: dart.finalFieldType(core.double),
    matrix4: dart.finalFieldType(typed_data.Float64List)
  }));
  ui._GradientLinear = class _GradientLinear extends ui.Gradient {
    createPaintStyle(ctx) {
      let gradient = ctx.createLinearGradient(this.from.dx, this.from.dy, this.to.dx, this.to.dy);
      if (this.colorStops == null) {
        if (!(this.colors[$length] === 2)) dart.assertFailed();
        gradient.addColorStop(0, this.colors[$_get](0).toCssString());
        gradient.addColorStop(1, this.colors[$_get](1).toCssString());
        return gradient;
      }
      for (let i = 0; i < dart.notNull(this.colors[$length]); i = i + 1) {
        gradient.addColorStop(this.colorStops[$_get](i), this.colors[$_get](i).toCssString());
      }
      return gradient;
    }
    webOnlySerializeToCssPaint() {
      let serializedColors = [];
      for (let i = 0; i < dart.notNull(this.colors[$length]); i = i + 1) {
        serializedColors[$add](this.colors[$_get](i).toCssString());
      }
      return [1, this.from.dx, this.from.dy, this.to.dx, this.to.dy, serializedColors, this.colorStops, this.tileMode.index];
    }
  };
  (ui._GradientLinear.new = function(from, to, colors, colorStops, tileMode) {
    this.from = from;
    this.to = to;
    this.colors = colors;
    this.colorStops = colorStops;
    this.tileMode = tileMode;
    if (!dart.test(ui._offsetIsValid(from))) dart.assertFailed();
    if (!dart.test(ui._offsetIsValid(to))) dart.assertFailed();
    if (!(colors != null)) dart.assertFailed();
    if (!(tileMode != null)) dart.assertFailed();
    ui._GradientLinear.__proto__.__.call(this);
    ui._validateColorStops(this.colors, this.colorStops);
  }).prototype = ui._GradientLinear.prototype;
  dart.addTypeTests(ui._GradientLinear);
  dart.setMethodSignature(ui._GradientLinear, () => ({
    __proto__: dart.getMethods(ui._GradientLinear.__proto__),
    createPaintStyle: dart.fnType(html.CanvasGradient, [html.CanvasRenderingContext2D])
  }));
  dart.setFieldSignature(ui._GradientLinear, () => ({
    __proto__: dart.getFields(ui._GradientLinear.__proto__),
    from: dart.finalFieldType(ui.Offset),
    to: dart.finalFieldType(ui.Offset),
    colors: dart.finalFieldType(core.List$(ui.Color)),
    colorStops: dart.finalFieldType(core.List$(core.double)),
    tileMode: dart.finalFieldType(ui.TileMode)
  }));
  ui._GradientRadial = class _GradientRadial extends ui.Gradient {
    createPaintStyle(_) {
      dart.throw(new core.UnimplementedError.new());
    }
  };
  (ui._GradientRadial.new = function(center, radius, colors, colorStops, tileMode, matrix4) {
    this.center = center;
    this.radius = radius;
    this.colors = colors;
    this.colorStops = colorStops;
    this.tileMode = tileMode;
    this.matrix4 = matrix4;
    ui._GradientRadial.__proto__.__.call(this);
    ;
  }).prototype = ui._GradientRadial.prototype;
  dart.addTypeTests(ui._GradientRadial);
  dart.setMethodSignature(ui._GradientRadial, () => ({
    __proto__: dart.getMethods(ui._GradientRadial.__proto__),
    createPaintStyle: dart.fnType(core.Object, [html.CanvasRenderingContext2D])
  }));
  dart.setFieldSignature(ui._GradientRadial, () => ({
    __proto__: dart.getFields(ui._GradientRadial.__proto__),
    center: dart.finalFieldType(ui.Offset),
    radius: dart.finalFieldType(core.double),
    colors: dart.finalFieldType(core.List$(ui.Color)),
    colorStops: dart.finalFieldType(core.List$(core.double)),
    tileMode: dart.finalFieldType(ui.TileMode),
    matrix4: dart.finalFieldType(typed_data.Float64List)
  }));
  ui._GradientConical = class _GradientConical extends ui.Gradient {
    createPaintStyle(_) {
      dart.throw(new core.UnimplementedError.new());
    }
  };
  (ui._GradientConical.new = function(focal, focalRadius, center, radius, colors, colorStops, tileMode, matrix4) {
    this.focal = focal;
    this.focalRadius = focalRadius;
    this.center = center;
    this.radius = radius;
    this.colors = colors;
    this.colorStops = colorStops;
    this.tileMode = tileMode;
    this.matrix4 = matrix4;
    ui._GradientConical.__proto__.__.call(this);
    ;
  }).prototype = ui._GradientConical.prototype;
  dart.addTypeTests(ui._GradientConical);
  dart.setMethodSignature(ui._GradientConical, () => ({
    __proto__: dart.getMethods(ui._GradientConical.__proto__),
    createPaintStyle: dart.fnType(core.Object, [html.CanvasRenderingContext2D])
  }));
  dart.setFieldSignature(ui._GradientConical, () => ({
    __proto__: dart.getFields(ui._GradientConical.__proto__),
    focal: dart.finalFieldType(ui.Offset),
    focalRadius: dart.finalFieldType(core.double),
    center: dart.finalFieldType(ui.Offset),
    radius: dart.finalFieldType(core.double),
    colors: dart.finalFieldType(core.List$(ui.Color)),
    colorStops: dart.finalFieldType(core.List$(core.double)),
    tileMode: dart.finalFieldType(ui.TileMode),
    matrix4: dart.finalFieldType(typed_data.Float64List)
  }));
  ui.Image = class Image extends core.Object {
    toString() {
      return "[" + dart.str(this.width) + "×" + dart.str(this.height) + "]";
    }
  };
  (ui.Image.new = function() {
    ;
  }).prototype = ui.Image.prototype;
  dart.addTypeTests(ui.Image);
  dart.defineExtensionMethods(ui.Image, ['toString']);
  ui.ColorFilter = class ColorFilter extends core.Object {
    _equals(other) {
      if (other == null) return false;
      if (!ui.ColorFilter.is(other)) return false;
      let typedOther = ui.ColorFilter._check(other);
      return dart.equals(this[_color], typedOther[_color]) && dart.equals(this[_blendMode], typedOther[_blendMode]);
    }
    get hashCode() {
      return ui.hashValues(this[_color], this[_blendMode]);
    }
    webOnlySerializeToCssPaint() {
      dart.throw(new core.UnsupportedError.new("ColorFilter for CSS paint not yet supported"));
    }
    toString() {
      return dart.test(src__engine.assertionsEnabled) ? "ColorFilter(" + dart.str(this[_color]) + ", " + dart.str(this[_blendMode]) + ")" : super[$toString]();
    }
  };
  (ui.ColorFilter.mode = function(color, blendMode) {
    this[_color] = color;
    this[_blendMode] = blendMode;
    ;
  }).prototype = ui.ColorFilter.prototype;
  dart.addTypeTests(ui.ColorFilter);
  dart.setMethodSignature(ui.ColorFilter, () => ({
    __proto__: dart.getMethods(ui.ColorFilter.__proto__),
    webOnlySerializeToCssPaint: dart.fnType(core.List, [])
  }));
  dart.setFieldSignature(ui.ColorFilter, () => ({
    __proto__: dart.getFields(ui.ColorFilter.__proto__),
    [_color]: dart.finalFieldType(ui.Color),
    [_blendMode]: dart.finalFieldType(ui.BlendMode)
  }));
  dart.defineExtensionMethods(ui.ColorFilter, ['_equals', 'toString']);
  dart.defineExtensionAccessors(ui.ColorFilter, ['hashCode']);
  ui.BlurStyle = class BlurStyle extends core.Object {
    toString() {
      return this[_name$0];
    }
  };
  (ui.BlurStyle.new = function(index, _name) {
    this.index = index;
    this[_name$0] = _name;
    ;
  }).prototype = ui.BlurStyle.prototype;
  dart.addTypeTests(ui.BlurStyle);
  dart.setFieldSignature(ui.BlurStyle, () => ({
    __proto__: dart.getFields(ui.BlurStyle.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$0]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(ui.BlurStyle, ['toString']);
  ui.BlurStyle.normal = dart.const(new ui.BlurStyle.new(0, "BlurStyle.normal"));
  ui.BlurStyle.solid = dart.const(new ui.BlurStyle.new(1, "BlurStyle.solid"));
  ui.BlurStyle.outer = dart.const(new ui.BlurStyle.new(2, "BlurStyle.outer"));
  ui.BlurStyle.inner = dart.const(new ui.BlurStyle.new(3, "BlurStyle.inner"));
  ui.BlurStyle.values = dart.constList([ui.BlurStyle.normal, ui.BlurStyle.solid, ui.BlurStyle.outer, ui.BlurStyle.inner], ui.BlurStyle);
  const _style$ = dart.privateName(ui, "_style");
  const _sigma$ = dart.privateName(ui, "_sigma");
  ui.MaskFilter = class MaskFilter extends core.Object {
    get webOnlySigma() {
      return this[_sigma$];
    }
    _equals(other) {
      if (other == null) return false;
      if (!ui.MaskFilter.is(other)) return false;
      let typedOther = ui.MaskFilter._check(other);
      return dart.equals(this[_style$], typedOther[_style$]) && this[_sigma$] == typedOther[_sigma$];
    }
    get hashCode() {
      return ui.hashValues(this[_style$], this[_sigma$]);
    }
    webOnlySerializeToCssPaint() {
      let t4;
      return [(t4 = this[_style$], t4 == null ? null : t4.index), this[_sigma$]];
    }
    toString() {
      return "MaskFilter.blur(" + dart.str(this[_style$]) + ", " + this[_sigma$][$toStringAsFixed](1) + ")";
    }
  };
  (ui.MaskFilter.blur = function(_style, _sigma) {
    this[_style$] = _style;
    this[_sigma$] = _sigma;
    if (!(_style != null)) dart.assertFailed();
    if (!(_sigma != null)) dart.assertFailed();
    ;
  }).prototype = ui.MaskFilter.prototype;
  dart.addTypeTests(ui.MaskFilter);
  dart.setMethodSignature(ui.MaskFilter, () => ({
    __proto__: dart.getMethods(ui.MaskFilter.__proto__),
    webOnlySerializeToCssPaint: dart.fnType(core.List, [])
  }));
  dart.setGetterSignature(ui.MaskFilter, () => ({
    __proto__: dart.getGetters(ui.MaskFilter.__proto__),
    webOnlySigma: core.double
  }));
  dart.setFieldSignature(ui.MaskFilter, () => ({
    __proto__: dart.getFields(ui.MaskFilter.__proto__),
    [_style$]: dart.finalFieldType(ui.BlurStyle),
    [_sigma$]: dart.finalFieldType(core.double)
  }));
  dart.defineExtensionMethods(ui.MaskFilter, ['_equals', 'toString']);
  dart.defineExtensionAccessors(ui.MaskFilter, ['hashCode']);
  ui.FilterQuality = class FilterQuality extends core.Object {
    toString() {
      return this[_name$0];
    }
  };
  (ui.FilterQuality.new = function(index, _name) {
    this.index = index;
    this[_name$0] = _name;
    ;
  }).prototype = ui.FilterQuality.prototype;
  dart.addTypeTests(ui.FilterQuality);
  dart.setFieldSignature(ui.FilterQuality, () => ({
    __proto__: dart.getFields(ui.FilterQuality.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$0]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(ui.FilterQuality, ['toString']);
  ui.FilterQuality.none = dart.const(new ui.FilterQuality.new(0, "FilterQuality.none"));
  ui.FilterQuality.low = dart.const(new ui.FilterQuality.new(1, "FilterQuality.low"));
  ui.FilterQuality.medium = dart.const(new ui.FilterQuality.new(2, "FilterQuality.medium"));
  ui.FilterQuality.high = dart.const(new ui.FilterQuality.new(3, "FilterQuality.high"));
  ui.FilterQuality.values = dart.constList([ui.FilterQuality.none, ui.FilterQuality.low, ui.FilterQuality.medium, ui.FilterQuality.high], ui.FilterQuality);
  const _initBlur = dart.privateName(ui, "_initBlur");
  ui.ImageFilter = class ImageFilter extends core.Object {
    [_initBlur](sigmaX, sigmaY) {
    }
  };
  (ui.ImageFilter.blur = function(opts) {
    let sigmaX = opts && 'sigmaX' in opts ? opts.sigmaX : 0.0;
    let sigmaY = opts && 'sigmaY' in opts ? opts.sigmaY : 0.0;
    this[_initBlur](sigmaX, sigmaY);
  }).prototype = ui.ImageFilter.prototype;
  dart.addTypeTests(ui.ImageFilter);
  dart.setMethodSignature(ui.ImageFilter, () => ({
    __proto__: dart.getMethods(ui.ImageFilter.__proto__),
    [_initBlur]: dart.fnType(dart.void, [core.double, core.double])
  }));
  ui.ImageByteFormat = class ImageByteFormat extends core.Object {
    toString() {
      return this[_name$0];
    }
  };
  (ui.ImageByteFormat.new = function(index, _name) {
    this.index = index;
    this[_name$0] = _name;
    ;
  }).prototype = ui.ImageByteFormat.prototype;
  dart.addTypeTests(ui.ImageByteFormat);
  dart.setFieldSignature(ui.ImageByteFormat, () => ({
    __proto__: dart.getFields(ui.ImageByteFormat.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$0]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(ui.ImageByteFormat, ['toString']);
  ui.ImageByteFormat.rawRgba = dart.const(new ui.ImageByteFormat.new(0, "ImageByteFormat.rawRgba"));
  ui.ImageByteFormat.rawUnmodified = dart.const(new ui.ImageByteFormat.new(1, "ImageByteFormat.rawUnmodified"));
  ui.ImageByteFormat.png = dart.const(new ui.ImageByteFormat.new(2, "ImageByteFormat.png"));
  ui.ImageByteFormat.values = dart.constList([ui.ImageByteFormat.rawRgba, ui.ImageByteFormat.rawUnmodified, ui.ImageByteFormat.png], ui.ImageByteFormat);
  ui.PixelFormat = class PixelFormat extends core.Object {
    toString() {
      return this[_name$0];
    }
  };
  (ui.PixelFormat.new = function(index, _name) {
    this.index = index;
    this[_name$0] = _name;
    ;
  }).prototype = ui.PixelFormat.prototype;
  dart.addTypeTests(ui.PixelFormat);
  dart.setFieldSignature(ui.PixelFormat, () => ({
    __proto__: dart.getFields(ui.PixelFormat.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$0]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(ui.PixelFormat, ['toString']);
  ui.PixelFormat.rgba8888 = dart.const(new ui.PixelFormat.new(0, "PixelFormat.rgba8888"));
  ui.PixelFormat.bgra8888 = dart.const(new ui.PixelFormat.new(1, "PixelFormat.bgra8888"));
  ui.PixelFormat.values = dart.constList([ui.PixelFormat.rgba8888, ui.PixelFormat.bgra8888], ui.PixelFormat);
  ui._ImageInfo = class _ImageInfo extends core.Object {};
  (ui._ImageInfo.new = function(width, height, format, rowBytes) {
    this.width = width;
    this.height = height;
    this.format = format;
    this.rowBytes = rowBytes;
    this.rowBytes == null ? this.rowBytes = dart.notNull(this.width) * 4 : null;
  }).prototype = ui._ImageInfo.prototype;
  dart.addTypeTests(ui._ImageInfo);
  dart.setFieldSignature(ui._ImageInfo, () => ({
    __proto__: dart.getFields(ui._ImageInfo.__proto__),
    width: dart.fieldType(core.int),
    height: dart.fieldType(core.int),
    format: dart.fieldType(core.int),
    rowBytes: dart.fieldType(core.int)
  }));
  ui.FrameInfo = class FrameInfo extends core.Object {
    get duration() {
      return new core.Duration.new({milliseconds: this[_durationMillis$]});
    }
    get [_durationMillis$]() {
      return 0;
    }
    get image() {
      return null;
    }
  };
  (ui.FrameInfo.__ = function() {
    ;
  }).prototype = ui.FrameInfo.prototype;
  dart.addTypeTests(ui.FrameInfo);
  dart.setGetterSignature(ui.FrameInfo, () => ({
    __proto__: dart.getGetters(ui.FrameInfo.__proto__),
    duration: core.Duration,
    [_durationMillis$]: core.int,
    image: ui.Image
  }));
  ui.Codec = class Codec extends core.Object {
    get frameCount() {
      return 0;
    }
    get repetitionCount() {
      return 0;
    }
    getNextFrame() {
      return src__engine.futurize(ui.FrameInfo, dart.bind(this, _getNextFrame$));
    }
    [_getNextFrame$](callback) {
      return null;
    }
    dispose() {
    }
  };
  (ui.Codec.__ = function() {
    ;
  }).prototype = ui.Codec.prototype;
  dart.addTypeTests(ui.Codec);
  dart.setMethodSignature(ui.Codec, () => ({
    __proto__: dart.getMethods(ui.Codec.__proto__),
    getNextFrame: dart.fnType(async.Future$(ui.FrameInfo), []),
    [_getNextFrame$]: dart.fnType(core.String, [dart.fnType(dart.void, [ui.FrameInfo])]),
    dispose: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(ui.Codec, () => ({
    __proto__: dart.getGetters(ui.Codec.__proto__),
    frameCount: core.int,
    repetitionCount: core.int
  }));
  let const$42;
  ui.Shadow = class Shadow extends core.Object {
    get color() {
      return this[color$3];
    }
    set color(value) {
      super.color = value;
    }
    get offset() {
      return this[offset$3];
    }
    set offset(value) {
      super.offset = value;
    }
    get blurRadius() {
      return this[blurRadius$];
    }
    set blurRadius(value) {
      super.blurRadius = value;
    }
    static convertRadiusToSigma(radius) {
      return dart.notNull(radius) * 0.57735 + 0.5;
    }
    get blurSigma() {
      return ui.Shadow.convertRadiusToSigma(this.blurRadius);
    }
    toPaint() {
      let t4;
      t4 = new ui.Paint.new();
      t4.color = this.color;
      t4.maskFilter = new ui.MaskFilter.blur(ui.BlurStyle.normal, this.blurSigma);
      return t4;
    }
    scale(factor) {
      return new ui.Shadow.new({color: this.color, offset: this.offset['*'](factor), blurRadius: dart.notNull(this.blurRadius) * dart.notNull(factor)});
    }
    static lerp(a, b, t) {
      if (!(t != null)) dart.assertFailed();
      if (a == null && b == null) return null;
      if (a == null) return b.scale(t);
      if (b == null) return a.scale(1.0 - dart.notNull(t));
      return new ui.Shadow.new({color: ui.Color.lerp(a.color, b.color, t), offset: ui.Offset.lerp(a.offset, b.offset, t), blurRadius: ui.lerpDouble(a.blurRadius, b.blurRadius, t)});
    }
    static lerpList(a, b, t) {
      if (!(t != null)) dart.assertFailed();
      if (a == null && b == null) return null;
      a == null ? a = JSArrayOfShadow().of([]) : null;
      b == null ? b = JSArrayOfShadow().of([]) : null;
      let result = JSArrayOfShadow().of([]);
      let commonLength = math.min(core.int, a[$length], b[$length]);
      for (let i = 0; i < commonLength; i = i + 1)
        result[$add](ui.Shadow.lerp(a[$_get](i), b[$_get](i), t));
      for (let i = commonLength; i < dart.notNull(a[$length]); i = i + 1)
        result[$add](a[$_get](i).scale(1.0 - dart.notNull(t)));
      for (let i = commonLength; i < dart.notNull(b[$length]); i = i + 1)
        result[$add](b[$_get](i).scale(t));
      return result;
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) return true;
      if (!ui.Shadow.is(other)) return false;
      let typedOther = ui.Shadow._check(other);
      return dart.equals(this.color, typedOther.color) && dart.equals(this.offset, typedOther.offset) && this.blurRadius == typedOther.blurRadius;
    }
    get hashCode() {
      return ui.hashValues(this.color, this.offset, this.blurRadius);
    }
    toString() {
      return "TextShadow(" + dart.str(this.color) + ", " + dart.str(this.offset) + ", " + dart.str(this.blurRadius) + ")";
    }
  };
  (ui.Shadow.new = function(opts) {
    let color = opts && 'color' in opts ? opts.color : const$42 || (const$42 = dart.const(new ui.Color.new(ui.Shadow._kColorDefault)));
    let offset = opts && 'offset' in opts ? opts.offset : ui.Offset.zero;
    let blurRadius = opts && 'blurRadius' in opts ? opts.blurRadius : 0.0;
    this[color$3] = color;
    this[offset$3] = offset;
    this[blurRadius$] = blurRadius;
    if (!(color != null)) dart.assertFailed("Text shadow color was null.");
    if (!(offset != null)) dart.assertFailed("Text shadow offset was null.");
    if (!(dart.notNull(blurRadius) >= 0.0)) dart.assertFailed("Text shadow blur radius should be non-negative.");
    ;
  }).prototype = ui.Shadow.prototype;
  dart.addTypeTests(ui.Shadow);
  const color$3 = Symbol("Shadow.color");
  const offset$3 = Symbol("Shadow.offset");
  const blurRadius$ = Symbol("Shadow.blurRadius");
  dart.setMethodSignature(ui.Shadow, () => ({
    __proto__: dart.getMethods(ui.Shadow.__proto__),
    toPaint: dart.fnType(ui.Paint, []),
    scale: dart.fnType(ui.Shadow, [core.double])
  }));
  dart.setGetterSignature(ui.Shadow, () => ({
    __proto__: dart.getGetters(ui.Shadow.__proto__),
    blurSigma: core.double
  }));
  dart.setFieldSignature(ui.Shadow, () => ({
    __proto__: dart.getFields(ui.Shadow.__proto__),
    color: dart.finalFieldType(ui.Color),
    offset: dart.finalFieldType(ui.Offset),
    blurRadius: dart.finalFieldType(core.double)
  }));
  dart.defineExtensionMethods(ui.Shadow, ['_equals', 'toString']);
  dart.defineExtensionAccessors(ui.Shadow, ['hashCode']);
  dart.defineLazy(ui.Shadow, {
    /*ui.Shadow._kColorDefault*/get _kColorDefault() {
      return 4278190080;
    }
  });
  ui.PointerChange = class PointerChange extends core.Object {
    toString() {
      return this[_name$0];
    }
  };
  (ui.PointerChange.new = function(index, _name) {
    this.index = index;
    this[_name$0] = _name;
    ;
  }).prototype = ui.PointerChange.prototype;
  dart.addTypeTests(ui.PointerChange);
  dart.setFieldSignature(ui.PointerChange, () => ({
    __proto__: dart.getFields(ui.PointerChange.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$0]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(ui.PointerChange, ['toString']);
  ui.PointerChange.cancel = dart.const(new ui.PointerChange.new(0, "PointerChange.cancel"));
  ui.PointerChange.add = dart.const(new ui.PointerChange.new(1, "PointerChange.add"));
  ui.PointerChange.remove = dart.const(new ui.PointerChange.new(2, "PointerChange.remove"));
  ui.PointerChange.hover = dart.const(new ui.PointerChange.new(3, "PointerChange.hover"));
  ui.PointerChange.down = dart.const(new ui.PointerChange.new(4, "PointerChange.down"));
  ui.PointerChange.move = dart.const(new ui.PointerChange.new(5, "PointerChange.move"));
  ui.PointerChange.up = dart.const(new ui.PointerChange.new(6, "PointerChange.up"));
  ui.PointerChange.values = dart.constList([ui.PointerChange.cancel, ui.PointerChange.add, ui.PointerChange.remove, ui.PointerChange.hover, ui.PointerChange.down, ui.PointerChange.move, ui.PointerChange.up], ui.PointerChange);
  ui.PointerDeviceKind = class PointerDeviceKind extends core.Object {
    toString() {
      return this[_name$0];
    }
  };
  (ui.PointerDeviceKind.new = function(index, _name) {
    this.index = index;
    this[_name$0] = _name;
    ;
  }).prototype = ui.PointerDeviceKind.prototype;
  dart.addTypeTests(ui.PointerDeviceKind);
  dart.setFieldSignature(ui.PointerDeviceKind, () => ({
    __proto__: dart.getFields(ui.PointerDeviceKind.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$0]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(ui.PointerDeviceKind, ['toString']);
  ui.PointerDeviceKind.touch = dart.const(new ui.PointerDeviceKind.new(0, "PointerDeviceKind.touch"));
  ui.PointerDeviceKind.mouse = dart.const(new ui.PointerDeviceKind.new(1, "PointerDeviceKind.mouse"));
  ui.PointerDeviceKind.stylus = dart.const(new ui.PointerDeviceKind.new(2, "PointerDeviceKind.stylus"));
  ui.PointerDeviceKind.invertedStylus = dart.const(new ui.PointerDeviceKind.new(3, "PointerDeviceKind.invertedStylus"));
  ui.PointerDeviceKind.unknown = dart.const(new ui.PointerDeviceKind.new(4, "PointerDeviceKind.unknown"));
  ui.PointerDeviceKind.values = dart.constList([ui.PointerDeviceKind.touch, ui.PointerDeviceKind.mouse, ui.PointerDeviceKind.stylus, ui.PointerDeviceKind.invertedStylus, ui.PointerDeviceKind.unknown], ui.PointerDeviceKind);
  ui.PointerSignalKind = class PointerSignalKind extends core.Object {
    toString() {
      return this[_name$0];
    }
  };
  (ui.PointerSignalKind.new = function(index, _name) {
    this.index = index;
    this[_name$0] = _name;
    ;
  }).prototype = ui.PointerSignalKind.prototype;
  dart.addTypeTests(ui.PointerSignalKind);
  dart.setFieldSignature(ui.PointerSignalKind, () => ({
    __proto__: dart.getFields(ui.PointerSignalKind.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$0]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(ui.PointerSignalKind, ['toString']);
  ui.PointerSignalKind.none = dart.const(new ui.PointerSignalKind.new(0, "PointerSignalKind.none"));
  ui.PointerSignalKind.scroll = dart.const(new ui.PointerSignalKind.new(1, "PointerSignalKind.scroll"));
  ui.PointerSignalKind.unknown = dart.const(new ui.PointerSignalKind.new(2, "PointerSignalKind.unknown"));
  ui.PointerSignalKind.values = dart.constList([ui.PointerSignalKind.none, ui.PointerSignalKind.scroll, ui.PointerSignalKind.unknown], ui.PointerSignalKind);
  ui.PointerData = class PointerData extends core.Object {
    get timeStamp() {
      return this[timeStamp$];
    }
    set timeStamp(value) {
      super.timeStamp = value;
    }
    get change() {
      return this[change$];
    }
    set change(value) {
      super.change = value;
    }
    get kind() {
      return this[kind$];
    }
    set kind(value) {
      super.kind = value;
    }
    get signalKind() {
      return this[signalKind$];
    }
    set signalKind(value) {
      super.signalKind = value;
    }
    get device() {
      return this[device$];
    }
    set device(value) {
      super.device = value;
    }
    get physicalX() {
      return this[physicalX$];
    }
    set physicalX(value) {
      super.physicalX = value;
    }
    get physicalY() {
      return this[physicalY$];
    }
    set physicalY(value) {
      super.physicalY = value;
    }
    get buttons() {
      return this[buttons$];
    }
    set buttons(value) {
      super.buttons = value;
    }
    get obscured() {
      return this[obscured$];
    }
    set obscured(value) {
      super.obscured = value;
    }
    get pressure() {
      return this[pressure$];
    }
    set pressure(value) {
      super.pressure = value;
    }
    get pressureMin() {
      return this[pressureMin$];
    }
    set pressureMin(value) {
      super.pressureMin = value;
    }
    get pressureMax() {
      return this[pressureMax$];
    }
    set pressureMax(value) {
      super.pressureMax = value;
    }
    get distance() {
      return this[distance$];
    }
    set distance(value) {
      super.distance = value;
    }
    get distanceMax() {
      return this[distanceMax$];
    }
    set distanceMax(value) {
      super.distanceMax = value;
    }
    get size() {
      return this[size$];
    }
    set size(value) {
      super.size = value;
    }
    get radiusMajor() {
      return this[radiusMajor$];
    }
    set radiusMajor(value) {
      super.radiusMajor = value;
    }
    get radiusMinor() {
      return this[radiusMinor$];
    }
    set radiusMinor(value) {
      super.radiusMinor = value;
    }
    get radiusMin() {
      return this[radiusMin$];
    }
    set radiusMin(value) {
      super.radiusMin = value;
    }
    get radiusMax() {
      return this[radiusMax$];
    }
    set radiusMax(value) {
      super.radiusMax = value;
    }
    get orientation() {
      return this[orientation$];
    }
    set orientation(value) {
      super.orientation = value;
    }
    get tilt() {
      return this[tilt$];
    }
    set tilt(value) {
      super.tilt = value;
    }
    get platformData() {
      return this[platformData$];
    }
    set platformData(value) {
      super.platformData = value;
    }
    get scrollDeltaX() {
      return this[scrollDeltaX$];
    }
    set scrollDeltaX(value) {
      super.scrollDeltaX = value;
    }
    get scrollDeltaY() {
      return this[scrollDeltaY$];
    }
    set scrollDeltaY(value) {
      super.scrollDeltaY = value;
    }
    toString() {
      return dart.str(this[$runtimeType]) + "(x: " + dart.str(this.physicalX) + ", y: " + dart.str(this.physicalY) + ")";
    }
    toStringFull() {
      return dart.str(this[$runtimeType]) + "(" + "timeStamp: " + dart.str(this.timeStamp) + ", " + "change: " + dart.str(this.change) + ", " + "kind: " + dart.str(this.kind) + ", " + "signalKind: " + dart.str(this.signalKind) + ", " + "device: " + dart.str(this.device) + ", " + "physicalX: " + dart.str(this.physicalX) + ", " + "physicalY: " + dart.str(this.physicalY) + ", " + "buttons: " + dart.str(this.buttons) + ", " + "pressure: " + dart.str(this.pressure) + ", " + "pressureMin: " + dart.str(this.pressureMin) + ", " + "pressureMax: " + dart.str(this.pressureMax) + ", " + "distance: " + dart.str(this.distance) + ", " + "distanceMax: " + dart.str(this.distanceMax) + ", " + "size: " + dart.str(this.size) + ", " + "radiusMajor: " + dart.str(this.radiusMajor) + ", " + "radiusMinor: " + dart.str(this.radiusMinor) + ", " + "radiusMin: " + dart.str(this.radiusMin) + ", " + "radiusMax: " + dart.str(this.radiusMax) + ", " + "orientation: " + dart.str(this.orientation) + ", " + "tilt: " + dart.str(this.tilt) + ", " + "platformData: " + dart.str(this.platformData) + ", " + "scrollDeltaX: " + dart.str(this.scrollDeltaX) + ", " + "scrollDeltaY: " + dart.str(this.scrollDeltaY) + ")";
    }
  };
  (ui.PointerData.new = function(opts) {
    let timeStamp = opts && 'timeStamp' in opts ? opts.timeStamp : core.Duration.zero;
    let change = opts && 'change' in opts ? opts.change : ui.PointerChange.cancel;
    let kind = opts && 'kind' in opts ? opts.kind : ui.PointerDeviceKind.touch;
    let signalKind = opts && 'signalKind' in opts ? opts.signalKind : null;
    let device = opts && 'device' in opts ? opts.device : 0;
    let physicalX = opts && 'physicalX' in opts ? opts.physicalX : 0.0;
    let physicalY = opts && 'physicalY' in opts ? opts.physicalY : 0.0;
    let buttons = opts && 'buttons' in opts ? opts.buttons : 0;
    let obscured = opts && 'obscured' in opts ? opts.obscured : false;
    let pressure = opts && 'pressure' in opts ? opts.pressure : 0.0;
    let pressureMin = opts && 'pressureMin' in opts ? opts.pressureMin : 0.0;
    let pressureMax = opts && 'pressureMax' in opts ? opts.pressureMax : 0.0;
    let distance = opts && 'distance' in opts ? opts.distance : 0.0;
    let distanceMax = opts && 'distanceMax' in opts ? opts.distanceMax : 0.0;
    let size = opts && 'size' in opts ? opts.size : 0.0;
    let radiusMajor = opts && 'radiusMajor' in opts ? opts.radiusMajor : 0.0;
    let radiusMinor = opts && 'radiusMinor' in opts ? opts.radiusMinor : 0.0;
    let radiusMin = opts && 'radiusMin' in opts ? opts.radiusMin : 0.0;
    let radiusMax = opts && 'radiusMax' in opts ? opts.radiusMax : 0.0;
    let orientation = opts && 'orientation' in opts ? opts.orientation : 0.0;
    let tilt = opts && 'tilt' in opts ? opts.tilt : 0.0;
    let platformData = opts && 'platformData' in opts ? opts.platformData : 0;
    let scrollDeltaX = opts && 'scrollDeltaX' in opts ? opts.scrollDeltaX : 0.0;
    let scrollDeltaY = opts && 'scrollDeltaY' in opts ? opts.scrollDeltaY : 0.0;
    this[timeStamp$] = timeStamp;
    this[change$] = change;
    this[kind$] = kind;
    this[signalKind$] = signalKind;
    this[device$] = device;
    this[physicalX$] = physicalX;
    this[physicalY$] = physicalY;
    this[buttons$] = buttons;
    this[obscured$] = obscured;
    this[pressure$] = pressure;
    this[pressureMin$] = pressureMin;
    this[pressureMax$] = pressureMax;
    this[distance$] = distance;
    this[distanceMax$] = distanceMax;
    this[size$] = size;
    this[radiusMajor$] = radiusMajor;
    this[radiusMinor$] = radiusMinor;
    this[radiusMin$] = radiusMin;
    this[radiusMax$] = radiusMax;
    this[orientation$] = orientation;
    this[tilt$] = tilt;
    this[platformData$] = platformData;
    this[scrollDeltaX$] = scrollDeltaX;
    this[scrollDeltaY$] = scrollDeltaY;
    ;
  }).prototype = ui.PointerData.prototype;
  dart.addTypeTests(ui.PointerData);
  const timeStamp$ = Symbol("PointerData.timeStamp");
  const change$ = Symbol("PointerData.change");
  const kind$ = Symbol("PointerData.kind");
  const signalKind$ = Symbol("PointerData.signalKind");
  const device$ = Symbol("PointerData.device");
  const physicalX$ = Symbol("PointerData.physicalX");
  const physicalY$ = Symbol("PointerData.physicalY");
  const buttons$ = Symbol("PointerData.buttons");
  const obscured$ = Symbol("PointerData.obscured");
  const pressure$ = Symbol("PointerData.pressure");
  const pressureMin$ = Symbol("PointerData.pressureMin");
  const pressureMax$ = Symbol("PointerData.pressureMax");
  const distance$ = Symbol("PointerData.distance");
  const distanceMax$ = Symbol("PointerData.distanceMax");
  const size$ = Symbol("PointerData.size");
  const radiusMajor$ = Symbol("PointerData.radiusMajor");
  const radiusMinor$ = Symbol("PointerData.radiusMinor");
  const radiusMin$ = Symbol("PointerData.radiusMin");
  const radiusMax$ = Symbol("PointerData.radiusMax");
  const orientation$ = Symbol("PointerData.orientation");
  const tilt$ = Symbol("PointerData.tilt");
  const platformData$ = Symbol("PointerData.platformData");
  const scrollDeltaX$ = Symbol("PointerData.scrollDeltaX");
  const scrollDeltaY$ = Symbol("PointerData.scrollDeltaY");
  dart.setMethodSignature(ui.PointerData, () => ({
    __proto__: dart.getMethods(ui.PointerData.__proto__),
    toStringFull: dart.fnType(core.String, [])
  }));
  dart.setFieldSignature(ui.PointerData, () => ({
    __proto__: dart.getFields(ui.PointerData.__proto__),
    timeStamp: dart.finalFieldType(core.Duration),
    change: dart.finalFieldType(ui.PointerChange),
    kind: dart.finalFieldType(ui.PointerDeviceKind),
    signalKind: dart.finalFieldType(ui.PointerSignalKind),
    device: dart.finalFieldType(core.int),
    physicalX: dart.finalFieldType(core.double),
    physicalY: dart.finalFieldType(core.double),
    buttons: dart.finalFieldType(core.int),
    obscured: dart.finalFieldType(core.bool),
    pressure: dart.finalFieldType(core.double),
    pressureMin: dart.finalFieldType(core.double),
    pressureMax: dart.finalFieldType(core.double),
    distance: dart.finalFieldType(core.double),
    distanceMax: dart.finalFieldType(core.double),
    size: dart.finalFieldType(core.double),
    radiusMajor: dart.finalFieldType(core.double),
    radiusMinor: dart.finalFieldType(core.double),
    radiusMin: dart.finalFieldType(core.double),
    radiusMax: dart.finalFieldType(core.double),
    orientation: dart.finalFieldType(core.double),
    tilt: dart.finalFieldType(core.double),
    platformData: dart.finalFieldType(core.int),
    scrollDeltaX: dart.finalFieldType(core.double),
    scrollDeltaY: dart.finalFieldType(core.double)
  }));
  dart.defineExtensionMethods(ui.PointerData, ['toString']);
  let const$43;
  ui.PointerDataPacket = class PointerDataPacket extends core.Object {
    get data() {
      return this[data$0];
    }
    set data(value) {
      super.data = value;
    }
  };
  (ui.PointerDataPacket.new = function(opts) {
    let data = opts && 'data' in opts ? opts.data : const$43 || (const$43 = dart.constList([], ui.PointerData));
    this[data$0] = data;
    ;
  }).prototype = ui.PointerDataPacket.prototype;
  dart.addTypeTests(ui.PointerDataPacket);
  const data$0 = Symbol("PointerDataPacket.data");
  dart.setFieldSignature(ui.PointerDataPacket, () => ({
    __proto__: dart.getFields(ui.PointerDataPacket.__proto__),
    data: dart.finalFieldType(core.List$(ui.PointerData))
  }));
  ui.SemanticsAction = class SemanticsAction extends core.Object {
    get index() {
      return this[index$];
    }
    set index(value) {
      super.index = value;
    }
    toString() {
      switch (this.index) {
        case ui.SemanticsAction._kTapIndex:
        {
          return "SemanticsAction.tap";
        }
        case ui.SemanticsAction._kLongPressIndex:
        {
          return "SemanticsAction.longPress";
        }
        case ui.SemanticsAction._kScrollLeftIndex:
        {
          return "SemanticsAction.scrollLeft";
        }
        case ui.SemanticsAction._kScrollRightIndex:
        {
          return "SemanticsAction.scrollRight";
        }
        case ui.SemanticsAction._kScrollUpIndex:
        {
          return "SemanticsAction.scrollUp";
        }
        case ui.SemanticsAction._kScrollDownIndex:
        {
          return "SemanticsAction.scrollDown";
        }
        case ui.SemanticsAction._kIncreaseIndex:
        {
          return "SemanticsAction.increase";
        }
        case ui.SemanticsAction._kDecreaseIndex:
        {
          return "SemanticsAction.decrease";
        }
        case ui.SemanticsAction._kShowOnScreenIndex:
        {
          return "SemanticsAction.showOnScreen";
        }
        case ui.SemanticsAction._kMoveCursorForwardByCharacterIndex:
        {
          return "SemanticsAction.moveCursorForwardByCharacter";
        }
        case ui.SemanticsAction._kMoveCursorBackwardByCharacterIndex:
        {
          return "SemanticsAction.moveCursorBackwardByCharacter";
        }
        case ui.SemanticsAction._kSetSelectionIndex:
        {
          return "SemanticsAction.setSelection";
        }
        case ui.SemanticsAction._kCopyIndex:
        {
          return "SemanticsAction.copy";
        }
        case ui.SemanticsAction._kCutIndex:
        {
          return "SemanticsAction.cut";
        }
        case ui.SemanticsAction._kPasteIndex:
        {
          return "SemanticsAction.paste";
        }
        case ui.SemanticsAction._kDidGainAccessibilityFocusIndex:
        {
          return "SemanticsAction.didGainAccessibilityFocus";
        }
        case ui.SemanticsAction._kDidLoseAccessibilityFocusIndex:
        {
          return "SemanticsAction.didLoseAccessibilityFocus";
        }
        case ui.SemanticsAction._kCustomAction:
        {
          return "SemanticsAction.customAction";
        }
        case ui.SemanticsAction._kDismissIndex:
        {
          return "SemanticsAction.dismiss";
        }
        case ui.SemanticsAction._kMoveCursorForwardByWordIndex:
        {
          return "SemanticsAction.moveCursorForwardByWord";
        }
        case ui.SemanticsAction._kMoveCursorBackwardByWordIndex:
        {
          return "SemanticsAction.moveCursorBackwardByWord";
        }
      }
      return null;
    }
  };
  (ui.SemanticsAction.__ = function(index) {
    this[index$] = index;
    ;
  }).prototype = ui.SemanticsAction.prototype;
  dart.addTypeTests(ui.SemanticsAction);
  const index$ = Symbol("SemanticsAction.index");
  dart.setFieldSignature(ui.SemanticsAction, () => ({
    __proto__: dart.getFields(ui.SemanticsAction.__proto__),
    index: dart.finalFieldType(core.int)
  }));
  dart.defineExtensionMethods(ui.SemanticsAction, ['toString']);
  dart.defineLazy(ui.SemanticsAction, {
    /*ui.SemanticsAction._kTapIndex*/get _kTapIndex() {
      return 1 << 0;
    },
    /*ui.SemanticsAction._kLongPressIndex*/get _kLongPressIndex() {
      return 1 << 1;
    },
    /*ui.SemanticsAction._kScrollLeftIndex*/get _kScrollLeftIndex() {
      return 1 << 2;
    },
    /*ui.SemanticsAction._kScrollRightIndex*/get _kScrollRightIndex() {
      return 1 << 3;
    },
    /*ui.SemanticsAction._kScrollUpIndex*/get _kScrollUpIndex() {
      return 1 << 4;
    },
    /*ui.SemanticsAction._kScrollDownIndex*/get _kScrollDownIndex() {
      return 1 << 5;
    },
    /*ui.SemanticsAction._kIncreaseIndex*/get _kIncreaseIndex() {
      return 1 << 6;
    },
    /*ui.SemanticsAction._kDecreaseIndex*/get _kDecreaseIndex() {
      return 1 << 7;
    },
    /*ui.SemanticsAction._kShowOnScreenIndex*/get _kShowOnScreenIndex() {
      return 1 << 8;
    },
    /*ui.SemanticsAction._kMoveCursorForwardByCharacterIndex*/get _kMoveCursorForwardByCharacterIndex() {
      return 1 << 9;
    },
    /*ui.SemanticsAction._kMoveCursorBackwardByCharacterIndex*/get _kMoveCursorBackwardByCharacterIndex() {
      return 1 << 10;
    },
    /*ui.SemanticsAction._kSetSelectionIndex*/get _kSetSelectionIndex() {
      return 1 << 11;
    },
    /*ui.SemanticsAction._kCopyIndex*/get _kCopyIndex() {
      return 1 << 12;
    },
    /*ui.SemanticsAction._kCutIndex*/get _kCutIndex() {
      return 1 << 13;
    },
    /*ui.SemanticsAction._kPasteIndex*/get _kPasteIndex() {
      return 1 << 14;
    },
    /*ui.SemanticsAction._kDidGainAccessibilityFocusIndex*/get _kDidGainAccessibilityFocusIndex() {
      return 1 << 15;
    },
    /*ui.SemanticsAction._kDidLoseAccessibilityFocusIndex*/get _kDidLoseAccessibilityFocusIndex() {
      return 1 << 16;
    },
    /*ui.SemanticsAction._kCustomAction*/get _kCustomAction() {
      return 1 << 17;
    },
    /*ui.SemanticsAction._kDismissIndex*/get _kDismissIndex() {
      return 1 << 18;
    },
    /*ui.SemanticsAction._kMoveCursorForwardByWordIndex*/get _kMoveCursorForwardByWordIndex() {
      return 1 << 19;
    },
    /*ui.SemanticsAction._kMoveCursorBackwardByWordIndex*/get _kMoveCursorBackwardByWordIndex() {
      return 1 << 20;
    },
    /*ui.SemanticsAction.tap*/get tap() {
      return dart.const(new ui.SemanticsAction.__(ui.SemanticsAction._kTapIndex));
    },
    /*ui.SemanticsAction.longPress*/get longPress() {
      return dart.const(new ui.SemanticsAction.__(ui.SemanticsAction._kLongPressIndex));
    },
    /*ui.SemanticsAction.scrollLeft*/get scrollLeft() {
      return dart.const(new ui.SemanticsAction.__(ui.SemanticsAction._kScrollLeftIndex));
    },
    /*ui.SemanticsAction.scrollRight*/get scrollRight() {
      return dart.const(new ui.SemanticsAction.__(ui.SemanticsAction._kScrollRightIndex));
    },
    /*ui.SemanticsAction.scrollUp*/get scrollUp() {
      return dart.const(new ui.SemanticsAction.__(ui.SemanticsAction._kScrollUpIndex));
    },
    /*ui.SemanticsAction.scrollDown*/get scrollDown() {
      return dart.const(new ui.SemanticsAction.__(ui.SemanticsAction._kScrollDownIndex));
    },
    /*ui.SemanticsAction.increase*/get increase() {
      return dart.const(new ui.SemanticsAction.__(ui.SemanticsAction._kIncreaseIndex));
    },
    /*ui.SemanticsAction.decrease*/get decrease() {
      return dart.const(new ui.SemanticsAction.__(ui.SemanticsAction._kDecreaseIndex));
    },
    /*ui.SemanticsAction.showOnScreen*/get showOnScreen() {
      return dart.const(new ui.SemanticsAction.__(ui.SemanticsAction._kShowOnScreenIndex));
    },
    /*ui.SemanticsAction.moveCursorForwardByCharacter*/get moveCursorForwardByCharacter() {
      return dart.const(new ui.SemanticsAction.__(ui.SemanticsAction._kMoveCursorForwardByCharacterIndex));
    },
    /*ui.SemanticsAction.moveCursorBackwardByCharacter*/get moveCursorBackwardByCharacter() {
      return dart.const(new ui.SemanticsAction.__(ui.SemanticsAction._kMoveCursorBackwardByCharacterIndex));
    },
    /*ui.SemanticsAction.setSelection*/get setSelection() {
      return dart.const(new ui.SemanticsAction.__(ui.SemanticsAction._kSetSelectionIndex));
    },
    /*ui.SemanticsAction.copy*/get copy() {
      return dart.const(new ui.SemanticsAction.__(ui.SemanticsAction._kCopyIndex));
    },
    /*ui.SemanticsAction.cut*/get cut() {
      return dart.const(new ui.SemanticsAction.__(ui.SemanticsAction._kCutIndex));
    },
    /*ui.SemanticsAction.paste*/get paste() {
      return dart.const(new ui.SemanticsAction.__(ui.SemanticsAction._kPasteIndex));
    },
    /*ui.SemanticsAction.didGainAccessibilityFocus*/get didGainAccessibilityFocus() {
      return dart.const(new ui.SemanticsAction.__(ui.SemanticsAction._kDidGainAccessibilityFocusIndex));
    },
    /*ui.SemanticsAction.didLoseAccessibilityFocus*/get didLoseAccessibilityFocus() {
      return dart.const(new ui.SemanticsAction.__(ui.SemanticsAction._kDidLoseAccessibilityFocusIndex));
    },
    /*ui.SemanticsAction.customAction*/get customAction() {
      return dart.const(new ui.SemanticsAction.__(ui.SemanticsAction._kCustomAction));
    },
    /*ui.SemanticsAction.dismiss*/get dismiss() {
      return dart.const(new ui.SemanticsAction.__(ui.SemanticsAction._kDismissIndex));
    },
    /*ui.SemanticsAction.moveCursorForwardByWord*/get moveCursorForwardByWord() {
      return dart.const(new ui.SemanticsAction.__(ui.SemanticsAction._kMoveCursorForwardByWordIndex));
    },
    /*ui.SemanticsAction.moveCursorBackwardByWord*/get moveCursorBackwardByWord() {
      return dart.const(new ui.SemanticsAction.__(ui.SemanticsAction._kMoveCursorBackwardByWordIndex));
    },
    /*ui.SemanticsAction.values*/get values() {
      return dart.constMap(core.int, ui.SemanticsAction, [ui.SemanticsAction._kTapIndex, ui.SemanticsAction.tap, ui.SemanticsAction._kLongPressIndex, ui.SemanticsAction.longPress, ui.SemanticsAction._kScrollLeftIndex, ui.SemanticsAction.scrollLeft, ui.SemanticsAction._kScrollRightIndex, ui.SemanticsAction.scrollRight, ui.SemanticsAction._kScrollUpIndex, ui.SemanticsAction.scrollUp, ui.SemanticsAction._kScrollDownIndex, ui.SemanticsAction.scrollDown, ui.SemanticsAction._kIncreaseIndex, ui.SemanticsAction.increase, ui.SemanticsAction._kDecreaseIndex, ui.SemanticsAction.decrease, ui.SemanticsAction._kShowOnScreenIndex, ui.SemanticsAction.showOnScreen, ui.SemanticsAction._kMoveCursorForwardByCharacterIndex, ui.SemanticsAction.moveCursorForwardByCharacter, ui.SemanticsAction._kMoveCursorBackwardByCharacterIndex, ui.SemanticsAction.moveCursorBackwardByCharacter, ui.SemanticsAction._kSetSelectionIndex, ui.SemanticsAction.setSelection, ui.SemanticsAction._kCopyIndex, ui.SemanticsAction.copy, ui.SemanticsAction._kCutIndex, ui.SemanticsAction.cut, ui.SemanticsAction._kPasteIndex, ui.SemanticsAction.paste, ui.SemanticsAction._kDidGainAccessibilityFocusIndex, ui.SemanticsAction.didGainAccessibilityFocus, ui.SemanticsAction._kDidLoseAccessibilityFocusIndex, ui.SemanticsAction.didLoseAccessibilityFocus, ui.SemanticsAction._kCustomAction, ui.SemanticsAction.customAction, ui.SemanticsAction._kDismissIndex, ui.SemanticsAction.dismiss, ui.SemanticsAction._kMoveCursorForwardByWordIndex, ui.SemanticsAction.moveCursorForwardByWord, ui.SemanticsAction._kMoveCursorBackwardByWordIndex, ui.SemanticsAction.moveCursorBackwardByWord]);
    }
  });
  ui.SemanticsFlag = class SemanticsFlag extends core.Object {
    get index() {
      return this[index$0];
    }
    set index(value) {
      super.index = value;
    }
    toString() {
      switch (this.index) {
        case ui.SemanticsFlag._kHasCheckedStateIndex:
        {
          return "SemanticsFlag.hasCheckedState";
        }
        case ui.SemanticsFlag._kIsCheckedIndex:
        {
          return "SemanticsFlag.isChecked";
        }
        case ui.SemanticsFlag._kIsSelectedIndex:
        {
          return "SemanticsFlag.isSelected";
        }
        case ui.SemanticsFlag._kIsButtonIndex:
        {
          return "SemanticsFlag.isButton";
        }
        case ui.SemanticsFlag._kIsTextFieldIndex:
        {
          return "SemanticsFlag.isTextField";
        }
        case ui.SemanticsFlag._kIsFocusedIndex:
        {
          return "SemanticsFlag.isFocused";
        }
        case ui.SemanticsFlag._kHasEnabledStateIndex:
        {
          return "SemanticsFlag.hasEnabledState";
        }
        case ui.SemanticsFlag._kIsEnabledIndex:
        {
          return "SemanticsFlag.isEnabled";
        }
        case ui.SemanticsFlag._kIsInMutuallyExclusiveGroupIndex:
        {
          return "SemanticsFlag.isInMutuallyExclusiveGroup";
        }
        case ui.SemanticsFlag._kIsHeaderIndex:
        {
          return "SemanticsFlag.isHeader";
        }
        case ui.SemanticsFlag._kIsObscuredIndex:
        {
          return "SemanticsFlag.isObscured";
        }
        case ui.SemanticsFlag._kScopesRouteIndex:
        {
          return "SemanticsFlag.scopesRoute";
        }
        case ui.SemanticsFlag._kNamesRouteIndex:
        {
          return "SemanticsFlag.namesRoute";
        }
        case ui.SemanticsFlag._kIsHiddenIndex:
        {
          return "SemanticsFlag.isHidden";
        }
        case ui.SemanticsFlag._kIsImageIndex:
        {
          return "SemanticsFlag.isImage";
        }
        case ui.SemanticsFlag._kIsLiveRegionIndex:
        {
          return "SemanticsFlag.isLiveRegion";
        }
        case ui.SemanticsFlag._kHasToggledStateIndex:
        {
          return "SemanticsFlag.hasToggledState";
        }
        case ui.SemanticsFlag._kIsToggledIndex:
        {
          return "SemanticsFlag.isToggled";
        }
        case ui.SemanticsFlag._kHasImplicitScrollingIndex:
        {
          return "SemanticsFlag.hasImplicitScrolling";
        }
        case ui.SemanticsFlag._kIsMultilineIndex:
        {
          return "SemanticsFlag.isMultiline";
        }
      }
      return null;
    }
  };
  (ui.SemanticsFlag.__ = function(index) {
    this[index$0] = index;
    ;
  }).prototype = ui.SemanticsFlag.prototype;
  dart.addTypeTests(ui.SemanticsFlag);
  const index$0 = Symbol("SemanticsFlag.index");
  dart.setFieldSignature(ui.SemanticsFlag, () => ({
    __proto__: dart.getFields(ui.SemanticsFlag.__proto__),
    index: dart.finalFieldType(core.int)
  }));
  dart.defineExtensionMethods(ui.SemanticsFlag, ['toString']);
  dart.defineLazy(ui.SemanticsFlag, {
    /*ui.SemanticsFlag._kHasCheckedStateIndex*/get _kHasCheckedStateIndex() {
      return 1 << 0;
    },
    /*ui.SemanticsFlag._kIsCheckedIndex*/get _kIsCheckedIndex() {
      return 1 << 1;
    },
    /*ui.SemanticsFlag._kIsSelectedIndex*/get _kIsSelectedIndex() {
      return 1 << 2;
    },
    /*ui.SemanticsFlag._kIsButtonIndex*/get _kIsButtonIndex() {
      return 1 << 3;
    },
    /*ui.SemanticsFlag._kIsTextFieldIndex*/get _kIsTextFieldIndex() {
      return 1 << 4;
    },
    /*ui.SemanticsFlag._kIsFocusedIndex*/get _kIsFocusedIndex() {
      return 1 << 5;
    },
    /*ui.SemanticsFlag._kHasEnabledStateIndex*/get _kHasEnabledStateIndex() {
      return 1 << 6;
    },
    /*ui.SemanticsFlag._kIsEnabledIndex*/get _kIsEnabledIndex() {
      return 1 << 7;
    },
    /*ui.SemanticsFlag._kIsInMutuallyExclusiveGroupIndex*/get _kIsInMutuallyExclusiveGroupIndex() {
      return 1 << 8;
    },
    /*ui.SemanticsFlag._kIsHeaderIndex*/get _kIsHeaderIndex() {
      return 1 << 9;
    },
    /*ui.SemanticsFlag._kIsObscuredIndex*/get _kIsObscuredIndex() {
      return 1 << 10;
    },
    /*ui.SemanticsFlag._kScopesRouteIndex*/get _kScopesRouteIndex() {
      return 1 << 11;
    },
    /*ui.SemanticsFlag._kNamesRouteIndex*/get _kNamesRouteIndex() {
      return 1 << 12;
    },
    /*ui.SemanticsFlag._kIsHiddenIndex*/get _kIsHiddenIndex() {
      return 1 << 13;
    },
    /*ui.SemanticsFlag._kIsImageIndex*/get _kIsImageIndex() {
      return 1 << 14;
    },
    /*ui.SemanticsFlag._kIsLiveRegionIndex*/get _kIsLiveRegionIndex() {
      return 1 << 15;
    },
    /*ui.SemanticsFlag._kHasToggledStateIndex*/get _kHasToggledStateIndex() {
      return 1 << 16;
    },
    /*ui.SemanticsFlag._kIsToggledIndex*/get _kIsToggledIndex() {
      return 1 << 17;
    },
    /*ui.SemanticsFlag._kHasImplicitScrollingIndex*/get _kHasImplicitScrollingIndex() {
      return 1 << 18;
    },
    /*ui.SemanticsFlag._kIsMultilineIndex*/get _kIsMultilineIndex() {
      return 1 << 19;
    },
    /*ui.SemanticsFlag.hasCheckedState*/get hasCheckedState() {
      return dart.const(new ui.SemanticsFlag.__(ui.SemanticsFlag._kHasCheckedStateIndex));
    },
    /*ui.SemanticsFlag.isChecked*/get isChecked() {
      return dart.const(new ui.SemanticsFlag.__(ui.SemanticsFlag._kIsCheckedIndex));
    },
    /*ui.SemanticsFlag.isSelected*/get isSelected() {
      return dart.const(new ui.SemanticsFlag.__(ui.SemanticsFlag._kIsSelectedIndex));
    },
    /*ui.SemanticsFlag.isButton*/get isButton() {
      return dart.const(new ui.SemanticsFlag.__(ui.SemanticsFlag._kIsButtonIndex));
    },
    /*ui.SemanticsFlag.isTextField*/get isTextField() {
      return dart.const(new ui.SemanticsFlag.__(ui.SemanticsFlag._kIsTextFieldIndex));
    },
    /*ui.SemanticsFlag.isFocused*/get isFocused() {
      return dart.const(new ui.SemanticsFlag.__(ui.SemanticsFlag._kIsFocusedIndex));
    },
    /*ui.SemanticsFlag.hasEnabledState*/get hasEnabledState() {
      return dart.const(new ui.SemanticsFlag.__(ui.SemanticsFlag._kHasEnabledStateIndex));
    },
    /*ui.SemanticsFlag.isEnabled*/get isEnabled() {
      return dart.const(new ui.SemanticsFlag.__(ui.SemanticsFlag._kIsEnabledIndex));
    },
    /*ui.SemanticsFlag.isInMutuallyExclusiveGroup*/get isInMutuallyExclusiveGroup() {
      return dart.const(new ui.SemanticsFlag.__(ui.SemanticsFlag._kIsInMutuallyExclusiveGroupIndex));
    },
    /*ui.SemanticsFlag.isHeader*/get isHeader() {
      return dart.const(new ui.SemanticsFlag.__(ui.SemanticsFlag._kIsHeaderIndex));
    },
    /*ui.SemanticsFlag.isObscured*/get isObscured() {
      return dart.const(new ui.SemanticsFlag.__(ui.SemanticsFlag._kIsObscuredIndex));
    },
    /*ui.SemanticsFlag.scopesRoute*/get scopesRoute() {
      return dart.const(new ui.SemanticsFlag.__(ui.SemanticsFlag._kScopesRouteIndex));
    },
    /*ui.SemanticsFlag.namesRoute*/get namesRoute() {
      return dart.const(new ui.SemanticsFlag.__(ui.SemanticsFlag._kNamesRouteIndex));
    },
    /*ui.SemanticsFlag.isHidden*/get isHidden() {
      return dart.const(new ui.SemanticsFlag.__(ui.SemanticsFlag._kIsHiddenIndex));
    },
    /*ui.SemanticsFlag.isImage*/get isImage() {
      return dart.const(new ui.SemanticsFlag.__(ui.SemanticsFlag._kIsImageIndex));
    },
    /*ui.SemanticsFlag.isLiveRegion*/get isLiveRegion() {
      return dart.const(new ui.SemanticsFlag.__(ui.SemanticsFlag._kIsLiveRegionIndex));
    },
    /*ui.SemanticsFlag.hasToggledState*/get hasToggledState() {
      return dart.const(new ui.SemanticsFlag.__(ui.SemanticsFlag._kHasToggledStateIndex));
    },
    /*ui.SemanticsFlag.isToggled*/get isToggled() {
      return dart.const(new ui.SemanticsFlag.__(ui.SemanticsFlag._kIsToggledIndex));
    },
    /*ui.SemanticsFlag.hasImplicitScrolling*/get hasImplicitScrolling() {
      return dart.const(new ui.SemanticsFlag.__(ui.SemanticsFlag._kHasImplicitScrollingIndex));
    },
    /*ui.SemanticsFlag.isMultiline*/get isMultiline() {
      return dart.const(new ui.SemanticsFlag.__(ui.SemanticsFlag._kIsMultilineIndex));
    },
    /*ui.SemanticsFlag.values*/get values() {
      return dart.constMap(core.int, ui.SemanticsFlag, [ui.SemanticsFlag._kHasCheckedStateIndex, ui.SemanticsFlag.hasCheckedState, ui.SemanticsFlag._kIsCheckedIndex, ui.SemanticsFlag.isChecked, ui.SemanticsFlag._kIsSelectedIndex, ui.SemanticsFlag.isSelected, ui.SemanticsFlag._kIsButtonIndex, ui.SemanticsFlag.isButton, ui.SemanticsFlag._kIsTextFieldIndex, ui.SemanticsFlag.isTextField, ui.SemanticsFlag._kIsFocusedIndex, ui.SemanticsFlag.isFocused, ui.SemanticsFlag._kHasEnabledStateIndex, ui.SemanticsFlag.hasEnabledState, ui.SemanticsFlag._kIsEnabledIndex, ui.SemanticsFlag.isEnabled, ui.SemanticsFlag._kIsInMutuallyExclusiveGroupIndex, ui.SemanticsFlag.isInMutuallyExclusiveGroup, ui.SemanticsFlag._kIsHeaderIndex, ui.SemanticsFlag.isHeader, ui.SemanticsFlag._kIsObscuredIndex, ui.SemanticsFlag.isObscured, ui.SemanticsFlag._kScopesRouteIndex, ui.SemanticsFlag.scopesRoute, ui.SemanticsFlag._kNamesRouteIndex, ui.SemanticsFlag.namesRoute, ui.SemanticsFlag._kIsHiddenIndex, ui.SemanticsFlag.isHidden, ui.SemanticsFlag._kIsImageIndex, ui.SemanticsFlag.isImage, ui.SemanticsFlag._kIsLiveRegionIndex, ui.SemanticsFlag.isLiveRegion, ui.SemanticsFlag._kHasToggledStateIndex, ui.SemanticsFlag.hasToggledState, ui.SemanticsFlag._kIsToggledIndex, ui.SemanticsFlag.isToggled, ui.SemanticsFlag._kHasImplicitScrollingIndex, ui.SemanticsFlag.hasImplicitScrolling, ui.SemanticsFlag._kIsMultilineIndex, ui.SemanticsFlag.isMultiline]);
    }
  });
  const _nodeUpdates$ = dart.privateName(ui, "_nodeUpdates");
  ui.SemanticsUpdateBuilder = class SemanticsUpdateBuilder extends core.Object {
    updateNode(opts) {
      let t4;
      let id = opts && 'id' in opts ? opts.id : null;
      let flags = opts && 'flags' in opts ? opts.flags : null;
      let actions = opts && 'actions' in opts ? opts.actions : null;
      let textSelectionBase = opts && 'textSelectionBase' in opts ? opts.textSelectionBase : null;
      let textSelectionExtent = opts && 'textSelectionExtent' in opts ? opts.textSelectionExtent : null;
      let scrollChildren = opts && 'scrollChildren' in opts ? opts.scrollChildren : null;
      let scrollIndex = opts && 'scrollIndex' in opts ? opts.scrollIndex : null;
      let scrollPosition = opts && 'scrollPosition' in opts ? opts.scrollPosition : null;
      let scrollExtentMax = opts && 'scrollExtentMax' in opts ? opts.scrollExtentMax : null;
      let scrollExtentMin = opts && 'scrollExtentMin' in opts ? opts.scrollExtentMin : null;
      let rect = opts && 'rect' in opts ? opts.rect : null;
      let label = opts && 'label' in opts ? opts.label : null;
      let hint = opts && 'hint' in opts ? opts.hint : null;
      let value = opts && 'value' in opts ? opts.value : null;
      let increasedValue = opts && 'increasedValue' in opts ? opts.increasedValue : null;
      let decreasedValue = opts && 'decreasedValue' in opts ? opts.decreasedValue : null;
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      let transform = opts && 'transform' in opts ? opts.transform : null;
      let elevation = opts && 'elevation' in opts ? opts.elevation : null;
      let thickness = opts && 'thickness' in opts ? opts.thickness : null;
      let childrenInTraversalOrder = opts && 'childrenInTraversalOrder' in opts ? opts.childrenInTraversalOrder : null;
      let childrenInHitTestOrder = opts && 'childrenInHitTestOrder' in opts ? opts.childrenInHitTestOrder : null;
      let customAcccessibilityActions = opts && 'customAcccessibilityActions' in opts ? opts.customAcccessibilityActions : null;
      let additionalActions = opts && 'additionalActions' in opts ? opts.additionalActions : null;
      let platformViewId = opts && 'platformViewId' in opts ? opts.platformViewId : null;
      if (transform[$length] !== 16) dart.throw(new core.ArgumentError.new("transform argument must have 16 entries."));
      this[_nodeUpdates$][$add](new src__engine.SemanticsNodeUpdate.new({id: id, flags: flags, actions: actions, textSelectionBase: textSelectionBase, textSelectionExtent: textSelectionExtent, scrollChildren: scrollChildren, scrollIndex: scrollIndex, scrollPosition: scrollPosition, scrollExtentMax: scrollExtentMax, scrollExtentMin: scrollExtentMin, rect: rect, label: label, hint: hint, value: value, increasedValue: increasedValue, decreasedValue: decreasedValue, textDirection: textDirection, transform: transform, elevation: elevation, thickness: thickness, childrenInTraversalOrder: childrenInTraversalOrder, childrenInHitTestOrder: childrenInHitTestOrder, additionalActions: (t4 = additionalActions, t4 == null ? customAcccessibilityActions : t4), platformViewId: platformViewId}));
    }
    updateCustomAction(opts) {
      let id = opts && 'id' in opts ? opts.id : null;
      let label = opts && 'label' in opts ? opts.label : null;
      let hint = opts && 'hint' in opts ? opts.hint : null;
      let overrideId = opts && 'overrideId' in opts ? opts.overrideId : -1;
    }
    build() {
      return new src__engine.SemanticsUpdate.new({nodeUpdates: this[_nodeUpdates$]});
    }
  };
  (ui.SemanticsUpdateBuilder.new = function() {
    this[_nodeUpdates$] = JSArrayOfSemanticsNodeUpdate().of([]);
    ;
  }).prototype = ui.SemanticsUpdateBuilder.prototype;
  dart.addTypeTests(ui.SemanticsUpdateBuilder);
  dart.setMethodSignature(ui.SemanticsUpdateBuilder, () => ({
    __proto__: dart.getMethods(ui.SemanticsUpdateBuilder.__proto__),
    updateNode: dart.fnType(dart.void, [], {actions: core.int, additionalActions: typed_data.Int32List, childrenInHitTestOrder: typed_data.Int32List, childrenInTraversalOrder: typed_data.Int32List, customAcccessibilityActions: typed_data.Int32List, decreasedValue: core.String, elevation: core.double, flags: core.int, hint: core.String, id: core.int, increasedValue: core.String, label: core.String, platformViewId: core.int, rect: ui.Rect, scrollChildren: core.int, scrollExtentMax: core.double, scrollExtentMin: core.double, scrollIndex: core.int, scrollPosition: core.double, textDirection: ui.TextDirection, textSelectionBase: core.int, textSelectionExtent: core.int, thickness: core.double, transform: typed_data.Float64List, value: core.String}),
    updateCustomAction: dart.fnType(dart.void, [], {hint: core.String, id: core.int, label: core.String, overrideId: core.int}),
    build: dart.fnType(ui.SemanticsUpdate, [])
  }));
  dart.setFieldSignature(ui.SemanticsUpdateBuilder, () => ({
    __proto__: dart.getFields(ui.SemanticsUpdateBuilder.__proto__),
    [_nodeUpdates$]: dart.finalFieldType(core.List$(src__engine.SemanticsNodeUpdate))
  }));
  ui.SemanticsUpdate = class SemanticsUpdate extends core.Object {};
  (ui.SemanticsUpdate[dart.mixinNew] = function() {
  }).prototype = ui.SemanticsUpdate.prototype;
  dart.addTypeTests(ui.SemanticsUpdate);
  ui.LocationStrategy = class LocationStrategy extends core.Object {};
  (ui.LocationStrategy.new = function() {
    ;
  }).prototype = ui.LocationStrategy.prototype;
  dart.addTypeTests(ui.LocationStrategy);
  let const$44;
  const _platformLocation$ = dart.privateName(ui, "_platformLocation");
  const _waitForPopState = dart.privateName(ui, "_waitForPopState");
  ui.HashLocationStrategy = class HashLocationStrategy extends ui.LocationStrategy {
    onPopState(fn) {
      this[_platformLocation$].onPopState(fn);
      return dart.fn(() => this[_platformLocation$].offPopState(fn), VoidTovoid());
    }
    get path() {
      let t4;
      let path = (t4 = this[_platformLocation$].hash, t4 == null ? "" : t4);
      path = path[$isEmpty] ? path : path[$substring](1);
      return ui.ensureLeading(path, "/");
    }
    prepareExternalUrl(url) {
      return url[$isEmpty] ? dart.str(this[_platformLocation$].pathname) + dart.str(this[_platformLocation$].search) : "#" + dart.str(url);
    }
    pushState(state, title, url) {
      this[_platformLocation$].pushState(state, title, this.prepareExternalUrl(url));
    }
    replaceState(state, title, url) {
      this[_platformLocation$].replaceState(state, title, this.prepareExternalUrl(url));
    }
    back() {
      this[_platformLocation$].back();
      return this[_waitForPopState]();
    }
    [_waitForPopState]() {
      let completer = CompleterOfvoid().new();
      let unsubscribe = null;
      unsubscribe = this.onPopState(dart.fn(_ => {
        unsubscribe();
        completer.complete();
      }, EventToNull()));
      return completer.future;
    }
  };
  (ui.HashLocationStrategy.new = function(_platformLocation) {
    if (_platformLocation === void 0) _platformLocation = const$44 || (const$44 = dart.const(new ui.BrowserPlatformLocation.new()));
    this[_platformLocation$] = _platformLocation;
    ui.HashLocationStrategy.__proto__.new.call(this);
    ;
  }).prototype = ui.HashLocationStrategy.prototype;
  dart.addTypeTests(ui.HashLocationStrategy);
  dart.setMethodSignature(ui.HashLocationStrategy, () => ({
    __proto__: dart.getMethods(ui.HashLocationStrategy.__proto__),
    onPopState: dart.fnType(dart.fnType(dart.void, []), [dart.fnType(dart.dynamic, [html.Event])]),
    prepareExternalUrl: dart.fnType(core.String, [core.String]),
    pushState: dart.fnType(dart.void, [dart.dynamic, core.String, core.String]),
    replaceState: dart.fnType(dart.void, [dart.dynamic, core.String, core.String]),
    back: dart.fnType(async.Future$(dart.void), []),
    [_waitForPopState]: dart.fnType(async.Future$(dart.void), [])
  }));
  dart.setGetterSignature(ui.HashLocationStrategy, () => ({
    __proto__: dart.getGetters(ui.HashLocationStrategy.__proto__),
    path: core.String
  }));
  dart.setFieldSignature(ui.HashLocationStrategy, () => ({
    __proto__: dart.getFields(ui.HashLocationStrategy.__proto__),
    [_platformLocation$]: dart.finalFieldType(ui.PlatformLocation)
  }));
  ui.PlatformLocation = class PlatformLocation extends core.Object {};
  (ui.PlatformLocation.new = function() {
    ;
  }).prototype = ui.PlatformLocation.prototype;
  dart.addTypeTests(ui.PlatformLocation);
  const _location = dart.privateName(ui, "_location");
  const _history = dart.privateName(ui, "_history");
  ui.BrowserPlatformLocation = class BrowserPlatformLocation extends ui.PlatformLocation {
    get [_location]() {
      return html.window[$location];
    }
    get [_history]() {
      return html.window.history;
    }
    onPopState(fn) {
      html.window[$addEventListener]("popstate", fn);
    }
    offPopState(fn) {
      html.window[$removeEventListener]("popstate", fn);
    }
    onHashChange(fn) {
      html.window[$addEventListener]("hashchange", fn);
    }
    offHashChange(fn) {
      html.window[$removeEventListener]("hashchange", fn);
    }
    get pathname() {
      return this[_location].pathname;
    }
    get search() {
      return this[_location].search;
    }
    get hash() {
      return this[_location].hash;
    }
    pushState(state, title, url) {
      this[_history][$pushState](state, title, url);
    }
    replaceState(state, title, url) {
      this[_history][$replaceState](state, title, url);
    }
    back() {
      this[_history].back();
    }
  };
  (ui.BrowserPlatformLocation.new = function() {
    ui.BrowserPlatformLocation.__proto__.new.call(this);
    ;
  }).prototype = ui.BrowserPlatformLocation.prototype;
  dart.addTypeTests(ui.BrowserPlatformLocation);
  dart.setMethodSignature(ui.BrowserPlatformLocation, () => ({
    __proto__: dart.getMethods(ui.BrowserPlatformLocation.__proto__),
    onPopState: dart.fnType(dart.void, [dart.fnType(dart.dynamic, [html.Event])]),
    offPopState: dart.fnType(dart.void, [dart.fnType(dart.dynamic, [html.Event])]),
    onHashChange: dart.fnType(dart.void, [dart.fnType(dart.dynamic, [html.Event])]),
    offHashChange: dart.fnType(dart.void, [dart.fnType(dart.dynamic, [html.Event])]),
    pushState: dart.fnType(dart.void, [dart.dynamic, core.String, core.String]),
    replaceState: dart.fnType(dart.void, [dart.dynamic, core.String, core.String]),
    back: dart.fnType(dart.void, [])
  }));
  dart.setGetterSignature(ui.BrowserPlatformLocation, () => ({
    __proto__: dart.getGetters(ui.BrowserPlatformLocation.__proto__),
    [_location]: html.Location,
    [_history]: html.History,
    pathname: core.String,
    search: core.String,
    hash: core.String
  }));
  ui.FontStyle = class FontStyle extends core.Object {
    toString() {
      return this[_name$0];
    }
  };
  (ui.FontStyle.new = function(index, _name) {
    this.index = index;
    this[_name$0] = _name;
    ;
  }).prototype = ui.FontStyle.prototype;
  dart.addTypeTests(ui.FontStyle);
  dart.setFieldSignature(ui.FontStyle, () => ({
    __proto__: dart.getFields(ui.FontStyle.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$0]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(ui.FontStyle, ['toString']);
  ui.FontStyle.normal = dart.const(new ui.FontStyle.new(0, "FontStyle.normal"));
  ui.FontStyle.italic = dart.const(new ui.FontStyle.new(1, "FontStyle.italic"));
  ui.FontStyle.values = dart.constList([ui.FontStyle.normal, ui.FontStyle.italic], ui.FontStyle);
  let const$45;
  ui.FontWeight = class FontWeight extends core.Object {
    get index() {
      return this[index$1];
    }
    set index(value) {
      super.index = value;
    }
    static lerp(a, b, t) {
      let t4, t4$, t4$0, t4$1;
      if (!(t != null)) dart.assertFailed();
      return ui.FontWeight.values[$_get](dart.asInt(ui.lerpDouble((t4$ = (t4 = a, t4 == null ? null : t4.index), t4$ == null ? ui.FontWeight.normal.index : t4$), (t4$1 = (t4$0 = b, t4$0 == null ? null : t4$0.index), t4$1 == null ? ui.FontWeight.normal.index : t4$1), t)[$round]()[$clamp](0, 8)));
    }
    toString() {
      return (const$45 || (const$45 = dart.constMap(core.int, core.String, [0, "FontWeight.w100", 1, "FontWeight.w200", 2, "FontWeight.w300", 3, "FontWeight.w400", 4, "FontWeight.w500", 5, "FontWeight.w600", 6, "FontWeight.w700", 7, "FontWeight.w800", 8, "FontWeight.w900"])))[$_get](this.index);
    }
  };
  (ui.FontWeight.__ = function(index) {
    this[index$1] = index;
    ;
  }).prototype = ui.FontWeight.prototype;
  dart.addTypeTests(ui.FontWeight);
  const index$1 = Symbol("FontWeight.index");
  dart.setFieldSignature(ui.FontWeight, () => ({
    __proto__: dart.getFields(ui.FontWeight.__proto__),
    index: dart.finalFieldType(core.int)
  }));
  dart.defineExtensionMethods(ui.FontWeight, ['toString']);
  dart.defineLazy(ui.FontWeight, {
    /*ui.FontWeight.w100*/get w100() {
      return dart.const(new ui.FontWeight.__(0));
    },
    /*ui.FontWeight.w200*/get w200() {
      return dart.const(new ui.FontWeight.__(1));
    },
    /*ui.FontWeight.w300*/get w300() {
      return dart.const(new ui.FontWeight.__(2));
    },
    /*ui.FontWeight.w400*/get w400() {
      return dart.const(new ui.FontWeight.__(3));
    },
    /*ui.FontWeight.w500*/get w500() {
      return dart.const(new ui.FontWeight.__(4));
    },
    /*ui.FontWeight.w600*/get w600() {
      return dart.const(new ui.FontWeight.__(5));
    },
    /*ui.FontWeight.w700*/get w700() {
      return dart.const(new ui.FontWeight.__(6));
    },
    /*ui.FontWeight.w800*/get w800() {
      return dart.const(new ui.FontWeight.__(7));
    },
    /*ui.FontWeight.w900*/get w900() {
      return dart.const(new ui.FontWeight.__(8));
    },
    /*ui.FontWeight.normal*/get normal() {
      return ui.FontWeight.w400;
    },
    /*ui.FontWeight.bold*/get bold() {
      return ui.FontWeight.w700;
    },
    /*ui.FontWeight.values*/get values() {
      return dart.constList([ui.FontWeight.w100, ui.FontWeight.w200, ui.FontWeight.w300, ui.FontWeight.w400, ui.FontWeight.w500, ui.FontWeight.w600, ui.FontWeight.w700, ui.FontWeight.w800, ui.FontWeight.w900], ui.FontWeight);
    }
  });
  ui.TextAlign = class TextAlign extends core.Object {
    toString() {
      return this[_name$0];
    }
  };
  (ui.TextAlign.new = function(index, _name) {
    this.index = index;
    this[_name$0] = _name;
    ;
  }).prototype = ui.TextAlign.prototype;
  dart.addTypeTests(ui.TextAlign);
  dart.setFieldSignature(ui.TextAlign, () => ({
    __proto__: dart.getFields(ui.TextAlign.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$0]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(ui.TextAlign, ['toString']);
  ui.TextAlign.left = dart.const(new ui.TextAlign.new(0, "TextAlign.left"));
  ui.TextAlign.right = dart.const(new ui.TextAlign.new(1, "TextAlign.right"));
  ui.TextAlign.center = dart.const(new ui.TextAlign.new(2, "TextAlign.center"));
  ui.TextAlign.justify = dart.const(new ui.TextAlign.new(3, "TextAlign.justify"));
  ui.TextAlign.start = dart.const(new ui.TextAlign.new(4, "TextAlign.start"));
  ui.TextAlign.end = dart.const(new ui.TextAlign.new(5, "TextAlign.end"));
  ui.TextAlign.values = dart.constList([ui.TextAlign.left, ui.TextAlign.right, ui.TextAlign.center, ui.TextAlign.justify, ui.TextAlign.start, ui.TextAlign.end], ui.TextAlign);
  ui.TextBaseline = class TextBaseline extends core.Object {
    toString() {
      return this[_name$0];
    }
  };
  (ui.TextBaseline.new = function(index, _name) {
    this.index = index;
    this[_name$0] = _name;
    ;
  }).prototype = ui.TextBaseline.prototype;
  dart.addTypeTests(ui.TextBaseline);
  dart.setFieldSignature(ui.TextBaseline, () => ({
    __proto__: dart.getFields(ui.TextBaseline.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$0]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(ui.TextBaseline, ['toString']);
  ui.TextBaseline.alphabetic = dart.const(new ui.TextBaseline.new(0, "TextBaseline.alphabetic"));
  ui.TextBaseline.ideographic = dart.const(new ui.TextBaseline.new(1, "TextBaseline.ideographic"));
  ui.TextBaseline.values = dart.constList([ui.TextBaseline.alphabetic, ui.TextBaseline.ideographic], ui.TextBaseline);
  const _mask$ = dart.privateName(ui, "_mask");
  ui.TextDecoration = class TextDecoration extends core.Object {
    static combine(decorations) {
      let mask = 0;
      for (let decoration of decorations)
        mask = (mask | dart.notNull(decoration[_mask$])) >>> 0;
      return new ui.TextDecoration.__(mask);
    }
    contains(other) {
      return (dart.notNull(this[_mask$]) | dart.notNull(other[_mask$])) >>> 0 === this[_mask$];
    }
    _equals(other) {
      if (other == null) return false;
      if (!ui.TextDecoration.is(other)) return false;
      let typedOther = ui.TextDecoration._check(other);
      return this[_mask$] == typedOther[_mask$];
    }
    get hashCode() {
      return dart.hashCode(this[_mask$]);
    }
    toString() {
      if (this[_mask$] === 0) return "TextDecoration.none";
      let values = JSArrayOfString().of([]);
      if ((dart.notNull(this[_mask$]) & dart.notNull(ui.TextDecoration.underline[_mask$])) !== 0) values[$add]("underline");
      if ((dart.notNull(this[_mask$]) & dart.notNull(ui.TextDecoration.overline[_mask$])) !== 0) values[$add]("overline");
      if ((dart.notNull(this[_mask$]) & dart.notNull(ui.TextDecoration.lineThrough[_mask$])) !== 0) values[$add]("lineThrough");
      if (values[$length] === 1) return "TextDecoration." + dart.str(values[$_get](0));
      return "TextDecoration.combine([" + dart.str(values[$join](", ")) + "])";
    }
  };
  (ui.TextDecoration.__ = function(_mask) {
    this[_mask$] = _mask;
    ;
  }).prototype = ui.TextDecoration.prototype;
  dart.addTypeTests(ui.TextDecoration);
  dart.setMethodSignature(ui.TextDecoration, () => ({
    __proto__: dart.getMethods(ui.TextDecoration.__proto__),
    contains: dart.fnType(core.bool, [ui.TextDecoration])
  }));
  dart.setFieldSignature(ui.TextDecoration, () => ({
    __proto__: dart.getFields(ui.TextDecoration.__proto__),
    [_mask$]: dart.finalFieldType(core.int)
  }));
  dart.defineExtensionMethods(ui.TextDecoration, ['_equals', 'toString']);
  dart.defineExtensionAccessors(ui.TextDecoration, ['hashCode']);
  dart.defineLazy(ui.TextDecoration, {
    /*ui.TextDecoration.none*/get none() {
      return dart.const(new ui.TextDecoration.__(0));
    },
    /*ui.TextDecoration.underline*/get underline() {
      return dart.const(new ui.TextDecoration.__(1));
    },
    /*ui.TextDecoration.overline*/get overline() {
      return dart.const(new ui.TextDecoration.__(2));
    },
    /*ui.TextDecoration.lineThrough*/get lineThrough() {
      return dart.const(new ui.TextDecoration.__(4));
    }
  });
  ui.TextDecorationStyle = class TextDecorationStyle extends core.Object {
    toString() {
      return this[_name$0];
    }
  };
  (ui.TextDecorationStyle.new = function(index, _name) {
    this.index = index;
    this[_name$0] = _name;
    ;
  }).prototype = ui.TextDecorationStyle.prototype;
  dart.addTypeTests(ui.TextDecorationStyle);
  dart.setFieldSignature(ui.TextDecorationStyle, () => ({
    __proto__: dart.getFields(ui.TextDecorationStyle.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$0]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(ui.TextDecorationStyle, ['toString']);
  ui.TextDecorationStyle.solid = dart.const(new ui.TextDecorationStyle.new(0, "TextDecorationStyle.solid"));
  ui.TextDecorationStyle.double = dart.const(new ui.TextDecorationStyle.new(1, "TextDecorationStyle.double"));
  ui.TextDecorationStyle.dotted = dart.const(new ui.TextDecorationStyle.new(2, "TextDecorationStyle.dotted"));
  ui.TextDecorationStyle.dashed = dart.const(new ui.TextDecorationStyle.new(3, "TextDecorationStyle.dashed"));
  ui.TextDecorationStyle.wavy = dart.const(new ui.TextDecorationStyle.new(4, "TextDecorationStyle.wavy"));
  ui.TextDecorationStyle.values = dart.constList([ui.TextDecorationStyle.solid, ui.TextDecorationStyle.double, ui.TextDecorationStyle.dotted, ui.TextDecorationStyle.dashed, ui.TextDecorationStyle.wavy], ui.TextDecorationStyle);
  const _decoration = dart.privateName(ui, "_decoration");
  const _decorationColor = dart.privateName(ui, "_decorationColor");
  const _decorationStyle = dart.privateName(ui, "_decorationStyle");
  const _fontWeight = dart.privateName(ui, "_fontWeight");
  const _fontStyle = dart.privateName(ui, "_fontStyle");
  const _textBaseline = dart.privateName(ui, "_textBaseline");
  const _webOnlyIsFontFamilyProvided = dart.privateName(ui, "_webOnlyIsFontFamilyProvided");
  const _fontFamily = dart.privateName(ui, "_fontFamily");
  const _fontFamilyFallback = dart.privateName(ui, "_fontFamilyFallback");
  const _fontSize = dart.privateName(ui, "_fontSize");
  const _letterSpacing = dart.privateName(ui, "_letterSpacing");
  const _wordSpacing = dart.privateName(ui, "_wordSpacing");
  const _height = dart.privateName(ui, "_height");
  const _locale = dart.privateName(ui, "_locale");
  const _background = dart.privateName(ui, "_background");
  const _foreground = dart.privateName(ui, "_foreground");
  const _shadows = dart.privateName(ui, "_shadows");
  const _effectiveFontFamily = dart.privateName(ui, "_effectiveFontFamily");
  ui.TextStyle = class TextStyle extends core.Object {
    get [_effectiveFontFamily]() {
      if (dart.test(src__engine.assertionsEnabled)) {
        if (dart.test(src__engine.domRenderer.debugIsInWidgetTest)) {
          return "Ahem";
        }
      }
      if (this[_fontFamily] == null || this[_fontFamily][$isEmpty]) {
        return src__engine.DomRenderer.defaultFontFamily;
      }
      return this[_fontFamily];
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) return true;
      if (!ui.TextStyle.is(other)) return false;
      let typedOther = ui.TextStyle._check(other);
      return dart.equals(this[_color], typedOther[_color]) && dart.equals(this[_decoration], typedOther[_decoration]) && dart.equals(this[_decorationColor], typedOther[_decorationColor]) && dart.equals(this[_decorationStyle], typedOther[_decorationStyle]) && dart.equals(this[_fontWeight], typedOther[_fontWeight]) && dart.equals(this[_fontStyle], typedOther[_fontStyle]) && dart.equals(this[_textBaseline], typedOther[_textBaseline]) && this[_fontFamily] == typedOther[_fontFamily] && this[_fontSize] == typedOther[_fontSize] && this[_letterSpacing] == typedOther[_letterSpacing] && this[_wordSpacing] == typedOther[_wordSpacing] && this[_height] == typedOther[_height] && dart.equals(this[_locale], typedOther[_locale]) && dart.equals(this[_background], typedOther[_background]) && dart.equals(this[_foreground], typedOther[_foreground]) && dart.test(ui._listEquals(ui.Shadow, this[_shadows], typedOther[_shadows])) && dart.test(ui._listEquals(core.String, this[_fontFamilyFallback], typedOther[_fontFamilyFallback]));
    }
    get hashCode() {
      return ui.hashValues(this[_color], this[_decoration], this[_decorationColor], this[_decorationStyle], this[_fontWeight], this[_fontStyle], this[_textBaseline], this[_fontFamily], this[_fontFamilyFallback], this[_fontSize], this[_letterSpacing], this[_wordSpacing], this[_height], this[_locale], this[_background], this[_foreground], this[_shadows]);
    }
    toString() {
      let t4, t4$, t4$0, t4$1, t4$2, t4$3, t4$4, t4$5, t4$6, t4$7;
      if (dart.test(src__engine.assertionsEnabled)) {
        return "TextStyle(" + "color: " + dart.str(this[_color] != null ? this[_color] : "unspecified") + ", " + "decoration: " + dart.str((t4 = this[_decoration], t4 == null ? "unspecified" : t4)) + ", " + "decorationColor: " + dart.str((t4$ = this[_decorationColor], t4$ == null ? "unspecified" : t4$)) + ", " + "decorationStyle: " + dart.str((t4$0 = this[_decorationStyle], t4$0 == null ? "unspecified" : t4$0)) + ", " + "fontWeight: " + dart.str((t4$1 = this[_fontWeight], t4$1 == null ? "unspecified" : t4$1)) + ", " + "fontStyle: " + dart.str((t4$2 = this[_fontStyle], t4$2 == null ? "unspecified" : t4$2)) + ", " + "textBaseline: " + dart.str((t4$3 = this[_textBaseline], t4$3 == null ? "unspecified" : t4$3)) + ", " + "fontFamily: " + dart.str(dart.test(this[_webOnlyIsFontFamilyProvided]) && this[_fontFamily] != null ? this[_fontFamily] : "unspecified") + ", " + "fontFamilyFallback: " + dart.str(dart.test(this[_webOnlyIsFontFamilyProvided]) && this[_fontFamilyFallback] != null && dart.test(this[_fontFamilyFallback][$isNotEmpty]) ? this[_fontFamilyFallback] : "unspecified") + ", " + "fontSize: " + (this[_fontSize] != null ? this[_fontSize][$toStringAsFixed](1) : "unspecified") + ", " + "letterSpacing: " + (this[_letterSpacing] != null ? dart.str(this[_letterSpacing]) + "x" : "unspecified") + ", " + "wordSpacing: " + (this[_wordSpacing] != null ? dart.str(this[_wordSpacing]) + "x" : "unspecified") + ", " + "height: " + (this[_height] != null ? this[_height][$toStringAsFixed](1) + "x" : "unspecified") + ", " + "locale: " + dart.str((t4$4 = this[_locale], t4$4 == null ? "unspecified" : t4$4)) + ", " + "background: " + dart.str((t4$5 = this[_background], t4$5 == null ? "unspecified" : t4$5)) + ", " + "foreground: " + dart.str((t4$6 = this[_foreground], t4$6 == null ? "unspecified" : t4$6)) + ", " + "shadows: " + dart.str((t4$7 = this[_shadows], t4$7 == null ? "unspecified" : t4$7)) + ")";
      } else {
        return super[$toString]();
      }
    }
  };
  (ui.TextStyle.new = function(opts) {
    let t4;
    let color = opts && 'color' in opts ? opts.color : null;
    let decoration = opts && 'decoration' in opts ? opts.decoration : null;
    let decorationColor = opts && 'decorationColor' in opts ? opts.decorationColor : null;
    let decorationStyle = opts && 'decorationStyle' in opts ? opts.decorationStyle : null;
    let decorationThickness = opts && 'decorationThickness' in opts ? opts.decorationThickness : null;
    let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
    let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
    let textBaseline = opts && 'textBaseline' in opts ? opts.textBaseline : null;
    let fontFamily = opts && 'fontFamily' in opts ? opts.fontFamily : null;
    let fontFamilyFallback = opts && 'fontFamilyFallback' in opts ? opts.fontFamilyFallback : null;
    let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
    let letterSpacing = opts && 'letterSpacing' in opts ? opts.letterSpacing : null;
    let wordSpacing = opts && 'wordSpacing' in opts ? opts.wordSpacing : null;
    let height = opts && 'height' in opts ? opts.height : null;
    let locale = opts && 'locale' in opts ? opts.locale : null;
    let background = opts && 'background' in opts ? opts.background : null;
    let foreground = opts && 'foreground' in opts ? opts.foreground : null;
    let shadows = opts && 'shadows' in opts ? opts.shadows : null;
    if (!(color == null || foreground == null)) dart.assertFailed("Cannot provide both a color and a foreground\n" + "The color argument is just a shorthand for \"foreground: new Paint()..color = color\".");
    this[_color] = color;
    this[_decoration] = decoration;
    this[_decorationColor] = decorationColor;
    this[_decorationStyle] = decorationStyle;
    this[_fontWeight] = fontWeight;
    this[_fontStyle] = fontStyle;
    this[_textBaseline] = textBaseline;
    this[_webOnlyIsFontFamilyProvided] = fontFamily != null;
    this[_fontFamily] = (t4 = fontFamily, t4 == null ? "" : t4);
    this[_fontFamilyFallback] = fontFamilyFallback;
    this[_fontSize] = fontSize;
    this[_letterSpacing] = letterSpacing;
    this[_wordSpacing] = wordSpacing;
    this[_height] = height;
    this[_locale] = locale;
    this[_background] = background;
    this[_foreground] = foreground;
    this[_shadows] = shadows;
    ;
  }).prototype = ui.TextStyle.prototype;
  dart.addTypeTests(ui.TextStyle);
  dart.setGetterSignature(ui.TextStyle, () => ({
    __proto__: dart.getGetters(ui.TextStyle.__proto__),
    [_effectiveFontFamily]: core.String
  }));
  dart.setFieldSignature(ui.TextStyle, () => ({
    __proto__: dart.getFields(ui.TextStyle.__proto__),
    [_color]: dart.finalFieldType(ui.Color),
    [_decoration]: dart.finalFieldType(ui.TextDecoration),
    [_decorationColor]: dart.finalFieldType(ui.Color),
    [_decorationStyle]: dart.finalFieldType(ui.TextDecorationStyle),
    [_fontWeight]: dart.finalFieldType(ui.FontWeight),
    [_fontStyle]: dart.finalFieldType(ui.FontStyle),
    [_textBaseline]: dart.finalFieldType(ui.TextBaseline),
    [_webOnlyIsFontFamilyProvided]: dart.finalFieldType(core.bool),
    [_fontFamily]: dart.finalFieldType(core.String),
    [_fontFamilyFallback]: dart.finalFieldType(core.List$(core.String)),
    [_fontSize]: dart.finalFieldType(core.double),
    [_letterSpacing]: dart.finalFieldType(core.double),
    [_wordSpacing]: dart.finalFieldType(core.double),
    [_height]: dart.finalFieldType(core.double),
    [_locale]: dart.finalFieldType(ui.Locale),
    [_background]: dart.finalFieldType(ui.Paint),
    [_foreground]: dart.finalFieldType(ui.Paint),
    [_shadows]: dart.finalFieldType(core.List$(ui.Shadow))
  }));
  dart.defineExtensionMethods(ui.TextStyle, ['_equals', 'toString']);
  dart.defineExtensionAccessors(ui.TextStyle, ['hashCode']);
  const _textAlign = dart.privateName(ui, "_textAlign");
  const _textDirection$ = dart.privateName(ui, "_textDirection");
  const _maxLines = dart.privateName(ui, "_maxLines");
  const _strutStyle = dart.privateName(ui, "_strutStyle");
  const _ellipsis = dart.privateName(ui, "_ellipsis");
  const _forceStrutHeight = dart.privateName(ui, "_forceStrutHeight");
  const _webOnlyLineHeight = dart.privateName(ui, "_webOnlyLineHeight");
  ui.ParagraphStyle = class ParagraphStyle extends core.Object {
    get [_effectiveFontFamily]() {
      if (dart.test(src__engine.assertionsEnabled)) {
        if (dart.test(src__engine.domRenderer.debugIsInWidgetTest)) {
          return "Ahem";
        }
      }
      if (this[_fontFamily] == null || this[_fontFamily][$isEmpty]) {
        return src__engine.DomRenderer.defaultFontFamily;
      }
      return this[_fontFamily];
    }
    get [_webOnlyLineHeight]() {
      if (this[_strutStyle] == null || this[_strutStyle][_height] == null) {
        return this[_height];
      }
      if (dart.equals(this[_strutStyle][_forceStrutHeight], true)) {
        return this[_strutStyle][_height];
      }
      return math.max(core.double, this[_strutStyle][_height], this[_height]);
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) return true;
      if (!dart.equals(dart.runtimeType(other), this[$runtimeType])) return false;
      let typedOther = ui.ParagraphStyle._check(other);
      return dart.equals(this[_textAlign], typedOther[_textAlign]) || dart.equals(this[_textDirection$], typedOther[_textDirection$]) || dart.equals(this[_fontWeight], typedOther[_fontWeight]) || dart.equals(this[_fontStyle], typedOther[_fontStyle]) || this[_maxLines] == typedOther[_maxLines] || this[_fontFamily] == typedOther[_fontFamily] || this[_fontSize] == typedOther[_fontSize] || this[_height] == typedOther[_height] || this[_ellipsis] == typedOther[_ellipsis] || dart.equals(this[_locale], typedOther[_locale]);
    }
    get hashCode() {
      return ui.hashValues(this[_fontFamily], this[_fontSize], this[_height], this[_ellipsis], this[_locale]);
    }
    toString() {
      let t4, t4$, t4$0, t4$1, t4$2, t4$3, t4$4;
      if (dart.test(src__engine.assertionsEnabled)) {
        return dart.str(this[$runtimeType]) + "(" + "textAlign: " + dart.str((t4 = this[_textAlign], t4 == null ? "unspecified" : t4)) + ", " + "textDirection: " + dart.str((t4$ = this[_textDirection$], t4$ == null ? "unspecified" : t4$)) + ", " + "fontWeight: " + dart.str((t4$0 = this[_fontWeight], t4$0 == null ? "unspecified" : t4$0)) + ", " + "fontStyle: " + dart.str((t4$1 = this[_fontStyle], t4$1 == null ? "unspecified" : t4$1)) + ", " + "maxLines: " + dart.str((t4$2 = this[_maxLines], t4$2 == null ? "unspecified" : t4$2)) + ", " + "fontFamily: " + dart.str((t4$3 = this[_fontFamily], t4$3 == null ? "unspecified" : t4$3)) + ", " + "fontSize: " + (this[_fontSize] != null ? this[_fontSize][$toStringAsFixed](1) : "unspecified") + ", " + "height: " + (this[_height] != null ? this[_height][$toStringAsFixed](1) + "x" : "unspecified") + ", " + "ellipsis: " + (this[_ellipsis] != null ? "\"" + dart.str(this[_ellipsis]) + "\"" : "unspecified") + ", " + "locale: " + dart.str((t4$4 = this[_locale], t4$4 == null ? "unspecified" : t4$4)) + ")";
      } else {
        return super[$toString]();
      }
    }
  };
  (ui.ParagraphStyle.new = function(opts) {
    let textAlign = opts && 'textAlign' in opts ? opts.textAlign : null;
    let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
    let maxLines = opts && 'maxLines' in opts ? opts.maxLines : null;
    let fontFamily = opts && 'fontFamily' in opts ? opts.fontFamily : null;
    let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
    let height = opts && 'height' in opts ? opts.height : null;
    let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
    let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
    let strutStyle = opts && 'strutStyle' in opts ? opts.strutStyle : null;
    let ellipsis = opts && 'ellipsis' in opts ? opts.ellipsis : null;
    let locale = opts && 'locale' in opts ? opts.locale : null;
    this[_textAlign] = textAlign;
    this[_textDirection$] = textDirection;
    this[_fontWeight] = fontWeight;
    this[_fontStyle] = fontStyle;
    this[_maxLines] = maxLines;
    this[_fontFamily] = fontFamily;
    this[_fontSize] = fontSize;
    this[_height] = height;
    this[_strutStyle] = strutStyle;
    this[_ellipsis] = ellipsis;
    this[_locale] = locale;
    ;
  }).prototype = ui.ParagraphStyle.prototype;
  dart.addTypeTests(ui.ParagraphStyle);
  dart.setGetterSignature(ui.ParagraphStyle, () => ({
    __proto__: dart.getGetters(ui.ParagraphStyle.__proto__),
    [_effectiveFontFamily]: core.String,
    [_webOnlyLineHeight]: core.double
  }));
  dart.setFieldSignature(ui.ParagraphStyle, () => ({
    __proto__: dart.getFields(ui.ParagraphStyle.__proto__),
    [_textAlign]: dart.finalFieldType(ui.TextAlign),
    [_textDirection$]: dart.finalFieldType(ui.TextDirection),
    [_fontWeight]: dart.finalFieldType(ui.FontWeight),
    [_fontStyle]: dart.finalFieldType(ui.FontStyle),
    [_maxLines]: dart.finalFieldType(core.int),
    [_fontFamily]: dart.finalFieldType(core.String),
    [_fontSize]: dart.finalFieldType(core.double),
    [_height]: dart.finalFieldType(core.double),
    [_strutStyle]: dart.finalFieldType(ui.StrutStyle),
    [_ellipsis]: dart.finalFieldType(core.String),
    [_locale]: dart.finalFieldType(ui.Locale)
  }));
  dart.defineExtensionMethods(ui.ParagraphStyle, ['_equals', 'toString']);
  dart.defineExtensionAccessors(ui.ParagraphStyle, ['hashCode']);
  const _leading = dart.privateName(ui, "_leading");
  ui.StrutStyle = class StrutStyle extends core.Object {
    _equals(other) {
      if (other == null) return false;
      if (this === other) return true;
      if (!dart.equals(dart.runtimeType(other), this[$runtimeType])) return false;
      let typedOther = ui.StrutStyle._check(other);
      return this[_fontFamily] == typedOther[_fontFamily] && this[_fontSize] == typedOther[_fontSize] && this[_height] == typedOther[_height] && this[_leading] == typedOther[_leading] && dart.equals(this[_fontWeight], typedOther[_fontWeight]) && dart.equals(this[_fontStyle], typedOther[_fontStyle]) && dart.equals(this[_forceStrutHeight], typedOther[_forceStrutHeight]) && dart.test(ui._listEquals(core.String, this[_fontFamilyFallback], typedOther[_fontFamilyFallback]));
    }
    get hashCode() {
      return ui.hashValues(this[_fontFamily], this[_fontFamilyFallback], this[_fontSize], this[_height], this[_leading], this[_fontWeight], this[_fontStyle], this[_forceStrutHeight]);
    }
  };
  (ui.StrutStyle.new = function(opts) {
    let fontFamily = opts && 'fontFamily' in opts ? opts.fontFamily : null;
    let fontFamilyFallback = opts && 'fontFamilyFallback' in opts ? opts.fontFamilyFallback : null;
    let fontSize = opts && 'fontSize' in opts ? opts.fontSize : null;
    let height = opts && 'height' in opts ? opts.height : null;
    let leading = opts && 'leading' in opts ? opts.leading : null;
    let fontWeight = opts && 'fontWeight' in opts ? opts.fontWeight : null;
    let fontStyle = opts && 'fontStyle' in opts ? opts.fontStyle : null;
    let forceStrutHeight = opts && 'forceStrutHeight' in opts ? opts.forceStrutHeight : null;
    this[_fontFamily] = fontFamily;
    this[_fontFamilyFallback] = fontFamilyFallback;
    this[_fontSize] = fontSize;
    this[_height] = height;
    this[_leading] = leading;
    this[_fontWeight] = fontWeight;
    this[_fontStyle] = fontStyle;
    this[_forceStrutHeight] = forceStrutHeight;
    ;
  }).prototype = ui.StrutStyle.prototype;
  dart.addTypeTests(ui.StrutStyle);
  dart.setFieldSignature(ui.StrutStyle, () => ({
    __proto__: dart.getFields(ui.StrutStyle.__proto__),
    [_fontFamily]: dart.finalFieldType(core.String),
    [_fontFamilyFallback]: dart.finalFieldType(core.List$(core.String)),
    [_fontSize]: dart.finalFieldType(core.double),
    [_height]: dart.finalFieldType(core.double),
    [_leading]: dart.finalFieldType(core.double),
    [_fontWeight]: dart.finalFieldType(ui.FontWeight),
    [_fontStyle]: dart.finalFieldType(ui.FontStyle),
    [_forceStrutHeight]: dart.finalFieldType(core.bool)
  }));
  dart.defineExtensionMethods(ui.StrutStyle, ['_equals']);
  dart.defineExtensionAccessors(ui.StrutStyle, ['hashCode']);
  ui.TextDirection = class TextDirection extends core.Object {
    toString() {
      return this[_name$0];
    }
  };
  (ui.TextDirection.new = function(index, _name) {
    this.index = index;
    this[_name$0] = _name;
    ;
  }).prototype = ui.TextDirection.prototype;
  dart.addTypeTests(ui.TextDirection);
  dart.setFieldSignature(ui.TextDirection, () => ({
    __proto__: dart.getFields(ui.TextDirection.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$0]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(ui.TextDirection, ['toString']);
  ui.TextDirection.rtl = dart.const(new ui.TextDirection.new(0, "TextDirection.rtl"));
  ui.TextDirection.ltr = dart.const(new ui.TextDirection.new(1, "TextDirection.ltr"));
  ui.TextDirection.values = dart.constList([ui.TextDirection.rtl, ui.TextDirection.ltr], ui.TextDirection);
  ui.TextBox = class TextBox extends core.Object {
    get left() {
      return this[left$1];
    }
    set left(value) {
      super.left = value;
    }
    get top() {
      return this[top$1];
    }
    set top(value) {
      super.top = value;
    }
    get right() {
      return this[right$1];
    }
    set right(value) {
      super.right = value;
    }
    get bottom() {
      return this[bottom$1];
    }
    set bottom(value) {
      super.bottom = value;
    }
    get direction() {
      return this[direction$];
    }
    set direction(value) {
      super.direction = value;
    }
    toRect() {
      return new ui.Rect.fromLTRB(this.left, this.top, this.right, this.bottom);
    }
    get start() {
      return dart.equals(this.direction, ui.TextDirection.ltr) ? this.left : this.right;
    }
    get end() {
      return dart.equals(this.direction, ui.TextDirection.ltr) ? this.right : this.left;
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) return true;
      if (!dart.equals(dart.runtimeType(other), this[$runtimeType])) return false;
      let typedOther = ui.TextBox._check(other);
      return typedOther.left == this.left && typedOther.top == this.top && typedOther.right == this.right && typedOther.bottom == this.bottom && dart.equals(typedOther.direction, this.direction);
    }
    get hashCode() {
      return ui.hashValues(this.left, this.top, this.right, this.bottom, this.direction);
    }
    toString() {
      if (dart.test(src__engine.assertionsEnabled)) {
        return "TextBox.fromLTRBD(" + this.left[$toStringAsFixed](1) + ", " + this.top[$toStringAsFixed](1) + ", " + this.right[$toStringAsFixed](1) + ", " + this.bottom[$toStringAsFixed](1) + ", " + dart.str(this.direction) + ")";
      }
      return super[$toString]();
    }
  };
  (ui.TextBox.fromLTRBD = function(left, top, right, bottom, direction) {
    this[left$1] = left;
    this[top$1] = top;
    this[right$1] = right;
    this[bottom$1] = bottom;
    this[direction$] = direction;
    ;
  }).prototype = ui.TextBox.prototype;
  (ui.TextBox.__ = function(left, top, right, bottom, directionIndex) {
    this[left$1] = left;
    this[top$1] = top;
    this[right$1] = right;
    this[bottom$1] = bottom;
    this[direction$] = ui.TextDirection.values[$_get](directionIndex);
    ;
  }).prototype = ui.TextBox.prototype;
  dart.addTypeTests(ui.TextBox);
  const left$1 = Symbol("TextBox.left");
  const top$1 = Symbol("TextBox.top");
  const right$1 = Symbol("TextBox.right");
  const bottom$1 = Symbol("TextBox.bottom");
  const direction$ = Symbol("TextBox.direction");
  dart.setMethodSignature(ui.TextBox, () => ({
    __proto__: dart.getMethods(ui.TextBox.__proto__),
    toRect: dart.fnType(ui.Rect, [])
  }));
  dart.setGetterSignature(ui.TextBox, () => ({
    __proto__: dart.getGetters(ui.TextBox.__proto__),
    start: core.double,
    end: core.double
  }));
  dart.setFieldSignature(ui.TextBox, () => ({
    __proto__: dart.getFields(ui.TextBox.__proto__),
    left: dart.finalFieldType(core.double),
    top: dart.finalFieldType(core.double),
    right: dart.finalFieldType(core.double),
    bottom: dart.finalFieldType(core.double),
    direction: dart.finalFieldType(ui.TextDirection)
  }));
  dart.defineExtensionMethods(ui.TextBox, ['_equals', 'toString']);
  dart.defineExtensionAccessors(ui.TextBox, ['hashCode']);
  ui.TextAffinity = class TextAffinity extends core.Object {
    toString() {
      return this[_name$0];
    }
  };
  (ui.TextAffinity.new = function(index, _name) {
    this.index = index;
    this[_name$0] = _name;
    ;
  }).prototype = ui.TextAffinity.prototype;
  dart.addTypeTests(ui.TextAffinity);
  dart.setFieldSignature(ui.TextAffinity, () => ({
    __proto__: dart.getFields(ui.TextAffinity.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$0]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(ui.TextAffinity, ['toString']);
  ui.TextAffinity.upstream = dart.const(new ui.TextAffinity.new(0, "TextAffinity.upstream"));
  ui.TextAffinity.downstream = dart.const(new ui.TextAffinity.new(1, "TextAffinity.downstream"));
  ui.TextAffinity.values = dart.constList([ui.TextAffinity.upstream, ui.TextAffinity.downstream], ui.TextAffinity);
  ui.TextPosition = class TextPosition extends core.Object {
    get offset() {
      return this[offset$4];
    }
    set offset(value) {
      super.offset = value;
    }
    get affinity() {
      return this[affinity$];
    }
    set affinity(value) {
      super.affinity = value;
    }
    _equals(other) {
      if (other == null) return false;
      if (!dart.equals(dart.runtimeType(other), this[$runtimeType])) return false;
      let typedOther = ui.TextPosition._check(other);
      return typedOther.offset == this.offset && dart.equals(typedOther.affinity, this.affinity);
    }
    get hashCode() {
      return ui.hashValues(this.offset, this.affinity);
    }
    toString() {
      return dart.str(this[$runtimeType]) + "(offset: " + dart.str(this.offset) + ", affinity: " + dart.str(this.affinity) + ")";
    }
  };
  (ui.TextPosition.new = function(opts) {
    let offset = opts && 'offset' in opts ? opts.offset : null;
    let affinity = opts && 'affinity' in opts ? opts.affinity : ui.TextAffinity.downstream;
    this[offset$4] = offset;
    this[affinity$] = affinity;
    if (!(offset != null)) dart.assertFailed();
    if (!(affinity != null)) dart.assertFailed();
    ;
  }).prototype = ui.TextPosition.prototype;
  dart.addTypeTests(ui.TextPosition);
  const offset$4 = Symbol("TextPosition.offset");
  const affinity$ = Symbol("TextPosition.affinity");
  dart.setFieldSignature(ui.TextPosition, () => ({
    __proto__: dart.getFields(ui.TextPosition.__proto__),
    offset: dart.finalFieldType(core.int),
    affinity: dart.finalFieldType(ui.TextAffinity)
  }));
  dart.defineExtensionMethods(ui.TextPosition, ['_equals', 'toString']);
  dart.defineExtensionAccessors(ui.TextPosition, ['hashCode']);
  ui.ParagraphConstraints = class ParagraphConstraints extends core.Object {
    get width() {
      return this[width$2];
    }
    set width(value) {
      super.width = value;
    }
    _equals(other) {
      if (other == null) return false;
      if (!dart.equals(dart.runtimeType(other), this[$runtimeType])) return false;
      let typedOther = ui.ParagraphConstraints._check(other);
      return typedOther.width == this.width;
    }
    get hashCode() {
      return dart.hashCode(this.width);
    }
    toString() {
      return dart.str(this[$runtimeType]) + "(width: " + dart.str(this.width) + ")";
    }
  };
  (ui.ParagraphConstraints.new = function(opts) {
    let width = opts && 'width' in opts ? opts.width : null;
    this[width$2] = width;
    if (!(width != null)) dart.assertFailed();
    ;
  }).prototype = ui.ParagraphConstraints.prototype;
  dart.addTypeTests(ui.ParagraphConstraints);
  const width$2 = Symbol("ParagraphConstraints.width");
  dart.setFieldSignature(ui.ParagraphConstraints, () => ({
    __proto__: dart.getFields(ui.ParagraphConstraints.__proto__),
    width: dart.finalFieldType(core.double)
  }));
  dart.defineExtensionMethods(ui.ParagraphConstraints, ['_equals', 'toString']);
  dart.defineExtensionAccessors(ui.ParagraphConstraints, ['hashCode']);
  ui.BoxHeightStyle = class BoxHeightStyle extends core.Object {
    toString() {
      return this[_name$0];
    }
  };
  (ui.BoxHeightStyle.new = function(index, _name) {
    this.index = index;
    this[_name$0] = _name;
    ;
  }).prototype = ui.BoxHeightStyle.prototype;
  dart.addTypeTests(ui.BoxHeightStyle);
  dart.setFieldSignature(ui.BoxHeightStyle, () => ({
    __proto__: dart.getFields(ui.BoxHeightStyle.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$0]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(ui.BoxHeightStyle, ['toString']);
  ui.BoxHeightStyle.tight = dart.const(new ui.BoxHeightStyle.new(0, "BoxHeightStyle.tight"));
  ui.BoxHeightStyle.max = dart.const(new ui.BoxHeightStyle.new(1, "BoxHeightStyle.max"));
  ui.BoxHeightStyle.includeLineSpacingMiddle = dart.const(new ui.BoxHeightStyle.new(2, "BoxHeightStyle.includeLineSpacingMiddle"));
  ui.BoxHeightStyle.includeLineSpacingTop = dart.const(new ui.BoxHeightStyle.new(3, "BoxHeightStyle.includeLineSpacingTop"));
  ui.BoxHeightStyle.includeLineSpacingBottom = dart.const(new ui.BoxHeightStyle.new(4, "BoxHeightStyle.includeLineSpacingBottom"));
  ui.BoxHeightStyle.values = dart.constList([ui.BoxHeightStyle.tight, ui.BoxHeightStyle.max, ui.BoxHeightStyle.includeLineSpacingMiddle, ui.BoxHeightStyle.includeLineSpacingTop, ui.BoxHeightStyle.includeLineSpacingBottom], ui.BoxHeightStyle);
  ui.BoxWidthStyle = class BoxWidthStyle extends core.Object {
    toString() {
      return this[_name$0];
    }
  };
  (ui.BoxWidthStyle.new = function(index, _name) {
    this.index = index;
    this[_name$0] = _name;
    ;
  }).prototype = ui.BoxWidthStyle.prototype;
  dart.addTypeTests(ui.BoxWidthStyle);
  dart.setFieldSignature(ui.BoxWidthStyle, () => ({
    __proto__: dart.getFields(ui.BoxWidthStyle.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$0]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(ui.BoxWidthStyle, ['toString']);
  ui.BoxWidthStyle.tight = dart.const(new ui.BoxWidthStyle.new(0, "BoxWidthStyle.tight"));
  ui.BoxWidthStyle.max = dart.const(new ui.BoxWidthStyle.new(1, "BoxWidthStyle.max"));
  ui.BoxWidthStyle.values = dart.constList([ui.BoxWidthStyle.tight, ui.BoxWidthStyle.max], ui.BoxWidthStyle);
  const _width = dart.privateName(ui, "_width");
  const _lineHeight = dart.privateName(ui, "_lineHeight");
  const _minIntrinsicWidth = dart.privateName(ui, "_minIntrinsicWidth");
  const _maxIntrinsicWidth = dart.privateName(ui, "_maxIntrinsicWidth");
  const _alphabeticBaseline = dart.privateName(ui, "_alphabeticBaseline");
  const _ideographicBaseline = dart.privateName(ui, "_ideographicBaseline");
  const _didExceedMaxLines = dart.privateName(ui, "_didExceedMaxLines");
  const _lastUsedConstraints = dart.privateName(ui, "_lastUsedConstraints");
  const _webOnlyIsSingleLine = dart.privateName(ui, "_webOnlyIsSingleLine");
  const _webOnlyIsLaidOut = dart.privateName(ui, "_webOnlyIsLaidOut");
  const _paragraphElement = dart.privateName(ui, "_paragraphElement");
  const _paragraphGeometricStyle = dart.privateName(ui, "_paragraphGeometricStyle");
  const _plainText = dart.privateName(ui, "_plainText");
  const _paint = dart.privateName(ui, "_paint");
  const _getBoxesForRange = dart.privateName(ui, "_getBoxesForRange");
  const _cloneWithText = dart.privateName(ui, "_cloneWithText");
  ui.Paragraph = class Paragraph extends core.Object {
    get webOnlyAlignOffset() {
      return this[webOnlyAlignOffset];
    }
    set webOnlyAlignOffset(value) {
      this[webOnlyAlignOffset] = value;
    }
    webOnlyGetParagraphElement() {
      return this[_paragraphElement];
    }
    get width() {
      return this[_width];
    }
    get height() {
      return this[_height];
    }
    get minIntrinsicWidth() {
      return this[_minIntrinsicWidth];
    }
    get maxIntrinsicWidth() {
      return this[_maxIntrinsicWidth];
    }
    get alphabeticBaseline() {
      return this[_alphabeticBaseline];
    }
    get ideographicBaseline() {
      return this[_ideographicBaseline];
    }
    get didExceedMaxLines() {
      return this[_didExceedMaxLines];
    }
    layout(constraints) {
      if (dart.equals(constraints, this[_lastUsedConstraints])) {
        return;
      }
      src__engine.TextMeasurementService.instance.measure(this, constraints);
      this[_lastUsedConstraints] = constraints;
      if (this[_paragraphGeometricStyle].maxLines != null) {
        this[_didExceedMaxLines] = dart.notNull(this.webOnlyMaxLinesHeight) < dart.notNull(this[_height]);
      } else {
        this[_didExceedMaxLines] = false;
      }
      if (dart.test(this[_webOnlyIsSingleLine]) && constraints != null) {
        switch (this[_textAlign]) {
          case ui.TextAlign.center:
          {
            this.webOnlyAlignOffset = (dart.notNull(constraints.width) - dart.notNull(this[_maxIntrinsicWidth])) / 2.0;
            break;
          }
          case ui.TextAlign.right:
          {
            this.webOnlyAlignOffset = dart.notNull(constraints.width) - dart.notNull(this[_maxIntrinsicWidth]);
            break;
          }
          case ui.TextAlign.start:
          {
            this.webOnlyAlignOffset = dart.equals(this[_textDirection$], ui.TextDirection.rtl) ? dart.notNull(constraints.width) - dart.notNull(this[_maxIntrinsicWidth]) : 0.0;
            break;
          }
          case ui.TextAlign.end:
          {
            this.webOnlyAlignOffset = dart.equals(this[_textDirection$], ui.TextDirection.ltr) ? dart.notNull(constraints.width) - dart.notNull(this[_maxIntrinsicWidth]) : 0.0;
            break;
          }
          default:
          {
            this.webOnlyAlignOffset = 0.0;
            break;
          }
        }
      }
    }
    webOnlyGetParagraphGeometricStyle() {
      return this[_paragraphGeometricStyle];
    }
    webOnlyGetPlainText() {
      return this[_plainText];
    }
    webOnlyGetPaint() {
      return this[_paint];
    }
    get webOnlyMaxLinesHeight() {
      if (!dart.test(this[_webOnlyIsLaidOut])) dart.assertFailed();
      if (this[_paragraphGeometricStyle].maxLines == null) {
        return null;
      }
      if (!(this[_lineHeight] != null)) dart.assertFailed();
      return dart.notNull(this[_paragraphGeometricStyle].maxLines) * dart.notNull(this[_lineHeight]);
    }
    webOnlySetComputedLayout(opts) {
      let width = opts && 'width' in opts ? opts.width : null;
      let height = opts && 'height' in opts ? opts.height : null;
      let lineHeight = opts && 'lineHeight' in opts ? opts.lineHeight : null;
      let minIntrinsicWidth = opts && 'minIntrinsicWidth' in opts ? opts.minIntrinsicWidth : null;
      let maxIntrinsicWidth = opts && 'maxIntrinsicWidth' in opts ? opts.maxIntrinsicWidth : null;
      let alphabeticBaseline = opts && 'alphabeticBaseline' in opts ? opts.alphabeticBaseline : null;
      let ideographicBaseline = opts && 'ideographicBaseline' in opts ? opts.ideographicBaseline : null;
      let isSingleLine = opts && 'isSingleLine' in opts ? opts.isSingleLine : null;
      if (!(width != null && height != null && minIntrinsicWidth != null && maxIntrinsicWidth != null && dart.notNull(minIntrinsicWidth) <= dart.notNull(maxIntrinsicWidth) && alphabeticBaseline != null && ideographicBaseline != null)) dart.assertFailed();
      this[_width] = width;
      this[_height] = height;
      this[_lineHeight] = lineHeight;
      this[_minIntrinsicWidth] = minIntrinsicWidth;
      this[_maxIntrinsicWidth] = maxIntrinsicWidth;
      this[_alphabeticBaseline] = alphabeticBaseline;
      this[_ideographicBaseline] = ideographicBaseline;
      this[_webOnlyIsSingleLine] = isSingleLine;
      this[_webOnlyIsLaidOut] = true;
    }
    get webOnlyDrawOnCanvas() {
      return dart.test(this[_webOnlyIsSingleLine]) && this[_plainText] != null && this[_paragraphGeometricStyle].ellipsis == null && this[_paragraphGeometricStyle].decoration == null && this[_paragraphGeometricStyle].letterSpacing == null && this[_paragraphGeometricStyle].wordSpacing == null && this[_background] == null;
    }
    get webOnlyIsLaidOut() {
      return this[_webOnlyIsLaidOut];
    }
    webOnlyDebugHasSameRootStyle(style) {
      if (!dart.test(dart.fn(() => {
        if (!dart.equals(style, this[_paragraphGeometricStyle])) {
          dart.throw(core.Exception.new("Attempted to measure a paragraph whose style is " + "different from the style of the ruler used to measure it."));
        }
        return true;
      }, VoidTobool())())) dart.assertFailed();
      return true;
    }
    getBoxesForRange(start, end, opts) {
      let boxHeightStyle = opts && 'boxHeightStyle' in opts ? opts.boxHeightStyle : ui.BoxHeightStyle.tight;
      let boxWidthStyle = opts && 'boxWidthStyle' in opts ? opts.boxWidthStyle : ui.BoxWidthStyle.tight;
      if (!(boxHeightStyle != null)) dart.assertFailed();
      if (!(boxWidthStyle != null)) dart.assertFailed();
      return this[_getBoxesForRange](start, end, boxHeightStyle.index, boxWidthStyle.index);
    }
    [_getBoxesForRange](start, end, boxHeightStyle, boxWidthStyle) {
      if (this[_plainText] == null) {
        return JSArrayOfTextBox().of([]);
      }
      let length = this[_plainText].length;
      if (dart.notNull(start) < 0 || dart.notNull(end) < 0 || dart.notNull(start) > length || dart.notNull(end) > length) {
        return JSArrayOfTextBox().of([]);
      }
      return src__engine.TextMeasurementService.instance.measureBoxesForRange(this, this[_lastUsedConstraints], {start: start, end: end, alignOffset: this.webOnlyAlignOffset, textDirection: this[_textDirection$]});
    }
    [_cloneWithText](plainText) {
      return new ui.Paragraph.__({plainText: plainText, paragraphElement: html.HtmlElement._check(this[_paragraphElement][$clone](true)), paragraphGeometricStyle: this[_paragraphGeometricStyle], paint: this[_paint], textAlign: this[_textAlign], textDirection: this[_textDirection$], background: this[_background]});
    }
    getPositionForOffset(offset) {
      if (this[_plainText] == null) {
        return new ui.TextPosition.new({offset: 0});
      }
      let dx = dart.notNull(offset.dx) - dart.notNull(this.webOnlyAlignOffset);
      let instance = src__engine.TextMeasurementService.instance;
      const _measureSingleLineWidth = text => {
        if (this[_paragraphGeometricStyle].letterSpacing != null || this[_paragraphGeometricStyle].wordSpacing != null || this[_paragraphGeometricStyle].decoration != null) {
          return instance.measureSingleLineText(this[_cloneWithText](text)).width;
        } else {
          return instance.measureSingleLineWidth(text, this[_paragraphGeometricStyle]);
        }
      };
      dart.fn(_measureSingleLineWidth, StringTodouble());
      let low = 0;
      let high = this[_plainText].length;
      do {
        let current = ((low + high) / 2)[$truncate]();
        let width = _measureSingleLineWidth(this[_plainText][$substring](0, current));
        if (dart.notNull(width) < dx) {
          low = current;
        } else if (dart.notNull(width) > dx) {
          high = current;
        } else {
          low = high = current;
        }
      } while (high - low > 1);
      if (low === high) {
        return new ui.TextPosition.new({offset: high, affinity: ui.TextAffinity.upstream});
      }
      let lowWidth = _measureSingleLineWidth(this[_plainText][$substring](0, low));
      let highWidth = _measureSingleLineWidth(this[_plainText][$substring](0, high));
      if (dx - dart.notNull(lowWidth) < dart.notNull(highWidth) - dx) {
        return new ui.TextPosition.new({offset: low, affinity: ui.TextAffinity.downstream});
      } else {
        return new ui.TextPosition.new({offset: high, affinity: ui.TextAffinity.upstream});
      }
    }
    getWordBoundary(offset) {
      if (this[_plainText] == null) {
        return JSArrayOfint().of([offset, offset]);
      }
      let start = src__engine.WordBreaker.prevBreakIndex(this[_plainText], offset);
      let end = src__engine.WordBreaker.nextBreakIndex(this[_plainText], offset);
      return JSArrayOfint().of([start, end]);
    }
  };
  (ui.Paragraph.__ = function(opts) {
    let paragraphElement = opts && 'paragraphElement' in opts ? opts.paragraphElement : null;
    let paragraphGeometricStyle = opts && 'paragraphGeometricStyle' in opts ? opts.paragraphGeometricStyle : null;
    let plainText = opts && 'plainText' in opts ? opts.plainText : null;
    let paint = opts && 'paint' in opts ? opts.paint : null;
    let textAlign = opts && 'textAlign' in opts ? opts.textAlign : null;
    let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
    let background = opts && 'background' in opts ? opts.background : null;
    this[_width] = 0.0;
    this[_height] = 0.0;
    this[_lineHeight] = 0.0;
    this[_minIntrinsicWidth] = 0.0;
    this[_maxIntrinsicWidth] = 0.0;
    this[_alphabeticBaseline] = 0.0;
    this[_ideographicBaseline] = 0.0;
    this[_didExceedMaxLines] = false;
    this[_lastUsedConstraints] = null;
    this[webOnlyAlignOffset] = 0.0;
    this[_webOnlyIsSingleLine] = false;
    this[_webOnlyIsLaidOut] = false;
    if (!(plainText == null && paint == null || plainText != null && paint != null)) dart.assertFailed();
    this[_paragraphElement] = paragraphElement;
    this[_paragraphGeometricStyle] = paragraphGeometricStyle;
    this[_plainText] = plainText;
    this[_textAlign] = textAlign;
    this[_textDirection$] = textDirection;
    this[_paint] = paint;
    this[_background] = background;
    ;
  }).prototype = ui.Paragraph.prototype;
  dart.addTypeTests(ui.Paragraph);
  const webOnlyAlignOffset = Symbol("Paragraph.webOnlyAlignOffset");
  dart.setMethodSignature(ui.Paragraph, () => ({
    __proto__: dart.getMethods(ui.Paragraph.__proto__),
    webOnlyGetParagraphElement: dart.fnType(html.HtmlElement, []),
    layout: dart.fnType(dart.void, [ui.ParagraphConstraints]),
    webOnlyGetParagraphGeometricStyle: dart.fnType(src__engine.ParagraphGeometricStyle, []),
    webOnlyGetPlainText: dart.fnType(core.String, []),
    webOnlyGetPaint: dart.fnType(ui.Paint, []),
    webOnlySetComputedLayout: dart.fnType(dart.void, [], {alphabeticBaseline: core.double, height: core.double, ideographicBaseline: core.double, isSingleLine: core.bool, lineHeight: core.double, maxIntrinsicWidth: core.double, minIntrinsicWidth: core.double, width: core.double}),
    webOnlyDebugHasSameRootStyle: dart.fnType(core.bool, [src__engine.ParagraphGeometricStyle]),
    getBoxesForRange: dart.fnType(core.List$(ui.TextBox), [core.int, core.int], {boxHeightStyle: ui.BoxHeightStyle, boxWidthStyle: ui.BoxWidthStyle}),
    [_getBoxesForRange]: dart.fnType(core.List$(ui.TextBox), [core.int, core.int, core.int, core.int]),
    [_cloneWithText]: dart.fnType(ui.Paragraph, [core.String]),
    getPositionForOffset: dart.fnType(ui.TextPosition, [ui.Offset]),
    getWordBoundary: dart.fnType(core.List$(core.int), [core.int])
  }));
  dart.setGetterSignature(ui.Paragraph, () => ({
    __proto__: dart.getGetters(ui.Paragraph.__proto__),
    width: core.double,
    height: core.double,
    minIntrinsicWidth: core.double,
    maxIntrinsicWidth: core.double,
    alphabeticBaseline: core.double,
    ideographicBaseline: core.double,
    didExceedMaxLines: core.bool,
    webOnlyMaxLinesHeight: core.double,
    webOnlyDrawOnCanvas: core.bool,
    webOnlyIsLaidOut: core.bool
  }));
  dart.setFieldSignature(ui.Paragraph, () => ({
    __proto__: dart.getFields(ui.Paragraph.__proto__),
    [_paragraphElement]: dart.finalFieldType(html.HtmlElement),
    [_paragraphGeometricStyle]: dart.finalFieldType(src__engine.ParagraphGeometricStyle),
    [_plainText]: dart.finalFieldType(core.String),
    [_paint]: dart.finalFieldType(ui.Paint),
    [_textAlign]: dart.finalFieldType(ui.TextAlign),
    [_textDirection$]: dart.finalFieldType(ui.TextDirection),
    [_background]: dart.finalFieldType(ui.Paint),
    [_width]: dart.fieldType(core.double),
    [_height]: dart.fieldType(core.double),
    [_lineHeight]: dart.fieldType(core.double),
    [_minIntrinsicWidth]: dart.fieldType(core.double),
    [_maxIntrinsicWidth]: dart.fieldType(core.double),
    [_alphabeticBaseline]: dart.fieldType(core.double),
    [_ideographicBaseline]: dart.fieldType(core.double),
    [_didExceedMaxLines]: dart.fieldType(core.bool),
    [_lastUsedConstraints]: dart.fieldType(ui.ParagraphConstraints),
    webOnlyAlignOffset: dart.fieldType(core.double),
    [_webOnlyIsSingleLine]: dart.fieldType(core.bool),
    [_webOnlyIsLaidOut]: dart.fieldType(core.bool)
  }));
  const _ops = dart.privateName(ui, "_ops");
  const _paragraphStyle = dart.privateName(ui, "_paragraphStyle");
  const _tryBuildPlainText = dart.privateName(ui, "_tryBuildPlainText");
  const _buildRichText = dart.privateName(ui, "_buildRichText");
  ui.ParagraphBuilder = class ParagraphBuilder extends core.Object {
    pushStyle(style) {
      this[_ops][$add](style);
    }
    pop() {
      this[_ops][$add](ui.ParagraphBuilder._paragraphBuilderPop);
    }
    addText(text) {
      this[_ops][$add](text);
    }
    build() {
      let t4;
      t4 = this[_tryBuildPlainText]();
      return t4 == null ? this[_buildRichText]() : t4;
    }
    [_tryBuildPlainText]() {
      let color = null;
      let decoration = null;
      let decorationColor = null;
      let decorationStyle = null;
      let fontWeight = this[_paragraphStyle][_fontWeight];
      let fontStyle = this[_paragraphStyle][_fontStyle];
      let textBaseline = null;
      let fontFamily = this[_paragraphStyle][_fontFamily];
      let fontSize = this[_paragraphStyle][_fontSize];
      let textAlign = this[_paragraphStyle][_textAlign];
      let textDirection = this[_paragraphStyle][_textDirection$];
      let letterSpacing = null;
      let wordSpacing = null;
      let height = null;
      let locale = this[_paragraphStyle][_locale];
      let background = null;
      let foreground = null;
      let i = 0;
      while (i < dart.notNull(this[_ops][$length]) && ui.TextStyle.is(this[_ops][$_get](i))) {
        let style = ui.TextStyle._check(this[_ops][$_get](i));
        if (style[_color] != null) {
          color = style[_color];
        }
        if (style[_decoration] != null) {
          decoration = style[_decoration];
        }
        if (style[_decorationColor] != null) {
          decorationColor = style[_decorationColor];
        }
        if (style[_decorationStyle] != null) {
          decorationStyle = style[_decorationStyle];
        }
        if (style[_fontWeight] != null) {
          fontWeight = style[_fontWeight];
        }
        if (style[_fontStyle] != null) {
          fontStyle = style[_fontStyle];
        }
        if (style[_textBaseline] != null) {
          textBaseline = style[_textBaseline];
        }
        if (style[_fontFamily] != null) {
          fontFamily = style[_fontFamily];
        }
        if (style[_fontSize] != null) {
          fontSize = style[_fontSize];
        }
        if (style[_letterSpacing] != null) {
          letterSpacing = style[_letterSpacing];
        }
        if (style[_wordSpacing] != null) {
          wordSpacing = style[_wordSpacing];
        }
        if (style[_height] != null) {
          height = style[_height];
        }
        if (style[_locale] != null) {
          locale = style[_locale];
        }
        if (style[_background] != null) {
          background = style[_background];
        }
        if (style[_foreground] != null) {
          foreground = style[_foreground];
        }
        i = i + 1;
      }
      let cumulativeStyle = new ui.TextStyle.new({color: color, decoration: decoration, decorationColor: decorationColor, decorationStyle: decorationStyle, fontWeight: fontWeight, fontStyle: fontStyle, textBaseline: textBaseline, fontFamily: fontFamily, fontSize: fontSize, letterSpacing: letterSpacing, wordSpacing: wordSpacing, height: height, locale: locale, background: background, foreground: foreground});
      let paint = null;
      if (foreground != null) {
        paint = foreground;
      } else {
        paint = new ui.Paint.new();
        if (color != null) {
          paint.color = color;
        }
      }
      if (i >= dart.notNull(this[_ops][$length])) {
        ui.applyTextStyleToElement({element: this[_paragraphElement], style: cumulativeStyle});
        return new ui.Paragraph.__({paragraphElement: this[_paragraphElement], paragraphGeometricStyle: new src__engine.ParagraphGeometricStyle.new({fontFamily: fontFamily, fontWeight: fontWeight, fontStyle: fontStyle, fontSize: fontSize, lineHeight: height, maxLines: this[_paragraphStyle][_maxLines], letterSpacing: letterSpacing, wordSpacing: wordSpacing, decoration: ui._textDecorationToCssString(decoration, decorationStyle), ellipsis: this[_paragraphStyle][_ellipsis]}), plainText: "", paint: paint, textAlign: textAlign, textDirection: textDirection, background: cumulativeStyle[_background]});
      }
      if (!(typeof this[_ops][$_get](i) == 'string')) {
        return null;
      }
      let plainTextBuffer = new core.StringBuffer.new();
      while (i < dart.notNull(this[_ops][$length]) && typeof this[_ops][$_get](i) == 'string') {
        plainTextBuffer.write(this[_ops][$_get](i));
        i = i + 1;
      }
      for (; i < dart.notNull(this[_ops][$length]); i = i + 1) {
        if (!dart.equals(this[_ops][$_get](i), ui.ParagraphBuilder._paragraphBuilderPop)) {
          return null;
        }
      }
      let plainText = plainTextBuffer.toString();
      src__engine.domRenderer.appendText(this[_paragraphElement], plainText);
      ui.applyTextStyleToElement({element: this[_paragraphElement], style: cumulativeStyle});
      if (cumulativeStyle[_background] != null) {
        ui.applyTextBackgroundToElement({element: this[_paragraphElement], style: cumulativeStyle});
      }
      return new ui.Paragraph.__({paragraphElement: this[_paragraphElement], paragraphGeometricStyle: new src__engine.ParagraphGeometricStyle.new({fontFamily: fontFamily, fontWeight: fontWeight, fontStyle: fontStyle, fontSize: fontSize, lineHeight: height, maxLines: this[_paragraphStyle][_maxLines], letterSpacing: letterSpacing, wordSpacing: wordSpacing, decoration: ui._textDecorationToCssString(decoration, decorationStyle), ellipsis: this[_paragraphStyle][_ellipsis]}), plainText: plainText, paint: paint, textAlign: textAlign, textDirection: textDirection, background: cumulativeStyle[_background]});
    }
    [_buildRichText]() {
      let elementStack = [];
      const currentElement = () => {
        return dart.test(elementStack[$isNotEmpty]) ? elementStack[$last] : this[_paragraphElement];
      };
      dart.fn(currentElement, VoidTodynamic());
      for (let i = 0; i < dart.notNull(this[_ops][$length]); i = i + 1) {
        let op = this[_ops][$_get](i);
        if (ui.TextStyle.is(op)) {
          let span = src__engine.domRenderer.createElement("span");
          ui.applyTextStyleToElement({element: html.HtmlElement._check(span), style: op});
          if (op[_background] != null) {
            ui.applyTextBackgroundToElement({element: html.HtmlElement._check(span), style: op});
          }
          src__engine.domRenderer.append(html.Element._check(currentElement()), span);
          elementStack[$add](span);
        } else if (typeof op == 'string') {
          src__engine.domRenderer.appendText(html.Element._check(currentElement()), op);
        } else if (core.identical(op, ui.ParagraphBuilder._paragraphBuilderPop)) {
          elementStack[$removeLast]();
        } else {
          dart.throw(new core.UnsupportedError.new("Unsupported ParagraphBuilder operation: " + dart.str(op)));
        }
      }
      return new ui.Paragraph.__({paragraphElement: this[_paragraphElement], paragraphGeometricStyle: new src__engine.ParagraphGeometricStyle.new({fontFamily: this[_paragraphStyle][_fontFamily], fontWeight: this[_paragraphStyle][_fontWeight], fontStyle: this[_paragraphStyle][_fontStyle], fontSize: this[_paragraphStyle][_fontSize], lineHeight: this[_paragraphStyle][_height], maxLines: this[_paragraphStyle][_maxLines], ellipsis: this[_paragraphStyle][_ellipsis]}), plainText: null, paint: null, textAlign: this[_paragraphStyle][_textAlign], textDirection: this[_paragraphStyle][_textDirection$], background: null});
    }
  };
  (ui.ParagraphBuilder.new = function(style) {
    this[_paragraphElement] = html.HtmlElement._check(src__engine.domRenderer.createElement("p"));
    this[_ops] = [];
    this[_paragraphStyle] = style;
    let strutFontFamilies = null;
    if (style[_strutStyle] != null) {
      strutFontFamilies = JSArrayOfString().of([]);
      if (style[_strutStyle][_fontFamily] != null) strutFontFamilies[$add](style[_strutStyle][_fontFamily]);
      if (style[_strutStyle][_fontFamilyFallback] != null) strutFontFamilies[$addAll](style[_strutStyle][_fontFamilyFallback]);
    }
    ui.applyParagraphStyleToElement({element: this[_paragraphElement], style: this[_paragraphStyle]});
  }).prototype = ui.ParagraphBuilder.prototype;
  dart.addTypeTests(ui.ParagraphBuilder);
  dart.setMethodSignature(ui.ParagraphBuilder, () => ({
    __proto__: dart.getMethods(ui.ParagraphBuilder.__proto__),
    pushStyle: dart.fnType(dart.void, [ui.TextStyle]),
    pop: dart.fnType(dart.void, []),
    addText: dart.fnType(dart.void, [core.String]),
    build: dart.fnType(ui.Paragraph, []),
    [_tryBuildPlainText]: dart.fnType(ui.Paragraph, []),
    [_buildRichText]: dart.fnType(ui.Paragraph, [])
  }));
  dart.setFieldSignature(ui.ParagraphBuilder, () => ({
    __proto__: dart.getFields(ui.ParagraphBuilder.__proto__),
    [_paragraphElement]: dart.finalFieldType(html.HtmlElement),
    [_paragraphStyle]: dart.finalFieldType(ui.ParagraphStyle),
    [_ops]: dart.finalFieldType(core.List)
  }));
  dart.defineLazy(ui.ParagraphBuilder, {
    /*ui.ParagraphBuilder._paragraphBuilderPop*/get _paragraphBuilderPop() {
      return new core.Object.new();
    }
  });
  ui.TileMode = class TileMode extends core.Object {
    toString() {
      return this[_name$0];
    }
  };
  (ui.TileMode.new = function(index, _name) {
    this.index = index;
    this[_name$0] = _name;
    ;
  }).prototype = ui.TileMode.prototype;
  dart.addTypeTests(ui.TileMode);
  dart.setFieldSignature(ui.TileMode, () => ({
    __proto__: dart.getFields(ui.TileMode.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$0]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(ui.TileMode, ['toString']);
  ui.TileMode.clamp = dart.const(new ui.TileMode.new(0, "TileMode.clamp"));
  ui.TileMode.repeated = dart.const(new ui.TileMode.new(1, "TileMode.repeated"));
  ui.TileMode.mirror = dart.const(new ui.TileMode.new(2, "TileMode.mirror"));
  ui.TileMode.values = dart.constList([ui.TileMode.clamp, ui.TileMode.repeated, ui.TileMode.mirror], ui.TileMode);
  ui.AppLifecycleState = class AppLifecycleState extends core.Object {
    toString() {
      return this[_name$0];
    }
  };
  (ui.AppLifecycleState.new = function(index, _name) {
    this.index = index;
    this[_name$0] = _name;
    ;
  }).prototype = ui.AppLifecycleState.prototype;
  dart.addTypeTests(ui.AppLifecycleState);
  dart.setFieldSignature(ui.AppLifecycleState, () => ({
    __proto__: dart.getFields(ui.AppLifecycleState.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$0]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(ui.AppLifecycleState, ['toString']);
  ui.AppLifecycleState.resumed = dart.const(new ui.AppLifecycleState.new(0, "AppLifecycleState.resumed"));
  ui.AppLifecycleState.inactive = dart.const(new ui.AppLifecycleState.new(1, "AppLifecycleState.inactive"));
  ui.AppLifecycleState.paused = dart.const(new ui.AppLifecycleState.new(2, "AppLifecycleState.paused"));
  ui.AppLifecycleState.suspending = dart.const(new ui.AppLifecycleState.new(3, "AppLifecycleState.suspending"));
  ui.AppLifecycleState.values = dart.constList([ui.AppLifecycleState.resumed, ui.AppLifecycleState.inactive, ui.AppLifecycleState.paused, ui.AppLifecycleState.suspending], ui.AppLifecycleState);
  ui.WindowPadding = class WindowPadding extends core.Object {
    get left() {
      return this[left$2];
    }
    set left(value) {
      super.left = value;
    }
    get top() {
      return this[top$2];
    }
    set top(value) {
      super.top = value;
    }
    get right() {
      return this[right$2];
    }
    set right(value) {
      super.right = value;
    }
    get bottom() {
      return this[bottom$2];
    }
    set bottom(value) {
      super.bottom = value;
    }
  };
  (ui.WindowPadding.__ = function(opts) {
    let left = opts && 'left' in opts ? opts.left : null;
    let top = opts && 'top' in opts ? opts.top : null;
    let right = opts && 'right' in opts ? opts.right : null;
    let bottom = opts && 'bottom' in opts ? opts.bottom : null;
    this[left$2] = left;
    this[top$2] = top;
    this[right$2] = right;
    this[bottom$2] = bottom;
    ;
  }).prototype = ui.WindowPadding.prototype;
  dart.addTypeTests(ui.WindowPadding);
  const left$2 = Symbol("WindowPadding.left");
  const top$2 = Symbol("WindowPadding.top");
  const right$2 = Symbol("WindowPadding.right");
  const bottom$2 = Symbol("WindowPadding.bottom");
  dart.setFieldSignature(ui.WindowPadding, () => ({
    __proto__: dart.getFields(ui.WindowPadding.__proto__),
    left: dart.finalFieldType(core.double),
    top: dart.finalFieldType(core.double),
    right: dart.finalFieldType(core.double),
    bottom: dart.finalFieldType(core.double)
  }));
  dart.defineLazy(ui.WindowPadding, {
    /*ui.WindowPadding.zero*/get zero() {
      return dart.const(new ui.WindowPadding.__({left: 0.0, top: 0.0, right: 0.0, bottom: 0.0}));
    }
  });
  const _languageCode$ = dart.privateName(ui, "_languageCode");
  const _countryCode$ = dart.privateName(ui, "_countryCode");
  ui.Locale = class Locale extends core.Object {
    get scriptCode() {
      return this[scriptCode$];
    }
    set scriptCode(value) {
      super.scriptCode = value;
    }
    get languageCode() {
      return ui.Locale._replaceDeprecatedLanguageSubtag(this[_languageCode$]);
    }
    static _replaceDeprecatedLanguageSubtag(languageCode) {
      switch (languageCode) {
        case "in":
        {
          return "id";
        }
        case "iw":
        {
          return "he";
        }
        case "ji":
        {
          return "yi";
        }
        case "jw":
        {
          return "jv";
        }
        case "mo":
        {
          return "ro";
        }
        case "aam":
        {
          return "aas";
        }
        case "adp":
        {
          return "dz";
        }
        case "aue":
        {
          return "ktz";
        }
        case "ayx":
        {
          return "nun";
        }
        case "bgm":
        {
          return "bcg";
        }
        case "bjd":
        {
          return "drl";
        }
        case "ccq":
        {
          return "rki";
        }
        case "cjr":
        {
          return "mom";
        }
        case "cka":
        {
          return "cmr";
        }
        case "cmk":
        {
          return "xch";
        }
        case "coy":
        {
          return "pij";
        }
        case "cqu":
        {
          return "quh";
        }
        case "drh":
        {
          return "khk";
        }
        case "drw":
        {
          return "prs";
        }
        case "gav":
        {
          return "dev";
        }
        case "gfx":
        {
          return "vaj";
        }
        case "ggn":
        {
          return "gvr";
        }
        case "gti":
        {
          return "nyc";
        }
        case "guv":
        {
          return "duz";
        }
        case "hrr":
        {
          return "jal";
        }
        case "ibi":
        {
          return "opa";
        }
        case "ilw":
        {
          return "gal";
        }
        case "jeg":
        {
          return "oyb";
        }
        case "kgc":
        {
          return "tdf";
        }
        case "kgh":
        {
          return "kml";
        }
        case "koj":
        {
          return "kwv";
        }
        case "krm":
        {
          return "bmf";
        }
        case "ktr":
        {
          return "dtp";
        }
        case "kvs":
        {
          return "gdj";
        }
        case "kwq":
        {
          return "yam";
        }
        case "kxe":
        {
          return "tvd";
        }
        case "kzj":
        {
          return "dtp";
        }
        case "kzt":
        {
          return "dtp";
        }
        case "lii":
        {
          return "raq";
        }
        case "lmm":
        {
          return "rmx";
        }
        case "meg":
        {
          return "cir";
        }
        case "mst":
        {
          return "mry";
        }
        case "mwj":
        {
          return "vaj";
        }
        case "myt":
        {
          return "mry";
        }
        case "nad":
        {
          return "xny";
        }
        case "ncp":
        {
          return "kdz";
        }
        case "nnx":
        {
          return "ngv";
        }
        case "nts":
        {
          return "pij";
        }
        case "oun":
        {
          return "vaj";
        }
        case "pcr":
        {
          return "adx";
        }
        case "pmc":
        {
          return "huw";
        }
        case "pmu":
        {
          return "phr";
        }
        case "ppa":
        {
          return "bfy";
        }
        case "ppr":
        {
          return "lcq";
        }
        case "pry":
        {
          return "prt";
        }
        case "puz":
        {
          return "pub";
        }
        case "sca":
        {
          return "hle";
        }
        case "skk":
        {
          return "oyb";
        }
        case "tdu":
        {
          return "dtp";
        }
        case "thc":
        {
          return "tpo";
        }
        case "thx":
        {
          return "oyb";
        }
        case "tie":
        {
          return "ras";
        }
        case "tkk":
        {
          return "twm";
        }
        case "tlw":
        {
          return "weo";
        }
        case "tmp":
        {
          return "tyj";
        }
        case "tne":
        {
          return "kak";
        }
        case "tnf":
        {
          return "prs";
        }
        case "tsf":
        {
          return "taj";
        }
        case "uok":
        {
          return "ema";
        }
        case "xba":
        {
          return "cax";
        }
        case "xia":
        {
          return "acn";
        }
        case "xkh":
        {
          return "waw";
        }
        case "xsj":
        {
          return "suj";
        }
        case "ybd":
        {
          return "rki";
        }
        case "yma":
        {
          return "lrr";
        }
        case "ymt":
        {
          return "mtm";
        }
        case "yos":
        {
          return "zom";
        }
        case "yuu":
        {
          return "yug";
        }
        default:
        {
          return languageCode;
        }
      }
    }
    get countryCode() {
      return ui.Locale._replaceDeprecatedRegionSubtag(this[_countryCode$]);
    }
    static _replaceDeprecatedRegionSubtag(regionCode) {
      switch (regionCode) {
        case "BU":
        {
          return "MM";
        }
        case "DD":
        {
          return "DE";
        }
        case "FX":
        {
          return "FR";
        }
        case "TP":
        {
          return "TL";
        }
        case "YD":
        {
          return "YE";
        }
        case "ZR":
        {
          return "CD";
        }
        default:
        {
          return regionCode;
        }
      }
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) return true;
      if (!ui.Locale.is(other)) return false;
      let typedOther = ui.Locale._check(other);
      return this.languageCode == typedOther.languageCode && this.scriptCode == typedOther.scriptCode && this.countryCode == typedOther.countryCode;
    }
    get hashCode() {
      return ui.hashValues(this.languageCode, this.scriptCode, this.countryCode);
    }
    toString() {
      let out = new core.StringBuffer.new(this.languageCode);
      if (this.scriptCode != null) out.write("_" + dart.str(this.scriptCode));
      if (this[_countryCode$] != null) out.write("_" + dart.str(this.countryCode));
      return out.toString();
    }
  };
  (ui.Locale.new = function(_languageCode, _countryCode) {
    if (_countryCode === void 0) _countryCode = null;
    this[_languageCode$] = _languageCode;
    this[_countryCode$] = _countryCode;
    if (!(_languageCode != null)) dart.assertFailed();
    if (!(_languageCode !== "")) dart.assertFailed();
    this[scriptCode$] = null;
    ;
  }).prototype = ui.Locale.prototype;
  (ui.Locale.fromSubtags = function(opts) {
    let languageCode = opts && 'languageCode' in opts ? opts.languageCode : "und";
    let scriptCode = opts && 'scriptCode' in opts ? opts.scriptCode : null;
    let countryCode = opts && 'countryCode' in opts ? opts.countryCode : null;
    this[scriptCode$] = scriptCode;
    if (!(languageCode != null)) dart.assertFailed();
    if (!(languageCode !== "")) dart.assertFailed();
    this[_languageCode$] = languageCode;
    if (!(scriptCode !== "")) dart.assertFailed();
    if (!(countryCode !== "")) dart.assertFailed();
    this[_countryCode$] = countryCode;
    ;
  }).prototype = ui.Locale.prototype;
  dart.addTypeTests(ui.Locale);
  const scriptCode$ = Symbol("Locale.scriptCode");
  dart.setGetterSignature(ui.Locale, () => ({
    __proto__: dart.getGetters(ui.Locale.__proto__),
    languageCode: core.String,
    countryCode: core.String
  }));
  dart.setFieldSignature(ui.Locale, () => ({
    __proto__: dart.getFields(ui.Locale.__proto__),
    [_languageCode$]: dart.finalFieldType(core.String),
    scriptCode: dart.finalFieldType(core.String),
    [_countryCode$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(ui.Locale, ['_equals', 'toString']);
  dart.defineExtensionAccessors(ui.Locale, ['hashCode']);
  const _browserHistory = dart.privateName(ui, "_browserHistory");
  const _physicalSize = dart.privateName(ui, "_physicalSize");
  const _lastKnownWindowInnerWidth = dart.privateName(ui, "_lastKnownWindowInnerWidth");
  const _lastKnownWindowInnerHeight = dart.privateName(ui, "_lastKnownWindowInnerHeight");
  const _textScaleFactor = dart.privateName(ui, "_textScaleFactor");
  const _alwaysUse24HourFormat = dart.privateName(ui, "_alwaysUse24HourFormat");
  const _onTextScaleFactorChanged = dart.privateName(ui, "_onTextScaleFactorChanged");
  const _platformBrightness = dart.privateName(ui, "_platformBrightness");
  const _onPlatformBrightnessChanged = dart.privateName(ui, "_onPlatformBrightnessChanged");
  const _onMetricsChanged = dart.privateName(ui, "_onMetricsChanged");
  const _locales = dart.privateName(ui, "_locales");
  let const$46;
  const _onLocaleChanged = dart.privateName(ui, "_onLocaleChanged");
  const _onBeginFrame = dart.privateName(ui, "_onBeginFrame");
  const _onDrawFrame = dart.privateName(ui, "_onDrawFrame");
  const _onPointerDataPacket = dart.privateName(ui, "_onPointerDataPacket");
  const _onSemanticsEnabledChanged = dart.privateName(ui, "_onSemanticsEnabledChanged");
  const _onSemanticsAction = dart.privateName(ui, "_onSemanticsAction");
  const _onAccessibilityFeaturesChanged = dart.privateName(ui, "_onAccessibilityFeaturesChanged");
  const _onPlatformMessage = dart.privateName(ui, "_onPlatformMessage");
  const _accessibilityFeatures = dart.privateName(ui, "_accessibilityFeatures");
  const _rasterizer = dart.privateName(ui, "_rasterizer");
  const _replyToPlatformMessage = dart.privateName(ui, "_replyToPlatformMessage");
  let const$47;
  const _getHapticFeedbackDuration = dart.privateName(ui, "_getHapticFeedbackDuration");
  ui.Window = class Window extends core.Object {
    get devicePixelRatio() {
      return this[devicePixelRatio];
    }
    set devicePixelRatio(value) {
      this[devicePixelRatio] = value;
    }
    get webOnlyDebugPhysicalSizeOverride() {
      return this[webOnlyDebugPhysicalSizeOverride];
    }
    set webOnlyDebugPhysicalSizeOverride(value) {
      this[webOnlyDebugPhysicalSizeOverride] = value;
    }
    get viewInsets() {
      return this[viewInsets];
    }
    set viewInsets(value) {
      this[viewInsets] = value;
    }
    get padding() {
      return this[padding];
    }
    set padding(value) {
      this[padding] = value;
    }
    get webOnlyScheduleFrameCallback() {
      return this[webOnlyScheduleFrameCallback];
    }
    set webOnlyScheduleFrameCallback(value) {
      this[webOnlyScheduleFrameCallback] = value;
    }
    webOnlyBack() {
      return this[_browserHistory].back();
    }
    set webOnlyLocationStrategy(strategy) {
      this[_browserHistory].locationStrategy = strategy;
    }
    set webOnlyRouteName(routeName) {
      this[_browserHistory].setRouteName(routeName);
    }
    get physicalSize() {
      let override = false;
      if (!dart.test(dart.fn(() => {
        if (this.webOnlyDebugPhysicalSizeOverride != null) {
          this[_physicalSize] = this.webOnlyDebugPhysicalSizeOverride;
          override = true;
        }
        return true;
      }, VoidTobool())())) dart.assertFailed();
      if (!override) {
        let windowInnerWidth = html.window.innerWidth;
        let windowInnerHeight = html.window.innerHeight;
        if (windowInnerWidth != this[_lastKnownWindowInnerWidth] || windowInnerHeight != this[_lastKnownWindowInnerHeight]) {
          this[_lastKnownWindowInnerWidth] = windowInnerWidth;
          this[_lastKnownWindowInnerHeight] = windowInnerHeight;
          this[_physicalSize] = new ui.Size.new(windowInnerWidth[$toDouble](), windowInnerHeight[$toDouble]());
        }
      }
      return this[_physicalSize];
    }
    get textScaleFactor() {
      return this[_textScaleFactor];
    }
    get alwaysUse24HourFormat() {
      return this[_alwaysUse24HourFormat];
    }
    get onTextScaleFactorChanged() {
      return this[_onTextScaleFactorChanged];
    }
    set onTextScaleFactorChanged(callback) {
      this[_onTextScaleFactorChanged] = callback;
    }
    get platformBrightness() {
      return this[_platformBrightness];
    }
    get onPlatformBrightnessChanged() {
      return this[_onPlatformBrightnessChanged];
    }
    set onPlatformBrightnessChanged(callback) {
      this[_onPlatformBrightnessChanged] = callback;
    }
    get onMetricsChanged() {
      return this[_onMetricsChanged];
    }
    set onMetricsChanged(callback) {
      this[_onMetricsChanged] = callback;
    }
    get locale() {
      if (this[_locales] != null && dart.test(this[_locales][$isNotEmpty])) {
        return this[_locales][$first];
      }
      return null;
    }
    get locales() {
      return this[_locales];
    }
    get onLocaleChanged() {
      return this[_onLocaleChanged];
    }
    set onLocaleChanged(callback) {
      this[_onLocaleChanged] = callback;
    }
    scheduleFrame() {
      if (this.webOnlyScheduleFrameCallback == null) {
        dart.throw(core.Exception.new("webOnlyScheduleFrameCallback must be initialized first."));
      }
      this.webOnlyScheduleFrameCallback();
    }
    get onBeginFrame() {
      return this[_onBeginFrame];
    }
    set onBeginFrame(callback) {
      this[_onBeginFrame] = callback;
    }
    get onDrawFrame() {
      return this[_onDrawFrame];
    }
    set onDrawFrame(callback) {
      this[_onDrawFrame] = callback;
    }
    get onPointerDataPacket() {
      return this[_onPointerDataPacket];
    }
    set onPointerDataPacket(callback) {
      this[_onPointerDataPacket] = callback;
    }
    get defaultRouteName() {
      return this[_browserHistory].currentPath;
    }
    get semanticsEnabled() {
      return src__engine.EngineSemanticsOwner.instance.semanticsEnabled;
    }
    get onSemanticsEnabledChanged() {
      return this[_onSemanticsEnabledChanged];
    }
    set onSemanticsEnabledChanged(callback) {
      this[_onSemanticsEnabledChanged] = callback;
    }
    get onSemanticsAction() {
      return this[_onSemanticsAction];
    }
    set onSemanticsAction(callback) {
      this[_onSemanticsAction] = callback;
    }
    get onAccessibilityFeaturesChanged() {
      return this[_onAccessibilityFeaturesChanged];
    }
    set onAccessibilityFeaturesChanged(callback) {
      this[_onAccessibilityFeaturesChanged] = callback;
    }
    get onPlatformMessage() {
      return this[_onPlatformMessage];
    }
    set onPlatformMessage(callback) {
      this[_onPlatformMessage] = callback;
    }
    updateSemantics(update) {
      src__engine.EngineSemanticsOwner.instance.updateSemantics(update);
    }
    [_replyToPlatformMessage](callback, data) {
      FutureOfvoid().delayed(core.Duration.zero).then(dart.dynamic, dart.fn(_ => {
        callback(data);
      }, voidToNull()));
    }
    sendPlatformMessage(name, data, callback) {
      if (dart.test(ui._debugPrintPlatformMessages)) {
        core.print("Sent platform message on channel: \"" + dart.str(name) + "\"");
      }
      switch (name) {
        case "flutter/assets":
        {
          if (!(ui.webOnlyAssetManager != null)) dart.assertFailed();
          let url = convert.utf8.decode(data[$buffer][$asUint8List]());
          ui.webOnlyAssetManager.load(url).then(dart.dynamic, dart.fn(assetData => {
            this[_replyToPlatformMessage](callback, assetData);
          }, ByteDataToNull()), {onError: dart.fn(e => {
              html.window[$console].warn("Error while trying to load an asset: " + dart.str(e));
              this[_replyToPlatformMessage](callback, null);
            }, dynamicToNull())});
          return;
        }
        case "flutter/platform":
        {
          let codec = const$47 || (const$47 = dart.const(new src__engine.JSONMethodCodec.new()));
          let decoded = codec.decodeMethodCall(data);
          switch (decoded.method) {
            case "SystemNavigator.pop":
            {
              this[_browserHistory].exit().then(dart.dynamic, dart.fn(_ => {
                this[_replyToPlatformMessage](callback, codec.encodeSuccessEnvelope(true));
              }, voidToNull()));
              return;
            }
            case "HapticFeedback.vibrate":
            {
              let type = core.String._check(decoded.arguments);
              src__engine.domRenderer.vibrate(this[_getHapticFeedbackDuration](type));
              return;
            }
            case "SystemChrome.setApplicationSwitcherDescription":
            {
              let arguments$0 = MapOfString$dynamic()._check(decoded.arguments);
              src__engine.domRenderer.setTitle(core.String._check(arguments$0[$_get]("label")));
              src__engine.domRenderer.setThemeColor(new ui.Color.new(core.int._check(arguments$0[$_get]("primaryColor"))));
            }
          }
          break;
        }
        case "flutter/textinput":
        {
          src__engine.textEditing.handleTextInput(data);
          break;
        }
      }
    }
    [_getHapticFeedbackDuration](type) {
      switch (type) {
        case "HapticFeedbackType.lightImpact":
        {
          return src__engine.DomRenderer.vibrateLightImpact;
        }
        case "HapticFeedbackType.mediumImpact":
        {
          return src__engine.DomRenderer.vibrateMediumImpact;
        }
        case "HapticFeedbackType.heavyImpact":
        {
          return src__engine.DomRenderer.vibrateHeavyImpact;
        }
        case "HapticFeedbackType.selectionClick":
        {
          return src__engine.DomRenderer.vibrateSelectionClick;
        }
        default:
        {
          return src__engine.DomRenderer.vibrateLongPress;
        }
      }
    }
    get accessibilityFeatures() {
      return this[_accessibilityFeatures];
    }
    render(scene) {
      if (src__engine.LayerScene.is(scene)) {
        this[_rasterizer].draw(scene.layerTree);
      } else {
        src__engine.domRenderer.renderScene(scene.webOnlyRootElement);
      }
    }
    static _submitScene(canvas) {
      if (dart.equals(canvas, ui.Window._previousCanvas)) return;
      if (ui.Window._previousCanvas != null) {
        ui.Window._previousCanvas.rootElement[$remove]();
      }
      ui.Window._previousCanvas = canvas;
      src__engine.domRenderer.append(src__engine.domRenderer.rootElement, canvas.rootElement);
    }
  };
  (ui.Window.__ = function() {
    this[_browserHistory] = new src__engine.BrowserHistory.new();
    this[devicePixelRatio] = 1.0;
    this[_physicalSize] = ui.Size.zero;
    this[_lastKnownWindowInnerWidth] = -1;
    this[_lastKnownWindowInnerHeight] = -1;
    this[webOnlyDebugPhysicalSizeOverride] = null;
    this[viewInsets] = ui.WindowPadding.zero;
    this[padding] = ui.WindowPadding.zero;
    this[_textScaleFactor] = 1.0;
    this[_alwaysUse24HourFormat] = false;
    this[_onTextScaleFactorChanged] = null;
    this[_platformBrightness] = ui.Brightness.light;
    this[_onPlatformBrightnessChanged] = null;
    this[_onMetricsChanged] = null;
    this[_locales] = const$46 || (const$46 = dart.constList([ui.Window._enUS], ui.Locale));
    this[_onLocaleChanged] = null;
    this[webOnlyScheduleFrameCallback] = null;
    this[_onBeginFrame] = null;
    this[_onDrawFrame] = null;
    this[_onPointerDataPacket] = null;
    this[_onSemanticsEnabledChanged] = null;
    this[_onSemanticsAction] = null;
    this[_onAccessibilityFeaturesChanged] = null;
    this[_onPlatformMessage] = null;
    this[_accessibilityFeatures] = new ui.AccessibilityFeatures.__(0);
    this[_rasterizer] = new src__engine.Rasterizer.new(new src__engine.Surface.new(dart.fn(ui.Window._submitScene, BitmapCanvasTovoid())));
    ;
  }).prototype = ui.Window.prototype;
  dart.addTypeTests(ui.Window);
  const devicePixelRatio = Symbol("Window.devicePixelRatio");
  const webOnlyDebugPhysicalSizeOverride = Symbol("Window.webOnlyDebugPhysicalSizeOverride");
  const viewInsets = Symbol("Window.viewInsets");
  const padding = Symbol("Window.padding");
  const webOnlyScheduleFrameCallback = Symbol("Window.webOnlyScheduleFrameCallback");
  dart.setMethodSignature(ui.Window, () => ({
    __proto__: dart.getMethods(ui.Window.__proto__),
    webOnlyBack: dart.fnType(async.Future$(dart.void), []),
    scheduleFrame: dart.fnType(dart.void, []),
    updateSemantics: dart.fnType(dart.void, [ui.SemanticsUpdate]),
    [_replyToPlatformMessage]: dart.fnType(dart.dynamic, [dart.fnType(dart.void, [typed_data.ByteData]), typed_data.ByteData]),
    sendPlatformMessage: dart.fnType(dart.void, [core.String, typed_data.ByteData, dart.fnType(dart.void, [typed_data.ByteData])]),
    [_getHapticFeedbackDuration]: dart.fnType(core.int, [core.String]),
    render: dart.fnType(dart.void, [ui.Scene])
  }));
  dart.setGetterSignature(ui.Window, () => ({
    __proto__: dart.getGetters(ui.Window.__proto__),
    physicalSize: ui.Size,
    textScaleFactor: core.double,
    alwaysUse24HourFormat: core.bool,
    onTextScaleFactorChanged: dart.fnType(dart.void, []),
    platformBrightness: ui.Brightness,
    onPlatformBrightnessChanged: dart.fnType(dart.void, []),
    onMetricsChanged: dart.fnType(dart.void, []),
    locale: ui.Locale,
    locales: core.List$(ui.Locale),
    onLocaleChanged: dart.fnType(dart.void, []),
    onBeginFrame: dart.fnType(dart.void, [core.Duration]),
    onDrawFrame: dart.fnType(dart.void, []),
    onPointerDataPacket: dart.fnType(dart.void, [ui.PointerDataPacket]),
    defaultRouteName: core.String,
    semanticsEnabled: core.bool,
    onSemanticsEnabledChanged: dart.fnType(dart.void, []),
    onSemanticsAction: dart.fnType(dart.void, [core.int, ui.SemanticsAction, typed_data.ByteData]),
    onAccessibilityFeaturesChanged: dart.fnType(dart.void, []),
    onPlatformMessage: dart.fnType(dart.void, [core.String, typed_data.ByteData, dart.fnType(dart.void, [typed_data.ByteData])]),
    accessibilityFeatures: ui.AccessibilityFeatures
  }));
  dart.setSetterSignature(ui.Window, () => ({
    __proto__: dart.getSetters(ui.Window.__proto__),
    webOnlyLocationStrategy: ui.LocationStrategy,
    webOnlyRouteName: core.String,
    onTextScaleFactorChanged: dart.fnType(dart.void, []),
    onPlatformBrightnessChanged: dart.fnType(dart.void, []),
    onMetricsChanged: dart.fnType(dart.void, []),
    onLocaleChanged: dart.fnType(dart.void, []),
    onBeginFrame: dart.fnType(dart.void, [core.Duration]),
    onDrawFrame: dart.fnType(dart.void, []),
    onPointerDataPacket: dart.fnType(dart.void, [ui.PointerDataPacket]),
    onSemanticsEnabledChanged: dart.fnType(dart.void, []),
    onSemanticsAction: dart.fnType(dart.void, [core.int, ui.SemanticsAction, typed_data.ByteData]),
    onAccessibilityFeaturesChanged: dart.fnType(dart.void, []),
    onPlatformMessage: dart.fnType(dart.void, [core.String, typed_data.ByteData, dart.fnType(dart.void, [typed_data.ByteData])])
  }));
  dart.setFieldSignature(ui.Window, () => ({
    __proto__: dart.getFields(ui.Window.__proto__),
    [_browserHistory]: dart.finalFieldType(src__engine.BrowserHistory),
    devicePixelRatio: dart.fieldType(core.double),
    [_physicalSize]: dart.fieldType(ui.Size),
    [_lastKnownWindowInnerWidth]: dart.fieldType(core.int),
    [_lastKnownWindowInnerHeight]: dart.fieldType(core.int),
    webOnlyDebugPhysicalSizeOverride: dart.fieldType(ui.Size),
    viewInsets: dart.fieldType(ui.WindowPadding),
    padding: dart.fieldType(ui.WindowPadding),
    [_textScaleFactor]: dart.fieldType(core.double),
    [_alwaysUse24HourFormat]: dart.fieldType(core.bool),
    [_onTextScaleFactorChanged]: dart.fieldType(dart.fnType(dart.void, [])),
    [_platformBrightness]: dart.fieldType(ui.Brightness),
    [_onPlatformBrightnessChanged]: dart.fieldType(dart.fnType(dart.void, [])),
    [_onMetricsChanged]: dart.fieldType(dart.fnType(dart.void, [])),
    [_locales]: dart.fieldType(core.List$(ui.Locale)),
    [_onLocaleChanged]: dart.fieldType(dart.fnType(dart.void, [])),
    webOnlyScheduleFrameCallback: dart.fieldType(dart.fnType(dart.void, [])),
    [_onBeginFrame]: dart.fieldType(dart.fnType(dart.void, [core.Duration])),
    [_onDrawFrame]: dart.fieldType(dart.fnType(dart.void, [])),
    [_onPointerDataPacket]: dart.fieldType(dart.fnType(dart.void, [ui.PointerDataPacket])),
    [_onSemanticsEnabledChanged]: dart.fieldType(dart.fnType(dart.void, [])),
    [_onSemanticsAction]: dart.fieldType(dart.fnType(dart.void, [core.int, ui.SemanticsAction, typed_data.ByteData])),
    [_onAccessibilityFeaturesChanged]: dart.fieldType(dart.fnType(dart.void, [])),
    [_onPlatformMessage]: dart.fieldType(dart.fnType(dart.void, [core.String, typed_data.ByteData, dart.fnType(dart.void, [typed_data.ByteData])])),
    [_accessibilityFeatures]: dart.fieldType(ui.AccessibilityFeatures),
    [_rasterizer]: dart.finalFieldType(src__engine.Rasterizer)
  }));
  dart.defineLazy(ui.Window, {
    /*ui.Window._enUS*/get _enUS() {
      return dart.const(new ui.Locale.new("en", "US"));
    },
    /*ui.Window._previousCanvas*/get _previousCanvas() {
      return null;
    },
    set _previousCanvas(_) {}
  });
  const _index$ = dart.privateName(ui, "_index");
  ui.AccessibilityFeatures = class AccessibilityFeatures extends core.Object {
    get accessibleNavigation() {
      return (dart.notNull(ui.AccessibilityFeatures._kAccessibleNavigation) & dart.notNull(this[_index$])) !== 0;
    }
    get invertColors() {
      return (dart.notNull(ui.AccessibilityFeatures._kInvertColorsIndex) & dart.notNull(this[_index$])) !== 0;
    }
    get disableAnimations() {
      return (dart.notNull(ui.AccessibilityFeatures._kDisableAnimationsIndex) & dart.notNull(this[_index$])) !== 0;
    }
    get boldText() {
      return (dart.notNull(ui.AccessibilityFeatures._kBoldTextIndex) & dart.notNull(this[_index$])) !== 0;
    }
    get reduceMotion() {
      return (dart.notNull(ui.AccessibilityFeatures._kReduceMotionIndex) & dart.notNull(this[_index$])) !== 0;
    }
    toString() {
      let features = JSArrayOfString().of([]);
      if (dart.test(this.accessibleNavigation)) features[$add]("accessibleNavigation");
      if (dart.test(this.invertColors)) features[$add]("invertColors");
      if (dart.test(this.disableAnimations)) features[$add]("disableAnimations");
      if (dart.test(this.boldText)) features[$add]("boldText");
      if (dart.test(this.reduceMotion)) features[$add]("reduceMotion");
      return "AccessibilityFeatures" + dart.str(features);
    }
    _equals(other) {
      if (other == null) return false;
      if (!dart.equals(dart.runtimeType(other), this[$runtimeType])) return false;
      let typedOther = ui.AccessibilityFeatures._check(other);
      return this[_index$] == typedOther[_index$];
    }
    get hashCode() {
      return dart.hashCode(this[_index$]);
    }
  };
  (ui.AccessibilityFeatures.__ = function(_index) {
    this[_index$] = _index;
    ;
  }).prototype = ui.AccessibilityFeatures.prototype;
  dart.addTypeTests(ui.AccessibilityFeatures);
  dart.setGetterSignature(ui.AccessibilityFeatures, () => ({
    __proto__: dart.getGetters(ui.AccessibilityFeatures.__proto__),
    accessibleNavigation: core.bool,
    invertColors: core.bool,
    disableAnimations: core.bool,
    boldText: core.bool,
    reduceMotion: core.bool
  }));
  dart.setFieldSignature(ui.AccessibilityFeatures, () => ({
    __proto__: dart.getFields(ui.AccessibilityFeatures.__proto__),
    [_index$]: dart.finalFieldType(core.int)
  }));
  dart.defineExtensionMethods(ui.AccessibilityFeatures, ['toString', '_equals']);
  dart.defineExtensionAccessors(ui.AccessibilityFeatures, ['hashCode']);
  dart.defineLazy(ui.AccessibilityFeatures, {
    /*ui.AccessibilityFeatures._kAccessibleNavigation*/get _kAccessibleNavigation() {
      return 1 << 0;
    },
    /*ui.AccessibilityFeatures._kInvertColorsIndex*/get _kInvertColorsIndex() {
      return 1 << 1;
    },
    /*ui.AccessibilityFeatures._kDisableAnimationsIndex*/get _kDisableAnimationsIndex() {
      return 1 << 2;
    },
    /*ui.AccessibilityFeatures._kBoldTextIndex*/get _kBoldTextIndex() {
      return 1 << 3;
    },
    /*ui.AccessibilityFeatures._kReduceMotionIndex*/get _kReduceMotionIndex() {
      return 1 << 4;
    }
  });
  ui.Brightness = class Brightness extends core.Object {
    toString() {
      return this[_name$0];
    }
  };
  (ui.Brightness.new = function(index, _name) {
    this.index = index;
    this[_name$0] = _name;
    ;
  }).prototype = ui.Brightness.prototype;
  dart.addTypeTests(ui.Brightness);
  dart.setFieldSignature(ui.Brightness, () => ({
    __proto__: dart.getFields(ui.Brightness.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$0]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(ui.Brightness, ['toString']);
  ui.Brightness.dark = dart.const(new ui.Brightness.new(0, "Brightness.dark"));
  ui.Brightness.light = dart.const(new ui.Brightness.new(1, "Brightness.light"));
  ui.Brightness.values = dart.constList([ui.Brightness.dark, ui.Brightness.light], ui.Brightness);
  let const$48;
  ui.ensureLeading = function(str, leading, opts) {
    let applyWhenEmpty = opts && 'applyWhenEmpty' in opts ? opts.applyWhenEmpty : true;
    if (str[$isEmpty] && !dart.test(applyWhenEmpty)) {
      return str;
    }
    return str[$startsWith](leading) ? str : dart.str(leading) + dart.str(str);
  };
  ui._ellipseContains = function(px, py, centerX, centerY, radiusX, radiusY) {
    let dx = dart.notNull(px) - dart.notNull(centerX);
    let dy = dart.notNull(py) - dart.notNull(centerY);
    return dx * dx / (dart.notNull(radiusX) * dart.notNull(radiusX)) + dy * dy / (dart.notNull(radiusY) * dart.notNull(radiusY)) < 1.0;
  };
  ui._surfaceStatsFor = function(surface) {
    if (!dart.test(ui._debugExplainSurfaceStats)) {
      dart.throw(core.Exception.new("_surfaceStatsFor is only available when _debugExplainSurfaceStats is set to true."));
    }
    return ui._surfaceStats[$putIfAbsent](surface, dart.fn(() => new ui._DebugSurfaceStats.new(surface), VoidTo_DebugSurfaceStats()));
  };
  ui._debugRepaintSurfaceStatsOverlay = function(scene) {
    let t4, t4$, t4$0, t4$1, t4$2, t4$3, t4$4, t4$5;
    let overlayWidth = html.window.innerWidth;
    let rowHeight = 30;
    let rowCount = 4;
    let overlayHeight = rowHeight * rowCount;
    let strokeWidth = 2;
    ui._surfaceStatsTimeline[$add](ui._surfaceStats);
    while (dart.notNull(ui._surfaceStatsTimeline[$length]) > dart.notNull(overlayWidth) / strokeWidth) {
      ui._surfaceStatsTimeline[$removeAt](0);
    }
    if (ui._debugSurfaceStatsOverlayCtx == null) {
      let _debugSurfaceStatsOverlay = html.CanvasElement.new({width: overlayWidth, height: overlayHeight});
      t4 = _debugSurfaceStatsOverlay.style;
      t4[$position] = "fixed";
      t4[$left] = "0";
      t4[$top] = "0";
      t4[$zIndex] = "1000";
      t4[$opacity] = "0.8";
      t4;
      ui._debugSurfaceStatsOverlayCtx = _debugSurfaceStatsOverlay[$context2D];
      html.document.body[$append](_debugSurfaceStatsOverlay);
    }
    t4$ = ui._debugSurfaceStatsOverlayCtx;
    t4$.fillStyle = "black";
    t4$.beginPath();
    t4$.rect(0, 0, overlayWidth, overlayHeight);
    t4$.fill();
    t4$;
    let physicalScreenWidth = dart.notNull(html.window.innerWidth) * dart.notNull(html.window.devicePixelRatio);
    let physicalScreenHeight = dart.notNull(html.window.innerHeight) * dart.notNull(html.window.devicePixelRatio);
    let physicsScreenPixelCount = physicalScreenWidth * physicalScreenHeight;
    let totalDomNodeCount = scene.rootElement[$querySelectorAll](html.Element, "*")[$length];
    for (let i = 0; i < dart.notNull(ui._surfaceStatsTimeline[$length]); i = i + 1) {
      let totals = new ui._DebugSurfaceStats.new(null);
      let pixelCount = 0;
      ui._surfaceStatsTimeline[$_get](i)[$values][$forEach](dart.fn(oneSurfaceStats => {
        totals.aggregate(oneSurfaceStats);
        if (ui.PersistedPicture.is(oneSurfaceStats.surface)) {
          let picture = ui.PersistedPicture._check(oneSurfaceStats.surface);
          pixelCount = pixelCount + dart.notNull(picture.bitmapPixelCount);
        }
      }, _DebugSurfaceStatsToNull()));
      let repaintRate = dart.notNull(totals.paintPixelCount) / pixelCount;
      let domAllocationRate = dart.notNull(totals.allocatedDomNodeCount) / dart.notNull(totalDomNodeCount);
      let bitmapAllocationRate = dart.notNull(totals.allocatedBitmapSizeInPixels) / physicsScreenPixelCount;
      let surfaceRetainRate = dart.notNull(totals.retainSurfaceCount) / dart.notNull(ui._surfaceStatsTimeline[$_get](i)[$length]);
      t4$0 = ui._debugSurfaceStatsOverlayCtx;
      t4$0.lineWidth = strokeWidth;
      t4$0.strokeStyle = "red";
      t4$0.beginPath();
      t4$0.moveTo(strokeWidth * i, rowHeight);
      t4$0.lineTo(strokeWidth * i, rowHeight * (1 - repaintRate));
      t4$0.stroke();
      t4$0;
      t4$1 = ui._debugSurfaceStatsOverlayCtx;
      t4$1.lineWidth = strokeWidth;
      t4$1.strokeStyle = "red";
      t4$1.beginPath();
      t4$1.moveTo(strokeWidth * i, 2 * rowHeight);
      t4$1.lineTo(strokeWidth * i, rowHeight * (2 - domAllocationRate));
      t4$1.stroke();
      t4$1;
      t4$2 = ui._debugSurfaceStatsOverlayCtx;
      t4$2.lineWidth = strokeWidth;
      t4$2.strokeStyle = "red";
      t4$2.beginPath();
      t4$2.moveTo(strokeWidth * i, 3 * rowHeight);
      t4$2.lineTo(strokeWidth * i, rowHeight * (3 - bitmapAllocationRate));
      t4$2.stroke();
      t4$2;
      t4$3 = ui._debugSurfaceStatsOverlayCtx;
      t4$3.lineWidth = strokeWidth;
      t4$3.strokeStyle = "green";
      t4$3.beginPath();
      t4$3.moveTo(strokeWidth * i, 4 * rowHeight);
      t4$3.lineTo(strokeWidth * i, rowHeight * (4 - surfaceRetainRate));
      t4$3.stroke();
      t4$3;
    }
    t4$4 = ui._debugSurfaceStatsOverlayCtx;
    t4$4.font = "normal normal 14px sans-serif";
    t4$4.fillStyle = "white";
    t4$4[$fillText]("Repaint rate", 5, rowHeight - 5);
    t4$4[$fillText]("DOM alloc rate", 5, 2 * rowHeight - 5);
    t4$4[$fillText]("Bitmap alloc rate", 5, 3 * rowHeight - 5);
    t4$4[$fillText]("Retain rate", 5, 4 * rowHeight - 5);
    t4$4;
    for (let i = 1; i <= rowCount; i = i + 1) {
      t4$5 = ui._debugSurfaceStatsOverlayCtx;
      t4$5.lineWidth = 1;
      t4$5.strokeStyle = "blue";
      t4$5.beginPath();
      t4$5.moveTo(0, overlayHeight - rowHeight * i);
      t4$5.lineTo(overlayWidth, overlayHeight - rowHeight * i);
      t4$5.stroke();
      t4$5;
    }
  };
  ui._debugPrintSurfaceStats = function(scene, frameNumber) {
    let t4;
    let pictureCount = 0;
    let paintCount = 0;
    let bitmapCanvasCount = 0;
    let bitmapReuseCount = 0;
    let bitmapAllocationCount = 0;
    let bitmapPaintCount = 0;
    let bitmapPixelsAllocated = 0;
    let domCanvasCount = 0;
    let domPaintCount = 0;
    let surfaceRetainCount = 0;
    let elementReuseCount = 0;
    let totalAllocatedDomNodeCount = 0;
    function countReusesRecursively(surface) {
      let stats = ui._surfaceStatsFor(surface);
      if (!(stats != null)) dart.assertFailed();
      surfaceRetainCount = surfaceRetainCount + dart.notNull(stats.retainSurfaceCount);
      elementReuseCount = elementReuseCount + dart.notNull(stats.reuseElementCount);
      totalAllocatedDomNodeCount = totalAllocatedDomNodeCount + dart.notNull(stats.allocatedDomNodeCount);
      if (ui.PersistedStandardPicture.is(surface)) {
        pictureCount = pictureCount + 1;
        paintCount = paintCount + dart.notNull(stats.paintCount);
        if (src__engine.DomCanvas.is(surface[_canvas$])) {
          domCanvasCount = domCanvasCount + 1;
          domPaintCount = domPaintCount + dart.notNull(stats.paintCount);
        }
        if (src__engine.BitmapCanvas.is(surface[_canvas$])) {
          bitmapCanvasCount = bitmapCanvasCount + 1;
          bitmapPaintCount = bitmapPaintCount + dart.notNull(stats.paintCount);
        }
        bitmapReuseCount = bitmapReuseCount + dart.notNull(stats.reuseCanvasCount);
        bitmapAllocationCount = bitmapAllocationCount + dart.notNull(stats.allocateBitmapCanvasCount);
        bitmapPixelsAllocated = bitmapPixelsAllocated + dart.notNull(stats.allocatedBitmapSizeInPixels);
      }
      surface.visitChildren(countReusesRecursively);
    }
    dart.fn(countReusesRecursively, PersistedSurfaceTovoid());
    scene.visitChildren(countReusesRecursively);
    let buf = new core.StringBuffer.new();
    t4 = buf;
    t4.writeln("---------------------- FRAME #" + dart.str(frameNumber) + " -------------------------");
    t4.writeln("Surfaces retained: " + dart.str(surfaceRetainCount));
    t4.writeln("Elements reused: " + dart.str(elementReuseCount));
    t4.writeln("Elements allocated: " + dart.str(totalAllocatedDomNodeCount));
    t4.writeln("Pictures: " + dart.str(pictureCount));
    t4.writeln("  Painted: " + dart.str(paintCount));
    t4.writeln("  Skipped painting: " + dart.str(pictureCount - paintCount));
    t4.writeln("DOM canvases:");
    t4.writeln("  Painted: " + dart.str(domPaintCount));
    t4.writeln("  Skipped painting: " + dart.str(domCanvasCount - domPaintCount));
    t4.writeln("Bitmap canvases: " + dart.str(bitmapCanvasCount));
    t4.writeln("  Painted: " + dart.str(bitmapPaintCount));
    t4.writeln("  Skipped painting: " + dart.str(bitmapCanvasCount - bitmapPaintCount));
    t4.writeln("  Reused: " + dart.str(bitmapReuseCount));
    t4.writeln("  Allocated: " + dart.str(bitmapAllocationCount));
    t4.writeln("  Allocated pixels: " + dart.str(bitmapPixelsAllocated));
    t4.writeln("  Available for reuse: " + dart.str(ui._recycledCanvases[$length]));
    t4;
    async.scheduleMicrotask(dart.fn(() => {
      let t4;
      let canvasElements = html.document[$querySelectorAll](html.Element, "canvas");
      let canvasInfo = new core.StringBuffer.new();
      let pixelCount = canvasElements[$cast](html.CanvasElement)[$map](core.int, dart.fn(e => {
        let pixels = dart.notNull(e.width) * dart.notNull(e.height);
        canvasInfo.writeln("    - " + dart.str(e.width) + " x " + dart.str(e.height) + " = " + dart.str(pixels) + " pixels");
        return pixels;
      }, CanvasElementToint()))[$fold](core.int, 0, dart.fn((total, pixels) => dart.notNull(total) + dart.notNull(pixels), intAndintToint()));
      let physicalScreenWidth = dart.notNull(html.window.innerWidth) * dart.notNull(html.window.devicePixelRatio);
      let physicalScreenHeight = dart.notNull(html.window.innerHeight) * dart.notNull(html.window.devicePixelRatio);
      let physicsScreenPixelCount = physicalScreenWidth * physicalScreenHeight;
      let screenPixelRatio = dart.notNull(pixelCount) / physicsScreenPixelCount;
      let screenDescription = "1 screen is " + dart.str(physicalScreenWidth) + " x " + dart.str(physicalScreenHeight) + " = " + dart.str(physicsScreenPixelCount) + " pixels";
      let canvasPixelDescription = dart.str(pixelCount) + " (" + screenPixelRatio[$toStringAsFixed](2) + " x screens";
      t4 = buf;
      t4.writeln("  Elements: " + dart.str(canvasElements[$length]));
      t4.writeln(canvasInfo);
      t4.writeln("  Pixels: " + canvasPixelDescription + "; " + screenDescription + ")");
      t4.writeln("-----------------------------------------------------------");
      t4;
      let screenPixelRatioTooHigh = screenPixelRatio > dart.notNull(ui._kScreenPixelRatioWarningThreshold);
      if (screenPixelRatioTooHigh) {
        core.print("WARNING: pixel/screen ratio too high (" + screenPixelRatio[$toStringAsFixed](2) + "x)");
      }
      core.print(buf);
    }, VoidToNull()));
  };
  ui._retainSurface = function(surface) {
    ui._retainedSurfaces[$add](surface);
    surface.retain();
  };
  ui._recycleCanvas = function(canvas) {
    let t4;
    if (src__engine.BitmapCanvas.is(canvas) && dart.test(canvas.isReusable())) {
      ui._recycledCanvases[$add](canvas);
      if (dart.notNull(ui._recycledCanvases[$length]) > dart.notNull(ui._kCanvasCacheSize)) {
        let removedCanvas = ui._recycledCanvases[$removeAt](0);
        removedCanvas.dispose();
        if (dart.test(ui._debugShowCanvasReuseStats)) {
          t4 = ui.DebugCanvasReuseOverlay.instance;
          t4.disposedCount = dart.notNull(t4.disposedCount) + 1;
        }
      }
      if (dart.test(ui._debugShowCanvasReuseStats)) {
        ui.DebugCanvasReuseOverlay.instance.inRecycleCount = ui._recycledCanvases[$length];
      }
    }
  };
  ui.standardPictureFactory = function(webOnlyPaintedBy, dx, dy, picture, hints) {
    return new ui.PersistedStandardPicture.new(webOnlyPaintedBy, dx, dy, picture, hints);
  };
  ui.houdiniPictureFactory = function(webOnlyPaintedBy, dx, dy, picture, hints) {
    return new ui.PersistedHoudiniPicture.new(webOnlyPaintedBy, dx, dy, picture, hints);
  };
  ui._pathToSvgClipPath = function(path, opts) {
    let offsetX = opts && 'offsetX' in opts ? opts.offsetX : 0.0;
    let offsetY = opts && 'offsetY' in opts ? opts.offsetY : 0.0;
    let bounds = path.getBounds();
    let sb = new core.StringBuffer.new();
    sb.write("<svg width=\"" + dart.str(bounds.right) + "\" height=\"" + dart.str(bounds.bottom) + "\" " + "style=\"position:absolute\">");
    sb.write("<defs>");
    let clipId = "svgClip" + dart.str(ui._clipCounter = dart.notNull(ui._clipCounter) + 1);
    sb.write("<clipPath id=" + clipId + ">");
    sb.write("<path fill=\"#FFFFFF\" d=\"");
    src__engine.pathToSvg(path, sb, {offsetX: offsetX, offsetY: offsetY});
    sb.write("\"></path></clipPath></defs></svg");
    return sb.toString();
  };
  ui._createContainer = function() {
    let t4;
    let container = html.DivElement.new();
    t4 = container.style;
    t4[$position] = "fixed";
    t4[$top] = "0";
    t4[$right] = "0";
    t4[$padding] = "6px";
    t4[$color] = "#fff";
    t4[$backgroundColor] = "#000";
    t4[$opacity] = "0.8";
    t4;
    return container;
  };
  ui.hashValues = function(arg01, arg02, arg03, arg04, arg05, arg06, arg07, arg08, arg09, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20) {
    if (arg03 === void 0) arg03 = ui._hashEnd;
    if (arg04 === void 0) arg04 = ui._hashEnd;
    if (arg05 === void 0) arg05 = ui._hashEnd;
    if (arg06 === void 0) arg06 = ui._hashEnd;
    if (arg07 === void 0) arg07 = ui._hashEnd;
    if (arg08 === void 0) arg08 = ui._hashEnd;
    if (arg09 === void 0) arg09 = ui._hashEnd;
    if (arg10 === void 0) arg10 = ui._hashEnd;
    if (arg11 === void 0) arg11 = ui._hashEnd;
    if (arg12 === void 0) arg12 = ui._hashEnd;
    if (arg13 === void 0) arg13 = ui._hashEnd;
    if (arg14 === void 0) arg14 = ui._hashEnd;
    if (arg15 === void 0) arg15 = ui._hashEnd;
    if (arg16 === void 0) arg16 = ui._hashEnd;
    if (arg17 === void 0) arg17 = ui._hashEnd;
    if (arg18 === void 0) arg18 = ui._hashEnd;
    if (arg19 === void 0) arg19 = ui._hashEnd;
    if (arg20 === void 0) arg20 = ui._hashEnd;
    let result = 373;
    if (!!core.Iterable.is(arg01)) dart.assertFailed();
    result = 37 * result + dart.notNull(dart.hashCode(arg01));
    if (!!core.Iterable.is(arg02)) dart.assertFailed();
    result = 37 * result + dart.notNull(dart.hashCode(arg02));
    if (!dart.equals(arg03, ui._hashEnd)) {
      if (!!core.Iterable.is(arg03)) dart.assertFailed();
      result = 37 * result + dart.notNull(dart.hashCode(arg03));
      if (!dart.equals(arg04, ui._hashEnd)) {
        if (!!core.Iterable.is(arg04)) dart.assertFailed();
        result = 37 * result + dart.notNull(dart.hashCode(arg04));
        if (!dart.equals(arg05, ui._hashEnd)) {
          if (!!core.Iterable.is(arg05)) dart.assertFailed();
          result = 37 * result + dart.notNull(dart.hashCode(arg05));
          if (!dart.equals(arg06, ui._hashEnd)) {
            if (!!core.Iterable.is(arg06)) dart.assertFailed();
            result = 37 * result + dart.notNull(dart.hashCode(arg06));
            if (!dart.equals(arg07, ui._hashEnd)) {
              if (!!core.Iterable.is(arg07)) dart.assertFailed();
              result = 37 * result + dart.notNull(dart.hashCode(arg07));
              if (!dart.equals(arg08, ui._hashEnd)) {
                if (!!core.Iterable.is(arg08)) dart.assertFailed();
                result = 37 * result + dart.notNull(dart.hashCode(arg08));
                if (!dart.equals(arg09, ui._hashEnd)) {
                  if (!!core.Iterable.is(arg09)) dart.assertFailed();
                  result = 37 * result + dart.notNull(dart.hashCode(arg09));
                  if (!dart.equals(arg10, ui._hashEnd)) {
                    if (!!core.Iterable.is(arg10)) dart.assertFailed();
                    result = 37 * result + dart.notNull(dart.hashCode(arg10));
                    if (!dart.equals(arg11, ui._hashEnd)) {
                      if (!!core.Iterable.is(arg11)) dart.assertFailed();
                      result = 37 * result + dart.notNull(dart.hashCode(arg11));
                      if (!dart.equals(arg12, ui._hashEnd)) {
                        if (!!core.Iterable.is(arg12)) dart.assertFailed();
                        result = 37 * result + dart.notNull(dart.hashCode(arg12));
                        if (!dart.equals(arg13, ui._hashEnd)) {
                          if (!!core.Iterable.is(arg13)) dart.assertFailed();
                          result = 37 * result + dart.notNull(dart.hashCode(arg13));
                          if (!dart.equals(arg14, ui._hashEnd)) {
                            if (!!core.Iterable.is(arg14)) dart.assertFailed();
                            result = 37 * result + dart.notNull(dart.hashCode(arg14));
                            if (!dart.equals(arg15, ui._hashEnd)) {
                              if (!!core.Iterable.is(arg15)) dart.assertFailed();
                              result = 37 * result + dart.notNull(dart.hashCode(arg15));
                              if (!dart.equals(arg16, ui._hashEnd)) {
                                if (!!core.Iterable.is(arg16)) dart.assertFailed();
                                result = 37 * result + dart.notNull(dart.hashCode(arg16));
                                if (!dart.equals(arg17, ui._hashEnd)) {
                                  if (!!core.Iterable.is(arg17)) dart.assertFailed();
                                  result = 37 * result + dart.notNull(dart.hashCode(arg17));
                                  if (!dart.equals(arg18, ui._hashEnd)) {
                                    if (!!core.Iterable.is(arg18)) dart.assertFailed();
                                    result = 37 * result + dart.notNull(dart.hashCode(arg18));
                                    if (!dart.equals(arg19, ui._hashEnd)) {
                                      if (!!core.Iterable.is(arg19)) dart.assertFailed();
                                      result = 37 * result + dart.notNull(dart.hashCode(arg19));
                                      if (!dart.equals(arg20, ui._hashEnd)) {
                                        if (!!core.Iterable.is(arg20)) dart.assertFailed();
                                        result = 37 * result + dart.notNull(dart.hashCode(arg20));
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    return result;
  };
  ui.hashList = function(args) {
    let result = 373;
    if (args != null) {
      for (let arg of args) {
        if (!!core.Iterable.is(arg)) dart.assertFailed();
        result = 37 * result + dart.notNull(dart.hashCode(arg));
      }
    }
    return result;
  };
  ui.webOnlyInitializePlatform = function(opts) {
    let assetManager = opts && 'assetManager' in opts ? opts.assetManager : null;
    return async.async(dart.void, function* webOnlyInitializePlatform() {
      if (!dart.test(src__engine.domRenderer.debugIsInWidgetTest)) {
        ui.window.webOnlyLocationStrategy = const$48 || (const$48 = dart.const(new ui.HashLocationStrategy.new()));
      }
      if (assetManager == null) {
        assetManager = new src__engine.AssetManager.new();
      }
      yield ui.webOnlySetAssetManager(assetManager);
      yield ui._fontCollection.ensureFontsLoaded();
      src__engine.webOnlyInitializeEngine();
      ui._webOnlyIsInitialized = true;
    });
  };
  ui.webOnlySetAssetManager = function(assetManager) {
    return async.async(dart.void, function* webOnlySetAssetManager() {
      if (!(assetManager != null)) dart.assertFailed("Cannot set assetManager to null");
      if (dart.equals(assetManager, ui._assetManager)) return;
      ui._assetManager = assetManager;
      ui._fontCollection == null ? ui._fontCollection = new src__engine.FontCollection.new() : null;
      ui._fontCollection.clear();
      if (ui._assetManager != null) {
        yield ui._fontCollection.registerFonts(ui._assetManager);
      }
      if (dart.test(src__engine.domRenderer.debugIsInWidgetTest)) {
        ui._fontCollection.debugRegisterTestFonts();
      }
    });
  };
  ui.lerpDouble = function(a, b, t) {
    if (a == null && b == null) return null;
    a == null ? a = 0.0 : null;
    b == null ? b = 0.0 : null;
    return dart.notNull(a) + (dart.notNull(b) - dart.notNull(a)) * dart.notNull(t);
  };
  ui.saveCompilationTrace = function() {
    dart.throw(new core.UnimplementedError.new());
  };
  ui._offsetIsValid = function(offset) {
    if (!(offset != null)) dart.assertFailed("Offset argument was null.");
    if (!(!offset.dx[$isNaN] && !offset.dy[$isNaN])) dart.assertFailed("Offset argument contained a NaN value.");
    return true;
  };
  ui._matrix4IsValid = function(matrix4) {
    if (!(matrix4 != null)) dart.assertFailed("Matrix4 argument was null.");
    if (!(matrix4[$length] === 16)) dart.assertFailed("Matrix4 must have 16 entries.");
    return true;
  };
  ui._scaleAlpha = function(a, factor) {
    return a.withAlpha(dart.asInt((dart.notNull(a.alpha) * dart.notNull(factor))[$round]()[$clamp](0, 255)));
  };
  ui._validateColorStops = function(colors, colorStops) {
    if (colorStops == null) {
      if (colors[$length] !== 2) dart.throw(new core.ArgumentError.new("\"colors\" must have length 2 if \"colorStops\" is omitted."));
    } else {
      if (colors[$length] != colorStops[$length]) dart.throw(new core.ArgumentError.new("\"colors\" and \"colorStops\" arguments must have equal length."));
    }
  };
  ui.instantiateImageCodec = function(list, opts) {
    let decodedCacheRatioCap = opts && 'decodedCacheRatioCap' in opts ? opts.decodedCacheRatioCap : core.double.infinity;
    return src__engine.futurize(ui.Codec, dart.fn(callback => ui._instantiateImageCodec(list, callback, null), FnToString$()));
  };
  ui._instantiateImageCodec = function(list, callback, imageInfo) {
    let blob = html.Blob.new([list[$buffer]]);
    callback(new src__engine.HtmlBlobCodec.new(blob));
    return null;
  };
  ui.webOnlyInstantiateImageCodecFromUrl = function(uri) {
    return src__engine.futurize(ui.Codec, dart.fn(callback => ui._instantiateImageCodecFromUrl(uri, callback), FnToString$()));
  };
  ui._instantiateImageCodecFromUrl = function(uri, callback) {
    callback(new src__engine.HtmlCodec.new(dart.toString(uri)));
    return null;
  };
  ui.decodeImageFromList = function(list, callback) {
    ui._decodeImageFromListAsync(list, callback);
  };
  ui._decodeImageFromListAsync = function(list, callback) {
    return async.async(dart.void, function* _decodeImageFromListAsync() {
      let codec = (yield ui.instantiateImageCodec(list));
      let frameInfo = (yield codec.getNextFrame());
      callback(frameInfo.image);
    });
  };
  ui.decodeImageFromPixels = function(pixels, width, height, format, callback, opts) {
    let rowBytes = opts && 'rowBytes' in opts ? opts.rowBytes : null;
    let imageInfo = new ui._ImageInfo.new(width, height, format.index, rowBytes);
    let codecFuture = src__engine.futurize(ui.Codec, dart.fn(callback => ui._instantiateImageCodec(pixels, callback, imageInfo), FnToString$()));
    codecFuture.then(ui.FrameInfo, dart.fn(codec => codec.getNextFrame(), CodecToFutureOfFrameInfo())).then(dart.void, dart.fn(frameInfo => callback(frameInfo.image), FrameInfoTovoid()));
  };
  ui.textAlignToCssValue = function(align, textDirection) {
    switch (align) {
      case ui.TextAlign.left:
      {
        return "left";
      }
      case ui.TextAlign.right:
      {
        return "right";
      }
      case ui.TextAlign.center:
      {
        return "center";
      }
      case ui.TextAlign.justify:
      {
        return "justify";
      }
      case ui.TextAlign.start:
      {
        switch (textDirection) {
          case ui.TextDirection.ltr:
          {
            return null;
          }
          case ui.TextDirection.rtl:
          {
            return "right";
          }
        }
        break;
      }
      case ui.TextAlign.end:
      {
        switch (textDirection) {
          case ui.TextDirection.ltr:
          {
            return "end";
          }
          case ui.TextDirection.rtl:
          {
            return "left";
          }
        }
        break;
      }
    }
    dart.throw(new core.AssertionError.new("Unsupported TextAlign value " + dart.str(align)));
  };
  ui._listEquals = function(T, a, b) {
    if (a == null) return b == null;
    if (b == null || a[$length] != b[$length]) return false;
    for (let index = 0; index < dart.notNull(a[$length]); index = index + 1) {
      if (!dart.equals(a[$_get](index), b[$_get](index))) return false;
    }
    return true;
  };
  ui.textDirectionToCssValue = function(textDirection) {
    return dart.equals(textDirection, ui.TextDirection.ltr) ? null : "rtl";
  };
  ui.applyTextBackgroundToElement = function(opts) {
    let t4;
    let element = opts && 'element' in opts ? opts.element : null;
    let style = opts && 'style' in opts ? opts.style : null;
    let previousStyle = opts && 'previousStyle' in opts ? opts.previousStyle : null;
    let newBackground = style[_background];
    if (previousStyle == null) {
      if (newBackground != null) {
        src__engine.domRenderer.setElementStyle(element, "background-color", newBackground.color.toCssString());
      }
    } else {
      if (!dart.equals(newBackground, previousStyle[_background])) {
        src__engine.domRenderer.setElementStyle(element, "background-color", (t4 = newBackground.color, t4 == null ? null : t4.toCssString()));
      }
    }
  };
  ui.applyTextStyleToElement = function(opts) {
    let t4, t4$, t4$0;
    let element = opts && 'element' in opts ? opts.element : null;
    let style = opts && 'style' in opts ? opts.style : null;
    let previousStyle = opts && 'previousStyle' in opts ? opts.previousStyle : null;
    if (!(element != null)) dart.assertFailed();
    if (!(style != null)) dart.assertFailed();
    let updateDecoration = false;
    let cssStyle = element.style;
    if (previousStyle == null) {
      let color = style[_color];
      if ((t4 = style[_foreground], t4 == null ? null : t4.color) != null) color = style[_foreground].color;
      if (color != null) {
        cssStyle[$color] = color.toCssString();
      }
      if (style[_fontSize] != null) {
        cssStyle[$fontSize] = dart.str(style[_fontSize][$floor]()) + "px";
      }
      if (style[_fontWeight] != null) {
        cssStyle[$fontWeight] = ui.webOnlyFontWeightToCss(style[_fontWeight]);
      }
      if (style[_fontStyle] != null) {
        cssStyle[$fontStyle] = dart.equals(style[_fontStyle], ui.FontStyle.normal) ? "normal" : "italic";
      }
      if (style[_effectiveFontFamily] != null) {
        cssStyle[$fontFamily] = style[_effectiveFontFamily];
      }
      if (style[_letterSpacing] != null) {
        cssStyle[$letterSpacing] = dart.str(style[_letterSpacing]) + "px";
      }
      if (style[_wordSpacing] != null) {
        cssStyle[$wordSpacing] = dart.str(style[_wordSpacing]) + "px";
      }
      if (style[_decoration] != null) {
        updateDecoration = true;
      }
    } else {
      if (!dart.equals(style[_color], previousStyle[_color]) || !dart.equals(style[_foreground], previousStyle[_foreground])) {
        let color = style[_color];
        if ((t4$ = style[_foreground], t4$ == null ? null : t4$.color) != null) {
          color = style[_foreground].color;
        }
        cssStyle[$color] = (t4$0 = color, t4$0 == null ? null : t4$0.toCssString());
      }
      if (style[_fontSize] != previousStyle[_fontSize]) {
        cssStyle[$fontSize] = style[_fontSize] != null ? dart.str(style[_fontSize][$floor]()) + "px" : null;
      }
      if (!dart.equals(style[_fontWeight], previousStyle[_fontWeight])) {
        cssStyle[$fontWeight] = ui.webOnlyFontWeightToCss(style[_fontWeight]);
      }
      if (!dart.equals(style[_fontStyle], previousStyle[_fontStyle])) {
        cssStyle[$fontStyle] = style[_fontStyle] != null ? dart.equals(style[_fontStyle], ui.FontStyle.normal) ? "normal" : "italic" : null;
      }
      if (style[_fontFamily] != previousStyle[_fontFamily]) {
        cssStyle[$fontFamily] = style[_fontFamily];
      }
      if (style[_letterSpacing] != previousStyle[_letterSpacing]) {
        cssStyle[$letterSpacing] = dart.str(style[_letterSpacing]) + "px";
      }
      if (style[_wordSpacing] != previousStyle[_wordSpacing]) {
        cssStyle[$wordSpacing] = dart.str(style[_wordSpacing]) + "px";
      }
      if (!dart.equals(style[_decoration], previousStyle[_decoration]) || !dart.equals(style[_decorationStyle], previousStyle[_decorationStyle]) || !dart.equals(style[_decorationColor], previousStyle[_decorationColor])) {
        updateDecoration = true;
      }
    }
    if (updateDecoration) {
      if (style[_decoration] != null) {
        let textDecoration = ui._textDecorationToCssString(style[_decoration], style[_decorationStyle]);
        if (textDecoration != null) {
          cssStyle[$textDecoration] = textDecoration;
          let decorationColor = style[_decorationColor];
          if (decorationColor != null) {
            cssStyle[$textDecorationColor] = decorationColor.toCssString();
          }
        }
      }
    }
  };
  ui._textDecorationToCssString = function(decoration, decorationStyle) {
    let decorations = new core.StringBuffer.new();
    if (decoration != null) {
      if (dart.test(decoration.contains(ui.TextDecoration.underline))) {
        decorations.write("underline ");
      }
      if (dart.test(decoration.contains(ui.TextDecoration.overline))) {
        decorations.write("overline ");
      }
      if (dart.test(decoration.contains(ui.TextDecoration.lineThrough))) {
        decorations.write("line-through ");
      }
    }
    if (decorationStyle != null) {
      decorations.write(ui._decorationStyleToCssString(decorationStyle));
    }
    return dart.test(decorations.isEmpty) ? null : decorations.toString();
  };
  ui._decorationStyleToCssString = function(decorationStyle) {
    switch (decorationStyle) {
      case ui.TextDecorationStyle.dashed:
      {
        return "dashed";
      }
      case ui.TextDecorationStyle.dotted:
      {
        return "dotted";
      }
      case ui.TextDecorationStyle.double:
      {
        return "double";
      }
      case ui.TextDecorationStyle.solid:
      {
        return "solid";
      }
      case ui.TextDecorationStyle.wavy:
      {
        return "wavy";
      }
      default:
      {
        return null;
      }
    }
  };
  ui.applyParagraphStyleToElement = function(opts) {
    let t4, t4$;
    let element = opts && 'element' in opts ? opts.element : null;
    let style = opts && 'style' in opts ? opts.style : null;
    let previousStyle = opts && 'previousStyle' in opts ? opts.previousStyle : null;
    if (!(element != null)) dart.assertFailed();
    if (!(style != null)) dart.assertFailed();
    let cssStyle = element.style;
    if (previousStyle == null) {
      if (style[_textAlign] != null) {
        cssStyle[$textAlign] = ui.textAlignToCssValue(style[_textAlign], (t4 = style[_textDirection$], t4 == null ? ui.TextDirection.ltr : t4));
      }
      if (style[_webOnlyLineHeight] != null) {
        cssStyle[$lineHeight] = dart.str(style[_webOnlyLineHeight]);
      }
      if (style[_textDirection$] != null) {
        cssStyle[$direction] = ui.textDirectionToCssValue(style[_textDirection$]);
      }
      if (style[_fontSize] != null) {
        cssStyle[$fontSize] = dart.str(style[_fontSize][$floor]()) + "px";
      }
      if (style[_fontWeight] != null) {
        cssStyle[$fontWeight] = ui.webOnlyFontWeightToCss(style[_fontWeight]);
      }
      if (style[_fontStyle] != null) {
        cssStyle[$fontStyle] = dart.equals(style[_fontStyle], ui.FontStyle.normal) ? "normal" : "italic";
      }
      if (style[_effectiveFontFamily] != null) {
        cssStyle[$fontFamily] = style[_effectiveFontFamily];
      }
    } else {
      if (!dart.equals(style[_textAlign], previousStyle[_textAlign])) {
        cssStyle[$textAlign] = ui.textAlignToCssValue(style[_textAlign], (t4$ = style[_textDirection$], t4$ == null ? ui.TextDirection.ltr : t4$));
      }
      if (style[_webOnlyLineHeight] != style[_webOnlyLineHeight]) {
        cssStyle[$lineHeight] = dart.str(style[_webOnlyLineHeight]);
      }
      if (!dart.equals(style[_textDirection$], previousStyle[_textDirection$])) {
        cssStyle[$direction] = ui.textDirectionToCssValue(style[_textDirection$]);
      }
      if (style[_fontSize] != previousStyle[_fontSize]) {
        cssStyle[$fontSize] = style[_fontSize] != null ? dart.str(style[_fontSize][$floor]()) + "px" : null;
      }
      if (!dart.equals(style[_fontWeight], previousStyle[_fontWeight])) {
        cssStyle[$fontWeight] = ui.webOnlyFontWeightToCss(style[_fontWeight]);
      }
      if (!dart.equals(style[_fontStyle], previousStyle[_fontStyle])) {
        cssStyle[$fontStyle] = style[_fontStyle] != null ? dart.equals(style[_fontStyle], ui.FontStyle.normal) ? "normal" : "italic" : null;
      }
      if (style[_fontFamily] != previousStyle[_fontFamily]) {
        cssStyle[$fontFamily] = style[_fontFamily];
      }
    }
  };
  ui.webOnlyFontWeightToCss = function(fontWeight) {
    if (fontWeight == null) {
      return null;
    }
    switch (fontWeight.index) {
      case 0:
      {
        return "100";
      }
      case 1:
      {
        return "200";
      }
      case 2:
      {
        return "300";
      }
      case 3:
      {
        return "normal";
      }
      case 4:
      {
        return "500";
      }
      case 5:
      {
        return "600";
      }
      case 6:
      {
        return "bold";
      }
      case 7:
      {
        return "800";
      }
      case 8:
      {
        return "900";
      }
    }
    if (!dart.dassert(dart.fn(() => {
      dart.throw(new core.AssertionError.new("Failed to convert font weight " + dart.str(fontWeight) + " to CSS."));
    }, VoidToNull())())) dart.assertFailed();
    return "";
  };
  ui.loadFontFromList = function(list, opts) {
    let fontFamily = opts && 'fontFamily' in opts ? opts.fontFamily : null;
    if (dart.test(src__engine.assertionsEnabled)) {
      dart.throw(new core.UnsupportedError.new("loadFontFromList is not supported."));
    }
    return FutureOfvoid().value(null);
  };
  dart.copyProperties(ui, {
    get debugRetainedSurfaces() {
      return ui._retainedSurfaces;
    },
    get webOnlyIsInitialized() {
      return ui._webOnlyIsInitialized;
    },
    get webOnlyAssetManager() {
      return ui._assetManager;
    },
    get webOnlyFontCollection() {
      return ui._fontCollection;
    }
  });
  dart.defineLazy(ui, {
    /*ui.isWeb*/get isWeb() {
      return true;
    },
    /*ui.kMaxUnsignedSMI*/get kMaxUnsignedSMI() {
      return -1;
    },
    /*ui._debugExplainSurfaceStats*/get _debugExplainSurfaceStats() {
      return false;
    },
    /*ui._debugShowCanvasReuseStats*/get _debugShowCanvasReuseStats() {
      return false;
    },
    /*ui.debugShowClipLayers*/get debugShowClipLayers() {
      return false;
    },
    set debugShowClipLayers(_) {},
    /*ui._kScreenPixelRatioWarningThreshold*/get _kScreenPixelRatioWarningThreshold() {
      return 6.0;
    },
    /*ui._webOnlyDidWarnAboutPerformanceOverlay*/get _webOnlyDidWarnAboutPerformanceOverlay() {
      return false;
    },
    set _webOnlyDidWarnAboutPerformanceOverlay(_) {},
    /*ui._surfaceStats*/get _surfaceStats() {
      return new (LinkedMapOfPersistedSurface$_DebugSurfaceStats()).new();
    },
    set _surfaceStats(_) {},
    /*ui._surfaceStatsTimeline*/get _surfaceStatsTimeline() {
      return JSArrayOfMapOfPersistedSurface$_DebugSurfaceStats().of([]);
    },
    set _surfaceStatsTimeline(_) {},
    /*ui._debugSurfaceStatsOverlayCtx*/get _debugSurfaceStatsOverlayCtx() {
      return null;
    },
    set _debugSurfaceStatsOverlayCtx(_) {},
    /*ui._clipCounter*/get _clipCounter() {
      return 0;
    },
    set _clipCounter(_) {},
    /*ui._kCanvasCacheSize*/get _kCanvasCacheSize() {
      return 30;
    },
    /*ui._recycledCanvases*/get _recycledCanvases() {
      return JSArrayOfBitmapCanvas().of([]);
    },
    /*ui._paintQueue*/get _paintQueue() {
      return JSArrayOf_PaintRequest().of([]);
    },
    set _paintQueue(_) {},
    /*ui._retainedSurfaces*/get _retainedSurfaces() {
      return JSArrayOfPersistedSurface().of([]);
    },
    set _retainedSurfaces(_) {},
    /*ui.persistedPictureFactory*/get persistedPictureFactory() {
      return dart.fn(ui.standardPictureFactory, ObjectAnddoubleAnddouble__ToPersistedStandardPicture());
    },
    set persistedPictureFactory(_) {},
    /*ui._hashEnd*/get _hashEnd() {
      return dart.const(new ui._HashEnd.new());
    },
    /*ui._assetManager*/get _assetManager() {
      return null;
    },
    set _assetManager(_) {},
    /*ui._fontCollection*/get _fontCollection() {
      return null;
    },
    set _fontCollection(_) {},
    /*ui._webOnlyIsInitialized*/get _webOnlyIsInitialized() {
      return false;
    },
    set _webOnlyIsInitialized(_) {},
    /*ui._debugPrintPlatformMessages*/get _debugPrintPlatformMessages() {
      return false;
    },
    /*ui.window*/get window() {
      return new ui.Window.__();
    }
  });
  dart.trackLibraries("packages/flutter_web_ui/ui", {
    "package:flutter_web_ui/src/engine.dart": src__engine,
    "package:flutter_web_ui/ui.dart": ui
  }, '{"version":3,"sourceRoot":"","sources":["org-dartlang-app:///packages/flutter_web_ui/src/engine/alarm_clock.dart","org-dartlang-app:///packages/flutter_web_ui/src/engine/assets.dart","org-dartlang-app:///packages/flutter_web_ui/src/engine/engine_canvas.dart","org-dartlang-app:///packages/flutter_web_ui/src/engine/bitmap_canvas.dart","org-dartlang-app:///packages/flutter_web_ui/src/engine/browser_detection.dart","org-dartlang-app:///packages/flutter_web_ui/src/engine/compositor/runtime_delegate.dart","org-dartlang-app:///packages/flutter_web_ui/src/engine/compositor/engine_delegate.dart","org-dartlang-app:///packages/flutter_web_ui/src/engine/compositor/layer.dart","org-dartlang-app:///packages/flutter_web_ui/src/ui/compositing.dart","org-dartlang-app:///packages/flutter_web_ui/src/engine/compositor/layer_scene_builder.dart","org-dartlang-app:///packages/flutter_web_ui/src/engine/compositor/layer_tree.dart","org-dartlang-app:///packages/flutter_web_ui/src/engine/compositor/raster_cache.dart","org-dartlang-app:///packages/flutter_web_ui/src/engine/compositor/rasterizer.dart","org-dartlang-app:///packages/flutter_web_ui/src/engine/compositor/surface.dart","org-dartlang-app:///packages/flutter_web_ui/src/engine/compositor/viewport_metrics.dart","org-dartlang-app:///packages/flutter_web_ui/src/engine/compositor/platform_message.dart","org-dartlang-app:///packages/flutter_web_ui/src/engine/conic.dart","org-dartlang-app:///packages/flutter_web_ui/src/engine/houdini_canvas.dart","org-dartlang-app:///packages/flutter_web_ui/src/engine/dom_canvas.dart","org-dartlang-app:///packages/flutter_web_ui/src/engine/dom_renderer.dart","org-dartlang-app:///packages/flutter_web_ui/src/engine/history.dart","org-dartlang-app:///packages/flutter_web_ui/src/engine/html_image_codec.dart","org-dartlang-app:///packages/flutter_web_ui/src/engine/keyboard.dart","org-dartlang-app:///packages/flutter_web_ui/src/engine/onscreen_logging.dart","org-dartlang-app:///packages/flutter_web_ui/src/engine/pointer_binding.dart","org-dartlang-app:///packages/flutter_web_ui/src/engine/recording_canvas.dart","org-dartlang-app:///packages/flutter_web_ui/src/engine/semantics/checkable.dart","org-dartlang-app:///packages/flutter_web_ui/src/engine/semantics/semantics.dart","org-dartlang-app:///packages/flutter_web_ui/src/engine/semantics/incrementable.dart","org-dartlang-app:///packages/flutter_web_ui/src/engine/semantics/label_and_value.dart","org-dartlang-app:///packages/flutter_web_ui/src/engine/semantics/scrollable.dart","org-dartlang-app:///packages/flutter_web_ui/src/engine/semantics/tappable.dart","org-dartlang-app:///packages/flutter_web_ui/src/engine/semantics/text_field.dart","org-dartlang-app:///packages/flutter_web_ui/src/engine/services/message_codec.dart","org-dartlang-app:///packages/flutter_web_ui/src/engine/services/message_codecs.dart","org-dartlang-app:///packages/flutter_web_ui/src/engine/shadow.dart","org-dartlang-app:///packages/flutter_web_ui/src/engine/text/font_collection.dart","org-dartlang-app:///packages/flutter_web_ui/src/engine/text/measurement.dart","org-dartlang-app:///packages/flutter_web_ui/src/engine/text/ruler.dart","org-dartlang-app:///packages/flutter_web_ui/src/engine/text/unicode_range.dart","org-dartlang-app:///packages/flutter_web_ui/src/engine/text/word_break_properties.dart","org-dartlang-app:///packages/flutter_web_ui/src/engine/text/word_breaker.dart","org-dartlang-app:///packages/flutter_web_ui/src/engine/text_editing.dart","org-dartlang-app:///packages/flutter_web_ui/src/engine/vector_math.dart","org-dartlang-app:///packages/flutter_web_ui/src/engine.dart","org-dartlang-app:///packages/flutter_web_ui/src/engine/path_to_svg.dart","org-dartlang-app:///packages/flutter_web_ui/src/engine/util.dart","org-dartlang-app:///packages/flutter_web_ui/src/engine/validators.dart","org-dartlang-app:///packages/flutter_web_ui/src/ui/canvas.dart","org-dartlang-app:///packages/flutter_web_ui/src/ui/debug_canvas_reuse_overlay.dart","org-dartlang-app:///packages/flutter_web_ui/src/ui/geometry.dart","org-dartlang-app:///packages/flutter_web_ui/src/ui/hash_codes.dart","org-dartlang-app:///packages/flutter_web_ui/src/ui/painting.dart","org-dartlang-app:///packages/flutter_web_ui/src/ui/pointer.dart","org-dartlang-app:///packages/flutter_web_ui/src/ui/semantics.dart","org-dartlang-app:///packages/flutter_web_ui/src/ui/browser_location.dart","org-dartlang-app:///packages/flutter_web_ui/src/ui/text.dart","org-dartlang-app:///packages/flutter_web_ui/src/ui/tile_mode.dart","org-dartlang-app:///packages/flutter_web_ui/src/ui/window.dart","org-dartlang-app:///packages/flutter_web_ui/src/ui/initialization.dart","org-dartlang-app:///packages/flutter_web_ui/src/ui/lerp.dart","org-dartlang-app:///packages/flutter_web_ui/src/ui/natives.dart","org-dartlang-app:///packages/flutter_web_ui/ui.dart"],"names":[],"mappings":"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DAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,yCAC1C,kDAAa,MAAQ,MAAqB,yCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,sCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,sCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,sCAC1C,kDAAa,MAAQ,MAAqB,sCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,gCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,sCAC1C,kDAAa,MAAQ,MAAqB,sCAC1C,kDAAa,MAAQ,MAAqB,sCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,yCAC1C,kDAAa,MAAQ,MAAqB,yCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,yCAC1C,kDAAa,MAAQ,MAAqB,sCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,mCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,MAAQ,MAAqB,oCAC1C,kDAAa,OAAQ,OAAqB,oCAC1C,kDAAa,OAAQ,OAAqB,oCAC1C,kDAAa,OAAQ,OAAqB,oCAC1C,kDAAa,OAAQ,OAAqB,oCAC1C,kDAAa,OAAQ,OAAqB,mCAC1C,kDAAa,OAAQ,OAAqB,oCAC1C,kDAAa,OAAQ,OAAqB,oCAC1C,kDAAa,OAAQ,OAAqB,oCAC1C,kDAAa,OAAQ,OAAqB,oCAC1C,kDAAa,OAAQ,OAAqB,oCAC1C,kDAAa,OAAQ,OAAqB,oCAC1C,kDAAa,OAAQ,OAAqB,mCAC1C,kDAAa,OAAQ,OAAqB,oCAC1C,kDAAa,OAAQ,OAAqB,oCAC1C,kDAAa,OAAQ,OAAqB,oCAC1C,kDAAa,OAAQ,OAAqB,oCAC1C,kDAAa,OAAQ,OAAqB,oCAC1C,kDAAa,OAAQ,OAAqB,oCAC1C,kDAAa,OAAQ,OAAqB,oCAC1C,kDAAa,OAAQ,OAAqB,oCAC1C,kDAAa,OAAQ,OAAqB,oCAC1C,kDAAa,OAAQ,OAAqB,mCAC1C,kDAAa,OAAQ,OAAqB,oCAC1C,kDAAa,OAAQ,OAAqB,sCAC1C,kDAAa,OAAQ,OAAqB,oCAC1C,kDAAa,OAAQ,OAAqB,mCAC1C,kDAAa,OAAQ,OAAqB,qCAC1C,kDAAa,OAAQ,OAAqB,oCAC1C,kDAAa,OAAQ,OAAqB,mCAC1C,kDAAa,OAAQ,OAAqB,qCAC1C,kDAAa,OAAQ,OAAqB,qCAC1C,kDAAa,OAAQ,OAAqB,qCAC1C,kDAAa,OAAQ,OAAqB,oCAC1C,kDAAa,OAAQ,OAAqB,oCAC1C,kDAAa,OAAQ,OAAqB,oCAC1C,kDAAa,OAAQ,OAAqB,qCAC1C,kDAAa,OAAQ,OAAqB,qCAC1C,kDAAa,OAAQ,OAAqB,qCAC1C,kDAAa,OAAQ,OAAqB,oCAC1C,kDAAa,OAAQ,OAAqB,oCAC1C,kDAAa,OAAQ,OAAqB,oCAC1C,kDAAa,OAAQ,OAAqB,oCAC1C,kDAAa,OAAQ,OAAqB,oCAC1C,kDAAa,OAAQ,OAAqB,oCAC1C,kDAAa,OAAQ,OAAqB,oCAC1C,kDAAa,OAAQ,OAAqB,mCAC1C,kDAAa,OAAQ,OAAqB,mCAC1C,kDAAa,OAAQ,OAAqB,oCAC1C,kDAAa,OAAQ,OAAqB,mCAC1C,kDAAa,OAAQ,OAAqB,oCAC1C,kDAAa,OAAQ,OAAqB,mCAC1C,kDAAa,OAAQ,OAAqB,oCAC1C,kDAAa,OAAQ,OAAqB,oCAC1C,kDAAa,OAAQ,OAAqB,mCAC1C,kDAAa,OAAQ,OAAqB,oCAC1C,kDAAa,OAAQ,OAAqB,mCAC1C,kDAAa,OAAQ,OAAqB,oCAC1C,kDAAa,OAAQ,OAAqB,mCAC1C,kDAAa,OAAQ,OAAqB,oCAC1C,kDAAa,OAAQ,OAAqB,mCAC1C,kDAAa,OAAQ,OAAqB,oCAC1C,kDAAa,OAAQ,OAAqB,mCAC1C,kDAAa,OAAQ,OAAqB,oCAC1C,kDAAa,OAAQ,OAAqB,mCAC1C,kDAAa,OAAQ,OAAqB,oCAC1C,kDAAa,OAAQ,OAAqB,mCAC1C,kDAAa,OAAQ,OAAqB,oCAC1C,kDAAa,OAAQ,OAAqB,oCAC1C,kDAAa,OAAQ,OAAqB,oCAC1C,kDAAa,OAAQ,OAAqB,mCAC1C,kDAAa,OAAQ,OAAqB,oCAC1C,kDAAa,OAAQ,OAAqB,oCAC1C,kDAAa,OAAQ,OAAqB,mCAC1C,kDAAa,OAAQ,OAAqB,oCAC1C,kDAAa,OAAQ,OAAqB,mCAC1C,kDAAa,OAAQ,OAAqB,oCAC1C,kDAAa,OAAQ,OAAqB,mCAC1C,kDAAa,OAAQ,OAAqB,oCAC1C,kDAAa,OAAQ,OAAqB,mCAC1C,kDAAa,OAAQ,OAAqB,oCAC1C,kDAAa,OAAQ,OAAqB,oCAC1C,kDAAa,OAAQ,OAAqB,mCAC1C,kDAAa,OAAQ,OAAqB,oCAC1C,kDAAa,OAAQ,OAAqB,oCAC1C,kDAAa,OAAQ,OAAqB,mCAC1C,kDAAa,OAAQ,OAAqB,oCAC1C,kDAAa,OAAQ,OAAqB,mCAC1C,kDAAa,OAAQ,OAAqB,oCAC1C,kDAAa,OAAQ,OAAqB,mCAC1C,kDAAa,OAAQ,OAAqB,oCAC1C,kDAAa,OAAQ,OAAqB,mCAC1C,kDAAa,OAAQ,OAAqB,mCAC1C,kDAAa,OAAQ,OAAqB,mCAC1C,kDAAa,OAAQ,OAAqB,mCAC1C,kDAAa,OAAQ,OAAqB,mCAC1C,kDAAa,OAAQ,OAAqB,mCAC1C,kDAAa,OAAQ,OAAqB,oCAC1C,kDAAa,OAAQ,OAAqB,mCAC1C,kDAAa,OAAQ,OAAqB,oCAC1C,kDAAa,OAAQ,OAAqB,mCAC1C,kDAAa,OAAQ,OAAqB,oCAC1C,kDAAa,OAAQ,OAAqB,oCAC1C,kDAAa,OAAQ,OAAqB,oCAC1C,kDAAa,OAAQ,OAAqB,oCAC1C,kDAAa,OAAQ,OAAqB,oCAC1C,kDAAa,OAAQ,OAAqB,oCAC1C,kDAAa,OAAQ,OAAqB,oCAC1C,kDAAa,OAAQ,OAAqB,mCAC1C,kDAAa,OAAQ,OAAqB,mCAC1C,kDAAa,OAAQ,OAAqB,oCAC1C,kDAAa,OAAQ,OAAqB,oCAC1C,kDAAa,OAAQ,OAAqB,oCAC1C,kDAAa,OAAQ,OAAqB,oCAC1C,kDAAa,OAAQ,OAAqB,oCAC1C,kDAAa,OAAQ,OAAqB,oCAC1C,kDAAa,OAAQ,OAAqB,yCAC1C,kDAAa,OAAQ,OAAqB,mCAC1C,kDAAa,OAAQ,OAAqB,yCAC1C,kDAAa,OAAQ,OAAqB,yCAC1C,kDAAa,OAAQ,OAAqB,yCAC1C,kDAAa,OAAQ,OAAqB,yCAC1C,kDAAa,OAAQ,OAAqB,yCAC1C,kDAAa,OAAQ,OAAqB,yCAC1C,kDAAa,OAAQ,OAAqB,yCAC1C,kDAAa,OAAQ,OAAqB,oCAC1C,kDAAa,OAAQ,OAAqB,oCAC1C,kDAAa,OAAQ,OAAqB,oCAC1C,kDAAa,OAAQ,OAAqB,oCAC1C,kDAAa,OAAQ,OAAqB,oCAC1C,kDAAa,OAAQ,OAAqB,mCAC1C,kDAAa,OAAQ,OAAqB,mCAC1C,kDAAa,OAAQ,OAAqB,sCAC1C,kDAAa,OAAQ,OAAqB,mCAC1C,kDAAa,OAAQ,OAAqB,mCAC1C,kDAAa,OAAQ,OAAqB,yCAC1C,kDAAa,OAAQ,OAAqB,yCAC1C,kDAAa,OAAQ,OAAqB,mCAC1C,kDAAa,OAAQ,OAAqB,sCAC1C,kDAAa,OAAQ,OAAqB,mCAC1C,kDAAa,OAAQ,OAAqB,sCAC1C,kDAAa,OAAQ,OAAqB,oCAC1C,kDAAa,OAAQ,OAAqB,oCAC1C,kDAAa,OAAQ,OAAqB,mCAC1C,kDAAa,OAAQ,OAAqB,sCAC1C,kDAAa,OAAQ,OAAqB,mCAC1C,kDAAa,OAAQ,OAAqB,sCAC1C,kDAAa,OAAQ,OAAqB,sCAC1C,kDAAa,OAAQ,OAAqB,mCAC1C,kDAAa,OAAQ,OAAqB,oCAC1C,kDAAa,OAAQ,OAAqB,yCAC1C,kDAAa,OAAQ,OAAqB,oCAC1C,kDAAa,OAAQ,OAAqB,qCAC1C,kDAAa,OAAQ,OAAqB,mCAC1C,kDAAa,OAAQ,OAAqB,oCAC1C,kDAAa,OAAQ,OAAqB,oCAC1C,kDAAa,OAAQ,OAAqB,oCAC1C,kDAAa,OAAQ,OAAqB,oCAC1C,kDAAa,OAAQ,OAAqB,oCAC1C,kDAAa,OAAQ,OAAqB,mCAC1C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,mCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,mCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,mCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,mCAC5C,kDAAa,OAAS,OAAsB,mCAC5C,kDAAa,OAAS,OAAsB,mCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,mCAC5C,kDAAa,OAAS,OAAsB,mCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,mCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,mCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,mCAC5C,kDAAa,OAAS,OAAsB,mCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,mCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,mCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,mCAC5C,kDAAa,OAAS,OAAsB,mCAC5C,kDAAa,OAAS,OAAsB,mCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,mCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,mCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,mCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,mCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,mCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,mCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,mCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,mCAC5C,kDAAa,OAAS,OAAsB,mCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,mCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,mCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,mCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,mCAC5C,kDAAa,OAAS,OAAsB,mCAC5C,kDAAa,OAAS,OAAsB,mCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,mCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,mCAC5C,kDAAa,OAAS,OAAsB,mCAC5C,kDAAa,OAAS,OAAsB,mCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,mCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,mCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,mCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,mCAC5C,kDAAa,OAAS,OAAsB,mCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,mCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,mCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,mCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,mCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,mCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,mCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,mCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,mCAC5C,kDAAa,OAAS,OAAsB,mCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,mCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,mCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,mCAC5C,kDAAa,OAAS,OAAsB,mCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,mCAC5C,kDAAa,OAAS,OAAsB,mCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,mCAC5C,kDAAa,OAAS,OAAsB,mCAC5C,kDAAa,OAAS,OAAsB,mCAC5C,kDAAa,OAAS,OAAsB,mCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,mCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,mCAC5C,kDAAa,OAAS,OAAsB,mCAC5C,kDAAa,OAAS,OAAsB,mCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,mCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,mCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,mCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,mCAC5C,kDAAa,OAAS,OAAsB,mCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,OAAS,OAAsB,oCAC5C,kDAAa,QAAS,QAAsB,qCAC5C,kDAAa,QAAS,QAAsB,oCAC5C,kDAAa,QAAS,QAAsB,oCAC5C,kDAAa,QAAS,QAAsB,oCAC5C,kDAAa,QAAS,QAAsB,oCAC5C,kDAAa,QAAS,QAAsB,mCAC5C,kDAAa,QAAS,QAAsB,mCAC5C,kDAAa,QAAS,QAAsB,mCAC5C,kDAAa,QAAS,QAAsB,mCAC5C,kDAAa,QAAS,QAAsB,mCAC5C,kDAAa,QAAS,QAAsB,mCAC5C,kDAAa,QAAS,QAAsB,mCAC5C,kDAAa,QAAS,QAAsB,mCAC5C,kDAAa,QAAS,QAAsB,mCAC5C,kDAAa,QAAS,QAAsB,oCAC5C,kDAAa,QAAS,QAAsB,oCAC5C,kDAAa,QAAS,QAAsB,oCAC5C,kDAAa,QAAS,QAAsB,oCAC5C,kDAAa,QAAS,QAAsB,oCAC5C,kDAAa,QAAS,QAAsB,oCAC5C,kDAAa,QAAS,QAAsB,oCAC5C,kDAAa,QAAS,QAAsB,oCAC5C,kDAAa,QAAS,QAAsB,oCAC5C,kDAAa,QAAS,QAAsB,oCAC5C,kDAAa,QAAS,QAAsB,oCAC5C,kDAAa,QAAS,QAAsB,oCAC5C,kDAAa,QAAS,QAAsB,oCAC5C,kDAAa,QAAS,QAAsB,oCAC5C,kDAAa,QAAS,QAAsB,oCAC5C,kDAAa,QAAS,QAAsB,oCAC5C,kDAAa,QAAS,QAAsB,oCAC5C,kDAAa,QAAS,QAAsB,oCAC5C,kDAAa,QAAS,QAAsB,oCAC5C,kDAAa,QAAS,QAAsB,oCAC5C,kDAAa,QAAS,QAAsB,oCAC5C,kDAAa,QAAS,QAAsB,oCAC5C,kDAAa,QAAS,QAAsB,oCAC5C,kDAAa,QAAS,QAAsB,oCAC5C,kDAAa,QAAS,QAAsB,oCAC5C,kDAAa,QAAS,QAAsB,oCAC5C,kDAAa,QAAS,QAAsB,oCAC5C,kDAAa,QAAS,QAAsB,oCAC5C,kDAAa,QAAS,QAAsB,oCAC5C,kDAAa,QAAS,QAAsB,oCAC5C,kDAAa,QAAS,QAAsB,oCAC5C,kDAAa,QAAS,QAAsB,mCAC5C,kDAAa,QAAS,QAAsB,mCAC5C,kDAAa,QAAS,QAAsB,mCAC5C,kDAAa,QAAS,QAAsB,mCAC5C,kDAAa,QAAS,QAAsB,mCAC5C,kDAAa,QAAS,QAAsB,mCAC5C,kDAAa,QAAS,QAAsB,mCAC5C,kDAAa,QAAS,QAAsB,mCAC5C,kDAAa,QAAS,QAAsB,mCAC5C,kDAAa,QAAS,QAAsB,mCAC5C,kDAAa,QAAS,QAAsB,mCAC5C,kDAAa,QAAS,QAAsB,oCAC5C,kDAAa,QAAS,QAAsB,mCAC5C,kDAAa,QAAS,QAAsB,oCAC5C,kDAAa,QAAS,QAAsB,mCAC5C,kDAAa,QAAS,QAAsB,oCAC5C,kDAAa,QAAS,QAAsB,oCAC5C,kDAAa,QAAS,QAAsB,oCAC5C,kDAAa,QAAS,QAAsB,oCAC5C,kDAAa,QAAS,QAAsB,oCAC5C,kDAAa,QAAS,QAAsB,oCAC5C,kDAAa,QAAS,QAAsB,oCAC5C,kDAAa,QAAS,QAAsB,oCAC5C,kDAAa,QAAS,QAAsB,oCAC5C,kDAAa,QAAS,QAAsB,oCAC5C,kDAAa,QAAS,QAAsB,oCAC5C,kDAAa,QAAS,QAAsB,oCAC5C,kDAAa,QAAS,QAAsB,oCAC5C,kDAAa,QAAS,QAAsB,oCAC5C,kDAAa,QAAS,QAAsB,oCAC5C,kDAAa,QAAS,QAAsB,oCAC5C,kDAAa,QAAS,QAAsB,oCAC5C,kDAAa,QAAS,QAAsB,oCAC5C,kDAAa,QAAS,QAAsB,oCAC5C,kDAAa,QAAS,QAAsB,oCAC5C,kDAAa,QAAS,QAAsB,oCAC5C,kDAAa,QAAS,QAAsB,oCAC5C,kDAAa,QAAS,QAAsB,oCAC5C,kDAAa,QAAS,QAAsB,oCAC5C,kDAAa,QAAS,QAAsB,oCAC5C,kDAAa,QAAS,QAAsB,oCAC5C,kDAAa,QAAS,QAAsB,oCAC5C,kDAAa,QAAS,QAAsB,oCAC5C,kDAAa,QAAS,QAAsB,oCAC5C,kDAAa,QAAS,QAAsB,oCAC5C,kDAAa,QAAS,QAAsB,oCAC5C,kDAAa,QAAS,QAAsB,oCAC5C,kDAAa,QAAS,QAAsB,oCAC5C,kDAAa,QAAS,QAAsB,oCAC5C,kDAAa,QAAS,QAAsB,oCAC5C,k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","file":"ui.ddc.js"}');
  // Exports:
  return {
    src__engine: src__engine,
    ui: ui
  };
});

//# sourceMappingURL=ui.ddc.js.map
